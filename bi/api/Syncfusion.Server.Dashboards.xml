<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Server.API</name>
    </assembly>
    <members>
        <member name="M:Syncfusion.Server.API.Controllers.AccountsController.ValidateServiceAccessJson(Syncfusion.Server.Base.DataClasses.ApiRequest)">
            <summary>
            API to validate the encrypted user id from dashboard service
            </summary>
            <param name="apiRequest">API Request from dashboard designer contains the encrypted string</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.AccountsController.GetUserKeyJson(Syncfusion.Server.Base.DataClasses.UserToken)">
            <summary>
            API to validate the encrypted user id from dashboard service
            </summary>
            <param name="apiRequest">API Request from dashboard designer contains the encrypted string</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.InternalApiController">
            <summary>
            Controller for internal operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.InternalApiController.GetGroupsOfUserForViewer">
            <summary>
            Returns group details of a specified user from the server.
            </summary>
            <param name="user">User ID or Email address of the user.</param>
            <returns>Group details retrieved successfully.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.Internal.DataSourceController.AddDataSourceJson(Syncfusion.Server.Base.DataClasses.ApiDataSourceAdd)">
            <summary>
            Add a new data source to the server
            </summary>
            <remarks>
            Users who have a create access for data sources, can add a new data source to the server by providing respective data source details in the request body.
            </remarks>
            <param name="apiDataSourceAdd">Details about the data source passed will be added to the server.</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.Internal.DataSourceController.UpdateDataSourceJson(Syncfusion.Server.Base.DataClasses.ApiDataSourceUpdate)">
            <summary>
            Update the data source to the server
            </summary>
            <remarks>
            Users who have a write access for data source, can update an existing data source on the server by providing respective data source details in the request body.
            </remarks>
            <param name="apiDataSourceUpdate">Details about the data source passed will be updated to the specified data source id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.Internal.GroupsController.GetGroups">
            <summary>
            Returns the list of groups on the server.
            </summary>
            <returns>The response is sent as ApiGroupList Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.AddItemViewJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Add Dashboard views/filters in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.ItemViewByItemIdJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard views/filters from dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.ItemViewByViewIdJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard views/filters from dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.ItemViewDeleteJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Delete Dashboard views/filters from dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.UpdateItemViewJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard views/filters query string in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.UpdateItemViewName(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard views/filters name in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.DeleteItemPermissionJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Api to delete the users and group permission for the corresponding item
            </summary>
            <param name="itemRequest">ItemRequest Object</param>
            <returns>The response is sent as item response object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.DownloadDataSourceJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Download Datasource in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.UpdateDataSourceJson(Syncfusion.Server.Base.DataClasses.ApiDataSourceUpdate)">
            <summary>
            Update the datasource to the server
            </summary>
            <remarks>
            Users who have a write access for datasource, can update an existing datasource on the server by providing respective datasource details in the request body.
            </remarks>
            <param name="apiDataSourceUpdate">Details about the datasource passed will be updated to the specified datasource id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.GetSystemSettings">
            <summary>
            Get system settings of the dashboard server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.GetWidgetsJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Widget files with permissions in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.GetPublicItemsJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Can get the public items by providing the corresponding item type
            </summary>
            <param name="itemRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.GetDashboardIframeUrl(System.Guid,Syncfusion.Server.Base.DataClasses.EmbedConfig)">
            <summary>
            Can get the iframe by providing the corresponding dashboardID
            </summary>
            <param name="id"></param>
            <param name="embedConfig"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.TenantManagementController">
            <summary>
            Controller for Tenant related actions
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UserManagementController.IsUserPresentInGroupJson(Syncfusion.Server.Base.DataClasses.Group)">
            <summary>
            Check the group whether the corresponding user is exist or not.
            </summary>
            <param name="groupRequest">groupRequest object which is sent as request</param>
            <returns>Returns the boolean property</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.V2.GroupsController">
            <summary>
            Controller for group operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V2.GroupsController.GetGroups">
            <summary>
            Returns the list of groups on the server.
            </summary>
            <returns>The response is sent as ApiGroupList Object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.V2.UsersController">
            <summary>
            Controller for user operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V2.UsersController.GetUserDetail(System.String)">
            <summary>
            Returns user details on the server for a specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiUserDetail object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V2.UsersController.GetUsers">
            <summary>
            Returns the list of users on the server.
            </summary>
            <returns>Returns the ApiUserList object contains the list of users</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V2.UsersController.ActivateDeactivateuserJson(System.String,Syncfusion.Server.Base.DataClasses.ApiUserActivationRequest)">
            <summary>
            Activate or deactivate user account.
            </summary>
            <param name="user">Email address of the user.</param>
            <param name="activationRequest">User activation or deactivation request</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.V3.UsersController">
            <summary>
            Controller for user operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V3.UsersController.AddUserJson(Syncfusion.Server.Base.DataClasses.ApiUserAdd)">
            <summary>
            Adds a user to the server.
            </summary>
            <param name="userDetail">Detail of the user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V3.UsersController.DeleteUser(System.String)">
            <summary>
            Deletes the specified user on the server.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V3.UsersController.EditUserJson(System.String,Syncfusion.Server.Base.DataClasses.ApiUserEdit)">
            <summary>
            Modifies information about the specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <param name="userDetail">Detail of the user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V3.UsersController.GetUserDetail(System.String)">
            <summary>
            Returns user details on the server for a specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiUserDetail object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.V4.GroupsController">
            <summary>
            Controller for group operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.GroupsController.AddGroupJson(Syncfusion.Server.Base.DataClasses.ApiGroupAdd)">
            <summary>
            Adds a group to the server.
            </summary>
            <param name="groupDetail">Detail of the group.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.GroupsController.GetUsersFromGroup(System.Int32)">
            <summary>
            Returns a list of users on the server for the specified group.
            </summary>
            <param name="groupId">ID of the group.</param>
            <returns>The response is sent as ApiUserList object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.GroupsController.GetGroups">
            <summary>
            Returns the list of groups on the server.
            </summary>
            <returns>The response is sent as ApiGroupList Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.PermissionController.AddGroupPermissionJson(Syncfusion.Server.Base.DataClasses.ApiGroupPermissionAdd)">
            <summary>
            Add a group permission to the server
            </summary>
            <remarks>
            By this endpoint administrator can add new permissions to the specific group on the server by providing respective details in the request body.\n\n We must to give the values(CategoryId, DatasourceId, ScheduleId, DashboardId , WidgetId) to item id for the permission entity(SpecificCategory, SpecificDataSource, SpecificSchedule, SpecificDashboard, SpecificWidget) to add a specific permissions.
            </remarks>
            <param name="apiGroupPermissionAdd">Details about the permissions passed will be added to specified group id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.PermissionController.GetUserPermission(System.Int32)">
            <summary>
            Return list of permissions of user
            </summary>
            <remarks>
            By this endpoint administrator can retrieves the list of permissions of a specific user by providing user id in the id parameter.
            </remarks>
            <param name="userId">User ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.PermissionController.GetGroupPermission(System.Int32)">
            <summary>
            Return list of permissions of group
            </summary>
            <remarks>
            By this endpoint administrator can retrieves the list of permissions of a specific group by providing group id in the id parameter.
            </remarks>
            <param name="groupId">Group ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.UsersController.GetUsers">
            <summary>
            Returns the list of users on the server.
            </summary>
            <returns>Returns the ApiUserList object contains the list of users</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.UsersController.GetGroupsOfUser(System.String)">
            <summary>
            Returns group details of a specified user from the server.
            </summary>
            <param name="user">User ID or Email address of the user.</param>
            <returns>Group details retrieved successfully.</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.V5.ActivityLogController">
            <summary>
            Controller for Designer Activity Log
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ActivityLogController.AddActivityEmbedLogJson(Syncfusion.Server.Base.DataClasses.ActivityLog)">
            <summary>
            Add Activity Log
            </summary>
            <param name="activityLog">The activity log.</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.CategoryController.AddCategoryJson(Syncfusion.Server.Base.DataClasses.ApiCategoryAdd)">
            <summary>
            Add a new category to the server
            </summary>
            <remarks>
            Users who have a create access for categories, can add a new category to the server by providing respective category details in the request body.
            </remarks>
            <param name="apiCategoryAdd">Details about the category passed will be added to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.CategoryController.UpdateCategoryJson(Syncfusion.Server.Base.DataClasses.ApiCategoryUpdate)">
            <summary>
            Update category to the server
            </summary>
            <remarks>
            Users who have a write access for categories, can update an existing category on the server by providing respective category details in the request body.
            </remarks>
            <param name="apiCategoryUpdate">Details about the category passed will be updated to the specified category id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.CategoryController.GetCategory(System.Guid)">
            <summary>
            Returns category details from the server for a specified item.
            </summary>
            <remarks>
            Server retrieves the respective category details of categoryId parameter for the current user.
            </remarks>
            <param name="categoryId">Category ID</param>
            <returns>The response is sent as ApiSpecifiedItemDetailV4 object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.CategoryController.GetCategories">
            <summary>
            Returns list of items from the server
            </summary>
            <remarks>
            Server retrieves the respective items for the values (category, dashboard, datasource, widget, schedule) provided in query parameter itemType for the current user.
            </remarks>
            <param name="itemType">Item type.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.AddDashboardJson(Syncfusion.Server.Base.DataClasses.ApiDashboardAdd)">
            <summary>
            Add a new dashboard to the server
            </summary>
            <remarks>
            Users who have a create access for dashboards, can add a new dashboard to the server by providing respective dashboard details in the request body.
            </remarks>
            <param name="apiDashboardAdd">Details about the dashboard passed will be added to the server.</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.UpdateDashboardJson(Syncfusion.Server.Base.DataClasses.ApiDashboardUpdate)">
            <summary>
            Update the dashboard to the server
            </summary>
            <remarks>
            Users who have a write access for dashboards, can update an existing dashboard on the server by providing respective dashboard details in the request body.
            </remarks>
            <param name="apiDashboardUpdate">Details about the dashboard passed will be updated to the specified dashboard id.</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetDashboard(System.Guid)">
            <summary>
            Returns dashboard details from the server for a specified item.
            </summary>
            <remarks>
            Server retrieves the respective dashboard details of dashboardId parameter for the current user.
            </remarks>
            <param name="dashboardId">Dashboard ID</param>
            <returns>The response is sent as ApiSpecifiedItemDetailV4 object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetDashboards(System.String,System.String,System.Int32)">
            <summary>
            Get the dashboards list from the server.
            This API only used for internal purpose.
            </summary>
            <remarks>
            Users who have a read access for dashboard, can get the datasources details.
            </remarks>
            <param name="serverPath">Category path.</param>
            <param name="groupName">Group Name.</param>
            <param name="createdBy">Created user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetPublicItems(Syncfusion.Server.Base.DataClasses.ItemType)">
            <summary>
            Returns the list of public items from the server
            </summary>
            <remarks>
            Server retrieves the respective public items for the values (dashboard, widget) provided in query parameter itemType for the current user.
            </remarks>
            <param name="itemType">Item type.</param>
            <returns>The response is sent as array of ApiPublicItems object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetFavoriteItems">
            <summary>
            Returns the list of favorite items from the server
            </summary>
            <remarks>
            Server retrieves list of favorite dashboards which belongs to the current user.
            </remarks>
            <returns>The response is sent as array of ApiFavoriteitems object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetChildDashboards(System.Guid)">
            <summary>
            Returns child dashboard details from the server for a specified multi-tabbed dashboard
            </summary>
            <param name="id">Item ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.UpdateFavoriteItemJson(Syncfusion.Server.Base.DataClasses.ApiUpdateFavorite)">
            <summary>
            Update the favorite item to the server
            </summary>
            <remarks>
            Users who have a read access for dashboard, can update the dashboard as favorite or un-favorite to the server by providing respective dashboard details in the request body.
            </remarks>
            <param name="apiUpdateFavorite">Favorite value passed will be updated to the specified dashboard id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.ExportDashboardJson(Syncfusion.Server.Base.DataClasses.ApiExportDashboard)">
            <summary>
            Exports the specified dashboard on the server
            </summary>
            <remarks>
            Users who have read access for dashboard, can export the dashboard by providing dashboard id and export type (Excel, pdf, image) in the request body and get the exported dashboards as array of bytes in response.\n\n When exporting multi-tabbed dashboards by image format, the response bytes have to be saved in ZIP format.
            </remarks>
            <param name="apiExportDashboard">Details about the dashboard passed will be exported from the server.</param>
            <returns>Dashboards exported successfully.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetSharedDataSourceJson(Syncfusion.Server.Base.DataClasses.ApiSharedDataSourceRequestV4)">
            <summary>
            Returns the list of shared data sources for the specified dashboard from the server
            </summary>
            <remarks>
            Server retrieves the shared data sources of a specific dashboard by providing (dashboard id) to the request body for the current user.
            </remarks>
            <param name="apiSharedDataSourceRequestWithPermission">Details about the dashboard passed to get their shared data sources.</param>
            <returns>The Response is sent as array of ApiSharedDataSourceResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetDashboardDataSources(Syncfusion.Server.Base.DataClasses.ApiSharedDataSourceRequestV4)">
            <summary>
            Returns the list of shared data sources for the specified dashboard from the server with Schedule content
            </summary>
            <remarks>
            Server retrieves the shared data sources of a specific dashboard by providing (dashboard id) to the request body for the current user.
            </remarks>
            <param name="apiSharedDataSourceRequestWithPermission">Details about the dashboard passed to get their shared data sources.</param>
            <returns>The Response is sent as array of ApiSharedDataSourceResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.UpdateDashboardDataSourcesJson(Syncfusion.Server.Base.DataClasses.ApiDashboardDataSourceUpdate)">
            <summary>
            This method is to map the Dashboard Datasource
            </summary>
            <param name="apiDashboardDataSourceUpdate">DashboardDataSource object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.AddDataSourceJson(Syncfusion.Server.Base.DataClasses.API.V2.ApiDataSourceAddV2)">
            <summary>
            Add a new data source to the server
            </summary>
            <remarks>
            Users who have a create access for data sources, can add a new data source to the server by providing respective data source details in the request body.
            </remarks>
            <param name="apiDataSourceAdd">Details about the data source passed will be added to the server.</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.UpdateDataSourceJson(Syncfusion.Server.Base.DataClasses.API.V2.ApiDataSourceUpdateV2)">
            <summary>
            Update the data source to the server
            </summary>
            <remarks>
            Users who have a write access for data source, can update an existing data source on the server by providing respective data source details in the request body.
            </remarks>
            <param name="apiDataSourceUpdate">Details about the data source passed will be updated to the specified data source id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.AddWidgetJson(Syncfusion.Server.Base.DataClasses.ApiWidgetAdd)">
            <summary>
            Add a new widget to the server
            </summary>
            <remarks>
            Users who have a create access for widgets, can add a new widget to the server by providing respective widget details in the request body.
            </remarks>
            <param name="apiWidgetAdd">Details about the widget passed will be added to the server.</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetDashboardWidget(System.Guid)">
            <summary>
            Returns the list of widgets for the specified dashboard from the server.
            This API only used for internal purpose.
            </summary>
            <remarks>
            Server retrieves the list of widgets of a specific dashboard by providing (dashboard id) to the request body for the current user.
            </remarks>
            <param name="dashboardId">Dashboard item id.</param>
            <returns>The Response is sent as array of ApiItems object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.UpdateWidgetJson(Syncfusion.Server.Base.DataClasses.ApiWidgetUpdate)">
            <summary>
            Update widget to the server
            </summary>
            <remarks>
            Users who have a write access for widget, can update an existing widget on the server by providing respective widget details in the request body.
            </remarks>
            <param name="apiWidgetUpdate">Details about the widget passed will be updated to the specified widget id.</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetDraftDashboard">
            <summary>
            Returns list of draft dashboards from the server
            </summary>
            <remarks>
            Server retrieves the draft dashboards for the current user.
            </remarks>
            <returns>The response is sent as ApiItemsV4 object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.AddScheduleJson(Syncfusion.Server.Base.DataClasses.ApiScheduleRequest)">
            <summary>
            Add Schedule
            </summary>
            <remarks>Users who have create access for schedule can add new schedule to the server by providing respective details in the request body.</remarks>
            <param name="apiScheduleRequest">Details about the schedule passed will be added to the server.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.UpdateScheduleJson(System.Guid,Syncfusion.Server.Base.DataClasses.ApiUpdateScheduleRequest)">
            <summary>
            Update Schedule
            </summary>
            <remarks>Users who have write access for schedule can update an existing schedule to the server by providing details of the respective schedule in the request body.</remarks>
            <param name="scheduleId">Schedule ID.</param>
            <param name="apiUpdateScheduleRequest">Details about the schedule passed will be updated to the server.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetScheduleItems(System.String)">
            <summary>
            Returns list of dashboard scheduled items from the server.
            </summary>
            <param name="groupName">Set of group names.</param>
            <returns>The response is sent as PaginatedApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DashboardsController.GetScheduleItemDetail(System.Guid)">
            <summary>
            Returns dashboard scheduled item details from the server for a specified item
            </summary>
            <remarks>
            Server retrieves the respective dashboard scheduled item details for the values (ScheduleId) provided in id parameter for the current user.
            </remarks>
            <param name="scheduleId">Schedule ID</param>
            <returns>The response is sent as ApiScheduleItemDetail object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.CopyDataSourceJson(System.Guid,Syncfusion.Server.Base.DataClasses.ApiCopyDataSourceRequestV4)">
            <summary>
            Get the copy datasource Id from the request
            </summary>
            Copied data source where data source in live connection mode.
            <param name="itemId">item id.</param>
            <param name="apiCopyDatasource">Details about the data source passed will be added to the server.</param>
            <returns>The response is sent as ApiCopyItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.UpdateDataSourcesColumnsJson(System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.ApiUpdateDataSourceColumn})">
            <summary>
            Update the data source column names
            </summary>
            <remarks>
            Users who have write access for data source and dashboard, can update an existing data source column names by providing respective data source details in the request body.
            </remarks>
            <param name="apiUpdateDataSourceColumn">Details about the data source passed will be updated to the specified data source id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.UpdateDataSourcesConnectionJson(System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.ApiUpdateDatasourceConnection})">
            <summary>
            Update the data source connection information
            </summary>
            <remarks>
            Users who have write access for data source, can update an existing data source connection information by providing respective data source connection details in the request body.
            </remarks>
            <param name="apiUpdateDatasourceConnection">Connection details about the data source passed will be updated to the specified data source id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.UpdateDataSourcesTablesJson(System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.ApiUpdateDataSourceTable})">
            <summary>
            Update the existing table details in the data source
            </summary>
            <remarks>
            Users who have write access for data source, can update an existing data source table details by providing respective data source details in the request body.
            </remarks>
            <param name="apiUpdateDataSourceTable">Details about the data source passed will be updated to the specified data source id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.DeleteDatasource(System.Guid)">
            <summary>
            Deletes the specified datasource on the server
            </summary>
            <remarks>
            Users who have a delete access for datasource, can delete them on the server by providing Id of the datasource in id parameter.
            </remarks>
            <param name="datasourceId">Datasource ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.GetDataSource(System.Guid)">
            <summary>
            Returns datasource details from the server for a specified item.
            </summary>
            <remarks>
            Server retrieves the respective datasource details of datasourceId parameter for the current user.
            </remarks>
            <param name="datasourceId">Datasource ID</param>
            <returns>The response is sent as ApiSpecifiedItemDetailV4 object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.GetDataSources(System.String)">
            <summary>
            Get the datasources list from the server
            </summary>
            <remarks>
            Users who have a read access for datasource, can get the datasources details.
            </remarks>
            <param name="groupName">Set of group names.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.GetDashboards(System.Guid)">
            <summary>
            Get the data source dashboard list from the server
            </summary>
            <param name="datasourceId">Data source ID</param>
            <remarks>
            Users who have a read access for dashboards can get the data source's dashboard details.
            </remarks>
            <returns>The response is sent as an API items object list</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.UpdateDatasourceUserFilterJson(System.Guid,System.Object)">
            <summary>
            Update Schedule user filter
            </summary>
            <remarks>Users who have write access for data source can update filter of an existing existing data source  by providing details of the respective data source in the request body.</remarks>
            <param name="datasourceId">Schedule ID.</param>
            <param name="userGroupRequest">Details about the data source user filter passed will be sent to the designer api.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.AddDatasourceJson(Syncfusion.Server.Base.DataClasses.ApiAddDataSourceConnectionV4)">
            <summary>
            Add a new datasource.
            </summary>
            <param name="apiDataSourceConnectionAdd">Details about the data source passed will be added to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.UpdateDatasourceJson(Syncfusion.Server.Base.DataClasses.ApiEditDataSourceConnectionV4)">
            <summary>
            Update the datasource.
            </summary>
            <param name="apiUpdateDataSourceV4">Details about the data source passed will be added to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.AddDataSourceScheduleJson(Syncfusion.Server.Base.DataClasses.ApiScheduleRequest)">
            <summary>
            Add Schedule
            </summary>
            /// <remarks>Users who have create access for schedule can add new schedule to the server by providing respective schedule details in the request body.</remarks>
            <param name="apiScheduleRequest">Details about the schedule passed will be added to the server.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DataSourceController.UpdateDatasourceScheduleJson(System.Guid,Syncfusion.Server.Base.DataClasses.ApiUpdateScheduleRequest)">
            <summary>
            Update Schedule
            </summary>
            <remarks>Users who have write access for schedule can update an existing schedule to the server by providing details of the respective schedule in the request body.</remarks>
            <param name="scheduleId">Schedule ID.</param>
            <param name="apiUpdateScheduleRequest">Details about the schedule passed will be updated to the server.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.DesignerSettingsController.GetPreviewFeatures">
            <summary>
            Get Preview features
            </summary>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.V5.GroupsController">
            <summary>
            Controller for group operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.GroupsController.DeleteGroup(System.Int32)">
            <summary>
            Deletes the specified group on the server.
            </summary>
            <param name="groupId">ID of the group.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.GroupsController.EditGroupJson(System.Int32,Syncfusion.Server.Base.DataClasses.ApiGroupEdit)">
            <summary>
            Modifies information about a specified group.
            </summary>
            <param name="groupId">ID of the group.</param>
            <param name="groupDetail">Detail of the group.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.GroupsController.GetGroupDetail(System.Int32)">
            <summary>
            Returns group details on the server for a specified group.
            </summary>
            <param name="groupId">ID of the group.</param>
            <returns>The response is sent as ApiGroup object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.GroupsController.AddUserToGroupJson(System.Int32,Syncfusion.Server.Base.DataClasses.ApiGroupUsers)">
            <summary>
            Adds a user to the specified group
            </summary>
            <param name="groupId">Group ID</param>
            <param name="apiGroupUsers">User(s) added/removed from the group</param>
            <returns>User(s) was added successfully</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.GroupsController.DeleteUserFromGroup(System.Int32,Syncfusion.Server.Base.DataClasses.ApiGroupUsers)">
            <summary>
            Deletes the user from the specified group
            </summary>
            <param name="groupId">Group ID</param>
            <param name="apiGroupUsers">User(s) added/removed from the group</param>
            <returns>User(s) deleted</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.GroupsController.AddBulkGroupJson(System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.ApiGroupAdd})">
            <summary>
            Adds list of groups to the server.
            </summary>
            <param name="groupDetailList">Detail of the group.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.GroupsController.GetUsersFromGroup(System.Int32)">
            <summary>
            Returns a list of users on the server for the specified group.
            </summary>
            <param name="groupId">ID of the group.</param>
            <returns>The response is sent as ApiUserList object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemsController.GetItemDetail(System.Guid)">
            <summary>
            Returns item details from the server for a specified item
            </summary>
            <remarks>
            Server retrieves the respective item details for the values (CategoryId, DashboardId, DatasourceId, WidgetId, ScheduleId) provided in id parameter for the current user.
            </remarks>
            <param name="id">Item ID</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemsController.GetItems(Syncfusion.Server.Base.DataClasses.ItemType,System.String,System.Int32)">
            <summary>
            Returns list of items from the server
            </summary>
            <remarks>
            Server retrieves the respective items for the values (category, dashboard, datasource, widget, schedule) provided in query parameter itemType for the current user.
            </remarks>
            <param name="itemType">Item type.</param>
            <param name="serverPath">Category path.</param>
            <param name="createdBy">Created user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemsController.IsItemNameExistsJson(Syncfusion.Server.Base.DataClasses.ApiValidateItemName)">
            <summary>
            Checks whether the item name already exists in the server
            </summary>
            <remarks>
            Current user can check whether the item (category, dashboard, data source, widget, schedule) is already exists or not on the server by providing item name (category name, dashboard name, data source name, widget name, schedule name) and item type (category, dashboard, datasource, widget, schedule) in the request body.
            </remarks>
            <param name="apiValidateItemName">Details about the item passed will be checked on the server.</param>
            <returns>The response is sent as boolean</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemsController.DeleteItem(System.Guid)">
            <summary>
            Deletes the specified items on the server
            </summary>
            <remarks>
            Users who have a delete access for item (Category, Dashboard, Datasource, Widget, Schedule), can delete the item on the server by providing (CategoryId, DashboardId, DatasourceId, WidgetId, ScheduleId) in id parameter.
            </remarks>
            <param name="id">Item ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemsController.GetItemLocation(System.Guid)">
            <summary>
            Get Item Location
            </summary>
            <remarks>Server returns the item location of the specified item for the value Report ID, DataSource ID, DataSet ID, and File ID provided in the id parameter.</remarks>
            <param name="itemId">Item ID</param>
            <returns>The response is sent as a string</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemViewsController.AddItemViewJson(Syncfusion.Server.Base.DataClasses.ApiItemViewsAdd)">
            <summary>
            Add Dashboard View
            </summary>
            <remarks>
            Users who have access to the dashboard can save a view to the server by providing proper view details in the request body.
            </remarks>
            <param name="apiItemViewsAdd">Details about the dashboard filter to save the view.</param>
            <returns>The Response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemViewsController.UpdateItemViewJson(Syncfusion.Server.Base.DataClasses.ApiItemViewsUpdate)">
            <summary>
            Edit Dashboard View
            </summary>
            <remarks>
            Users who have created a view can edit the view by providing proper view details in the request body.
            </remarks>
            <param name="apiItemViewsUpdate">Details about the dashboard filter to edit the view.</param>
            <returns>The Response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemViewsController.ItemViewDelete(System.Guid)">
            <summary>
            Delete Dashboard View
            </summary>
            <remarks>
            Users who have created a view can delete that view on the server by providing a view ID in the parameter.
            </remarks>
            <param name="id">View ID</param>
            <returns>The Response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemViewsController.ItemViewByViewId(System.Guid)">
            <summary>
            Get Dashboard View Detail
            </summary>
            <remarks>
            Server retrieves the view details for the view ID provided in the ID parameter for the current user.
            </remarks>
            <param name="id">View ID</param>
            <returns>The Response is sent as ApiItemViewResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.ItemViewsController.ItemViewsByItemId(System.Guid)">
            <summary>
            Get Dashboard Views
            </summary>
            <remarks>
            The server retrieves the views for the dashboard ID provided in the ID parameter for the current user.
            </remarks>
            <param name="id">Dashboard ID</param>
            <returns>The Response is sent as list of ApiItemViewResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.PermissionController.GetUserPermission(System.Int32)">
            <summary>
            Return list of permissions of user
            </summary>
            <remarks>
            By this endpoint administrator can retrieves the list of permissions of a specific user by providing user id in the id parameter.
            </remarks>
            <param name="userId">User ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.PermissionController.GetGroupPermission(System.Int32)">
            <summary>
            Return list of permissions of group
            </summary>
            <remarks>
            By this endpoint administrator can retrieves the list of permissions of a specific group by providing group id in the id parameter.
            </remarks>
            <param name="groupId">Group ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.PermissionController.AddUserPermissionJson(Syncfusion.Server.Base.DataClasses.ApiUserPermissionAdd)">
            <summary>
            Add a user permission to the server
            </summary>
            <remarks>
            By this endpoint administrator can add new permissions to the specific user on the server by providing respective details in the request body. \n\n We must to give the values (CategoryId, DatasourceId, ScheduleId, DashboardId , WidgetId) to item id for the permission entity (SpecificCategory, SpecificDataSource, SpecificSchedule, SpecificDashboard, SpecificWidget) to add a specific permissions
            </remarks>
            <param name="apiUserPermissionAdd">Details about the permissions passed will be added to specified user id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.PermissionController.DeleteUserPermission(System.Int32)">
            <summary>
            Delete user permission from the server
            </summary>
            <remarks>
            By this endpoint administrator can delete the specific user permissions on the server by providing user permission id in the id parameter.
            </remarks>
            <param name="id">User permission ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.PermissionController.DeleteGroupPermission(System.Int32)">
            <summary>
            Delete group permission from the server
            </summary>
            <remarks>
            By this endpoint administrator can delete the specific group permissions on the server by providing group permission id in the id parameter.
            </remarks>
            <param name="id">Group permission ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SchedulerController.RunSchedule(System.Guid)">
            <summary>
            Run Export Schedule
            </summary>
            <remarks>Users who have read access for schedule can run the export schedule by providing the ID in the path parameter.</remarks>
            <param name="scheduleId">Schedule ID</param>
            <returns>Response is sent as a ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SlideShowController.GetSlideshowDetail(System.Guid)">
            <summary>
            Returns slideshow details from the server for a specified slideshow
            </summary>
            <remarks>
            Server retrieves the respective item details for the slideshow id provided in id parameter for the current user.
            </remarks>
            <param name="slideshowId">Slideshow ID</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SlideShowController.GetSlideshows(System.String)">
            <summary>
            Returns list of slideshows from the server
            </summary>
            <remarks>
            Server retrieves all the slideshows for the current user.
            </remarks>
            <param name="groupName">Set of group names.</param>
            <returns>The response is sent as PaginatedApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SlideShowController.DeleteSlideshow(System.Guid)">
            <summary>
            Deletes the slideshow
            </summary>
            <remarks>
            Users who have a delete access for slideshow, can delete the slideshow on the server by providing slideshow id parameter.
            </remarks>
            <param name="slideshowId">Slideshow ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SlideShowController.AddSlideshowJson(Syncfusion.Server.Base.DataClasses.API.ApiSlideshowAdd)">
            <summary>
            Add a new slideshow to the server
            </summary>
            <remarks>
            Users who have a create access for slideshow, can add a new slideshow to the server by providing respective slideshow details in the request body.
            </remarks>
            <param name="apiSlideshowAdd">Details about the slideshow passed will be added to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SlideShowController.EditSlideshowJson(System.Guid,Syncfusion.Server.Base.DataClasses.API.ApiSlideshowEdit)">
            <summary>
            Edit Slideshow
            </summary>
            <remarks>
            Users who have write access for slideshow can update an existing slideshow to the server by providing details of the respective slideshow in the request body.
            </remarks>
            <param name="slideshowId">Slideshow ID.</param>
            <param name="apiSlideshowEdit">Details about the slideshow passed will be updated to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetPublicSettings">
            <summary>
            Get Public Settings
            </summary>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetDashboardSettings">
            <summary>
            Get Dashboard Settings
            </summary>
            <returns>The response is sent as ApiDashboardSettings Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.UpdateDashboardSettingsJson(Syncfusion.Server.Base.DataClasses.ApiDashboardSettings)">
            <summary>
            Update Dashboard Settings
            </summary>
            <param name="apiDashboardSettings">Dashboard settings</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetAccountSettings">
            <summary>
            Get Account Settings
            </summary>
            <returns>The response is sent as ApiAccountSettings Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.UpdateAccountSettingsJson(Syncfusion.Server.Base.DataClasses.ApiAccountSettings)">
            <summary>
            Update Account Settings
            </summary>
            <param name="apiAccountSettings">Account settings</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetEmailSettings">
            <summary>
            Get Email Settings
            </summary>
            <returns>The response is sent as ApiEmailSettings Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.UpdateEmailSettingsJson(Syncfusion.Server.Base.DataClasses.ApiEmailSettings)">
            <summary>
            Update Email Settings
            </summary>
            <param name="apiEmailSettings">Email settings</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetAzureADSettings">
            <summary>
            Get AzureAD Settings
            </summary>
            <returns>The response is sent as ApiAzureADSettings Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.UpdateAzureADSettingsJson(Syncfusion.Server.Base.DataClasses.ApiAzureADSettings)">
            <summary>
            Update Azure Active Directory Settings
            </summary>
            <param name="apiAzureADSettings">Azure AD settings</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetAzureADScheduleSynchronization">
            <summary>
            Get AzureAD Schedule Synchronization
            </summary>
            <returns>The response is sent as ApiAzureADSettings Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.UpdateAzureADScheduleSynchronizationJson(Syncfusion.Server.Base.DataClasses.ApiUserDirectorySynchronizationSchedule)">
            <summary>
            Update Azure AD Schedule Synchronization
            </summary>
            <param name="apiUserDirectorySynchronizationSchedule">Azure AD schedule synchronization info</param>
            <returns>The response is sent as ApiUserDirectoryScheduleResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetCORSSettings">
            <summary>
            Get CORS Settings
            </summary>
            <returns>The response is sent as ApiCorsSettings Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.UpdateCorsSettingsJson(Syncfusion.Server.Base.DataClasses.ApiCorsSettings)">
            <summary>
            Update CORS settings
            </summary>
            <param name="apiCorsSettings">Cors settings</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.ResetEmbedSecretJson">
            <summary>
            Generate embed secret key
            </summary>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.GetEmbedSecret">
            <summary>
            Get embed secret key
            </summary>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.SystemSettingsController.UpdateActiveDirectorySettingssJson(Syncfusion.Server.Base.DataClasses.ActiveDirectoryDetail)">
            <summary>
            Update Azure Active Directory Settings
            </summary>
            <param name="activeDirectoryDetail">Azure AD settings</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.V5.TenantController">
            <summary>
            Controller for Tenant related actions
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.TenantController.SuspendTenant">
            <summary>
            Suspend tenant
            </summary>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.TenantController.ActivateTenant">
            <summary>
            Activate tenant
            </summary>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.TenantController.UpdateTenantNameJson(System.String)">
            <summary>
            Update tenant name
            </summary>
            <param name="tenantName">The tenant name.</param>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.TenantController.AddUsersJson(System.Object)">
            <summary>
            Adds list of users to the server.
            </summary>
            <param name="data">Details of the user list with invited user name.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.AddUserV4Json(Syncfusion.Server.Base.DataClasses.ApiUserAdd)">
            <summary>
            Adds a user to the server.
            </summary>
            <param name="userDetail">Detail of the user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.EditUserV4Json(System.String,Syncfusion.Server.Base.DataClasses.ApiUserEdit)">
            <summary>
            Modifies information about the specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <param name="userDetail">Detail of the user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.DeleteUser(System.String)">
            <summary>
            Deletes the specified user on the server.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.GetUserDetail(System.String)">
            <summary>
            Returns user details on the server for a specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiUserDetail object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.Getusers">
            <summary>
            Returns the list of users on the server.
            </summary>
            <returns>Returns the ApiUserList object contains the list of users</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.GetGroupsOfUser(System.String)">
            <summary>
            Returns group details of a specified user from the server.
            </summary>
            <param name="user">User ID or Email address of the user.</param>
            <returns>Group details retrieved successfully.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.DownloadCsvTemplate">
            <summary>
            Downloads CSV template from the server.
            </summary>
            <returns>The response is sent as ApiDownloadCsvTemplate object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V5.UsersController.CsvUserImportJson(Syncfusion.Server.Base.DataClasses.ApiCsvUserImportRequest)">
            <summary>
            Adds bulk users from CSV file to the server.
            </summary>
            <param name="apiCsvUserImportRequest">Contains CSV user import request.</param>
            <returns>The response is sent as ApiCsvUserImportResponse object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Extensions.ApplicationBuilderExtensions">
            <summary>
            Application Builder Extensions Class.
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.ClaimsFactory.CreateIdentityAsync(Syncfusion.Server.Base.DataClasses.User,System.String,System.String,Microsoft.AspNetCore.Http.HttpContext)">
             <summary>
                 Create a ClaimsIdentity from a user
             </summary>
             <param name="user"></param>
             <param name="authenticationType"></param>
             <param name="ipAddress">Ip address</param>
             <param name="httpContext">Http context</param>
             <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Server.API.ClaimsFactory.CreateIdentityAsync(Syncfusion.Server.Base.DataClasses.TenantInfo,System.String)">
            <summary>
                Create a ClaimsIdentity from a application
            </summary>
            <param name="tenantInfo">Information about the tenant</param>
            <param name="authenticationType">Type of authentication</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.AddMultiDashboardItems(System.Guid,System.String,System.String,Syncfusion.Server.Base.DataClasses.User)">
            <summary>
            This method used for two purpose
            If multi tabbed dashboard : add the multi tabbed dashboard's inside dashboard and their widgets
            If single dashboard : add dashboard's widgets
            </summary>
            <param name="parentId"></param>
            <param name="itemName"></param>
            <param name="extension"></param>
            <param name="userDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.PublishDashboard(Syncfusion.Server.Base.DataClasses.ApiDashboardAdd,System.String)">
            <summary>
            Add Dashboard in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <param name="extension"></param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.AddDatasource(Syncfusion.Server.Base.DataClasses.ApiAddDataSourceConnectionV4)">
            <summary>
            Method to add datasource.
            </summary>
            <param name="requestObj">Details about the data source passed will be added to the server.</param>
            <returns>The response is sent as DesignerApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateDatasource(Syncfusion.Server.Base.DataClasses.ApiEditDataSourceConnectionV4)">
            <summary>
            Method to update datasource.
            </summary>
            <param name="requestObj">Details about the data source passed will be added to the server.</param>
            <returns>The response is sent as DesignerApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.PublishDataSource(Syncfusion.Server.Base.DataClasses.ApiDataSourceAdd)">
            <summary>
            Add Datasource in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.PublishWidget(Syncfusion.Server.Base.DataClasses.ApiWidgetAdd)">
            <summary>
            Add Dashboard in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateDashboard(Syncfusion.Server.Base.DataClasses.ApiDashboardUpdate,System.String)">
            <summary>
            Update dashboard in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <param name="extension">file extension</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateWidget(Syncfusion.Server.Base.DataClasses.ApiWidgetUpdate)">
            <summary>
            Update Widget in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.AddItemView(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Add Dashboard Filter/view from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.GetItemViewsByItemId(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard Filter/view by item id from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.GetItemViewsByViewId(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard Filter/view by view id from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.DeleteItemView(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Delete Dashboard Filter/view from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateItemViewQueryString(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard Filter/view query string from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateItemViewName(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard Filter/view Name from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateItemView(Syncfusion.Server.Base.DataClasses.ItemRequest,System.Boolean)">
            <summary>
            Update Dashboard filter/view name, query string from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <param name="canUpdateDefaultView">Boolean value which is used to decide can update the default view value or not</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.IsNameExists(Syncfusion.Server.Base.DataClasses.ApiValidateItemName)">
            <summary>
            validates the requested name for the existance of item
            </summary>
            <param name="itemRequest">validation details</param>
            <returns>Returns the existance of requested name from the server</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.PublishFile(Syncfusion.Server.Base.DataClasses.ApiFileAdd)">
            <summary>
            publishing file in the Server
            </summary>
            <param name="itemRequest">contains the details of the file</param>
            <returns>Response is sent as itemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.DownloadFileById(System.Guid)">
            <summary>
            The method will get the file and convert to bytes as response
            </summary>
            <param name="id">item id</param>
            <returns>Class type ItemResponse</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.GetItemLocation(System.Guid)">
            <summary>
            Get Item Location
            </summary>
            <remarks>Gets the location of particular item form the server.</remarks>
            <param name="itemId">Item id</param>
            <returns>The response is sent as a string</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.SchedulerManagementModel.AddRefreshSchedule(Syncfusion.Server.Base.DataClasses.ApiScheduleRequest)">
            <summary>
            Add schedule details.
            </summary>
            <param name="apiScheduleRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.SchedulerManagementModel.ParseSchedule(Syncfusion.Server.Base.DataClasses.ApiScheduleRequest,Syncfusion.Server.Base.DataClasses.EndType,System.String,Syncfusion.Server.Base.DataClasses.ScheduleExportLocation,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Parses the schedule details from request.
            </summary>
            <param name="apiScheduleRequest">Schedule details</param>
            <param name="endType">Schedule stop information</param>
            <param name="exportType">Item export type</param>
            <param name="oldScheduleExportLocation">Old Export Location</param>
            <param name="scheduleId">Schedule Id</param>
            <param name="getUnchangedLocation">Whether to get old Export Location</param>
            <returns>Returns the parsed schedule details.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ScheduleValidationHelper.SubscribeUsersValidation(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Validates the subscribers.
            </summary>
            <remarks>userlist can be username, email-address, or userID</remarks>
            <param name="userList">List of users</param>
            <param name="userIds">List of user Ids</param>
            <returns>Returns the invalid user list. Deleted user, user not in server and in-active users are considered as invalid users</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ScheduleValidationHelper.SubscribeGroupsValidation(System.Collections.Generic.List{System.Int32})">
            <summary>
            Validates the subscribers group.
            </summary>
            <remarks>groupIdList can be groupID</remarks>
            <param name="groupIdList">List of groups</param>
            <returns>Returns the invalid group list. Deleted group, group not in server are considered as invalid groups</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ScheduleValidationHelper.SubscribeExternalRecipientsValidation(System.Collections.Generic.List{System.String})">
            <summary>
            Validates the external recipients.
            </summary>
            <remarks>externalRecipientsList can be emails</remarks>
            <param name="externalRecipientsList">List of groups</param>
            <returns>Returns the invalid emails.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.GetDataTableFromCsvFile(System.String)">
            <summary>
            get the users from the csv file by using comma separater
            </summary>
            <param name="csvFilePath">file path of the csv</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.AddUserInGroup(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Add list of user's in the specified group
            </summary>
            <param name="userList">list of user ID</param>
            <param name="groupId">Group ID</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.DeleteUserFromGroup(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Delete list of user's from the specified group
            </summary>
            <param name="userList">list of user ID</param>
            <param name="groupId">Group ID</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.SubmitUsersBulkUpload(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}},System.String,Syncfusion.Server.Base.DataClasses.UserImportType)">
            <summary>
            validates the user details and add it to server if there is no error
            </summary>
            <param name="allUserList">User list that need to be added</param>
            <param name="invitedUserName">User who invited the other users</param>
            <param name="userImportType">User import type</param>
            <returns>returns the errorneous users list</returns>
        </member>
        <member name="M:Syncfusion.Server.API.ApiOAuthProvider.GenerateToken(Microsoft.AspNetCore.Http.HttpContext,Syncfusion.Server.Base.DataClasses.User,System.String,System.String,System.String,System.Collections.Generic.List{System.Int32},System.String,System.String,System.Boolean)">
            <summary>
            Do not use this method for generation token unless needed.
            This is used only when this API application needs a new token to send to the client
            for which it will call the /api/token endpoint from an exisitng api request.
            </summary>
            <param name="httpContext">Http context.</param>
            <param name="userDetail">Detail of the user</param>
            <param name="ipAddress">IP address of the request</param>
            <param name="expiresIn">Specifies the expiry time in seconds</param>
            <param name="subId"></param>
            <param name="userGroupIds"></param>
            <param name="datasourceFilter"></param>
            <param name="customAttribute"></param>
            <param name="isUsageAnalytics"></param>
            <returns></returns>
        </member>
    </members>
</doc>
