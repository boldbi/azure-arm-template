/*!
*  filename: ej1.common.all.js
*  version : 8.1.41
*  Copyright Syncfusion Inc. 2001 - 2024. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/*! JsRender v1.0pre: http://github.com/BorisMoore/jsrender */
(function(n,t,i){"use strict";function tt(n,t){t&&t.onError&&t.onError(n)===!1||(this.name="JsRender Error",this.message=n||"JsRender error")}function e(n,t){var i;n=n||{};for(i in t)n[i]=t[i];return n}function lt(n,t,i){return(!d.rTag||arguments.length)&&(p=n?n.charAt(0):p,w=n?n.charAt(1):w,s=t?t.charAt(0):s,y=t?t.charAt(1):y,b=i||b,n="\\"+p+"(\\"+b+")?\\"+w,t="\\"+s+"\\"+y,v="(?:(?:(\\w+(?=[\\/\\s\\"+s+"]))|(?:(\\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\\*)))\\s*((?:[^\\"+s+"]|\\"+s+"(?!\\"+y+"))*?)",d.rTag=v+")",v=new RegExp(n+v+"(\\/)?|(?:\\/(\\w+)))"+t,"g"),ft=new RegExp("<.*>|([^\\\\]|^)[{}]|"+n+".*"+t)),[p,w,s,y,b]}function hi(n,t){t||(t=n,n=i);var e,f,o,u,r=this,s=!t||t==="root";if(n){if(u=r.type===t?r:i,!u)if(e=r.views,r._.useKey){for(f in e)if(u=e[f].get(n,t))break}else for(f=0,o=e.length;!u&&f<o;f++)u=e[f].get(n,t)}else if(s)while(r.parent.parent)u=r=r.parent;else while(r&&!u)u=r.type===t?r:i,r=r.parent;return u}function yt(){var n=this.get("item");return n?n.index:i}function ci(n){var r,u=this,t=(u.ctx||{})[n];return t=t===i?u.getRsc("helpers",n):t,t&&typeof t=="function"&&(r=function(){return t.apply(u,arguments)},e(r,t)),r||t}function fi(n,t,i){var s,u,o,f=+i===i&&i,e=t.linkCtx;return f&&(i=(f=t.tmpl.bnds[f-1])(t.data,t,r)),o=i.args[0],(n||f)&&(u=e&&e.tag||{_:{inline:!e},tagName:n+":",flow:!0,_is:"tag"},u._.bnd=f,e&&(e.tag=u,u.linkCtx=e,i.ctx=h(i.ctx,e.view.ctx)),u.tagCtx=i,i.view=t,u.ctx=i.ctx||{},delete i.ctx,t._.tag=u,n=n!=="true"&&n,n&&((s=t.getRsc("converters",n))||a("Unknown converter: {{"+n+":"))&&(u.depends=s.depends,o=s.apply(u,i.args)),o=f&&t._.onRender?t._.onRender(o,t,f):o),o}function ei(n,t){for(var e=this,u=r[n],f=u&&u[t];f===i&&e;)u=e.tmpl[n],f=u&&u[t],e=e.parent;return f}function oi(n,t,u,o){var et,s,ot,it,ct,nt,l,tt,rt,c,k,b,st,p,w="",d=+o===o&&o,v=t.linkCtx||0,y=t.ctx,ft=u||t.tmpl,ht=t._;for(n._is==="tag"&&(s=n,n=s.tagName),d&&(o=(st=ft.bnds[d-1])(t.data,t,r)),tt=o.length,s=s||v.tag,l=0;l<tt;l++)c=o[l],b=c.tmpl,b=c.content=b&&ft.tmpls[b-1],u=c.props.tmpl,l||u&&s||(p=t.getRsc("tags",n)||a("Unknown tag: {{"+n+"}}")),u=u||!l&&p.template||b,u=""+u===u?t.getRsc("templates",u)||f(u):u,e(c,{tmpl:u,render:g,index:l,view:t,ctx:h(c.ctx,y)}),s||(p.init?(s=new p.init(c,v,y),s.attr=s.attr||p.attr||i):s={render:p.render},s._={inline:!v},v&&(v.attr=s.attr=v.attr||s.attr,v.tag=s,s.linkCtx=v),(s._.bnd=st||v)&&(s._.arrVws={}),s.tagName=n,s.parent=nt=y&&y.tag,s._is="tag"),ht.tag=s,c.tag=s,s.tagCtxs=o,s.rendering={},s.flow||(k=c.ctx=c.ctx||{},ot=k.parentTags=y&&h(k.parentTags,y.parentTags)||{},nt&&(ot[nt.tagName]=nt),k.tag=s);for(l=0;l<tt;l++)c=s.tagCtx=o[l],s.ctx=c.ctx,(et=s.render)&&(rt=et.apply(s,c.args)),w+=rt!==i?rt:c.tmpl?c.render():"";return delete s.rendering,s.tagCtx=s.tagCtxs[0],s.ctx=s.tagCtx.ctx,s._.inline&&(it=s.attr)&&it!=="html"&&(w=it==="text"?ut.html(w):""),w=d&&t._.onRender?t._.onRender(w,t,d):w}function k(n,t,r,u,f,e,o,s){var v,a,c,y=t==="array",l={key:0,useKey:y?0:1,id:""+ai++,onRender:s,bnds:{}},h={data:u,tmpl:f,content:o,views:y?[]:{},parent:r,ctx:n,type:t,get:hi,getIndex:yt,getRsc:ei,hlp:ci,_:l,_is:"view"};return r&&(v=r.views,a=r._,a.useKey?(v[l.key="_"+a.useKey++]=h,c=a.tag,l.bnd=y&&(!c||!!c._.bnd&&c)):v.splice(l.key=h.index=e!==i?e:v.length,0,h),h.ctx=n||r.ctx),h}function pi(n){var r,i,t,u,f;for(r in c)if(u=c[r],(f=u.compile)&&(i=n[r+"s"]))for(t in i)i[t]=f(t,i[t],n,r,u)}function vi(n,t,i){var u,r;return typeof t=="function"?t={depends:t.depends,render:t}:((r=t.template)&&(t.template=""+r===r?f[r]||f(r):r),t.init!==!1&&(u=t.init=t.init||function(){},u.prototype=t,(u.prototype=t).constructor=u)),i&&(t._parentTmpl=i),t}function st(r,u,e,o,s,c){function v(i){if(""+i===i||i.nodeType>0){try{a=i.nodeType>0?i:!ft.test(i)&&t&&t(n.document).find(i)[0]}catch(u){}return a&&(i=a.getAttribute(vt),r=r||i,i=f[i],i||(r=r||"_"+li++,a.setAttribute(vt,r),i=f[r]=st(r,a.innerHTML,e,o,s,c))),i}}var l,a;return u=u||"",l=v(u),c=c||(u.markup?u:{}),c.tmplName=r,e&&(c._parentTmpl=e),!l&&u.markup&&(l=v(u.markup))&&l.fn&&(l.debug!==u.debug||l.allowCode!==u.allowCode)&&(l=l.markup),l!==i?(r&&!e&&(nt[r]=function(){return u.render.apply(u,arguments)}),l.fn||u.fn?l.fn&&(u=r&&r!==l.tmplName?h(c,l):l):(u=ht(l,c),ot(l,u)),pi(c),u):void 0}function ht(n,t){var r,f=l.wrapMap||{},i=e({markup:n,tmpls:[],links:{},tags:{},bnds:[],_is:"template",render:g},t);return t.htmlTag||(r=bt.exec(n),i.htmlTag=r?r[1].toLowerCase():""),r=f[i.htmlTag],r&&r!==f.div&&(i.markup=u.trim(i.markup),i._elCnt=!0),i}function ui(n,t){function f(e,o,s){var l,h,a,c;if(e&&""+e!==e&&!e.nodeType&&!e.markup){for(a in e)f(a,e[a],o);return r}return c=s?s[u]=s[u]||{}:f,o===i&&(o=e,e=i),h=t.compile,(l=d.onBeforeStoreItem)&&(h=l(c,e,o,h)||h),e?""+e===e&&(o===null?delete c[e]:c[e]=h?o=h(e,o,s,n,t):o):o=h(i,o),o&&(o._is=n),(l=d.onStoreItem)&&l(c,e,o,h),o}var u=n+"s";r[u]=f,c[n]=t}function g(n,t,e,o,s,c){var b,ft,nt,y,tt,it,rt,w,p,et,d,ut,v,l=this,ot=!l.attr||l.attr==="html",g="";if(o===!0&&(rt=!0,o=0),l.tag?(w=l,l=l.tag,et=l._,ut=l.tagName,v=w.tmpl,t=h(t,l.ctx),p=w.content,w.props.link===!1&&(t=t||{},t.link=!1),e=e||w.view,n=n===i?e:n):v=l.jquery&&(l[0]||a('Unknown template: "'+l.selector+'"'))||l,v&&(!e&&n&&n._is==="view"&&(e=n),e&&(p=p||e.content,c=c||e._.onRender,n===e&&(n=e.data,s=!0),t=h(t,e.ctx)),e&&e.data!==i||((t=t||{}).root=n),v.fn||(v=f[v]||f(v)),v)){if(c=(t&&t.link)!==!1&&ot&&c,d=c,c===!0&&(d=i,c=e._.onRender),u.isArray(n)&&!s)for(y=rt?e:o!==i&&e||k(t,"array",e,n,v,o,p,c),b=0,ft=n.length;b<ft;b++)nt=n[b],tt=k(t,"item",y,nt,v,(o||0)+b,p,c),it=v.fn(nt,tt,r),g+=y._.onRender?y._.onRender(it,tt):it;else y=rt?e:k(t,ut||"data",e,n,v,o,p,c),et&&!l.flow&&(y.tag=l),g+=v.fn(n,y,r);return d?d(g,y):g}return""}function a(n){if(l.debugMode)throw new r.sub.Error(n);}function o(n){a("Syntax error\n"+n)}function ot(n,t,i,r){function a(t){t-=f,t&&h.push(n.substr(f,t).replace(rt,"\\n"))}function c(t){t&&o('Unmatched or missing tag: "{{/'+t+'}}" in template:\n'+n)}function y(t,e,v,y,w,b,k,d,g,nt,tt,it){b&&(w=":",y="html"),nt=nt||i;var lt,st,ht=e&&[],ft="",ut="",ot="",et=!nt&&!w&&!k;v=v||w,a(it),f=it+t.length,d?p&&h.push(["*","\n"+g.replace(ri,"$1")+"\n"]):v?(v==="else"&&(pt.test(g)&&o('for "{{else if expr}}" use "{{else expr}}"'),ht=u[6],u[7]=n.substring(u[7],it),u=s.pop(),h=u[3],et=!0),g&&(g=g.replace(rt," "),ft=ct(g,ht).replace(wt,function(n,t,i){return t?ot+=i+",":ut+=i+",",""})),ut=ut.slice(0,-1),ft=ft.slice(0,-1),lt=ut&&ut.indexOf("noerror:true")+1&&ut||"",l=[v,y||!!r||"",ft,et&&[],'params:"'+g+'",props:{'+ut+"}"+(ot?",ctx:{"+ot.slice(0,-1)+"}":""),lt,ht||0],h.push(l),et&&(s.push(u),u=l,u[7]=f)):tt&&(st=u[0],c(tt!==st&&st!=="else"&&tt),u[7]=n.substring(u[7],it),u=s.pop()),c(!u&&tt),h=u[3]}var l,p=t&&t.allowCode,e=[],f=0,s=[],h=e,u=[,,,e];return n=n.replace(ii,"\\$1"),c(s[0]&&s[0][3].pop()[0]),n.replace(v,y),a(n.length),(f=e[e.length-1])&&c(""+f!==f&&+f[7]===f[7]&&f[0]),et(e,t||n,i)}function et(n,i,r){var c,e,f,y,v,p,vt,yt,at,it,d,s,kt,gt,ot,a,ft,b,bt,tt,pt,ni,g,lt,ct,st,nt,w,h=0,u="",k="",ut={},wt=n.length;for(""+i===i?(a=r?'data-link="'+i.replace(rt," ").slice(1,-1)+'"':i,i=0):(a=i.tmplName||"unnamed",(bt=i.allowCode)&&(ut.allowCode=!0),i.debug&&(ut.debug=!0),d=i.bnds,ot=i.tmpls),c=0;c<wt;c++)if(e=n[c],""+e===e)u+='\nret+="'+e+'";';else if(f=e[0],f==="*")u+=""+e[1];else{if(y=e[1],v=e[2],tt=e[3],p=e[4],k=e[5],pt=e[7],(ct=f==="else")||(h=0,d&&(s=e[6])&&(h=d.push(s))),(st=f===":")?(y&&(f=y==="html"?">":y+f),k&&(nt="prm"+c,k="try{var "+nt+"=["+v+"][0];}catch(e){"+nt+'="";}\n',v=nt)):(tt&&(ft=ht(pt,ut),ft.tmplName=a+"/"+f,et(tt,ft),ot.push(ft)),ct||(b=f,lt=u,u="",kt=c),g=n[c+1],g=g&&g[0]==="else"),p+=",args:["+v+"]}",st&&s||y&&f!==">"){if(w=new Function("data,view,j,u"," // "+a+" "+h+" "+f+"\n"+k+"return {"+p+";"),w.paths=s,w._ctxs=f,r)return w;it=!0}if(u+=st?"\n"+(s?"":k)+(r?"return ":"ret+=")+(it?(it=!0,'c("'+y+'",view,'+(s?(d[h-1]=w,h):"{"+p)+");"):f===">"?(yt=!0,"h("+v+");"):(at=!0,"(v="+v+")!="+(r?"=":"")+'u?v:"";')):(vt=!0,"{tmpl:"+(tt?ot.length:"0")+","+p+","),b&&!g){if(u="["+u.slice(0,-1)+"]",(r||s)&&(u=new Function("data,view,j,u"," // "+a+" "+h+" "+b+"\nreturn "+u+";"),s&&((d[h-1]=u).paths=s),u._ctxs=f,r))return u;u=lt+'\nret+=t("'+b+'",view,this,'+(h||u)+");",s=0,b=0}}u="// "+a+"\nvar j=j||"+(t?"jQuery.":"js")+"views"+(at?",v":"")+(vt?",t=j._tag":"")+(it?",c=j._cnvt":"")+(yt?",h=j.converters.html":"")+(r?";\n":',ret="";\n')+(l.tryCatch?"try{\n":"")+(ut.debug?"debugger;":"")+u+(r?"\n":"\nreturn ret;\n")+(l.tryCatch?"\n}catch(e){return j._err(e);}":"");try{u=new Function("data,view,j,u",u)}catch(dt){o("Compiled template code:\n\n"+u,dt)}return i&&(i.fn=u),u}function ct(n,t){function c(c,l,a,v,y,p,w,b,k,d,g,nt,tt,it,rt,ut,ft,et,ot){function ht(n,i,r,u,f,o,s){if(i&&(t&&!e&&t.push(v),i!==".")){var h=(r?'view.hlp("'+r+'")':u?"view":"data")+(s?(f?"."+f:r?"":u?"":"."+i)+(o||""):(s=r?"":u?f||"":i,""));return h=h+(s?"."+s:""),h.slice(0,9)==="view.data"?h.slice(5):h}return n}if(y=y||"",a=a||l||g,v=v||b,t&&rt&&t.push({_jsvOb:ot.slice(h[i-1]+1,et+1)}),k=k||ut||"",p)o(n);else return f?(f=!nt,f?c:'"'):u?(u=!tt,u?c:'"'):(a?(i++,h[i]=et,a):"")+(ft?i?"":s?(s=e=!1,"\b"):",":w?(i&&o(n),s=v,e=v.charAt(0)==="~","\b"+v+":"):v?v.split("^").join(".").replace(kt,ht)+(k?(r[++i]=!0,k):y):y?y:it?(r[i--]=!1,it)+(k?(r[++i]=!0,k):""):d?(r[i]||o(n),","):l?"":(f=nt,u=tt,'"'))}var s,e,r={},h={0:-1},i=0,u=!1,f=!1;return(n+" ").replace(ti,c)}function h(n,t){return n&&n!==t?t?e(e({},t),n):n:t&&e({},t)}function at(n){return yi[n]}if((!t||!t.views)&&!n.jsviews){var ni="v1.0pre",u,it,v,ft,p="{",w="{",s="}",y="}",b="^",kt=/^(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,ti=/(\()(?=\s*\()|(?:([([])\s*)?(?:([#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*!:?\/]|(=))\s*|([#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*((\))(?=\s*\.|\s*\^)|\)|\])([([]?))|(\s+)/g,rt=/\s*\n/g,ri=/\\(['"])/g,ii=/([\\'"])/g,wt=/\x08(~)?([^\x08]+)\x08/g,pt=/^if\s/,bt=/<(\w+)[>\s]/,ki=/<(\w+)[^>\/]*>[^>]*$/,dt=/[<"'&]/g,si=/[><"'&]/g,li=0,ai=0,yi={"&":"&amp;","<":"&lt;",">":"&gt;","\x00":"&#0;","'":"&#39;",'"':"&#34;"},vt="data-jsv-tmpl",wi=[].slice,nt={},c={template:{compile:st},tag:{compile:vi},helper:{},converter:{}},r={jsviews:ni,render:nt,View:k,settings:{delimiters:lt,debugMode:!0,tryCatch:!0},sub:{Error:tt,tmplFn:ot,parse:ct,extend:e,error:a,syntaxError:o},_cnvt:fi,_tag:oi,_err:function(n){return l.debugMode?"Error: "+(n.message||n)+". ":""}};(tt.prototype=new Error).constructor=tt,yt.depends=function(){return[this.get("item"),"index"]};for(it in c)ui(it,c[it]);var f=r.templates,ut=r.converters,bi=r.helpers,gt=r.tags,d=r.sub,l=r.settings;t?(u=t,u.fn.render=g):(u=n.jsviews={},u.isArray=Array&&Array.isArray||function(n){return Object.prototype.toString.call(n)==="[object Array]"}),u.render=nt,u.views=r,u.templates=f=r.templates,gt({"else":function(){},"if":{render:function(n){var t=this;return t.rendering.done||!n&&(arguments.length||!t.tagCtx.index)?"":(t.rendering.done=!0,t.selected=t.tagCtx.index,t.tagCtx.render())},onUpdate:function(n,t,i){for(var r,f,u=0;(r=this.tagCtxs[u])&&r.args.length;u++)if(r=r.args[0],f=!r!=!i[u].args[0],!!r||f)return f;return!1},flow:!0},"for":{render:function(n){var h,s,t=this,o=t.tagCtx,f=!arguments.length,r="",e=f||0;return t.rendering.done||(f?r=i:n!==i&&(r+=o.render(n),e+=u.isArray(n)?n.length:1),(t.rendering.done=e)&&(t.selected=o.index)),r},onUpdate:function(){},onArrayChange:function(n,t){var i,u=this,r=t.change;if(this.tagCtxs[1]&&(r==="insert"&&n.target.length===t.items.length||r==="remove"&&!n.target.length||r==="refresh"&&!t.oldItems.length!=!n.target.length))this.refresh();else for(i in u._.arrVws)i=u._.arrVws[i],i.data===n.target&&i._.onArrayChange.apply(i,arguments);n.done=!0},flow:!0},include:{flow:!0},"*":{render:function(n){return n},flow:!0}}),ut({html:function(n){return n!=i?String(n).replace(si,at):""},attr:function(n){return n!=i?String(n).replace(dt,at):n===null?null:""},url:function(n){return n!=i?encodeURI(String(n)):n===null?null:""}}),lt()}})(this,this.jQuery);
/*!
 * jQuery.tabbable 1.0 - Simple utility for selecting the next / previous ':tabbable' element.
 * https://github.com/marklagendijk/jQuery.tabbable
 *
 * Includes ':tabbable' and ':focusable' selectors from jQuery UI Core
 *
 * Copyright 2013, Mark Lagendijk
 * Released under the MIT license
 *
 */
var bbdesigner$ = $;
if (window.bb$ != undefined) {
    bbdesigner$ = bb$;
}
(function(bbdesigner$){
	'use strict';

	/**
	 * Focusses the next :focusable element. Elements with tabindex=-1 are focusable, but not tabable.
	 * Does not take into account that the taborder might be different as the :tabbable elements order
	 * (which happens when using tabindexes which are greater than 0).
	 */
	bbdesigner$.focusNext = function(){
		selectNextTabbableOrFocusable(':focusable');
	};

	/**
	 * Focusses the previous :focusable element. Elements with tabindex=-1 are focusable, but not tabable.
	 * Does not take into account that the taborder might be different as the :tabbable elements order
	 * (which happens when using tabindexes which are greater than 0).
	 */
	bbdesigner$.focusPrev = function(){
		selectPrevTabbableOrFocusable(':focusable');
	};

	/**
	 * Focusses the next :tabable element.
	 * Does not take into account that the taborder might be different as the :tabbable elements order
	 * (which happens when using tabindexes which are greater than 0).
	 */
	bbdesigner$.tabNext = function(){
		selectNextTabbableOrFocusable(':tabbable');
	};

	/**
	 * Focusses the previous :tabbable element
	 * Does not take into account that the taborder might be different as the :tabbable elements order
	 * (which happens when using tabindexes which are greater than 0).
	 */
	bbdesigner$.tabPrev = function(){
		selectPrevTabbableOrFocusable(':tabbable');
	};

	function selectNextTabbableOrFocusable(selector){
		var selectables = bbdesigner$(selector);
		var current = bbdesigner$(':focus');
		var nextIndex = 0;
		if(current.length === 1){
			var currentIndex = selectables.index(current);
			if(currentIndex + 1 < selectables.length){
				nextIndex = currentIndex + 1;
			}
		}

		selectables.eq(nextIndex).focus();
	}

	function selectPrevTabbableOrFocusable(selector){
		var selectables = bbdesigner$(selector);
		var current = bbdesigner$(':focus');
		var prevIndex = selectables.length - 1;
		if(current.length === 1){
			var currentIndex = selectables.index(current);
			if(currentIndex > 0){
				prevIndex = currentIndex - 1;
			}
		}

		selectables.eq(prevIndex).focus();
	}

	/**
	 * :focusable and :tabbable, both taken from jQuery UI Core
	 */
	bbdesigner$.extend(bbdesigner$.expr[ ':' ], {
		data: bbdesigner$.expr.createPseudo ?
			bbdesigner$.expr.createPseudo(function(dataName){
				return function(elem){
					return !!bbdesigner$.data(elem, dataName);
				};
			}) :
			// support: jQuery <1.8
			function(elem, i, match){
				return !!bbdesigner$.data(elem, match[ 3 ]);
			},

		focusable: function(element){
			return focusable(element, !isNaN(bbdesigner$.attr(element, 'tabindex')));
		},

		tabbable: function(element){
			var tabIndex = bbdesigner$.attr(element, 'tabindex'),
				isTabIndexNaN = isNaN(tabIndex);
			return ( isTabIndexNaN || tabIndex >= 0 ) && focusable(element, !isTabIndexNaN);
		}
	});

	/**
	 * focussable function, taken from jQuery UI Core
	 * @param element
	 * @returns {*}
	 */
	function focusable(element){
		var map, mapName, img,
			nodeName = element.nodeName.toLowerCase(),
			isTabIndexNotNaN = !isNaN(bbdesigner$.attr(element, 'tabindex'));
		if('area' === nodeName){
			map = element.parentNode;
			mapName = map.name;
			if(!element.href || !mapName || map.nodeName.toLowerCase() !== 'map'){
				return false;
			}
			img = bbdesigner$('img[usemap=#' + mapName + ']')[0];
			return !!img && visible(img);
		}
		return ( /^(input|select|textarea|button|object)$/.test(nodeName) ?
			!element.disabled :
			'a' === nodeName ?
				element.href || isTabIndexNotNaN :
				isTabIndexNotNaN) &&
			// the element and all of its ancestors must be visible
			visible(element);

		function visible(element){
			return bbdesigner$.expr.filters.visible(element) && !bbdesigner$(element).parents().addBack().filter(function(){
				return bbdesigner$.css(this, 'visibility') === 'hidden';
			}).length;
		}
	}
})(bbdesigner$);
;
/*!
*  filename: BoldBIDashboard.Core.js
*  version : 16.1.0.24
*  Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/


window.BoldBIDashboard = window.SyncfusionBoldBIDashboard = window.SyncfusionBoldBIDashboard || {};


(function (bbdesigner$, BoldBIDashboard, undefined) {
    'use strict';

    BoldBIDashboard.version = "16.1.0.24";

    BoldBIDashboard.consts = {
        NamespaceJoin: '-'
    };
    BoldBIDashboard.TextAlign = {
        Center: 'center',
        Justify: 'justify',
        Left: 'left',
        Right: 'right'
    };
    BoldBIDashboard.Orientation = { Horizontal: "horizontal", Vertical: "vertical" };

    BoldBIDashboard.serverTimezoneOffset = 0;

    BoldBIDashboard.persistStateVersion = null;

    BoldBIDashboard.locales = BoldBIDashboard.locales || [];

    if (!Object.prototype.hasOwnProperty) {
        Object.prototype.hasOwnProperty = function (obj, prop) {
            return obj[prop] !== undefined;
        };
    }

    //to support toISOString() in IE8
    if (!Date.prototype.toISOString) {
        (function () {
            function pad(number) {
                var r = String(number);
                if (r.length === 1) {
                    r = '0' + r;
                }
                return r;
            }
            Date.prototype.toISOString = function () {
                return this.getUTCFullYear()
                    + '-' + pad(this.getUTCMonth() + 1)
                    + '-' + pad(this.getUTCDate())
                    + 'T' + pad(this.getUTCHours())
                    + ':' + pad(this.getUTCMinutes())
                    + ':' + pad(this.getUTCSeconds())
                    + '.' + String((this.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
                    + 'Z';
            };
        }());
    }

    String.format = function () {
        var source = arguments[0];
        for (var i = 0; i < arguments.length - 1; i++)
            source = source.replace(new RegExp("\\{" + i + "\\}", "gm"), arguments[i + 1]);

        source = source.replace(/\{[0-9]\}/g, "");
        return source;
    };

    bbdesigner$.uaMatch = function (ua) {
        ua = ua.toLowerCase();

        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];

        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    };
    // Function to create new class
    BoldBIDashboard.defineClass = function (className, constructor, proto, replace) {
        /// <summary>Creates the javascript class with given namespace & class name & constructor etc</summary>
        /// <param name="className" type="String">class name prefixed with namespace</param>
        /// <param name="constructor" type="Function">constructor function</param>
        /// <param name="proto" type="Object">prototype for the class</param>
        /// <param name="replace" type="Boolean">[Optional]Replace existing class if exists</param>
        /// <returns type="Function">returns the class function</returns>
        if (!className || !proto) return undefined;

        var parts = className.split(".");

        // Object creation
        var obj = window, i = 0;
        for (; i < parts.length - 1; i++) {

            if (BoldBIDashboard.isNullOrUndefined(obj[parts[i]]))
                obj[parts[i]] = {};

            obj = obj[parts[i]];
        }

        if (replace || BoldBIDashboard.isNullOrUndefined(obj[parts[i]])) {

            //constructor
            constructor = typeof constructor === "function" ? constructor : function () {
            };

            obj[parts[i]] = constructor;

            // prototype
            obj[parts[i]].prototype = proto;
        }

        return obj[parts[i]];
    };

    BoldBIDashboard.util = {
        getNameSpace: function (className) {
            /// <summary>Internal function, this will create namespace for plugins using class name</summary>
            /// <param name="className" type="String"></param>
            /// <returns type="String"></returns>
            var ejword = "BoldBIDashboard";
            var splits = className.toLowerCase().split(".");
            splits[0] === ejword.toLowerCase() && (splits[0] = "e");

            return splits.join(BoldBIDashboard.consts.NamespaceJoin);
        },

        getObject: function (nameSpace, from) {
            if (!from || !nameSpace) return undefined;
			(typeof(nameSpace) != "string") && (nameSpace = JSON.stringify(nameSpace));
            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (BoldBIDashboard.util.isNullOrUndefined(value)) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i, t, length = splits.length;

            for (i = 0; i < length; i++) {
                t = splits[i];
                if (i + 1 == length)
                    from[t] = value;
                else if (BoldBIDashboard.isNullOrUndefined(from[t]))
                    from[t] = {};

                from = from[t];
            }

            return start;
        },

        isNullOrUndefined: function (value) {
            /// <summary>Util to check null or undefined</summary>
            /// <param name="value" type="Object"></param>
            /// <returns type="Boolean"></returns>
            return value === undefined || value === null;
        },
        exportAll: function (action, controlIds) {
            var inputAttr = [], widget, locale = [], index, controlEle, controlInstance, controlObject, modelClone;
            var attr = { action: action, method: 'post', "data-ajax": "false" };
            var form = BoldBIDashboard.buildTag('form', "", null, attr);
            if (controlIds.length != 0) {
                for (var i = 0; i < controlIds.length; i++) {
                    index = i;
                    controlEle = bbdesigner$("#" + controlIds[i]);
                    controlInstance = bbdesigner$("#" + controlIds[i]).data();
                    widget = controlInstance["ejWidgets"];
                    controlObject = bbdesigner$(controlEle).data(widget[0]);
                    locale.push({ id: controlObject._id, locale: controlObject.model.locale });
                    if (!BoldBIDashboard.isNullOrUndefined(controlObject)) {
                        modelClone = controlObject._getExportModel(controlObject.model);
                        inputAttr.push({ name: widget[0], type: 'hidden', value: controlObject.stringify(modelClone) });
                        var input = BoldBIDashboard.buildTag('input', "", null, inputAttr[index]);
                        form.append(input);
                    }
                }
                bbdesigner$('body').append(form);
                form.submit();
                setTimeout(function () {
                    var ctrlInstance, ctrlObject;
                    if (locale.length) {
                        for (var j = 0; j < locale.length; j++) {
                            if (!BoldBIDashboard.isNullOrUndefined(locale[j].locale)) {
                                ctrlInstance = bbdesigner$("#" + locale[j].id).data();
                                widget = ctrlInstance["ejWidgets"];
                                ctrlObject = bbdesigner$("#" + locale[j].id).data(widget[0]);
                                ctrlObject.model.locale = locale[j].locale;
                            }
                        }
                    }
                }, 0);
                form.remove();
            }
            return true;
        },
        print: function (element, printWin) {
            var bbdesigner$div = BoldBIDashboard.buildTag('div')
            var elementClone = element.clone();
            bbdesigner$div.append(elementClone);
            if (!printWin)
                var printWin = window.open('', 'print', "height=452,width=1024,tabbar=no");
            printWin.document.write('<!DOCTYPE html>');
            var links = bbdesigner$('head').find('link').add("style");
            if (BoldBIDashboard.browserInfo().name === "msie") {
                var a = ""
                links.each(function (index, obj) {
                    if (obj.tagName == "LINK")
                        bbdesigner$(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.write('<html><head></head><body>' + a + bbdesigner$div[0].innerHTML + '</body></html>');
            }
            else {
                var a = ""
                printWin.document.write('<html><head>')
                links.each(function (index, obj) {
                    if (obj.tagName == "LINK")
                        bbdesigner$(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.writeln(a + '</head><body>')
                printWin.document.writeln(bbdesigner$div[0].innerHTML + '</body></html>')
            }
            printWin.document.close();
            printWin.focus();
            setTimeout(function () {
                if (!BoldBIDashboard.isNullOrUndefined(printWin.window)) {
                    printWin.print();
                    setTimeout(function () { printWin.close() }, 1000);
                }
            }, 1000);
        },
        ieClearRemover: function (element) {
            var searchBoxHeight = bbdesigner$(element).height();
            element.style.paddingTop = parseFloat(searchBoxHeight / 2) + "px";
            element.style.paddingBottom = parseFloat(searchBoxHeight / 2) + "px";
            element.style.height = "1px";
            element.style.lineHeight = "1px";
        },
        //To send ajax request
        sendAjaxRequest: function (ajaxOptions) {
            bbdesigner$.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.successHandler,
                error: ajaxOptions.errorHandler,
                beforeSend: ajaxOptions.beforeSendHandler,
                complete: ajaxOptions.completeHandler
            });
        },

        buildTag: function (tag, innerHtml, styles, attrs) {
            /// <summary>Helper to build jQuery element</summary>
            /// <param name="tag" type="String">tagName#id.cssClass</param>
            /// <param name="innerHtml" type="String"></param>
            /// <param name="styles" type="Object">A set of key/value pairs that configure styles</param>
            /// <param name="attrs" type="Object">A set of key/value pairs that configure attributes</param>
            /// <returns type="jQuery"></returns>
            var tagName = /^[a-z]*[0-9a-z]+/ig.exec(tag)[0];

            var id = /#([_a-z]+[-_0-9a-z]+)/ig.exec(tag);
            id = id ? id[id.length - 1] : undefined;

            var className = /\.([a-z]+[-_0-9a-z ]+)/ig.exec(tag);
            className = className ? className[className.length - 1] : undefined;

            return bbdesigner$(document.createElement(tagName))
                .attr(id ? { "id": id } : {})
                .addClass(className || "")
                .css(styles || {})
                .attr(attrs || {})
                .html(innerHtml || "");
        },
        _preventDefaultException: function (el, exceptions) {
            if (el) {
                for (var i in exceptions) {
                    if (exceptions[i].test(el[i])) {
                        return true;
                    }
                }
            }

            return false;
        },

        //Gets the maximum z-index in the document
        getMaxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, bbdesigner$.map(bbdesigner$('body *'), function (e, n) {
                if (bbdesigner$(e).css('position') == 'absolute' || bbdesigner$(e).css('position') == 'fixed')
                    return parseInt(bbdesigner$(e).css('z-index')) || 1;
            })
            );
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },

        //To prevent default actions for the element
        blockDefaultActions: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();
        },

        //To get dimensions of the element when its hidden
        getDimension: function (element, method) {
            var value;
            var bbdesigner$hidden = bbdesigner$(element).parents().andSelf().filter(':hidden');
            if (bbdesigner$hidden) {
                var prop = { visibility: 'hidden', display: 'block' };
                var tmp = [];
                bbdesigner$hidden.each(function () {
                    var temp = {}, name;
                    for (name in prop) {
                        temp[name] = this.style[name];
                        this.style[name] = prop[name];
                    }
                    tmp.push(temp);
                });
                value = /(outer)/g.test(method) ?
                bbdesigner$(element)[method](true) :
               bbdesigner$(element)[method]();

                bbdesigner$hidden.each(function (i) {
                    var temp = tmp[i], name;
                    for (name in prop) {
                        this.style[name] = temp[name];
                    }
                });
            }
            return value;
        },
        //Get triggers when transition End
        transitionEndEvent: function () {
            var transitionEnd = {
                '': 'transitionend',
                'webkit': 'webkitTransitionEnd',
                'Moz': 'transitionend',
                'O': 'otransitionend',
                'ms': 'MSTransitionEnd'
            };

            return transitionEnd[BoldBIDashboard.userAgent()];
        },
        //Get triggers when transition End
        animationEndEvent: function () {
            var animationEnd = {
                '': 'animationend',
                'webkit': 'webkitAnimationEnd',
                'Moz': 'animationend',
                'O': 'webkitAnimationEnd',
                'ms': 'animationend'
            };

            return animationEnd[BoldBIDashboard.userAgent()];
        },
        //To return the start event to bind for element
        startEvent: function () {
            return (BoldBIDashboard.isTouchDevice() || bbdesigner$.support.hasPointer) ? "touchstart" : "mousedown";
        },
        //To return end event to bind for element
        endEvent: function () {
            return (BoldBIDashboard.isTouchDevice() || bbdesigner$.support.hasPointer) ? "touchend" : "mouseup"
        },
        //To return move event to bind for element
        moveEvent: function () {
            return (BoldBIDashboard.isTouchDevice() || bbdesigner$.support.hasPointer) ? (bbdesigner$.support.hasPointer && !BoldBIDashboard.isMobile()) ? "ejtouchmove" : "touchmove" : "mousemove";
        },
        //To return cancel event to bind for element
        cancelEvent: function () {
            return (BoldBIDashboard.isTouchDevice() || bbdesigner$.support.hasPointer) ? "touchcancel" : "mousecancel";
        },
        //To return tap event to bind for element
        tapEvent: function () {
            return (BoldBIDashboard.isTouchDevice() || bbdesigner$.support.hasPointer) ? "tap" : "click";
        },
        //To return tap hold event to bind for element
        tapHoldEvent: function () {
            return (BoldBIDashboard.isTouchDevice() || bbdesigner$.support.hasPointer) ? "taphold" : "click";
        },
        //To check whether its Device
        isDevice: function () {
            if (BoldBIDashboard.getBooleanVal(bbdesigner$('head'), 'data-ej-forceset', false))
                return BoldBIDashboard.getBooleanVal(bbdesigner$('head'), 'data-ej-device', this._device());
            else
                return this._device();
        },
        //To check whether its portrait or landscape mode
        isPortrait: function () {
            var elem = document.documentElement;
            return (elem) && ((elem.clientWidth / elem.clientHeight) < 1.1);
        },
        //To check whether its in lower resolution
        isLowerResolution: function () {
            return ((window.innerWidth <= 640 && BoldBIDashboard.isPortrait() && BoldBIDashboard.isDevice()) || (window.innerWidth <= 800 && !BoldBIDashboard.isDevice()) || (window.innerWidth <= 800 && !BoldBIDashboard.isPortrait() && BoldBIDashboard.isWindows() && BoldBIDashboard.isDevice()) || BoldBIDashboard.isMobile());
        },
        //To check whether its iOS web view
        isIOSWebView: function () {
            return (/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent));
        },
        //To check whether its Android web view
        isAndroidWebView: function () {
            return (!(typeof (Android) === "undefined"));
        },
        //To check whether its windows web view
        isWindowsWebView: function () {
            return location.href.indexOf("x-wmapp") != -1;
        },
        _device: function () {
            return (/Android|BlackBerry|iPhone|iPad|iPod|IEMobile|kindle|windows\sce|palm|smartphone|iemobile|mobile|pad|xoom|sch-i800|playbook/i.test(navigator.userAgent.toLowerCase()));
        },
        //To check whether its Mobile
        isMobile: function () {
            return ((/iphone|ipod|android|blackberry|opera|mini|windows\sce|palm|smartphone|iemobile/i.test(navigator.userAgent.toLowerCase()) && /mobile/i.test(navigator.userAgent.toLowerCase()))) || (BoldBIDashboard.getBooleanVal(bbdesigner$('head'), 'data-ej-mobile', false) === true);
        },
        //To check whether its Tablet
        isTablet: function () {
            return (/ipad|xoom|sch-i800|playbook|tablet|kindle/i.test(navigator.userAgent.toLowerCase())) || (BoldBIDashboard.getBooleanVal(bbdesigner$('head'), 'data-ej-tablet', false) === true) || (!BoldBIDashboard.isMobile() && BoldBIDashboard.isDevice());
        },
        //To check whether its Touch Device
        isTouchDevice: function () {
            return (('ontouchstart' in window || (window.navigator.msPointerEnabled && BoldBIDashboard.isMobile())) && this.isDevice());
        },
        //To get the outerHTML string for object
        getClearString: function (string) {
            return bbdesigner$.trim(string.replace(/\s+/g, " ").replace(/(\r\n|\n|\r)/gm, "").replace(new RegExp("\>[\n\t ]+\<", "g"), "><"));
        },
        //Get the attribute value with boolean type of element
        getBooleanVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = bbdesigner$(ele).attr(val);
            if (value != null)
                return value.toLowerCase() == "true";
            else
                return option;
        },
        //Gets the Skew class based on the element current position
        _getSkewClass: function (item, pageX, pageY) {
            var itemwidth = item.width();
            var itemheight = item.height();
            var leftOffset = item.offset().left;
            var rightOffset = item.offset().left + itemwidth;
            var topOffset = item.offset().top;
            var bottomOffset = item.offset().top + itemheight;
            var widthoffset = itemwidth * 0.3;
            var heightoffset = itemheight * 0.3;
            if (pageX < leftOffset + widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topleft";
            if (pageX > rightOffset - widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topright";
            if (pageX > rightOffset - widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomright";
            if (pageX < leftOffset + widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomleft";
            if (pageX > leftOffset + widthoffset && pageY < topOffset + heightoffset && pageX < rightOffset - widthoffset)
                return "e-m-skew-top";
            if (pageX < leftOffset + widthoffset)
                return "e-m-skew-left";
            if (pageX > rightOffset - widthoffset)
                return "e-m-skew-right";
            if (pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottom";
            return "e-m-skew-center";
        },
        //Removes the added Skew class on the element
        _removeSkewClass: function (element) {
            bbdesigner$(element).removeClass("e-m-skew-top e-m-skew-bottom e-m-skew-left e-m-skew-right e-m-skew-topleft e-m-skew-topright e-m-skew-bottomleft e-m-skew-bottomright e-m-skew-center e-skew-top e-skew-bottom e-skew-left e-skew-right e-skew-topleft e-skew-topright e-skew-bottomleft e-skew-bottomright e-skew-center");
        },
        //Object.keys  method to support all the browser including IE8.
        _getObjectKeys: function (obj) {
            var i, keys = [];
            obj = Object.prototype.toString.call(obj) === Object.prototype.toString() ? obj : {};
            if (!Object.keys) {
                for (i in obj) {
                    if (obj.hasOwnProperty(i))
                        keys.push(i);
                }
                return keys;
            }
            if (Object.keys)
                return Object.keys(obj);
        },
        _touchStartPoints: function (evt, object) {
            if (evt) {
                var point = evt.touches ? evt.touches[0] : evt;
                object._distX = 0;
                object._distY = 0;
                object._moved = false;
                object._pointX = point.pageX;
                object._pointY = point.pageY;
            }
        },
        _isTouchMoved: function (evt, object) {
            if (evt) {
                var point = evt.touches ? evt.touches[0] : evt,
                deltaX = point.pageX - object._pointX,
                deltaY = point.pageY - object._pointY,
                timestamp = Date.now(),
                newX, newY,
                absDistX, absDistY;
                object._pointX = point.pageX;
                object._pointY = point.pageY;
                object._distX += deltaX;
                object._distY += deltaY;
                absDistX = Math.abs(object._distX);
                absDistY = Math.abs(object._distY);
                return !(absDistX < 5 && absDistY < 5);
            }
        },
        //To bind events for element
        listenEvents: function (selectors, eventTypes, handlers, remove, pluginObj, disableMouse) {
            for (var i = 0; i < selectors.length; i++) {
                BoldBIDashboard.listenTouchEvent(selectors[i], eventTypes[i], handlers[i], remove, pluginObj, disableMouse);
            }
        },
        //To bind touch events for element
        listenTouchEvent: function (selector, eventType, handler, remove, pluginObj, disableMouse) {
            var event = remove ? "removeEventListener" : "addEventListener";
            var jqueryEvent = remove ? "off" : "on";
            var elements = bbdesigner$(selector);
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                switch (eventType) {
                    case "touchstart":
                        BoldBIDashboard._bindEvent(element, event, eventType, handler, "mousedown", "MSPointerDown", "pointerdown", disableMouse);
                        break;
                    case "touchmove":
                        BoldBIDashboard._bindEvent(element, event, eventType, handler, "mousemove", "MSPointerMove", "pointermove", disableMouse);
                        break;
                    case "touchend":
                        BoldBIDashboard._bindEvent(element, event, eventType, handler, "mouseup", "MSPointerUp", "pointerup", disableMouse);
                        break;
                    case "touchcancel":
                        BoldBIDashboard._bindEvent(element, event, eventType, handler, "mousecancel", "MSPointerCancel", "pointercancel", disableMouse);
                        break;
                    case "tap": case "taphold": case "ejtouchmove": case "click":
                        bbdesigner$(element)[jqueryEvent](eventType, handler);
                        break;
                    default:
                        if (BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version < 9)
                            pluginObj["_on"](bbdesigner$(element), eventType, handler);
                        else
                            element[event](eventType, handler, true);
                        break;
                }
            }
        },
        //To bind events for element
        _bindEvent: function (element, event, eventType, handler, mouseEvent, pointerEvent, ie11pointerEvent, disableMouse) {
            if (bbdesigner$.support.hasPointer)
                element[event](window.navigator.pointerEnabled ? ie11pointerEvent : pointerEvent, handler, true);
            else
                element[event](eventType, handler, true);
        },
        _browser: function () {
            return (/webkit/i).test(navigator.appVersion) ? 'webkit' : (/firefox/i).test(navigator.userAgent) ? 'Moz' : (/trident/i).test(navigator.userAgent) ? 'ms' : 'opera' in window ? 'O' : '';
        },
        styles: document.createElement('div').style,
        /**
       * To get the userAgent Name     
       * @example             
       * &lt;script&gt;
       *       BoldBIDashboard.userAgent();//return user agent name
       * &lt;/script&gt         
       * @memberof AppView
       * @instance
       */
        userAgent: function () {
            var agents = 'webkitT,t,MozT,msT,OT'.split(','),
            t,
            i = 0,
            l = agents.length;

            for (; i < l; i++) {
                t = agents[i] + 'ransform';
                if (t in BoldBIDashboard.styles) {
                    return agents[i].substr(0, agents[i].length - 1);
                }
            }

            return false;
        },
        addPrefix: function (style) {
            if (BoldBIDashboard.userAgent() === '') return style;

            style = style.charAt(0).toUpperCase() + style.substr(1);
            return BoldBIDashboard.userAgent() + style;
        },
        //To Prevent Default Exception

        //To destroy the mobile widgets
        destroyWidgets: function (element) {
            var dataEl = bbdesigner$(element).find("[data-role *= ejm]");
            dataEl.each(function (index, element) {
                var bbdesigner$element = bbdesigner$(element);
                var plugin = bbdesigner$element.data("ejWidgets");
                if (plugin)
                    bbdesigner$element[plugin]("destroy");
            });
        },
        //Get the attribute value of element
        getAttrVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = bbdesigner$(ele).attr(val);
            if (value != null)
                return value;
            else
                return option;
        },

        // Get the offset value of element
        getOffset: function (ele) {
            var pos = {};
            var offsetObj = ele.offset() || { left: 0, top: 0 };
            bbdesigner$.extend(true, pos, offsetObj);
            if (bbdesigner$("body").css("position") != "static") {
                var bodyPos = bbdesigner$("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },

        // Z-index calculation for the element
        getZindexPartial: function (element, popupEle) {
            if (!BoldBIDashboard.isNullOrUndefined(element) && element.length > 0) {
                var parents = element.parents(), bodyEle;
                bodyEle = bbdesigner$('body').children();
                if (!BoldBIDashboard.isNullOrUndefined(element) && element.length > 0)
                    bodyEle.splice(bodyEle.index(popupEle), 1);
                bbdesigner$(bodyEle).each(function (i, ele) { parents.push(ele); });

                var maxZ = Math.max.apply(maxZ, bbdesigner$.map(parents, function (e, n) {
                    if (bbdesigner$(e).css('position') != 'static') return parseInt(bbdesigner$(e).css('z-index')) || 1;
                }));
                if (!maxZ || maxZ < 10000) maxZ = 10000;
                else maxZ += 1;
                return maxZ;
            }
        },

        isValidAttr: function (element, attribute) {
            var element = bbdesigner$(element)[0];
            if (typeof element[attribute] != "undefined")
                return true;
            else {
                var _isValid = false;
                bbdesigner$.each(element, function (key) {
                    if (key.toLowerCase() == attribute.toLowerCase()) {
                        _isValid = true;
                        return false;
                    }
                });
            }
            return _isValid;
        }

    };

    bbdesigner$.extend(BoldBIDashboard, BoldBIDashboard.util);

    // base class for all BoldBIDashboard widgets. It will automatically inhertied
    BoldBIDashboard.widgetBase = {
        droppables: { 'default': [] },
        resizables: { 'default': [] },

        _renderEjTemplate: function (selector, data, index, prop, ngTemplateType) {
            var type = null;
            if (typeof selector === "object" || selector.startsWith("#") || selector.startsWith("."))
                type = bbdesigner$(selector).attr("type");
            if (type) {
                type = type.toLowerCase();
                if (BoldBIDashboard.template[type])
                    return BoldBIDashboard.template[type](this, selector, data, index, prop);
            }
            // For BoldBIDashboardGrid Angular2 Template Support
            else if (!BoldBIDashboard.isNullOrUndefined(ngTemplateType))
                 return BoldBIDashboard.template['text/x-'+ ngTemplateType](this, selector, data, index, prop);
            return BoldBIDashboard.template.render(this, selector, data, index, prop);
        },

        destroy: function () {

            if (this._trigger("destroy"))
                return;

            if (this.model.enablePersistence) {
                this.persistState();
                bbdesigner$(window).off("unload", this._persistHandler);
            }

            try {
                this._destroy();
            } catch (e) { }

            var arr = this.element.data("ejWidgets") || [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == this.pluginName) {
                    arr.splice(i, 1);
                }
            }
            if (!arr.length)
                this.element.removeData("ejWidgets");

            while (this._events) {
                var item = this._events.pop(), args = [];

                if (!item)
                    break;

                for (var i = 0; i < item[1].length; i++)
                    if (!bbdesigner$.isPlainObject(item[1][i]))
                        args.push(item[1][i]);

                bbdesigner$.fn.off.apply(item[0], args);
            }

            this._events = null;

            this.element
                .removeClass(BoldBIDashboard.util.getNameSpace(this.sfType))
                .removeClass("e-js")
                .removeData(this.pluginName);

            this.element = null;
            this.model = null;
        },

        _on: function (element) {
            if (!this._events)
                this._events = [];
            var args = [].splice.call(arguments, 1, arguments.length - 1);

            var handler = {}, i = args.length;
            while (handler && typeof handler !== "function") {
                handler = args[--i];
            }

            args[i] = BoldBIDashboard.proxy(args[i], this);

            this._events.push([element, args, handler, args[i]]);

            bbdesigner$.fn.on.apply(element, args);

            return this;
        },

        _off: function (element, eventName, selector, handlerObject) {
            var e = this._events, temp;
            if (!e || !e.length)
                return this;
            if (typeof selector == "function") {
                temp = handlerObject;
                handlerObject = selector;
                selector = temp;
            }
            var t = (eventName.match(/\S+/g) || [""]);
            for (var i = 0; i < e.length; i++) {
                var arg = e[i],
                r = arg[0].length && (!handlerObject || arg[2] === handlerObject) && (arg[1][0] === eventName || t[0]) && (!selector || arg[1][1] === selector) && bbdesigner$.inArray(element[0], arg[0]) > -1;
                if (r) {
                    bbdesigner$.fn.off.apply(element, handlerObject ? [eventName, selector, arg[3]] : [eventName, selector]);
                    e.splice(i, 1);
                    break;
                }
            }

            return this;
        },

        // Client side events wire-up / trigger helper.
        _trigger: function (eventName, eventProp) {
            var fn = null, returnValue, args, clientProp = {};
            bbdesigner$.extend(clientProp, eventProp)

            if (eventName in this.model)
                fn = this.model[eventName];

            if (fn) {
                if (typeof fn === "string") {
                    fn = BoldBIDashboard.util.getObject(fn, window);
                }

                if (bbdesigner$.isFunction(fn)) {

                    args = BoldBIDashboard.event(eventName, this.model, eventProp);

                    var scopeFn = this.model["_applyScope"];

                    returnValue = fn.call(this, args);

                    scopeFn && scopeFn.call();

                    // sending changes back - deep copy option should not be enabled for this bbdesigner$.extend 
                    if (eventProp) bbdesigner$.extend(eventProp, args);

                    if (args.cancel || !BoldBIDashboard.isNullOrUndefined(returnValue))
                        return returnValue === false || args.cancel;
                }
            }

            var isPropDefined = Boolean(eventProp);
            eventProp = eventProp || {};
            eventProp.originalEventType = eventName;
            eventProp.type = this.pluginName + eventName;

            args = bbdesigner$.Event(eventProp.type, BoldBIDashboard.event(eventProp.type, this.model, eventProp));

            this.element && this.element.trigger(args);

            // sending changes back - deep copy option should not be enabled for this bbdesigner$.extend 
            if (isPropDefined) bbdesigner$.extend(eventProp, args);

            if (BoldBIDashboard.isOnWebForms && args.cancel == false && this.model.serverEvents && this.model.serverEvents.length)
                BoldBIDashboard.raiseWebFormsServerEvents(eventName, eventProp, clientProp);

            return args.cancel;
        },

        setModel: function (options, forceSet) {
            // check for whether to apply values are not. if _setModel function is defined in child,
            //  this will call that function and validate it using return value

            if (this._trigger("modelChange", { "changes": options }))
                return;

            for (var prop in options) {
                if (!forceSet) {
                    if (this.model[prop] === options[prop]) {
                        delete options[prop];
                        continue;
                    }
                    if (bbdesigner$.isPlainObject(options[prop])) {
                        iterateAndRemoveProps(this.model[prop], options[prop]);
                        if (bbdesigner$.isEmptyObject(options[prop])) {
                            delete options[prop];
                            continue;
                        }
                    }
                }

                if (this.dataTypes) {
                    var returnValue = this._isValidModelValue(prop, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + prop + " - " + returnValue;
                }
                if (this.model.notifyOnEachPropertyChanges && this.model[prop] !== options[prop]) {
                    var arg = {
                        oldValue: this.model[prop],
                        newValue: options[prop]
                    };

                    options[prop] = this._trigger(prop + "Change", arg) ? this.model[prop] : arg.newValue;
                }
            }
            if (bbdesigner$.isEmptyObject(options))
                return;

            if (this._setFirst) {
                var ds = options.dataSource;
                if (ds) delete options.dataSource;

                bbdesigner$.extend(true, this.model, options);
                if (ds) {
                    this.model.dataSource = (ds instanceof Array) ? ds.slice() : ds;
                    options["dataSource"] = this.model.dataSource;
                }
                !this._setModel || this._setModel(options);

            } else if (!this._setModel || this._setModel(options) !== false) {
                bbdesigner$.extend(true, this.model, options);
            }
            if ("enablePersistence" in options) {
                this._setState(options.enablePersistence);
            }
        },
        option: function (prop, value, forceSet) {
            if (!prop)
                return this.model;

            if (bbdesigner$.isPlainObject(prop))
                return this.setModel(prop, forceSet);

            if (typeof prop === "string") {
                prop = prop.replace(/^model\./, "");
                var oldValue = BoldBIDashboard.getObject(prop, this.model);

                if (value === undefined && !forceSet)
                    return oldValue;

                if (prop === "enablePersistence")
                    return this._setState(value);

                if (forceSet && value === BoldBIDashboard.extensions.modelGUID) {
                    return this._setModel(BoldBIDashboard.createObject(prop, BoldBIDashboard.getObject(prop, this.model), {}));
                }

                if (forceSet || BoldBIDashboard.getObject(prop, this.model) !== value)
                    return this.setModel(BoldBIDashboard.createObject(prop, value, {}), forceSet);
            }
            return undefined;
        },

        _isValidModelValue: function (prop, types, options) {
            var value = types[prop], option = options[prop], returnValue;

            if (!value)
                return true;

            if (typeof value === "string") {
                if (value == "enum") {
                    options[prop] = option ? option.toString().toLowerCase() : option;
                    value = "string";
                }

                if (value === "array") {
                    if (Object.prototype.toString.call(option) === '[object Array]')
                        return true;
                }
                else if (value === "data") {
                    return true;
                }
                else if (value === "parent") {
                    return true;
                }
                else if (typeof option === value)
                    return true;

                return "Expected type - " + value;
            }

            if (option instanceof Array) {
                for (var i = 0; i < option.length; i++) {
                    returnValue = this._isValidModelValue(prop, types, option[i]);
                    if (returnValue !== true) {
                        return " [" + i + "] - " + returnValue;
                    }
                }
                return true;
            }

            for (var innerProp in option) {
                returnValue = this._isValidModelValue(innerProp, value, option);
                if (returnValue !== true)
                    return innerProp + " : " + returnValue;
            }

            return true;
        },

        _returnFn: function (obj, propName) {
            if (propName.indexOf('.') != -1) {
                this._returnFn(obj[propName.split('.')[0]], propName.split('.').slice(1).join('.'));
            }
            else
                obj[propName] = obj[propName].call(obj.propName);
        },

        _removeCircularRef: function (obj) {
            var seen = [];
            function detect(obj, key, parent) {
                if (typeof obj != 'object') { return; }
                if (!Array.prototype.indexOf) {
                    Array.prototype.indexOf = function (val) {
                        return bbdesigner$.inArray(val, this);
                    };
                }
                if (seen.indexOf(obj) >= 0) {
                    delete parent[key];
                    return;
                }
                seen.push(obj);
                for (var k in obj) { //dive on the object's children
                    if (obj.hasOwnProperty(k)) { detect(obj[k], k, obj); }
                }
                seen.pop();
                return;
            }
            detect(obj, 'obj', null);
            return obj;
        },

        stringify: function (model, removeCircular) {
            var observables = this.observables;
            for (var k = 0; k < observables.length; k++) {
                var val = BoldBIDashboard.getObject(observables[k], model);
                if (!BoldBIDashboard.isNullOrUndefined(val) && typeof (val) === "function")
                    this._returnFn(model, observables[k]);
            }
            if (removeCircular) model = this._removeCircularRef(model);
            return JSON.stringify(model);
        },

        _setState: function (val) {
            if (val === true) {
                this._persistHandler = BoldBIDashboard.proxy(this.persistState, this);
                bbdesigner$(window).on("unload", this._persistHandler);
            } else {
                this.deleteState();
                bbdesigner$(window).off("unload", this._persistHandler);
            }
        },

        _removeProp: function (obj, propName) {
            if (!BoldBIDashboard.isNullOrUndefined(obj)) {
                if (propName.indexOf('.') != -1) {
                    this._removeProp(obj[propName.split('.')[0]], propName.split('.').slice(1).join('.'));
                }
                else
                    delete obj[propName];
            }
        },

        persistState: function () {
            var model;

            if (this._ignoreOnPersist) {
                model = copyObject({}, this.model);
                for (var i = 0; i < this._ignoreOnPersist.length; i++) {
                    this._removeProp(model, this._ignoreOnPersist[i]);
                }
                model.ignoreOnPersist = this._ignoreOnPersist;
            } else if (this._addToPersist) {
                model = {};
                for (var i = 0; i < this._addToPersist.length; i++) {
                    BoldBIDashboard.createObject(this._addToPersist[i], BoldBIDashboard.getObject(this._addToPersist[i], this.model), model);
                }
                model.addToPersist = this._addToPersist;
            } else {
                model = copyObject({}, this.model);
            }

            if (this._persistState) {
                model.customPersists = {};
                this._persistState(model.customPersists);
            }

            if (window.localStorage) {
                if (!BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.persistStateVersion) && window.localStorage.getItem("persistKey") == null)
                    window.localStorage.setItem("persistKey", BoldBIDashboard.persistStateVersion);
                window.localStorage.setItem("$BoldBIDashboard$" + this.pluginName + this._id, JSON.stringify(model));
            }
            else if (document.cookie) {
                if (!BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.persistStateVersion) && BoldBIDashboard.cookie.get("persistKey") == null)
                    BoldBIDashboard.cookie.set("persistKey", BoldBIDashboard.persistStateVersion);
                BoldBIDashboard.cookie.set("$BoldBIDashboard$" + this.pluginName + this._id, model);
            }
        },

        deleteState: function () {
            if (window.localStorage)
                window.localStorage.removeItem("$BoldBIDashboard$" + this.pluginName + this._id);
            else if (document.cookie)
                BoldBIDashboard.cookie.set("$BoldBIDashboard$" + this.pluginName + this._id, model, new Date());
        },

        restoreState: function (silent) {
            var value = null;
            if (window.localStorage)
                value = window.localStorage.getItem("$BoldBIDashboard$" + this.pluginName + this._id);
            else if (document.cookie)
                value = BoldBIDashboard.cookie.get("$BoldBIDashboard$" + this.pluginName + this._id);

            if (value) {
                var model = JSON.parse(value);

                if (this._restoreState) {
                    this._restoreState(model.customPersists);
                    delete model.customPersists;
                }

                if (BoldBIDashboard.isNullOrUndefined(model) === false)
                    if (!BoldBIDashboard.isNullOrUndefined(model.ignoreOnPersist)) {
                        this._ignoreOnPersist = model.ignoreOnPersist;
                        delete model.ignoreOnPersist;
                    } else if (!BoldBIDashboard.isNullOrUndefined(model.addToPersist)) {
                        this._addToPersist = model.addToPersist;
                        delete model.addToPersist;
                    }
            }
            if (!BoldBIDashboard.isNullOrUndefined(model) && !BoldBIDashboard.isNullOrUndefined(this._ignoreOnPersist)) {
                for (var i in this._ignoreOnPersist) {
                    if (this._ignoreOnPersist[i].indexOf('.') !== -1)
                        BoldBIDashboard.createObject(this._ignoreOnPersist[i], BoldBIDashboard.getObject(this._ignoreOnPersist[i], this.model), model);
                    else
                        model[this._ignoreOnPersist[i]] = this.model[this._ignoreOnPersist[i]];
                }
                this.model = model;
            }
            else
                this.model = bbdesigner$.extend(true, this.model, model);

            if (!silent && value && this._setModel)
                this._setModel(this.model);
        },

        //to prevent persistence
        ignoreOnPersist: function (properties) {
            var collection = [];
            if (typeof (properties) == "object")
                collection = properties;
            else if (typeof (properties) == 'string')
                collection.push(properties);
            if (this._addToPersist === undefined) {
                this._ignoreOnPersist = this._ignoreOnPersist || [];
                for (var i = 0; i < collection.length; i++) {
                    this._ignoreOnPersist.push(collection[i]);
                }
            } else {
                for (var i = 0; i < collection.length; i++) {
                    var index = this._addToPersist.indexOf(collection[i]);
                    this._addToPersist.splice(index, 1);
                }
            }
        },

        //to maintain persistence
        addToPersist: function (properties) {
            var collection = [];
            if (typeof (properties) == "object")
                collection = properties;
            else if (typeof (properties) == 'string')
                collection.push(properties);
            if (this._addToPersist === undefined) {
                this._ignoreOnPersist = this._ignoreOnPersist || [];
                for (var i = 0; i < collection.length; i++) {
                    var index = this._ignoreOnPersist.indexOf(collection[i]);
                    this._ignoreOnPersist.splice(index, 1);
                }
            } else {
                for (var i = 0; i < collection.length; i++) {
                    if (bbdesigner$.inArray(collection[i], this._addToPersist) === -1)
                        this._addToPersist.push(collection[i]);
                }
            }
        },

        // Get formatted text 
        formatting: function (formatstring, str, locale) {
            formatstring = formatstring.replace(/%280/g, "\"").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            locale = BoldBIDashboard.preferredCulture(locale) ? locale : "en-US";
            var s = formatstring;
            var frontHtmlidx, FrontHtml, RearHtml, lastidxval;
            frontHtmlidx = formatstring.split("{0:");
            lastidxval = formatstring.split("}");
            FrontHtml = frontHtmlidx[0];
            RearHtml = lastidxval[1];
            if (typeof (str) == "string" && bbdesigner$.isNumeric(str))
                str = Number(str);
            if (formatstring.indexOf("{0:") != -1) {
                var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                var formatVal = toformat.exec(formatstring);
                if (formatVal != null && str != null) {
                    if (FrontHtml != null && RearHtml != null)
                        str = FrontHtml + BoldBIDashboard.format(str, formatVal[2], locale) + RearHtml;
                    else
                        str = BoldBIDashboard.format(str, formatVal[2], locale);
                } else if (str != null)
                    str = str;
                else
                    str = "";
                return str;
            } else if (s.startsWith("{") && !s.startsWith("{0:")) {
                var fVal = s.split(""), str = (str || "") + "", strSplt = str.split(""), formats = /[0aA\*CN<>\?]/gm;
                for (var f = 0, f, val = 0; f < fVal.length; f++)
                    fVal[f] = formats.test(fVal[f]) ? "{" + val++ + "}" : fVal[f];
                return String.format.apply(String, [fVal.join("")].concat(strSplt)).replace('{', '').replace('}', '');
            } else if (this.data != null && this.data.Value == null) {
                bbdesigner$.each(this.data, function (dataIndex, dataValue) {
                    s = s.replace(new RegExp('\\{' + dataIndex + '\\}', 'gm'), dataValue);
                });
                return s;
            } else {
                return this.data.Value;
            }
        },
    };

    BoldBIDashboard.WidgetBase = function () {
    }

    var iterateAndRemoveProps = function (source, target) {
        for (var prop in source) {
            if (source[prop] === target[prop])
                delete target[prop];
            if (bbdesigner$.isPlainObject(target[prop]) && bbdesigner$.isPlainObject(source[prop]))
                iterateAndRemoveProps(source[prop], target[prop]);
        }
    }

    BoldBIDashboard.widget = function (pluginName, className, proto) {
        /// <summary>Widget helper for developers, this set have predefined function to jQuery plug-ins</summary>
        /// <param name="pluginName" type="String">the plugin name that will be added in jquery.fn</param>
        /// <param name="className" type="String">the class name for your plugin, this will help create default cssClas</param>
        /// <param name="proto" type="Object">prototype for of the plug-in</param>

        if (typeof pluginName === "object") {
            proto = className;
            for (var prop in pluginName) {
                var name = pluginName[prop];

                if (name instanceof Array) {
                    proto._rootCSS = name[1];
                    name = name[0];
                }

                BoldBIDashboard.widget(prop, name, proto);

                if (pluginName[prop] instanceof Array)
                    proto._rootCSS = "";
            }

            return;
        }

        var nameSpace = proto._rootCSS || BoldBIDashboard.getNameSpace(className);

        proto = BoldBIDashboard.defineClass(className, function (element, options) {

            this.sfType = className;
            this.pluginName = pluginName;
            this.instance = pInstance;

            if (BoldBIDashboard.isNullOrUndefined(this._setFirst))
                this._setFirst = true;

            this["ob.values"] = {};

            bbdesigner$.extend(this, BoldBIDashboard.widgetBase);

            if (this.dataTypes) {
                for (var property in options) {
                    var returnValue = this._isValidModelValue(property, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + property + " - " + returnValue;
                }
            }

            var arr = (element.data("ejWidgets") || []);
            arr.push(pluginName);
            element.data("ejWidgets", arr);

            for (var i = 0; BoldBIDashboard.widget.observables && this.observables && i < this.observables.length; i++) {
                var t = BoldBIDashboard.getObject(this.observables[i], options);
                if (t) BoldBIDashboard.createObject(this.observables[i], BoldBIDashboard.widget.observables.register(t, this.observables[i], this, element), options);
            }

            this.element = element.jquery ? element : bbdesigner$(element);
            this.model = copyObject(true, {}, proto.prototype.defaults, options);
            this.model.keyConfigs = copyObject(this.keyConfigs);

            this.element.addClass(nameSpace + " e-js").data(pluginName, this);

            this._id = element[0].id;

            if (this.model.enablePersistence) {
                if (window.localStorage && !BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.persistStateVersion) && window.localStorage.getItem("persistKey") != BoldBIDashboard.persistStateVersion) {
                    for (var i in window.localStorage) {
                        if (i.indexOf("$BoldBIDashboard$") != -1) {
                            window.localStorage.removeItem(i); //removing the previously stored plugin item from local storage
							window.localStorage.setItem("persistKey", BoldBIDashboard.persistStateVersion);
						}				
                    }
                }
                else if (document.cookie && !BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.persistStateVersion) && BoldBIDashboard.cookie.get("persistKey") != BoldBIDashboard.persistStateVersion) {
                    var splits = document.cookie.split(/; */);
                    for (var k in splits) {
                        if (k.indexOf("$BoldBIDashboard$") != -1) {
                            BoldBIDashboard.cookie.set(k.split("=")[0], model, new Date()); //removing the previously stored plugin item from local storage
							BoldBIDashboard.cookie.set("persistKey", BoldBIDashboard.persistStateVersion);
						}		
                    }
                }
                this._persistHandler = BoldBIDashboard.proxy(this.persistState, this);
                bbdesigner$(window).on("unload", this._persistHandler);
                this.restoreState(true);
            }

            this._init(options);

            if (typeof this.model.keyConfigs === "object" && !(this.model.keyConfigs instanceof Array)) {
                var requiresEvt = false;
                if (this.model.keyConfigs.focus)
                    this.element.attr("accesskey", this.model.keyConfigs.focus);

                for (var keyProps in this.model.keyConfigs) {
                    if (keyProps !== "focus") {
                        requiresEvt = true;
                        break;
                    }
                }

                if (requiresEvt && this._keyPressed) {
                    var el = element, evt = "keydown";

                    if (this.keySettings) {
                        el = this.keySettings.getElement ? this.keySettings.getElement() || el : el;
                        evt = this.keySettings.event || evt;
                    }

                    this._on(el, evt, function (e) {
                        if (!this.model.keyConfigs) return;

                        var action = keyFn.getActionFromCode(this.model.keyConfigs, e.which, e.ctrlKey, e.shiftKey, e.altKey);
                        var arg = {
                            code: e.which,
                            ctrl: e.ctrlKey,
                            alt: e.altKey,
                            shift: e.shiftKey
                        };
                        if (!action) return;

                        if (this._keyPressed(action, e.target, arg, e) === false)
                            e.preventDefault();
                    });
                }
            }
            this._trigger("create");
        }, proto);

        bbdesigner$.fn[pluginName] = function (options) {
            var opt = options, args;
            for (var i = 0; i < this.length; i++) {

                var bbdesigner$this = bbdesigner$(this[i]),
                    pluginObj = bbdesigner$this.data(pluginName),
                    isAlreadyExists = pluginObj && bbdesigner$this.hasClass(nameSpace),
                    obj = null;

                if (this.length > 0 && bbdesigner$.isPlainObject(opt))
                    options = BoldBIDashboard.copyObject({}, opt);

                // ----- plug-in creation/init
                if (!isAlreadyExists) {
                    if (proto.prototype._requiresID === true && !bbdesigner$(this[i]).attr("id")) {
                        bbdesigner$this.attr("id", getUid("ejControl_"));
                    }
                    if (!options || typeof options === "object") {
                        if (proto.prototype.defaults && !BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.setCulture) && "locale" in proto.prototype.defaults && pluginName != "BoldBIDashboardChart") {
                            if (options && !("locale" in options)) options.locale = BoldBIDashboard.setCulture().name;
                            else if (BoldBIDashboard.isNullOrUndefined(options)) {
                                options = {}; options.locale = BoldBIDashboard.setCulture().name;
                            }
                        }
                        new proto(bbdesigner$this, options);
                    }
                    else {
                        throwError(pluginName + ": methods/properties can be accessed only after plugin creation");
                    }
                    continue;
                }

                if (!options) continue;

                args = [].slice.call(arguments, 1);

                if (this.length > 0 && args[0] && opt === "option" && bbdesigner$.isPlainObject(args[0])) {
                    args[0] = BoldBIDashboard.copyObject({}, args[0]);
                }

                // --- Function/property set/access
                if (bbdesigner$.isPlainObject(options)) {
                    // setModel using JSON object
                    pluginObj.setModel(options);
                }

                    // function/property name starts with "_" is private so ignore it.
                else if (options.indexOf('_') !== 0
                    && !BoldBIDashboard.isNullOrUndefined(obj = BoldBIDashboard.getObject(options, pluginObj))
                    || options.indexOf("model.") === 0) {

                    if (!obj || !bbdesigner$.isFunction(obj)) {

                        // if property is accessed, then break the jquery chain
                        if (arguments.length == 1)
                            return obj;

                        //setModel using string input
                        pluginObj.option(options, arguments[1]);

                        continue;
                    }

                    var value = obj.apply(pluginObj, args);

                    // If function call returns any value, then break the jquery chain
                    if (value !== undefined)
                        return value;

                } else {
                    throwError(className + ": function/property - " + options + " does not exist");
                }
            }
            if (pluginName.indexOf("ejm") != -1)
                BoldBIDashboard.widget.registerInstance(bbdesigner$this, pluginName, className, proto.prototype);
            // maintaining jquery chain
            return this;
        };

        BoldBIDashboard.widget.register(pluginName, className, proto.prototype);
        BoldBIDashboard.loadLocale(pluginName);
    };

    BoldBIDashboard.loadLocale = function (pluginName) {
        var i, len, locales = BoldBIDashboard.locales;
        for (i = 0, len = locales.length; i < len; i++)
            bbdesigner$.fn["Locale_" + locales[i]](pluginName);
    };


    bbdesigner$.extend(BoldBIDashboard.widget, (function () {
        var _widgets = {}, _registeredInstances = [],

        register = function (pluginName, className, prototype) {
            if (!BoldBIDashboard.isNullOrUndefined(_widgets[pluginName]))
                throwError("BoldBIDashboard.widget : The widget named " + pluginName + " is trying to register twice.");

            _widgets[pluginName] = { name: pluginName, className: className, proto: prototype };

            BoldBIDashboard.widget.extensions && BoldBIDashboard.widget.extensions.registerWidget(pluginName);
        },
        registerInstance = function (element, pluginName, className, prototype) {
            _registeredInstances.push({ element: element, pluginName: pluginName, className: className, proto: prototype });
        }

        return {
            register: register,
            registerInstance: registerInstance,
            registeredWidgets: _widgets,
            registeredInstances: _registeredInstances
        };

    })());

    BoldBIDashboard.widget.destroyAll = function (elements) {
        if (!elements || !elements.length) return;

        for (var i = 0; i < elements.length; i++) {
            var data = elements.eq(i).data(), wds = data["ejWidgets"];
            if (wds && wds.length) {
                for (var j = 0; j < wds.length; j++) {
                    if (data[wds[j]] && data[wds[j]].destroy)
                        data[wds[j]].destroy();
                }
            }
        }
    };

    BoldBIDashboard.cookie = {
        get: function (name) {
            var value = RegExp(name + "=([^;]+)").exec(document.cookie);

            if (value && value.length > 1)
                return value[1];

            return undefined;
        },
        set: function (name, value, expiryDate) {
            if (typeof value === "object")
                value = JSON.stringify(value);

            value = escape(value) + ((expiryDate == null) ? "" : "; expires=" + expiryDate.toUTCString());
            document.cookie = name + "=" + value;
        }
    };

    var keyFn = {
        getActionFromCode: function (keyConfigs, keyCode, isCtrl, isShift, isAlt) {
            isCtrl = isCtrl || false;
            isShift = isShift || false;
            isAlt = isAlt || false;

            for (var keys in keyConfigs) {
                if (keys === "focus") continue;

                var key = keyFn.getKeyObject(keyConfigs[keys]);
                for (var i = 0; i < key.length; i++) {
                    if (keyCode === key[i].code && isCtrl == key[i].isCtrl && isShift == key[i].isShift && isAlt == key[i].isAlt)
                        return keys;
                }
            }
            return null;
        },
        getKeyObject: function (key) {
            var res = {
                isCtrl: false,
                isShift: false,
                isAlt: false
            };
            var tempRes = bbdesigner$.extend(true, {}, res);
            var bbdesigner$key = key.split(","), bbdesigner$res = [];
            for (var i = 0; i < bbdesigner$key.length; i++) {
                var rslt = null;
                if (bbdesigner$key[i].indexOf("+") != -1) {
                    var k = bbdesigner$key[i].split("+");
                    for (var j = 0; j < k.length; j++) {
                        rslt = keyFn.getResult(bbdesigner$.trim(k[j]), res);
                    }
                }
                else {
                    rslt = keyFn.getResult(bbdesigner$.trim(bbdesigner$key[i]), bbdesigner$.extend(true, {}, tempRes));
                }
                bbdesigner$res.push(rslt);
            }
            return bbdesigner$res;
        },
        getResult: function (key, res) {
            if (key === "ctrl")
                res.isCtrl = true;
            else if (key === "shift")
                res.isShift = true;
            else if (key === "alt")
                res.isAlt = true;
            else res.code = parseInt(key, 10);
            return res;
        }
    };

    BoldBIDashboard.getScrollableParents = function (element) {
        return bbdesigner$(element).parentsUntil("html").filter(function () {
            return bbdesigner$(this).css("overflow") != "visible";
        }).add(bbdesigner$(window));
    }
    BoldBIDashboard.browserInfo = function () {
        var browser = {}, clientInfo = [],
        browserClients = {
            opera: /(opera|opr)(?:.*version|)[ \/]([\w.]+)/i, edge: /(edge)(?:.*version|)[ \/]([\w.]+)/i, webkit: /(chrome)[ \/]([\w.]+)/i, safari: /(webkit)[ \/]([\w.]+)/i, msie: /(msie|trident) ([\w.]+)/i, mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
        };
        for (var client in browserClients) {
            if (browserClients.hasOwnProperty(client)) {
                clientInfo = navigator.userAgent.match(browserClients[client]);
                if (clientInfo) {
                    browser.name = clientInfo[1].toLowerCase() == "opr" ? "opera" : clientInfo[1].toLowerCase();
                    browser.version = clientInfo[2];
                    browser.culture = {};
                    browser.culture.name = browser.culture.language = navigator.language || navigator.userLanguage;
                    if (typeof (BoldBIDashboard.globalize) != 'undefined') {
                        var oldCulture = BoldBIDashboard.preferredCulture().name;
                        var culture = (navigator.language || navigator.userLanguage) ? BoldBIDashboard.preferredCulture(navigator.language || navigator.userLanguage) : BoldBIDashboard.preferredCulture("en-US");
                        for (var i = 0; (navigator.languages) && i < navigator.languages.length; i++) {
                            culture = BoldBIDashboard.preferredCulture(navigator.languages[i]);
                            if (culture.language == navigator.languages[i])
                                break;
                        }
                        BoldBIDashboard.preferredCulture(oldCulture);
                        bbdesigner$.extend(true, browser.culture, culture);
                    }
                    if (!!navigator.userAgent.match(/Trident\/7\./)) {
                        browser.name = "msie";
                    }
                    break;
                }
            }
        }
        browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
        browser.pointerEnabled = window.navigator.pointerEnabled;
        return browser;
    };
    BoldBIDashboard.eventType = {
        mouseDown: "mousedown touchstart",
        mouseMove: "mousemove touchmove",
        mouseUp: "mouseup touchend",
        mouseLeave: "mouseleave touchcancel",
        click: "click touchend"
    };

    BoldBIDashboard.event = function (type, data, eventProp) {

        var e = bbdesigner$.extend(eventProp || {},
            {
                "type": type,
                "model": data,
                "cancel": false
            });

        return e;
    };

    BoldBIDashboard.proxy = function (fn, context, arg) {
        if (!fn || typeof fn !== "function")
            return null;

        if ('on' in fn && context)
            return arg ? fn.on(context, arg) : fn.on(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    BoldBIDashboard.hasStyle = function (prop) {
        var style = document.documentElement.style;

        if (prop in style) return true;

        var prefixs = ['ms', 'Moz', 'Webkit', 'O', 'Khtml'];

        prop = prop[0].toUpperCase() + prop.slice(1);

        for (var i = 0; i < prefixs.length; i++) {
            if (prefixs[i] + prop in style)
                return true;
        }

        return false;
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };
    var copyObject = BoldBIDashboard.copyObject = function (isDeepCopy, target) {
        var start = 2, current, source;
        if (typeof isDeepCopy !== "boolean") {
            start = 1;
        }
        var objects = [].slice.call(arguments, start);
        if (start === 1) {
            target = isDeepCopy;
            isDeepCopy = undefined;
        }

        for (var i = 0; i < objects.length; i++) {
            for (var prop in objects[i]) {
                current = target[prop], source = objects[i][prop];

                if (source === undefined || current === source || objects[i] === source || target === source)
                    continue;
                if (source instanceof Array) {
                    if (i === 0 && isDeepCopy) {
						if(prop === "dataSource")
						  target[prop] = source.slice();
					  else  {
                        target[prop] = new Array();
                        for (var j = 0; j < source.length; j++) {
                            copyObject(true, target[prop], source);
                        }
					  }
                    }
                    else
                        target[prop] = source.slice();
                }
                else if (BoldBIDashboard.isPlainObject(source)) {
                    target[prop] = current || {};
                    if (isDeepCopy)
                        copyObject(isDeepCopy, target[prop], source);
                    else
                        copyObject(target[prop], source);
                } else
                    target[prop] = source;
            }
        }
        return target;
    };
    var pInstance = function () {
        return this;
    }

    var _uid = 0;
    var getUid = function (prefix) {
        return prefix + _uid++;
    }

    BoldBIDashboard.template = {};

    BoldBIDashboard.template.render = BoldBIDashboard.template["text/x-jsrender"] = function (self, selector, data, index, prop) {
        if (selector.slice(0, 1) !== "#")
            selector = ["<div>", selector, "</div>"].join("");
        var property = { prop: prop, index: index };
        return bbdesigner$(selector).render(data, property);
    }

    BoldBIDashboard.isPlainObject = function (obj) {
        if (!obj) return false;
        if (BoldBIDashboard.DataManager !== undefined && obj instanceof BoldBIDashboard.DataManager) return false;
        if (typeof obj !== "object" || obj.nodeType || bbdesigner$.isWindow(obj)) return false;
        try {
            if (obj.constructor &&
                !obj.constructor.prototype.hasOwnProperty("isPrototypeOf")) {
                return false;
            }
        } catch (e) {
            return false;
        }

        var key, ownLast = BoldBIDashboard.support.isOwnLast;
        for (key in obj) {
            if (ownLast) break;
        }

        return key === undefined || obj.hasOwnProperty(key);
    };
    var getValueFn = false;
    BoldBIDashboard.util.valueFunction = function (prop) {
        return function (value, getObservable) {
            var val = BoldBIDashboard.getObject(prop, this.model);

            if (getValueFn === false)
                getValueFn = BoldBIDashboard.getObject("observables.getValue", BoldBIDashboard.widget);

            if (value === undefined) {
                if (!BoldBIDashboard.isNullOrUndefined(getValueFn)) {
                    return getValueFn(val, getObservable);
                }
                return typeof val === "function" ? val.call(this) : val;
            }

            if (typeof val === "function") {
                this["ob.values"][prop] = value;
                val.call(this, value);
            }
            else
                BoldBIDashboard.createObject(prop, value, this.model);
        }
    };
    BoldBIDashboard.util.getVal = function (val) {
        if (typeof val === "function")
            return val();
        return val;
    };
    BoldBIDashboard.support = {
        isOwnLast: function () {
            var fn = function () { this.a = 1; };
            fn.prototype.b = 1;

            for (var p in new fn()) {
                return p === "b";
            }
        }(),
        outerHTML: function () {
            return document.createElement("div").outerHTML !== undefined;
        }()
    };

    var throwError = BoldBIDashboard.throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };

    BoldBIDashboard.getRandomValue = function (min, max) {
        if (min === undefined || max === undefined)
            return BoldBIDashboard.throwError("Min and Max values are required for generating a random number");

        var rand;
        if ("crypto" in window && "getRandomValues" in crypto) {
            var arr = new Uint16Array(1);
            window.crypto.getRandomValues(arr);
            rand = arr[0] % (max - min) + min;
        }
        else rand = Math.random() * (max - min) + min;
        return rand | 0;
    }

    BoldBIDashboard.extensions = {};
    BoldBIDashboard.extensions.modelGUID = "{0B1051BA-1CCB-42C2-A3B5-635389B92A50}";
})(window.bbdesigner$, window.SyncfusionBoldBIDashboard);
(function () {
    bbdesigner$.fn.addEleAttrs = function (json) {
        var bbdesigner$this = bbdesigner$(this);
        bbdesigner$.each(json, function (i, attr) {
            if (attr && attr.specified) {
                bbdesigner$this.attr(attr.name, attr.value);
            }
        });

    };
    bbdesigner$.fn.removeEleAttrs = function (regex) {
        return this.each(function () {
            var bbdesigner$this = bbdesigner$(this),
                names = [],
                attrs = bbdesigner$(this.attributes).clone();
            bbdesigner$.each(attrs, function (i, attr) {
                if (attr && attr.specified && regex.test(attr.name)) {
                    bbdesigner$this.removeAttr(attr.name);
                }
            });
        });
    };
    bbdesigner$.fn.attrNotStartsWith = function (regex) {
        var proxy = this;
        var attributes = [], attrs;
        this.each(function () {
            attrs = bbdesigner$(this.attributes).clone();
        });
        for (i = 0; i < attrs.length; i++) {
            if (attrs[i] && attrs[i].specified && regex.test(attrs[i].name)) {
                continue
            }
            else
                attributes.push(attrs[i])
        }
        return attributes;

    }
    bbdesigner$.fn.removeEleEmptyAttrs = function () {
        return this.each(function () {
            var bbdesigner$this = bbdesigner$(this),
                names = [],
                attrs = bbdesigner$(this.attributes).clone();
            bbdesigner$.each(attrs, function (i, attr) {
                if (attr && attr.specified && attr.value === "") {
                    bbdesigner$this.removeAttr(attr.name);
                }
            });
        });
    };
    bbdesigner$.extend(bbdesigner$.support, {
        has3d: BoldBIDashboard.addPrefix('perspective') in BoldBIDashboard.styles,
        hasTouch: 'ontouchstart' in window,
        hasPointer: navigator.msPointerEnabled,
        hasTransform: BoldBIDashboard.userAgent() !== false,
        pushstate: "pushState" in history &&
        "replaceState" in history,
        hasTransition: BoldBIDashboard.addPrefix('transition') in BoldBIDashboard.styles
    });
    //Ensuring elements having attribute starts with 'ejm-' 
    bbdesigner$.extend(bbdesigner$.expr[':'], {
        attrNotStartsWith: function (element, index, match) {
            var i, attrs = element.attributes;
            for (i = 0; i < attrs.length; i++) {
                if (attrs[i].nodeName.indexOf(match[3]) === 0) {
                    return false;
                }
            }
            return true;
        }
    });
    //addBack() is supported from Jquery >1.8 and andSelf() supports later version< 1.8. support for both the method is provided by extending the JQuery function.
    var oldSelf = bbdesigner$.fn.andSelf || bbdesigner$.fn.addBack;
    bbdesigner$.fn.andSelf = bbdesigner$.fn.addBack = function () {
        return oldSelf.apply(this, arguments);
    };
})();;
window.BoldBIDashboard = window.SyncfusionBoldBIDashboard = window.SyncfusionBoldBIDashboard || {};

(function (bbdesigner$, BoldBIDashboard, doc, undefined) {
    'use strict';
	
    BoldBIDashboard.DataManager = function (dataSource, query, adaptor) {
          if (!(this instanceof BoldBIDashboard.DataManager))
            return new BoldBIDashboard.DataManager(dataSource, query, adaptor);

        if (!dataSource)
            dataSource = [];
        adaptor = adaptor || dataSource.adaptor;

        if (typeof (adaptor) === "string") 
            adaptor = new BoldBIDashboard[adaptor]();
        var data = [], self = this;

        if (dataSource instanceof Array) {
            // JSON array
            data = {
                json: dataSource,
                offline: true
            };

        } else if (typeof dataSource === "object") {
            if (bbdesigner$.isPlainObject(dataSource)) {
                if (!dataSource.json)
                    dataSource.json = [];
                if (dataSource.table)
                    dataSource.json = this._getJsonFromElement(dataSource.table, dataSource.headerOption);
                data = {
                    url: dataSource.url,
                    insertUrl: dataSource.insertUrl,
                    removeUrl: dataSource.removeUrl,
                    updateUrl: dataSource.updateUrl,
                    crudUrl: dataSource.crudUrl,
                    batchUrl: dataSource.batchUrl,
                    json: dataSource.json,
                    headers: dataSource.headers,
                    accept: dataSource.accept,
                    data: dataSource.data,
                    timeTillExpiration: dataSource.timeTillExpiration,
                    cachingPageSize: dataSource.cachingPageSize,
                    enableCaching: dataSource.enableCaching,
                    requestType: dataSource.requestType,
                    key: dataSource.key,
                    crossDomain: dataSource.crossDomain,
                    jsonp: dataSource.jsonp,
                    dataType: dataSource.dataType,
                    offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor == "remoteSaveAdaptor" ? false : dataSource.url ? false : true,
                    requiresFormat: dataSource.requiresFormat
                };
            } else if (dataSource.jquery || isHtmlElement(dataSource)) {
                data = {
                    json: this._getJsonFromElement(dataSource),
                    offline: true,
                    table: dataSource
                };
            }
        } else if (typeof dataSource === "string") {
            data = {
                url: dataSource,
                offline: false,
                dataType: "json",
                json: []
            };
        }

        if (data.requiresFormat === undefined && !BoldBIDashboard.support.cors)
            data.requiresFormat = isNull(data.crossDomain) ? true : data.crossDomain;
        if (data.dataType === undefined)
            data.dataType = "json";

        this.dataSource = data;
        this.defaultQuery = query;

        if (data.url && data.offline && !data.json.length) {
            this.isDataAvailable = false;
            this.adaptor = adaptor || new BoldBIDashboard.ODataAdaptor();
            this.dataSource.offline = false;
            this.ready = this.executeQuery(query || BoldBIDashboard.Query()).done(function (e) {
                self.dataSource.offline = true;
                self.isDataAvailable = true;
                data.json = e.result;
                self.adaptor = new BoldBIDashboard.JsonAdaptor();
            });
        }
        else
            this.adaptor = data.offline ? new BoldBIDashboard.JsonAdaptor() : new BoldBIDashboard.ODataAdaptor();
        if (!data.jsonp && this.adaptor instanceof BoldBIDashboard.ODataAdaptor)
            data.jsonp = "callback";
        this.adaptor = adaptor || this.adaptor;
        if (data.enableCaching)
            this.adaptor = new BoldBIDashboard.CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
        return this;
    };

    BoldBIDashboard.DataManager.prototype = {
        setDefaultQuery: function (query) {
            this.defaultQuery = query;
        },
	
        executeQuery: function (query, done, fail, always) {
            if (typeof query === "function") {
                always = fail;
                fail = done;
                done = query;
                query = null;
            }

            if (!query)
                query = this.defaultQuery;

            if (!(query instanceof BoldBIDashboard.Query))
                throwError("DataManager - executeQuery() : A query is required to execute");

            var deffered = bbdesigner$.Deferred();

            deffered.then(done, fail, always);
            var args = { query: query };

            if (!this.dataSource.offline && this.dataSource.url != undefined) {
				 var result = this.adaptor.processQuery(this, query);
                if (!BoldBIDashboard.isNullOrUndefined(result.url))
                    this._makeRequest(result, deffered, args, query);
                else {
                    nextTick(function () {
                        args = this._getDeferedArgs(query, result, args);
                        deffered.resolveWith(this, [args]);;
                    }, this);
                }
            } else {
                nextTick(function () {
                    var res = this.executeLocal(query);
                    args = this._getDeferedArgs(query, res, args);
                    deffered.resolveWith(this, [args]);
                }, this);
            }

            return deffered.promise();
        },
        _getDeferedArgs: function (query, result, args) {
            if (query._requiresCount) {
                args.result = result.result;
                args.count = result.count;
            } else
                args.result = result;
            args.getTableModel = getTableModel(query._fromTable, args.result, this);
            args.getKnockoutModel = getKnockoutModel(args.result);
            return args;
        },
	
        executeLocal: function (query) {
            if (!this.defaultQuery && !(query instanceof BoldBIDashboard.Query))
                throwError("DataManager - executeLocal() : A query is required to execute");

            if (!this.dataSource.json)
                throwError("DataManager - executeLocal() : Json data is required to execute");

            query = query || this.defaultQuery;

            var result = this.adaptor.processQuery(this, query);

            if (query._subQuery) {
                var from = query._subQuery._fromTable, lookup = query._subQuery._lookup,
                    res = query._requiresCount ? result.result : result;

                if (lookup && lookup instanceof Array) {
                    buildHierarchy(query._subQuery._fKey, from, res, lookup, query._subQuery._key);
                }

                for (var j = 0; j < res.length; j++) {
                    if (res[j][from] instanceof Array) {
                        res[j] = bbdesigner$.extend({}, res[j]);
                        res[j][from] = this.adaptor.processResponse(query._subQuery.using(BoldBIDashboard.DataManager(res[j][from].slice(0))).executeLocal(), this, query);
                    }
                }
            }

            return this.adaptor.processResponse(result, this, query);
        },

        _makeRequest: function (url, deffered, args, query) {
            var isSelector = !!query._subQuerySelector;

            var fnFail = bbdesigner$proxy(function (e) {
                args.error = e;
                deffered.rejectWith(this, [args]);
            }, this);

            var process = bbdesigner$proxy(function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
                if (isSelector) return;

                args.xhr = xhr;
                args.count = parseInt(count, 10);
                args.result = data;
                args.request = request;
                args.aggregates = aggregates;
                args.getTableModel = getTableModel(query._fromTable, data, this);
                args.getKnockoutModel = getKnockoutModel(data);
                args.actual = actual;
                args.virtualSelectRecords = virtualSelectRecords;
                deffered.resolveWith(this, [args]);

            }, this);

            var fnQueryChild = bbdesigner$proxy(function (data, selector) {
                var subDeffer = bbdesigner$.Deferred(),
                    childArgs = { parent: args };

                query._subQuery._isChild = true;

                var subUrl = this.adaptor.processQuery(this, query._subQuery, data ? this.adaptor.processResponse(data) : selector);

                var childReq = this._makeRequest(subUrl, subDeffer, childArgs, query._subQuery);

                if(!isSelector)
                    subDeffer.then(function (subData) {
                        if (data) {
                            buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, data, subData, query._subQuery._key);
                            process(data);
                        }
                    }, fnFail);

                return childReq;
            }, this);

            var fnSuccess = proxy(function (data, status, xhr, request) {
                if (xhr.getResponseHeader("Content-Type").indexOf("xml") == -1 && BoldBIDashboard.dateParse)
                    data = BoldBIDashboard.parseJSON(data);
                var result = this.adaptor.processResponse(data, this, query, xhr, request), count = 0, aggregates = null;
                var virtualSelectRecords = data.virtualSelectRecords;
                if (query._requiresCount) {
                    count = result.count;
                    aggregates = result.aggregates;
                    result = result.result;
                }

                if (!query._subQuery) {
                    process(result, count, xhr, request, data, aggregates, virtualSelectRecords);
                    return;
                }

                if (!isSelector)
                    fnQueryChild(result);

            }, this);

            var req = bbdesigner$.extend({
                type: "GET",
                dataType: this.dataSource.dataType,
                crossDomain: this.dataSource.crossDomain,
                jsonp: this.dataSource.jsonp,
                cache: true,
                beforeSend: bbdesigner$proxy(this._beforeSend, this),
                processData: false,
                success: fnSuccess,
                error: fnFail
            }, url);

            req = bbdesigner$.ajax(req);

            if (isSelector) {
                var res = query._subQuerySelector.call(this, { query: query._subQuery, parent: query });

                if (res && res.length) {
                    req = bbdesigner$.when(req, fnQueryChild(null, res));

                    req.then(proxy(function (pData, cData, requests) {
                        var pResult = this.adaptor.processResponse(pData[0], this, query, pData[2], requests[0]), count = 0;
                        if (query._requiresCount) {
                            count = pResult.count;
                            pResult = pResult.result;
                        }
                        var cResult = this.adaptor.processResponse(cData[0], this, query._subQuery, cData[2], requests[1]), count = 0;
                        if (query._subQuery._requiresCount) {
                            count = cResult.count;
                            cResult = cResult.result;
                        }

                        buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, pResult, cResult, query._subQuery._key);
                        isSelector = false;
                        process(pResult, count, pData[2]);

                    }, this), fnFail);
                } else {
                    isSelector = false;
                }
            }

            return req;
        },

        _beforeSend: function (request, settings) {
            this.adaptor.beforeSend(this, request, settings);

            var headers = this.dataSource.headers, props;
            for (var i = 0; headers && i < headers.length; i++) {
                props = [];
                for (var prop in headers[i]) {
                    props.push(prop);
                    request.setRequestHeader(prop, headers[i][prop]);
                }
            }
        },
	
        saveChanges: function (changes, key, tableName) {
            var args = {
                url: tableName,
                key: key || this.dataSource.key
            };

            var req = this.adaptor.batchRequest(this, changes, args);

            if (this.dataSource.offline) {
                return req;
            }

            var deff = bbdesigner$.Deferred();
            bbdesigner$.ajax(bbdesigner$.extend({
                beforeSend: bbdesigner$proxy(this._beforeSend, this),
                success: proxy(function (data, status, xhr, request) {
                    deff.resolveWith(this, [this.adaptor.processResponse(data, this, null, xhr, request, changes)]);
                }, this),
                error: function (e) {
                    deff.rejectWith(this, [{ error: e }]);
                }
            }, req));

            return deff.promise();
        },
	
        insert: function (data, tableName) {
            var res = this.adaptor.insert(this, data, tableName);
            if (this.dataSource.offline) {
                return res;
            }

            var deffer = bbdesigner$.Deferred();

            bbdesigner$.ajax(bbdesigner$.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                processData: false,
                beforeSend: bbdesigner$proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (BoldBIDashboard.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
            }, res));

            return deffer.promise();
        },
	
        remove: function (keyField, value, tableName) {
            if (typeof value === "object")
                value = value[keyField];

            var res = this.adaptor.remove(this, keyField, value, tableName);

            if (this.dataSource.offline)
                return res;
            var deffer = bbdesigner$.Deferred();
            bbdesigner$.ajax(bbdesigner$.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                beforeSend: bbdesigner$proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (BoldBIDashboard.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
            }, res));
            return deffer.promise();
        },
	
        update: function (keyField, value, tableName) {
            var res = this.adaptor.update(this, keyField, value, tableName);

            if (this.dataSource.offline) {
                return res;
            }

            var deffer = bbdesigner$.Deferred();

           bbdesigner$.ajax(bbdesigner$.extend({
                contentType: "application/json; charset=utf-8",
                beforeSend: bbdesigner$proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (BoldBIDashboard.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
           }, res));

           return deffer.promise();
        },

        _getJsonFromElement: function (ds) {
            if (typeof (ds) == "string")
                ds = bbdesigner$(bbdesigner$(ds).html());

            ds = ds.jquery ? ds[0] : ds;

            var tagName = ds.tagName.toLowerCase();

            if (tagName !== "table")
                throwError("BoldBIDashboard.DataManager : Unsupported htmlElement : " + tagName);

            return BoldBIDashboard.parseTable(ds);
        }
    };

    var buildHierarchy = function (fKey, from, source, lookup, pKey) {
        var i, grp = {}, t;
        if (lookup.result) lookup = lookup.result;

        if (lookup.GROUPGUID)
            throwError("BoldBIDashboard.DataManager: Do not have support Grouping in hierarchy");

        for (i = 0; i < lookup.length; i++) {
            var fKeyData = BoldBIDashboard.getObject(fKey, lookup[i]);
            t = grp[fKeyData] || (grp[fKeyData] = []);

            t.push(lookup[i]);
        }

        for (i = 0; i < source.length; i++) {
            source[i][from] = grp[BoldBIDashboard.getObject(pKey || fKey, source[i])];
        }
    };

    var oData = {
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
    };
    var p = {
        parseJson: function (jsonText) {
            var type = typeof jsonText;
            if (type === "string") {
                jsonText = JSON.parse(jsonText, p.jsonReviver);
            } else if (jsonText instanceof Array) {
                p.iterateAndReviveArray(jsonText);
            } else if (type === "object")
                p.iterateAndReviveJson(jsonText);
            return jsonText;
        },
        iterateAndReviveArray: function (array) {
            for (var i = 0; i < array.length; i++) {
                if (typeof array[i] === "object")
                    p.iterateAndReviveJson(array[i]);
                else if (typeof array[i] === "string" && !/^[\s]*\[|^[\s]*\{|\"/g.test(array[i]))
                    array[i] = p.jsonReviver("",array[i]);
                else
                    array[i] = p.parseJson(array[i]);
            }
        },
        iterateAndReviveJson: function (json) {
            var value;

            for (var prop in json) {
                if (prop.startsWith("__"))
                    continue;

                value = json[prop];
                if (typeof value === "object") {
                    if (value instanceof Array)
                        p.iterateAndReviveArray(value);
                    else
                        p.iterateAndReviveJson(value);
                } else
                    json[prop] = p.jsonReviver(prop, value);
            }
        },
        jsonReviver: function (field, value) {
            var s = value;
            if (typeof value === "string") {
                var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
                if (ms)
                    return new Date(parseInt(ms[1]));
                else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
                    value = new Date(value);
                    if (isNaN(value)) {
                        var a = s.split(/[^0-9]/);
                        value = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
                    }
                    if (BoldBIDashboard.parseDateInUTC && !isNaN(value)) {
                        var str = value.toString();
                        str = str.substr(str.indexOf('GMT'), 8).replace('GMT', '');
                        var hour = parseInt(str[1] + str[2]);
                        var min = str[3] + str[4] == "30" ? ".5" : ".0";
                        var timezoneoff = parseFloat(hour + min) * 60 * 60 * 1000;
                        timezoneoff = (str[0] == "+") ? - timezoneoff : + timezoneoff;
                        timezoneoff = +value + (timezoneoff);
                        
                        return new Date(timezoneoff);
                    }
                }
            }

            return value;
        },
        isJson: function (jsonData) {
            if(typeof jsonData[0]== "string")
                return jsonData;
            return BoldBIDashboard.parseJSON(jsonData);
        },
        isGuid: function (value) {
            var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
            var match = regex.exec(value);
            return match != null;
        },
        replacer: function (key, value) {

            if (BoldBIDashboard.isPlainObject(value))
                return p.jsonReplacer(key, value);

            if (value instanceof Array)
                return p.arrayReplacer(key, value);

            if (value instanceof Date)
                return p.jsonReplacer("", { val: value }).val;

            return value;
        },
        jsonReplacer: function (key, val) {
            var value;
            for (var prop in val) {
                value = val[prop];

                if (!(value instanceof Date))
                    continue;

                var d = value, unixstamp = +d - (d.getTimezoneOffset() * 60000);
                val[prop] = new Date(unixstamp - (BoldBIDashboard.serverTimezoneOffset * 3600000)).toJSON();
            }

            return val;
        },
        arrayReplacer: function (key, val) {

            for (var i = 0; i < val.length; i++) {            
                if (BoldBIDashboard.isPlainObject(val[i]))
                    val[i] = p.jsonReplacer("", val[i]);
                else if (val[i] instanceof Date)
                    val[i] = p.jsonReplacer("", { date: val[i] }).date;
            }

            return val;
        }
    };

    BoldBIDashboard.isJSON = p.isJson;
    BoldBIDashboard.parseJSON = p.parseJson;
    BoldBIDashboard.dateParse = true;
    BoldBIDashboard.isGUID = p.isGuid;
    BoldBIDashboard.Query = function (from) {
        if (!(this instanceof BoldBIDashboard.Query))
            return new BoldBIDashboard.Query(from);

        this.queries = [];
        this._key = "";
        this._fKey = "";

        if (typeof from === "string")
            this._fromTable = from || "";
        else if (from && from instanceof Array)
            this._lookup = from;

        this._expands = [];
        this._sortedColumns = [];
        this._groupedColumns = [];
        this._subQuery = null;
        this._isChild = false;
        this._params = [];
        return this;
    };

    BoldBIDashboard.Query.prototype = {
        key: function (field) {
            if (typeof field === "string")
                this._key = field;

            return this;
        },
	
        using: function (dataManager) {
            if (dataManager instanceof BoldBIDashboard.DataManager) {
                this.dataManagar = dataManager;
                return this;
            }

            return throwError("Query - using() : 'using' function should be called with parameter of instance BoldBIDashboard.DataManager");
        },
	
        execute: function (dataManager, done, fail, always) {
            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof BoldBIDashboard.DataManager)
                return dataManager.executeQuery(this, done, fail, always);

            return throwError("Query - execute() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	
        executeLocal: function (dataManager) {
            // this does not support for URL binding
            

            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof BoldBIDashboard.DataManager)
                return dataManager.executeLocal(this);

            return throwError("Query - executeLocal() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	
        clone: function () {
            var cl = new BoldBIDashboard.Query();
            cl.queries = this.queries.slice(0);
            cl._key = this._key;
            cl._isChild = this._isChild;
            cl.dataManagar = this.dataManager;
            cl._fromTable = this._fromTable;
            cl._params = this._params.slice(0);
            cl._expands = this._expands.slice(0);
            cl._sortedColumns = this._sortedColumns.slice(0);
            cl._groupedColumns = this._groupedColumns.slice(0);
            cl._subQuerySelector = this._subQuerySelector;
            cl._subQuery = this._subQuery;
            cl._fKey = this._fKey;
            cl._requiresCount = this._requiresCount;
            return cl;
        },
	
        from: function (tableName) {
            if (typeof tableName === "string")
                this._fromTable = tableName;

            return this;
        },
	
        addParams: function (key, value) {
            if (typeof value !== "function" && !BoldBIDashboard.isPlainObject(value))
                this._params.push({ key: key, value: value });
            else if (typeof value === "function")
                this._params.push({ key: key, fn: value });

            return this;
        },
	
        expand: function (tables) {
            if (typeof tables === "string")
                this._expands = [].slice.call(arguments, 0);
            else
                this._expands = tables.slice(0);

            return this;
        },
	
        where: function (fieldName, operator, value, ignoreCase) {
            operator = (operator || BoldBIDashboard.FilterOperators.equal).toLowerCase();
            var predicate = null;

            if (typeof fieldName === "string")
                predicate = new BoldBIDashboard.Predicate(fieldName, operator, value, ignoreCase);
            else if (fieldName instanceof BoldBIDashboard.Predicate)
                predicate = fieldName;
            else
                throwError("Query - where : Invalid arguments");

            this.queries.push({
                fn: "onWhere",
                e: predicate
            });
            return this;
        },
	
        search: function (searchKey, fieldNames, operator, ignoreCase) {
            if (!fieldNames || typeof fieldNames === "boolean") {
                fieldNames = [];
                ignoreCase = fieldNames;
            } else if (typeof fieldNames === "string")
                fieldNames = [fieldNames];

            if (typeof operator === "boolean") {
                ignoreCase = operator;
                operator = null;
            }
            operator = operator || BoldBIDashboard.FilterOperators.contains;
            if (operator.length < 3)
                operator = BoldBIDashboard.data.operatorSymbols[operator];

            var comparer = BoldBIDashboard.data.fnOperators[operator] || BoldBIDashboard.data.fnOperators.processSymbols(operator);

            this.queries.push({
                fn: "onSearch",
                e: {
                    fieldNames: fieldNames,
                    operator: operator,
                    searchKey: searchKey,
                    ignoreCase: ignoreCase,
                    comparer: comparer
                }
            });
            return this;
        },
		
        sortBy: function (fieldName, comparer, isFromGroup) {
            var order = BoldBIDashboard.sortOrder.Ascending, sorts, t;

            if (typeof fieldName === "string" && fieldName.toLowerCase().endsWith(" desc")) {
                fieldName = fieldName.replace(/ desc$/i, '');
                comparer = BoldBIDashboard.sortOrder.Descending;
            }
            if (fieldName instanceof Array) {
                for(var i=0;i<fieldName.length;i++)
                   this.sortBy(fieldName[i],comparer,isFromGroup);
                return this;
            }
            if (typeof comparer === "boolean")
                comparer = !comparer ? BoldBIDashboard.sortOrder.Ascending : BoldBIDashboard.sortOrder.Descending;
            else if (typeof comparer === "function")
                order = "custom";

            if (!comparer || typeof comparer === "string") {
                order = comparer ? comparer.toLowerCase() : BoldBIDashboard.sortOrder.Ascending;
                comparer = BoldBIDashboard.pvt.fnSort(comparer);
            }
            if (isFromGroup) {
                sorts = filterQueries(this.queries, "onSortBy");

                for (var i = 0; i < sorts.length; i++) {
                    t = sorts[i].e.fieldName;
                    if (typeof t === "string") {
                        if (t === fieldName) return this;
                    } else if (t instanceof Array) {
                        for (var j = 0; j < t.length; j++)
                            if (t[j] === fieldName || fieldName.toLowerCase() === t[j] + " desc")
                                return this;
                    }
                }
            }

            this.queries.push({
                fn: "onSortBy",
                e: {
                    fieldName: fieldName,
                    comparer: comparer,
                    direction: order
                }
            });

            return this;
        },
		
        sortByDesc: function (fieldName) {
            return this.sortBy(fieldName, BoldBIDashboard.sortOrder.Descending);
        },
		
        group: function (fieldName) {
            this.sortBy(fieldName, null, true);

            this.queries.push({
                fn: "onGroup",
                e: {
                    fieldName: fieldName
                }
            });
            return this;
        },
	
        page: function (pageIndex, pageSize) {
            this.queries.push({
                fn: "onPage",
                e: {
                    pageIndex: pageIndex,
                    pageSize: pageSize
                }
            });
            return this;
        },
	
        range: function (start, end) {
            if (typeof start !== "number" || typeof end !== "number")
                throwError("Query() - range : Arguments type should be a number");

            this.queries.push({
                fn: "onRange",
                e: {
                    start: start,
                    end: end
                }
            });
            return this;
        },
	

        take: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Take : Argument type should be a number");

            this.queries.push({
                fn: "onTake",
                e: {
                    nos: nos
                }
            });
            return this;
        },
	
        skip: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Skip : Argument type should be a number");

            this.queries.push({
                fn: "onSkip",
                e: { nos: nos }
            });
            return this;
        },
	
        select: function (fieldNames) {
            if (typeof fieldNames === "string")
                fieldNames = [].slice.call(arguments, 0);

            if (!(fieldNames instanceof Array)) {
                throwError("Query() - Select : Argument type should be String or Array");
            }

            this.queries.push({
                fn: "onSelect",
                e: { fieldNames: fieldNames }
            });
            return this;
        },
	
        hierarchy: function (query, selectorFn) {
            if (!query || !(query instanceof BoldBIDashboard.Query))
                throwError("Query() - hierarchy : query must be instance of BoldBIDashboard.Query");

            if (typeof selectorFn === "function")
                this._subQuerySelector = selectorFn;

            this._subQuery = query;
            return this;
        },
	
        foreignKey: function (key) {
            if (typeof key === "string")
                this._fKey = key;

            return this;
        },
	
        requiresCount: function () {
            this._requiresCount = true;

            return this;
        },
        //type - sum, avg, min, max
        aggregate: function (type, field) {
            this.queries.push({
                fn: "onAggregates",
                e: { field: field, type: type }
            });
        }
    };

    BoldBIDashboard.Adaptor = function (ds) {
        this.dataSource = ds;
        this.pvt = {};
		this.init.apply(this, [].slice.call(arguments, 1));
    };

    BoldBIDashboard.Adaptor.prototype = {
        options: {
            from: "table",
            requestType: "json",
            sortBy: "sorted",
            select: "select",
            skip: "skip",
            group: "group",
            take: "take",
            search: "search",
            count: "requiresCounts",
            where: "where",
            aggregates: "aggregates"
        },
        init: function () {
        },
        extend: function (overrides) {
            var fn = function (ds) {
                this.dataSource = ds;

                if (this.options)
                    this.options = bbdesigner$.extend({}, this.options);
				this.init.apply(this, [].slice.call(arguments, 0));

                this.pvt = {};
            };
            fn.prototype = new this.type();
            fn.prototype.type = fn;

            var base = fn.prototype.base = {};
            for (var p in overrides) {
                if (fn.prototype[p])
                    base[p] = fn.prototype[p];
            }
            bbdesigner$.extend(true, fn.prototype, overrides);
            return fn;
        },
        processQuery: function (dm, query) {
            // this needs to be overridden
        },
        processResponse: function (data, ds, query, xhr) {
            return data;
        },
        convertToQueryString: function (req, query, dm) {
            return bbdesigner$.param(req);
        },
        type: BoldBIDashboard.Adaptor
    };

    BoldBIDashboard.UrlAdaptor = new BoldBIDashboard.Adaptor().extend({
        processQuery: function (dm, query, hierarchyFilters) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
                aggregates = filterQueries(query.queries, "onAggregates"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params,
                url = dm.dataSource.url, tmp, skip, take = null,
                op = this.options;

            var r = {
                sorted: [],
                grouped: [],
                filters: [],
                searches: [],
                aggregates: []
            };

            // calc Paging & Range
            if (singles["onPage"]) {
                tmp = singles["onPage"];
                skip = getValue(tmp.pageIndex, query);
                take = getValue(tmp.pageSize, query);
				skip = (skip - 1) * take;
            } else if (singles["onRange"]) {
                tmp = singles["onRange"];
                skip = tmp.start;
                take = tmp.end - tmp.start;
            }

            // Sorting
            for (var i = 0; i < sorted.length; i++) {
                tmp = getValue(sorted[i].e.fieldName, query);

                r.sorted.push(callAdaptorFunc(this, "onEachSort", { name: tmp, direction: sorted[i].e.direction }, query));
            }

            // hierarchy
            if (hierarchyFilters) {
                tmp = this.getFiltersFrom(hierarchyFilters, query);
                if (tmp)
                    r.filters.push(callAdaptorFunc(this, "onEachWhere", tmp.toJSON(), query));
            }

            // Filters
            for (var i = 0; i < filters.length; i++) {
                r.filters.push(callAdaptorFunc(this, "onEachWhere", filters[i].e.toJSON(), query));

                for (var prop in r.filters[i]) {
                    if (isNull(r[prop]))
                        delete r[prop];
                }
            }

            // Searches
            for (var i = 0; i < searchs.length; i++) {
                tmp = searchs[i].e;
                r.searches.push(callAdaptorFunc(this, "onEachSearch", {
                    fields: tmp.fieldNames,
                    operator: tmp.operator,
                    key: tmp.searchKey,
                    ignoreCase: tmp.ignoreCase
                }, query));
            }

            // Grouping
            for (var i = 0; i < grouped.length; i++) {
                r.grouped.push(getValue(grouped[i].e.fieldName, query));
            }

            // aggregates
            for (var i = 0; i < aggregates.length; i++) {
                tmp = aggregates[i].e; 
                r.aggregates.push({ type: tmp.type, field: getValue(tmp.field, query) });
            }

            var req = {};
            req[op.from] = query._fromTable;
            if (op.expand) req[op.expand] = query._expands;
            req[op.select] = singles["onSelect"] ? callAdaptorFunc(this, "onSelect", getValue(singles["onSelect"].fieldNames, query), query) : "";
            req[op.count] = query._requiresCount ? callAdaptorFunc(this, "onCount", query._requiresCount, query) : "";
            req[op.search] = r.searches.length ? callAdaptorFunc(this, "onSearch", r.searches, query) : "";
            req[op.skip] = singles["onSkip"] ? callAdaptorFunc(this, "onSkip", getValue(singles["onSkip"].nos, query), query) : "";
            req[op.take] = singles["onTake"] ? callAdaptorFunc(this, "onTake", getValue(singles["onTake"].nos, query), query) : "";
            req[op.where] = r.filters.length || r.searches.length ? callAdaptorFunc(this, "onWhere", r.filters, query) : "";
            req[op.sortBy] = r.sorted.length ? callAdaptorFunc(this, "onSortBy", r.sorted, query) : "";
            req[op.group] = r.grouped.length ? callAdaptorFunc(this, "onGroup", r.grouped, query) : "";
            req[op.aggregates] = r.aggregates.length ? callAdaptorFunc(this, "onAggregates", r.aggregates, query) : "";
			req["param"] = [];
			
            // Params
            for (var i = 0; tmp = params[i]; i++) {
                if (req[tmp.key]) throwError("BoldBIDashboard.Query: Custom Param is conflicting other request arguments");

                if(dm.adaptor instanceof BoldBIDashboard.WebMethodAdaptor) {                  
                    var webkey = tmp.key, webvalue = tmp.value,  obj = {};                    
                    if (tmp.fn) 
                        webvalue = tmp.fn.call(query, tmp.key, query, dm);  
                    obj[webkey] = webvalue;
                    req["param"].push(obj);
                }
                else {
                    req[tmp.key] = tmp.value;
                    if (tmp.fn)
                        req[tmp.key] = tmp.fn.call(query, tmp.key, query, dm);
                }                
            }

            // cleanup
            for (var prop in req) {
                if (isNull(req[prop]) || req[prop] === "" || req[prop].length === 0)
                    delete req[prop];
            }

            if (!(op.skip in req && op.take in req) && take !== null) {
                req[op.skip] = callAdaptorFunc(this, "onSkip", skip, query);
                req[op.take] = callAdaptorFunc(this, "onTake", take, query);
            }
            var p = this.pvt;
            this.pvt = {};

            if (this.options.requestType === "json") {
                return {
                    data: JSON.stringify(req),
                    url: url,
                    ejPvtData: p,
                    type: "POST",
                    contentType: "application/json; charset=utf-8"
                }
            }
            tmp = this.convertToQueryString(req, query, dm);
            tmp =  (dm.dataSource.url.indexOf("?")!== -1 ? "&" : "/") + tmp;
            return {
                type: "GET",
                url: tmp.length ? url.replace(/\/*$/, tmp) : url,
                ejPvtData: p
            };
        },
        convertToQueryString: function (req, query, dm) {
            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1)
                return bbdesigner$.param(req);
            return "?" + bbdesigner$.param(req);
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request.ejPvtData || {};
			var groupDs= data.groupDs;
			if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            var d = JSON.parse(request.data);
            if (d && d.action === "batch" && data.added) {
                changes.added = data.added;
                return changes;
            }
            if (data.d)
                data = data.d;

            if (pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, args = {}, fn, res = {};
                if ('count' in data) args.count = data.count;
                if (data["result"]) args.result = data.result;
                if (data["aggregate"]) data = data.aggregate;
                for (var i = 0; i < agg.length; i++) {
                    fn = BoldBIDashboard.aggregates[agg[i].type];
                    if (fn)
                        res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                }
                args["aggregates"] = res;
                data = args;
            }

            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups, args = {};
                if ('count' in data) args.count = data.count;
                if (data["aggregates"]) args.aggregates = data.aggregates;
                if (data["result"]) data = data.result;
                for (var i = 0; i < groups.length; i++){
                    var level=null;
                    if(!BoldBIDashboard.isNullOrUndefined(groupDs))
                        groupDs = BoldBIDashboard.group(groupDs, groups[i]);
                    data = BoldBIDashboard.group(data, groups[i], pvt.aggregates,level,groupDs);
                }
                if (args.count != undefined)
                    args.result = data;
                else
                    args = data;
                return args;
            }
            return data;
        },
        onGroup: function (e) {
            this.pvt.groups = e;
        },
        onAggregates: function (e) {
            this.pvt.aggregates = e;
        },
        batchRequest: function (dm, changes, e) {
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    changed: changes.changed,
                    added: changes.added,
                    deleted: changes.deleted,
                    action: "batch",
                    table: e.url,
                    key: e.key
                })
            };
        },
        beforeSend: function (dm, request) {
        },
        insert: function (dm, data, tableName) {
            return {
                url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: data,
                    table: tableName,
                    action: "insert"
                })
            };
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    key: value,
                    keyColumn: keyField,
                    table: tableName,
                    action: "remove"
                })
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: value,
                    action: "update",
                    keyColumn: keyField,
                    key: value[keyField],
                    table: tableName
                })
            };
        },
        getFiltersFrom: function (data, query) {
            if (!(data instanceof Array) || !data.length)
                throwError("BoldBIDashboard.SubQuery: Array of key values required");
            var key = query._fKey, value, prop = key, pKey = query._key, predicats = [],
                isValues = typeof data[0] !== "object";

            if (typeof data[0] !== "object") prop = null;

            for (var i = 0; i < data.length; i++) {
                value = !isValues ? BoldBIDashboard.pvt.getObject(pKey || prop, data[i]) : data[i];
                predicats.push(new BoldBIDashboard.Predicate(key, "==", value));
            }

            return BoldBIDashboard.Predicate.or(predicats);
        }
    });
    BoldBIDashboard.WebMethodAdaptor = new BoldBIDashboard.UrlAdaptor().extend({
        processQuery: function (dm, query, hierarchyFilters) {
            var obj = BoldBIDashboard.UrlAdaptor.prototype.processQuery(dm, query, hierarchyFilters); 
            var data = BoldBIDashboard.parseJSON(obj.data), result = {};
            // Param
            if (data.param) {
                for(var i=0; i< data.param.length; i++){
                    var param = data.param[i], key = Object.keys(param)[0];
                    result[key] = param[key];                
                }
            }            
            result["value"] = data;
            return {
                data: JSON.stringify(result),
                url: obj.url,
                ejPvtData: obj.ejPvtData,
                type: "POST",
                contentType: "application/json; charset=utf-8"
            }
        }
    });
    BoldBIDashboard.CacheAdaptor = new BoldBIDashboard.UrlAdaptor().extend({
        init: function (adaptor, timeStamp, pageSize) {
            if (!BoldBIDashboard.isNullOrUndefined(adaptor)) {
                this.cacheAdaptor = adaptor;
            }
            this.pageSize = pageSize;
            this.guidId = BoldBIDashboard.getGuid("cacheAdaptor");
            var obj = { keys: [], results: [] };
            if (window.localStorage)
                window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            var guid = this.guidId;
            if (!BoldBIDashboard.isNullOrUndefined(timeStamp)) {
                setInterval(function () {
                    var data = BoldBIDashboard.parseJSON(window.localStorage.getItem(guid));
                    var forDel = [];
                    for (var i = 0; i < data.results.length; i++) {
                        data.results[i].timeStamp = new Date() - new Date(data.results[i].timeStamp)
                        if (new Date() - new Date(data.results[i].timeStamp) > timeStamp)
                            forDel.push(i);
                    }
                    var d = forDel;
                    for (var i = 0; i < forDel.length; i++) {
                        data.results.splice(forDel[i], 1);
                        data.keys.splice(forDel[i], 1);
                    }
                    window.localStorage.removeItem(guid);
                    window.localStorage.setItem(guid, JSON.stringify(data));
                }, timeStamp);
            }
        },
        generateKey: function (url, query) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
				pageQuery = filterQueries(query.queries, "onPage"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params;
            var key = url;
            if (singles["onPage"])
              key += singles["onPage"].pageIndex;
              sorted.forEach(function (obj) {
                   key += obj.e.direction + obj.e.fieldName;
              });
                grouped.forEach(function (obj) {
                    key += obj.e.fieldName;
                });
                searchs.forEach(function (obj) {
                    key += obj.e.searchKey;
                });
            
            for (var filter = 0; filter < filters.length; filter++) {
                var currentFilter = filters[filter];
                if (currentFilter.e.isComplex) {
                    var newQuery = query.clone();
                    newQuery.queries = [];
                    for (var i = 0; i < currentFilter.e.predicates.length; i++) {
                        newQuery.queries.push({ fn: "onWhere", e: currentFilter.e.predicates[i], filter: query.queries.filter });
                    }
                    key += currentFilter.e.condition + this.generateKey(url, newQuery);
                }
                else
                    key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value
            }
            return key;
        },
        processQuery: function (dm, query, hierarchyFilters) {
            var key = this.generateKey(dm.dataSource.url, query);
            var cachedItems;
            if (window.localStorage)
                cachedItems = BoldBIDashboard.parseJSON(window.localStorage.getItem(this.guidId));
            var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
            if (data != null && !this._crudAction && !this._insertAction) {
                return data;
            }
            this._crudAction = null; this._insertAction = null;
            return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0))
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            if (this._insertAction || (request && this.cacheAdaptor.options.batch && request.url.endsWith(this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post")) {
                return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
            }
            var data = this.cacheAdaptor.processResponse.apply(this, [].slice.call(arguments, 0));
            var key = this.generateKey(ds.dataSource.url, query)
            var obj = {};
            if (window.localStorage)
                obj = BoldBIDashboard.parseJSON(window.localStorage.getItem(this.guidId));
            var index = bbdesigner$.inArray(key, obj.keys);
            if (index != -1) {
                obj.results.splice(index, 1);
                obj.keys.splice(index, 1);
            }
            obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count }
            while (obj.results.length > this.pageSize) {
                obj.results.splice(0, 1);
                obj.keys.splice(0, 1);
            }
            window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            return data;
        },
        update: function (dm, keyField, value, tableName) {
            this._crudAction = true;
            return this.cacheAdaptor.update(dm, keyField, value, tableName);
        },
        insert: function (dm, data, tableName) {
            this._insertAction = true;
            return this.cacheAdaptor.insert(dm, data, tableName);
        },
        remove: function (dm, keyField, value, tableName) {
            this._crudAction = true;
            return this.cacheAdaptor.remove(dm, keyField, value, tableName);
        },
        batchRequest: function (dm, changes, e) {
            return this.cacheAdaptor.batchRequest(dm, changes, e);
        }
    });
    var filterQueries = function (queries, name) {
        return queries.filter(function (q) {
            return q.fn === name;
        }) || [];
    };
    var filterQueryLists = function (queries, singles) {
        var filtered = queries.filter(function (q) {
            return singles.indexOf(q.fn) !== -1;
        }), res = {};
        for (var i = 0; i < filtered.length; i++) {
            if (!res[filtered[i].fn])
                res[filtered[i].fn] = filtered[i].e;
        }
        return res;
    };
    var callAdaptorFunc = function (obj, fnName, param, param1) {
        if (obj[fnName]) {
            var res = obj[fnName](param, param1);
            if (!isNull(res)) param = res;
        }
        return param;
    };

    BoldBIDashboard.ODataAdaptor = new BoldBIDashboard.UrlAdaptor().extend({
        options: {
            requestType: "get",
            accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
            multipartAccept: "multipart/mixed",
            sortBy: "$orderby",
            select: "$select",
            skip: "$skip",
            take: "$top",
            count: "$inlinecount",
            where: "$filter",
            expand: "$expand",
            batch: "$batch",
            changeSet: "--changeset_",
            batchPre: "batch_",
            contentId: "Content-Id: ",
            batchContent: "Content-Type: multipart/mixed; boundary=",
            changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
            batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
        },
        onEachWhere: function (filter, requiresCast) {
            return filter.isComplex ? this.onComplexPredicate(filter, requiresCast) : this.onPredicate(filter, requiresCast);
        },
        onPredicate: function (pred, query, requiresCast) {
            var returnValue = "",
                operator,guid,
                val = pred.value,
                type = typeof val,
                field = this._p(pred.field);

            if (val instanceof Date)
                val = "datetime'" + dateSerialize(val) + "'";

            if (type === "string") {
                val = "'" + val + "'";

                if (requiresCast) {
                    field = "cast(" + field + ", 'Edm.String')";
                }
                if (BoldBIDashboard.isGUID(val))
                    guid = 'guid';
                if (pred.ignoreCase) {
                    !guid ? field = "tolower(" + field + ")" : field;
                    val = val.toLowerCase();
                }
            }

            operator = BoldBIDashboard.data.odBiOperator[pred.operator];
            if (operator) {
                returnValue += field;
                returnValue += operator;
                if (guid)
                    returnValue += guid;
                return returnValue + val;
            }

            operator = BoldBIDashboard.data.odUniOperator[pred.operator];
            if (!operator || type !== "string") return "";

            if (operator === "substringof") {
                var t = val;
                val = field;
                field = t;
            }

            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) returnValue += guid;
            returnValue += val + ")";

            return returnValue;
        },
        onComplexPredicate: function (pred, requiresCast) {
            var res = [];
            for (var i = 0; i < pred.predicates.length; i++) {
                res.push("(" + this.onEachWhere(pred.predicates[i], requiresCast) + ")");
            }
            return res.join(" " + pred.condition + " ");
        },
        onWhere: function (filters) {
            if (this.pvt.searches)
                filters.push(this.onEachWhere(this.pvt.searches, null, true));

            return filters.join(" and ");
        },
        onEachSearch: function (e) {
            if (e.fields.length === 0)
                throwError("Query() - Search : oData search requires list of field names to search");

            var filter = this.pvt.searches || [];
            for (var i = 0; i < e.fields.length; i++) {
                filter.push(new BoldBIDashboard.Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
            }
            this.pvt.searches = filter;
        },
        onSearch: function (e) {
            this.pvt.searches = BoldBIDashboard.Predicate.or(this.pvt.searches);
            return "";
        },
        onEachSort: function (e) {
            var res = [];
            if (e.name instanceof Array) {
                for (var i = 0; i < e.name.length; i++)
                    res.push(this._p(e.name[i]));
            } else
                res.push(this._p(e.name) + (e.direction === "descending" ? " desc" : ""));

            return res.join(",");
        },
        onSortBy: function (e) {
            return e.reverse().join(",");
        },
        onGroup: function (e) {
            this.pvt.groups = e;
            return "";
        },
        onSelect: function (e) {
            for (var i = 0; i < e.length; i++)
                e[i] = this._p(e[i]);

            return e.join(',');
        },
        onAggregates: function(e){
            this.pvt.aggregates = e;
            return "";
        },
        onCount: function (e) {
            return e === true ? "allpages" : "";
        },
        beforeSend: function (dm, request, settings) {
            if (settings.url.endsWith(this.options.batch) && settings.type.toLowerCase() === "post") {
                request.setRequestHeader("Accept", oData.multipartAccept);
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.overrideMimeType("text/plain; charset=x-user-defined");
            }

            if (!dm.dataSource.crossDomain) {
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.setRequestHeader("MaxDataServiceVersion", "2.0");
            }
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            if (!BoldBIDashboard.isNullOrUndefined(data.d)) {
                var dataCopy = (query && query._requiresCount) ? data.d.results : data.d;
                if (!BoldBIDashboard.isNullOrUndefined(dataCopy))
                    for (var i = 0; i < dataCopy.length; i++) {
                        !BoldBIDashboard.isNullOrUndefined(dataCopy[i].__metadata) && delete dataCopy[i].__metadata;
                    }
            }
            var pvt = request && request.ejPvtData;
            if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx, jsonObj;
                guid = guid.substring(guid.indexOf("=batchresponse") + 1);
                data = data.split(guid);
                if (data.length < 2) return;

                data = data[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
                data.replace(exVal[0], "");

                var changeGuid = exVal[1];
                data = data.split(changeGuid);

                for (var i = data.length; i > -1; i--) {
                    if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
                        continue;

                    cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

                    if (changes.added[cIdx]) {
                        jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
                        bbdesigner$.extend(changes.added[cIdx], this.processResponse(jsonObj));
                    }
                }
                return changes;
            }
            var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null, aggregateResult = {};
            version = (version && parseInt(version, 10)) || 2;

            if (query && query._requiresCount) {
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
                if (data.d) data = data.d;
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
            }

            if (version === 3 && data.value) data = data.value;
            if (data.d) data = data.d;
            if (version < 3 && data.results) data = data.results;

            if (pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, args = {}, fn, res = {};
                for (var i = 0; i < agg.length; i++) {
                    fn = BoldBIDashboard.aggregates[agg[i].type];
                    if (fn)
                        res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                }
                aggregateResult = res;
            }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (var i = 0; i < groups.length; i++)
                    data = BoldBIDashboard.group(data, groups[i], pvt.aggregates);
            }
            return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
        },
        convertToQueryString: function (req, query, dm) {
            var res = [], tableName = req.table || "";
            delete req.table;

            if (dm.dataSource.requiresFormat)
                req["$format"] = "json";

            for (var prop in req)
                res.push(prop + "=" + req[prop]);

            res = res.join("&");

            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName)
                return res;

            return res.length ? tableName + "?" + res : tableName || "";
        },
        insert: function (dm, data, tableName) {
            return {
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : ''),
                data: JSON.stringify(data)
            }
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value + ')'
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value[keyField] + ')',
                data: JSON.stringify(value),
                accept: this.options.accept
            };
        },
        batchRequest: function (dm, changes, e) {
            var initialGuid = e.guid = BoldBIDashboard.getGuid(oData.batchPre);
            var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
            var args = {
                url: e.url,
                key: e.key,
                cid: 1,
                cSet: BoldBIDashboard.getGuid(oData.changeSet)
            };
            var req = "--" + initialGuid + "\n";

            req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";

            this.pvt.changeSet = 0;

            req += this.generateInsertRequest(changes.added, args);
            req += this.generateUpdateRequest(changes.changed, args);
            req += this.generateDeleteRequest(changes.deleted, args);

            req += args.cSet + "--\n";
            req += "--" + initialGuid + "--";

            return {
                type: "POST",
                url: url,
                contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
                data: req
            };
        },
        generateDeleteRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "DELETE ";
                req += e.url + "(" + arr[i][e.key] + ") HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n";
            }

            return req + "\n";
        },
        generateInsertRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "POST ";
                req += e.url + " HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n";
            }

            return req;
        },
        generateUpdateRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "PUT ";
                req += e.url + "(" + arr[i][e.key] + ")" + " HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n\n";
            }

            return req;
        },
        _p: function (prop) {
            return prop.replace(/\./g, "/");
        }
    });
    BoldBIDashboard.ODataV4Adaptor = new BoldBIDashboard.ODataAdaptor().extend({
        options: {
            requestType: "get",
            accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
            multipartAccept: "multipart/mixed",
            sortBy: "$orderby",
            select: "$select",
            skip: "$skip",
            take: "$top",
            count: "$count",
            search: "$search",
            where: "$filter",
            expand: "$expand",
            batch: "$batch",
            changeSet: "--changeset_",
            batchPre: "batch_",
            contentId: "Content-Id: ",
            batchContent: "Content-Type: multipart/mixed; boundary=",
            changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
            batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
        },
        onCount: function (e) {
            return e === true ? "true" : "";
        },
        onPredicate: function (pred, query, requiresCast) {
            var returnValue = "",
                val = pred.value,
                isDate = val instanceof Date;               

                returnValue = this.base.onPredicate.call(this, pred, query, requiresCast);

                if (isDate)
                    returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");

            return returnValue;
        },
        onEachSearch: function (e) {
			 var search = this.pvt.search || [];
			 search.push(e.key);
			 this.pvt.search = search;
		},
		onSearch: function (e) {
			 return this.pvt.search.join(" OR ");
		},
        beforeSend: function (dm, request, settings) {
 
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request && request.ejPvtData;
            if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx, jsonObj;
                guid = guid.substring(guid.indexOf("=batchresponse") + 1);
                data = data.split(guid);
                if (data.length < 2) return;

                data = data[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
                data.replace(exVal[0], "");

                var changeGuid = exVal[1];
                data = data.split(changeGuid);

                for (var i = data.length; i > -1; i--) {
                   if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
                        continue;

                    cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

                    if (changes.added[cIdx]) {
                        jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
                        bbdesigner$.extend(changes.added[cIdx], this.processResponse(jsonObj));
                    }
                }
                return changes;
           }
            var count = null, aggregateResult = {};
            if (query && query._requiresCount)
                if ('@odata.count' in data) count = data['@odata.count'];

           data = data.value;
           if (pvt && pvt.aggregates && pvt.aggregates.length) {
               var agg = pvt.aggregates, args = {}, fn, res = {};
               for (var i = 0; i < agg.length; i++) {
                   fn = BoldBIDashboard.aggregates[agg[i].type];
                   if (fn)
                       res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
               }
               aggregateResult = res;
           }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (var i = 0; i < groups.length; i++)
                    data = BoldBIDashboard.group(data, groups[i], pvt.aggregates);
            }
            return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
        },
    });
    BoldBIDashboard.JsonAdaptor = new BoldBIDashboard.Adaptor().extend({
        processQuery: function (ds, query) {
            var result = ds.dataSource.json.slice(0), count = result.length, cntFlg = true, ret, key, agg = {};

            for (var i = 0; i < query.queries.length; i++) {
                key = query.queries[i];
                ret = this[key.fn].call(this, result, key.e, query);
                if (key.fn == "onAggregates")
                    agg[key.e.field + " - " + key.e.type] = ret;
                else
                result = ret !== undefined ? ret : result;

                if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") cntFlg = false;

                if (cntFlg) count = result.length;
            }

            if (query._requiresCount) {
                result = {
                    result: result,
                    count: count,
                    aggregates: agg
                };
            }

            return result;
        },
        batchRequest: function (dm, changes, e) {
            var i;
            for (i = 0; i < changes.added.length; i++)
                this.insert(dm, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                this.update(dm, e.key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                this.remove(dm, e.key, changes.deleted[i]);
            return changes;
        },
        onWhere: function (ds, e) {
            if (!ds) return ds;

            return ds.filter(function (obj) {
                return e.validate(obj);
            });
        },
        onAggregates: function(ds, e){
            var fn = BoldBIDashboard.aggregates[e.type];
            if (!ds || !fn || ds.length == 0) return null;
            return fn(ds, e.field);
        },
        onSearch: function (ds, e) {
            if (!ds || !ds.length) return ds;

            if (e.fieldNames.length === 0) {
                BoldBIDashboard.pvt.getFieldList(ds[0], e.fieldNames);
            }

            return ds.filter(function (obj) {
                for (var j = 0; j < e.fieldNames.length; j++) {
                    if (e.comparer.call(obj, BoldBIDashboard.pvt.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase))
                        return true;
                }
                return false;
            });
        },
        onSortBy: function (ds, e, query) {
            if (!ds) return ds;
            var fnCompare, field = getValue(e.fieldName, query);
            if (!field)
                return ds.sort(e.comparer);

            if (field instanceof Array) {
                field = field.slice(0);

                for (var i = field.length - 1; i >= 0; i--) {
                    if (!field[i]) continue;

                    fnCompare = e.comparer;

                    if (field[i].endsWith(" desc")) {
                        fnCompare = BoldBIDashboard.pvt.fnSort(BoldBIDashboard.sortOrder.Descending);
                        field[i] = field[i].replace(" desc", "");
                    }

                    ds = stableSort(ds, field[i], fnCompare, []);
                }
                return ds;
            }
            return stableSort(ds, field, e.comparer, query ? query.queries : []);
        },
        onGroup: function (ds, e, query) {
            if (!ds) return ds;
            var aggQuery = filterQueries(query.queries, "onAggregates"), agg = [];
            if (aggQuery.length) {
                var tmp;
                for (var i = 0; i < aggQuery.length; i++) {
                    tmp = aggQuery[i].e;
                    agg.push({ type: tmp.type, field: getValue(tmp.field, query) });
                }
            }
            return BoldBIDashboard.group(ds, getValue(e.fieldName, query), agg);
        },
        onPage: function (ds, e, query) {
            var size = getValue(e.pageSize, query),
                start = (getValue(e.pageIndex, query) - 1) * size, end = start + size;

            if (!ds) return ds;

            return ds.slice(start, end);
        },
        onRange: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.start), getValue(e.end));
        },
        onTake: function (ds, e) {
            if (!ds) return ds;

            return ds.slice(0, getValue(e.nos));
        },
        onSkip: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.nos));
        },
        onSelect: function (ds, e) {
            if (!ds) return ds;
            return BoldBIDashboard.select(ds, getValue(e.fieldNames));
        },
        insert: function (dm, data) {
            return dm.dataSource.json.push(data);
        },
        remove: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i;
            if (typeof value === "object")
                value = value[keyField];
            for (i = 0; i < ds.length; i++) {
                if (ds[i][keyField] === value) break;
            }

            return i !== ds.length ? ds.splice(i, 1) : null;
        },
        update: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i, key = value[keyField];

            for (i = 0; i < ds.length; i++) {
                if (ds[i][keyField] === key) break;
            }

            return i < ds.length ? bbdesigner$.extend(ds[i], value) : null;
        }
    });
    BoldBIDashboard.ForeignKeyAdaptor = function (data, type) {
        var foreignObj = new BoldBIDashboard[type || "JsonAdaptor"]().extend({
            init: function () {
                this.foreignData = [];
                this.key = [];
                this.adaptorType = type;
                this.value = [];
                this.keyField = [];
                var dataObj = data;
                for (var i = 0; i < dataObj.length; i++) {
                    this.foreignData[i] = dataObj[i].dataSource;
                    this.key[i] = dataObj[i].foreignKeyField;
                    this.value[i] = dataObj[i].foreignKeyValue;
                    this.keyField[i] = dataObj[i].field || dataObj[i].foreignKeyField;
                    this.initial = true;
                }
            },
            processQuery: function (ds, query) {
                var data = ds.dataSource.json;
                if (this.initial) {
                    for (var i = 0; i < data.length; i++) {
                        var proxy = this;
                        for (var j = 0; j < this.foreignData.length; j++) {
                            this.foreignData[j].filter(function (col) { //filtering the foreignKey dataSource
                                if (BoldBIDashboard.getObject(proxy.key[j], col) == BoldBIDashboard.getObject(proxy.keyField[j], data[i]))
                                    data[i][proxy.value[j]] = BoldBIDashboard.getObject(proxy.value[j], col);
                            });
                        }
                    }
                    this.initial = false;
                }
                return this.base.processQuery.apply(this, [ds, query]);
            },
            setValue: function (value) {
                for (var i = 0; i < this.foreignData.length; i++) {
                    var proxy = this;
                    var keyValue = value[this.value[i]];
                    if (typeof keyValue == "string" && !isNaN(keyValue))
                        keyValue = BoldBIDashboard.parseFloat(keyValue);
                    var data = bbdesigner$.grep(proxy.foreignData[i], function (e) {
                        return e[proxy.value[i]] == keyValue;
                    })[0];
                    if (BoldBIDashboard.isNullOrUndefined(data)) {
                        data = bbdesigner$.grep(proxy.foreignData[i], function (e) {
                            return e[proxy.key[i]] == keyValue;
                        })[0];
                        BoldBIDashboard.createObject(proxy.value[i], BoldBIDashboard.getObject(this.value[i], data), value);
                    }
                    BoldBIDashboard.createObject(this.keyField[i], BoldBIDashboard.getObject(this.key[i], data), value);

                }
            },
            insert: function (dm, data, tableName) {
                this.setValue(data);
                return {
                    url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                    data: JSON.stringify({
                        value: data,
                        table: tableName,
                        action: "insert"
                    })
                };
            },
            update: function (dm, keyField, value, tableName) {
                this.setValue(value);
                BoldBIDashboard.JsonAdaptor.prototype.update(dm, keyField, value, tableName);
                return {
                    type: "POST",
                    url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                    data: JSON.stringify({
                        value: value,
                        action: "update",
                        keyColumn: keyField,
                        key: value[keyField],
                        table: tableName
                    })
                };
            }
        });
        bbdesigner$.extend(this, new foreignObj());
        return this;
    }
    BoldBIDashboard.remoteSaveAdaptor = new BoldBIDashboard.JsonAdaptor().extend({
        beforeSend: BoldBIDashboard.UrlAdaptor.prototype.beforeSend,
        insert: BoldBIDashboard.UrlAdaptor.prototype.insert,
        update: BoldBIDashboard.UrlAdaptor.prototype.update,
        remove: BoldBIDashboard.UrlAdaptor.prototype.remove,
        batchRequest: function (dm, changes, e) {
            var i;
            for (i = 0; i < changes.added.length; i++)
                BoldBIDashboard.JsonAdaptor.prototype.insert(dm, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                BoldBIDashboard.JsonAdaptor.prototype.update(dm, e.key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                BoldBIDashboard.JsonAdaptor.prototype.remove(dm, e.key, changes.deleted[i]);
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    changed: changes.changed,
                    added: changes.added,
                    deleted: changes.deleted,
                    action: "batch",
                    table: e.url,
                    key: e.key
                })
            };
        }
    });
    BoldBIDashboard.WebApiAdaptor = new BoldBIDashboard.ODataAdaptor().extend({
        insert: function (dm, data, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.url,
                data: JSON.stringify(data)
            };
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url + "/" + value,
                data: JSON.stringify(value)
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url,
                data: JSON.stringify(value)
            };
        },
        processResponse: function (data, ds, query, xhr, request, changes) {

            var pvt = request && request.ejPvtData;
            if (request && request.type.toLowerCase() != "post") {
                var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null, aggregateResult = {};
                version = (version && parseInt(version, 10)) || 2;

                if (query && query._requiresCount) {
                     if (!isNull(data.Count)) count = data.Count;
                }

                if (version < 3 && data.Items) data = data.Items;

                if (pvt && pvt.aggregates && pvt.aggregates.length) {
                    var agg = pvt.aggregates, args = {}, fn, res = {};
                    for (var i = 0; i < agg.length; i++) {
                        fn = BoldBIDashboard.aggregates[agg[i].type];
                        if (fn)
                            res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                    }
                    aggregateResult = res;
                }
                if (pvt && pvt.groups && pvt.groups.length) {
                    var groups = pvt.groups;
                    for (var i = 0; i < groups.length; i++)
                        data = BoldBIDashboard.group(data, groups[i], pvt.aggregates);
                }
                return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
            }
        }
    });
    var getValue = function (value, inst) {
        if (typeof value === "function")
            return value.call(inst || {});
        return value;
    }

    BoldBIDashboard.TableModel = function (name, jsonArray, dataManager, modelComputed) {
        if (!instance(this, BoldBIDashboard.TableModel))
            return new BoldBIDashboard.TableModel(jsonArray);

        if (!instance(jsonArray, Array))
            throwError("BoldBIDashboard.TableModel - Json Array is required");

        var rows = [], model, dirtyFn = bbdesigner$proxy(setDirty, this);

        for (var i = 0; i < jsonArray.length; i++) {
            model = new BoldBIDashboard.Model(jsonArray[i], this);
            model.state = "unchanged";
            model.on("stateChange", dirtyFn);
            if (modelComputed)
                model.computes(modelComputed);
            rows.push(model);
        }

        this.name = name || "table1";

        this.rows = BoldBIDashboard.NotifierArray(rows);
        this._deleted = [];

        this._events = bbdesigner$({});

        this.dataManager = dataManager;

        this._isDirty = false;

        return this;
    };

    BoldBIDashboard.TableModel.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },

        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },

        setDataManager: function (dataManager) {
            this.dataManagar = dataManager;
        },

        saveChanges: function () {
            if (!this.dataManager || !instance(this.dataManager, BoldBIDashboard.DataManager))
                throwError("BoldBIDashboard.TableModel - saveChanges : Set the dataManager using setDataManager function");

            if (!this.isDirty())
                return;

            var promise = this.dataManager.saveChanges(this.getChanges(), this.key, this.name);

            promise.done(bbdesigner$proxy(function (changes) {
                var rows = this.toArray();
                for (var i = 0; i < rows.length; i++) {
                    if (rows.state === "added") {
                        rows.set(this.key, changes.added.filter(function (e) {
                            return e[this.key] === rows.get(this.key);
                        })[0][this.key]);
                    }
                    rows[i].markCommit();
                }

                this._events.triggerHandler({ type: "save", table: this });

            }, this));

            promise.fail(bbdesigner$proxy(function (e) {
                this.rejectChanges();
                this._events.triggerHandler({ type: "reject", table: this, error: e });
            }, this));

            this._isDirty = false;
        },

        rejectChanges: function () {
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++)
                rows[i].revert(true);

            this._isDirty = false;
            this._events.triggerHandler({ type: "reject", table: this });
        },

        insert: function (json) {
            var model = new BoldBIDashboard.Model(json);
            model._isDirty = this._isDirty = true;

            this.rows.push(model);

            this._events.triggerHandler({ type: "insert", model: model, table: this });
        },

        update: function (value) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var row = value, model, key = this.key, keyValue = row[key];

            model = this.rows.array.filter(function (obj) {
                return obj.get(key) === keyValue;
            });

            model = model[0];

            for (var col in row) {
                model.set(col, row[col]);
            }

            this._isDirty = true;

            this._events.triggerHandler({ type: "update", model: model, table: this });
        },

        remove: function (key) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var field = this.key;

            var index = -1, model;

            if (key && typeof key === "object") {
                key = key[field] !== undefined ? key[field] : key.get(field);
            }

            for (var i = 0; i < this.rows.length() ; i++) {
                if (this.rows.array[i].get(field) === key) {
                    index = i;
                    break;
                }
            }

            if (index > -1) {
                model = this.rows.removeAt(index);
                model.markDelete();

                this._deleted.push({ model: model, position: index });

                this._isDirty = true;
                this._events.triggerHandler({ type: "remove", model: model, table: this });
            }
        },

        isDirty: function () {
            return this._isDirty;
        },

        getChanges: function () {

            var changes = {
                added: [],
                changed: []
            };
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++) {
                if (changes[rows[i].state])
                    changes[rows[i].state].push(rows[i].json);
            }

            changes.deleted = BoldBIDashboard.select(this._deleted, ["model"]);

            return changes;
        },

        toArray: function () {
            return this.rows.toArray();
        },

        setDirty: function (dirty, model) {
            if (this._isDirty === !!dirty) return;

            this._isDirty = !!dirty;

            this._events.triggerHandler({ type: "dirty", table: this, model: model });
        },
        get: function (index) {
            return this.rows.array[index];
        },
        length: function () {
            return this.rows.array.length;
        },

        bindTo: function (element) {
            var marker = tDiv, template = bbdesigner$(element.html()), rows = this.toArray(), cur;
            if (bbdesigner$.inArray(element.prop("tagName").toLowerCase(), ["table", "tbody"]))
                marker = tTR;

            marker.insertBefore(element);
            element.detach().empty();

            for (var i = 0; i < rows.length; i++) {
                cur = template.clone();
                rows[i].bindTo(cur);
                element.append(cur);
            }

            element.insertAfter(marker);
            marker.remove();
        }
    };

    var tDiv = doc ? bbdesigner$(document.createElement("div")) : {},
        tTR = doc ? bbdesigner$(document.createElement("tr")) : {};

    BoldBIDashboard.Model = function (json, table, name) {
        if (typeof table === "string") {
            name = table;
            table = null;
        }
        this.bbdesigner$id = getUid("m");

        this.json = json;
        this.table = table instanceof BoldBIDashboard.TableModel ? table : null;
        this.name = name || (this.table && this.table.name);
        this.dataManager = (table instanceof BoldBIDashboard.DataManager) ? table : table.dataManagar;
        this.actual = {};
        this._events = bbdesigner$({});
        this.isDirty = false;
        this.state = "added";
        this._props = [];
        this._computeEls = {};
        this._fields = {};
        this._attrEls = {};
        this._updates = {};
        this.computed = {};
    };

    BoldBIDashboard.Model.prototype = {
        computes: function (value) {
            bbdesigner$.extend(this.computed, value);
        },
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        set: function (field, value) {
            var obj = this.json, actual = field, prev;
            field = field.split('.');

            for (var i = 0; i < field.length - 1; i++) {
                field = field[0];
                obj = obj[field[0]];
            }

            this.isDirty = true;
            this.changeState("changed", { from: "set" });

            prev = obj[field];

            if (this.actual[field] === undefined && !(field in this.actual))
                this.actual[field] = value; // Complex property ?

            obj[field] = value;

            this._updateValues(field, value);
            this._events.triggerHandler({ type: actual, current: value, previous: prev, model: this });
        },
        get: function (field) {
            return BoldBIDashboard.pvt.getObject(field, this.json);
        },
        revert: function (suspendEvent) {
            for (var prop in this.actual) {
                this.json[prop] = this.actual[prop];
            }

            this.isDirty = false;

            if (suspendEvent)
                this.state = "unchanged";
            else
                this.changeState("unchanged", { from: "revert" });
        },
        save: function (dm, key) {
            dm = dm || this.dataManagar;
            key = key || dm.dataSource.key;
            if (!dm) throwError("BoldBIDashboard.Model - DataManager is required to commit the changes");
            if (this.state === "added") {
                return dm.insert(this.json, this.name).done(BoldBIDashboard.proxy(function (e) {
                    bbdesigner$.extend(this.json, e.record);
                }, this));
            }
            else if (this.state === "changed") {
                return dm.update(key, this.json, this.name);
            }
            else if (this.state === "deleted") {
                return dm.remove(key, this.json, this.name);
            }
        },
        markCommit: function () {
            this.isDirty = false;
            this.changeState("unchanged", { from: "commit" });
        },
        markDelete: function () {
            this.changeState("deleted", { from: "delete" });
        },
        changeState: function (state, args) {
            if (this.state === state) return;

            if (this.state === "added") {
                if (state === "deleted")
                    state = "unchanged";
                else return;
            }

            var prev = state;
            args = args || {};

            this.state = state;
            this._events.triggerHandler(bbdesigner$.extend({ type: "stateChange", current: state, previous: prev, model: this }, args));
        },
        properties: function () {
            if (this._props.length)
                return this._props;

            for (var pr in this.json) {
                this._props.push(pr);
                this._updates[pr] = { read: [], input: [] };
            }

            return this._props;
        },
        bindTo: function (element) {
            var el = bbdesigner$(element), ctl, field,
                elements = el.find("[ej-observe], [ej-computed], [ej-prop]"), len = elements.length;

            el.data("ejModel", this);
            var unbindData = { fields: [], props: [], computes: [] };
            for (var i = 0; i < len; i++) {
                ctl = elements.eq(i);

                field = ctl.attr("ej-prop");
                if (field) {
                    this._processAttrib(field, ctl, unbindData);
                }
                field = ctl.attr("ej-observe");
                if (field && this._props.indexOf(field) !== -1) {
                    this._processField(ctl, field, unbindData);
                    continue;
                }

                field = ctl.attr("ej-computed");
                if (field) {
                    this._processComputed(field, ctl, unbindData);
                    continue;
                }
            }
            el.data("ejModelBinding" + this.bbdesigner$id, unbindData);
        },
        unbind: function (element) {
            var tmp, data = {
                props: this._attrEls,
                computes: this._computeEls
            }, isCustom = false;

            if (element) {
                data = bbdesigner$(element).removeData("ejModel").data("ejModelBinding" + this.bbdesigner$id) || data;
                isCustom = true;
            }

            for (var p in this.computed) {
                tmp = data.computes[p], p = this.computed[p];
                if (tmp && p.deps) {
                    this.off(p.deps.join(' '), tmp.handle);
                    if (isCustom)
                        delete this._computeEls[p];
                }
            }
            if (!isCustom)
                this._computeEls = {};

            for (var p in data.props) {
                tmp = data.props[p];
                if (tmp) {
                    this.off(tmp.deps.join(' '), tmp.handle);
                    delete data.props[p];
                    if (isCustom)
                        delete this._attrEls[p];
                }
            }
            if (!isCustom)
                this._attrEls = {};

            if (data.fields && data.fields.length) {
                var len = data.fields.length, ctl, idx, ty;
                for (var i = 0; i < len; i++) {
                    ctl = data.fields[i];
                    bbdesigner$(ctl).off("change", null, this._changeHandler);

                    ty = this.formElements.indexOf(ctl.tagName.toLowerCase()) !== -1 ? "input" : "read";
                    idx = this._updates[ty].indexOf(ctl);
                    if (idx !== -1)
                        this._updates[ty].splice(idx, 1);
                }
            }
        },
        _processComputed: function (value, element, data) {
            if (!value) return;

            var val, deps, safeVal = safeStr(value),
            type = this.formElements.indexOf(element[0].tagName.toLowerCase()) !== -1 ? "val" : "html";

            if (!this.computed[value] || !this.computed[safeVal]) {
                this.computed[safeVal] = {
                    value: new Function("var e = this; return " + value),
                    deps: this._generateDeps(value)
                }
                value = safeVal;
            }

            val = this.computed[value];
            if (!val.get) {
                val.get = function () {
                    val.value.call(this.json);
                }
            }

            deps = val.deps;
            val = val.value;

            this._updateDeps(deps);
            this._updateElement(element, type, val);

            val = { el: element, handle: bbdesigner$proxy(this._computeHandle, this, { value: value, type: type }) };
            this._computeEls[value] = val;
            data.computes[value] = val;

            this.on(deps.join(' '), val.handle);
        },
        _computeHandle: function (e) {
            var el = this._computeEls[e.value];
            if (el && this.computed[e.value])
                this._updateElement(el.el, e.type, this.computed[e.value].value);
        },
        _updateElement: function (el, type, val) {
            el[type](val.call(bbdesigner$.extend({}, this.json, this.computed)));
        },
        _updateDeps: function (deps) {
            for (var i = 0; i < deps.length; i++) {
                if (!(deps[i] in this.json) && deps[i] in this.computed)
                    BoldBIDashboard.merge(deps, this.computed[deps[i]].deps);
            }
        },
        _generateDeps: function (value) {
            var splits = value.replace(/(^e\.)|( e\.)/g, '#%^*##BoldBIDashboard.#').split("#%^*#"),
                field, deps = [];

            for (var i = 0; i < splits.length; i++) {
                if (splits[i].startsWith("#BoldBIDashboard.#")) {
                    field = splits[i].replace("#BoldBIDashboard.#", "").split(' ')[0];
                    if (field && this._props.indexOf(field) !== -1)
                        deps.push(field);
                }
            }

            return deps;
        },
        _processAttrib: function (value, el, data) {
            var prop, val, res = {};
            value = value.replace(/^ +| +$/g, "").split(";");
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i].split(":");
                if (value[i].length < 2) continue;

                prop = value[i][0].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
                res[prop] = value[i][1].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
            }
            value = res;
            var deps = [];
            for (prop in value)
                deps.push(value[prop]);

            this._updateDeps(deps);
            this._updateProps(el, value);

            res = getUid("emak");
            val = { el: el, handle: bbdesigner$proxy(this._attrHandle, this, res), value: value, deps: deps };
            el.prop("ejmodelattrkey", res);

            data.props[res] = val;
            this._attrEls[res] = val;

            this.on(deps.join(' '), val.handle);
        },
        _attrHandle: function (res) {
            var el = this._attrEls[res];
            if (el)
                this._updateProps(el.el, el.value);
        },
        _updateProps: function (element, value) {
            var json = this.json, t, c = this.computed;
            for (var prop in value) {
                t = value[prop];
                if (t in json)
                    t = json[t];
                else if (t in c) {
                    t = c[t];
                    if (t) {
                        t = t.value.call(bbdesigner$.extend({}, this.json, c));
                    }
                }

                if (!isNull(t)) {
                    element.prop(prop, t);
                }
            }
        },
        _updateValues: function (prop, value) {
            var arr = this._updates[prop];

            if (!arr || (!arr.read && !arr.input)) return;

            this._ensureItems(arr.read, "html", value);
            this._ensureItems(arr.input, "val", value);
        },
        _ensureItems: function (a, type, value) {
            if (!a) return;

            for (var i = a.length - 1; i > -1; i--) {
                if (!a[i].offsetParent) {
                    a.splice(i, 1);
                    continue;
                }
                bbdesigner$(a[i])[type](value);
            }
        },
        _changeHandler: function (e) {
            e.data.self.set(e.data.prop, bbdesigner$(this).val());
        },
        _processField: function (ctl, field, data) {
            var e = { self: this, prop: field }, val = this.get(field);

            data.fields.push(ctl[0]);

            if (this.formElements.indexOf(ctl[0].tagName.toLowerCase()) === -1) {
                ctl.html(val);
                return this._updates[field].read.push(ctl[0]);
            }

            ctl.val(val)
                    .off("change", null, this._changeHandler)
                    .on("change", null, e, this._changeHandler);

            return this._updates[field].input.push(ctl[0]);
        },
        formElements: ["input", "select", "textarea"]
    };

    var safeReg = /[^\w]+/g;
    var safeStr = function (value) {
        return value.replace(safeReg, "_");
    };
    var setDirty = function (e) {
        this.setDirty(true, e.model);
    };

    BoldBIDashboard.Predicate = function (field, operator, value, ignoreCase) {
        if (!(this instanceof BoldBIDashboard.Predicate))
            return new BoldBIDashboard.Predicate(field, operator, value, ignoreCase);

        if (typeof field === "string") {
            this.field = field;
            this.operator = operator;
            this.value = value;
            this.ignoreCase = ignoreCase;
            this.isComplex = false;

            this._comparer = BoldBIDashboard.data.fnOperators.processOperator(this.operator);

        } else if (field instanceof BoldBIDashboard.Predicate && value instanceof BoldBIDashboard.Predicate || value instanceof Array) {
            this.isComplex = true;
            this.condition = operator.toLowerCase();
            this.predicates = [field];
            if (value instanceof Array)
                [].push.apply(this.predicates, value);
            else
                this.predicates.push(value);
        }
        return this;
    };

    BoldBIDashboard.Predicate.and = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "and");
    };

    BoldBIDashboard.Predicate.or = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "or");
    };

    BoldBIDashboard.Predicate.fromJSON = function (json) {
        if (instance(json, Array)) {
            var res = [];
            for (var i = 0, len = json.length; i < len; i++)
                res.push(pvtPredicate._fromJSON(json[i]));
            return res;
        }

        return pvtPredicate._fromJSON(json);
    };

    // Private fn
    var pvtPredicate = {
        _combinePredicates: function (predicates, operator) {
            if (!predicates.length) return undefined;
            if (predicates.length === 1) {
                if (!instance(predicates[0], Array))
                    return predicates[0];
                predicates = predicates[0];
            }
            return new BoldBIDashboard.Predicate(predicates[0], operator, predicates.slice(1));
        },

        _combine: function (pred, field, operator, value, condition, ignoreCase) {
            if (field instanceof BoldBIDashboard.Predicate)
                return BoldBIDashboard.Predicate[condition](pred, field);

            if (typeof field === "string")
                return BoldBIDashboard.Predicate[condition](pred, new BoldBIDashboard.Predicate(field, operator, value, ignoreCase));

            return throwError("Predicate - " + condition + " : invalid arguments");
        },

        _fromJSON: function (json) {

            if (!json || instance(json, BoldBIDashboard.Predicate))
                return json;

            var preds = json.predicates || [], len = preds.length, predicates = [], result;

            for (var i = 0; i < len; i++)
                predicates.push(pvtPredicate._fromJSON(preds[i]));                     

            if(!json.isComplex)
                result = new BoldBIDashboard.Predicate(json.field, json.operator, BoldBIDashboard.parseJSON({ val: json.value }).val, json.ignoreCase);
            else
                result = new BoldBIDashboard.Predicate(predicates[0], json.condition, predicates.slice(1));

            return result;
        }
    };

    BoldBIDashboard.Predicate.prototype = {
        and: function (field, operator, value, ignoreCase) {
            return pvtPredicate._combine(this, field, operator, value, "and", ignoreCase);
        },
        or: function (field, operator, value, ignoreCase) {
            return pvtPredicate._combine(this, field, operator, value, "or", ignoreCase);
        },
        validate: function (record) {
            var p = this.predicates, isAnd, ret;

            if (!this.isComplex) {
                return this._comparer.call(this, BoldBIDashboard.pvt.getObject(this.field, record), this.value, this.ignoreCase);
            }

            isAnd = this.condition === "and";

            for (var i = 0; i < p.length; i++) {
                ret = p[i].validate(record);
                if (isAnd) {
                    if (!ret) return false;
                } else {
                    if (ret) return true;
                }
            }

            return isAnd;
        },
        toJSON: function () {
            var predicates, p;
            if (this.isComplex) {
                predicates = [], p = this.predicates;
                for (var i = 0; i < p.length; i++)
                    predicates.push(p[i].toJSON());
            }
            return {
                isComplex: this.isComplex,
                field: this.field,
                operator: this.operator,
                value: this.value,
                ignoreCase: this.ignoreCase,
                condition: this.condition,
                predicates: predicates
            }
        }
    };

    BoldBIDashboard.dataUtil = {
        swap: function (array, x, y) {
            if (x == y) return;

            var tmp = array[x];
            array[x] = array[y];
            array[y] = tmp;
        },

        mergeSort: function (jsonArray, fieldName, comparer) {
            if (!comparer || typeof comparer === "string")
                comparer = BoldBIDashboard.pvt.fnSort(comparer, true);

            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return BoldBIDashboard.pvt.mergeSort(jsonArray, fieldName, comparer);
        },

        max: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return BoldBIDashboard.pvt.getItemFromComparer(jsonArray, fieldName, comparer || BoldBIDashboard.pvt.fnDescending);
        },

        min: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return BoldBIDashboard.pvt.getItemFromComparer(jsonArray, fieldName, comparer || BoldBIDashboard.pvt.fnAscending);
        },

        distinct: function (json, fieldName, requiresCompleteRecord) {
            var result = [], val, tmp = {};
            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (!(val in tmp)) {
                    result.push(!requiresCompleteRecord ? val : json[i]);
                    tmp[val] = 1;
                }
            }
            return result;
        },

        sum: function (json, fieldName) {
            var result = 0, val, castRequired = typeof getVal(json, fieldName, 0) !== "number";

            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (!isNaN(val) && val !== null) {
                    if (castRequired)
                       val = +val;
                   result += val;
                }
            }
            return result;
        },

        avg: function (json, fieldName) {
            return BoldBIDashboard.sum(json, fieldName) / json.length;
        },

        select: function (jsonArray, fields) {
            var newData = [];

            for (var i = 0; i < jsonArray.length; i++) {
                newData.push(BoldBIDashboard.pvt.extractFields(jsonArray[i], fields));
            }

            return newData;
        },

        group: function (jsonArray, field,agg, /* internal */ level,groupDs) {
            level = level || 1;

            if (jsonArray.GROUPGUID == BoldBIDashboard.pvt.consts.GROUPGUID) {
                for (var j = 0; j < jsonArray.length; j++) {
                    if(!BoldBIDashboard.isNullOrUndefined(groupDs)){
                        var indx = -1;
                        var temp = bbdesigner$.grep(groupDs,function(e){return e.key==jsonArray[j].key});
                        indx = groupDs.indexOf(temp[0]);
                        jsonArray[j].items = BoldBIDashboard.group(jsonArray[j].items, field, agg, jsonArray.level + 1,groupDs[indx].items);
                        jsonArray[j].count = groupDs[indx].count;
                    }
                    else{
                        jsonArray[j].items = BoldBIDashboard.group(jsonArray[j].items, field, agg, jsonArray.level + 1);
                        jsonArray[j].count = jsonArray[j].items.length;
                    }  
                }

                jsonArray.childLevels += 1;
                return jsonArray;
            }

            var grouped = {}, groupedArray = [];

            groupedArray.GROUPGUID = BoldBIDashboard.pvt.consts.GROUPGUID;
            groupedArray.level = level;
            groupedArray.childLevels = 0;
            groupedArray.records = jsonArray;

            for (var i = 0; i < jsonArray.length; i++) {
                var val = getVal(jsonArray, field, i);

                if (!grouped[val]) {
                    grouped[val] = {
                        key: val,
                        count: 0,
                        items: [],
                        aggregates: {},
                        field: field
                    };
                    groupedArray.push(grouped[val]);
					if(!BoldBIDashboard.isNullOrUndefined(groupDs)) {
                        var tempObj = bbdesigner$.grep(groupDs,function(e){return e.key==grouped[val].key});
                       grouped[val].count = tempObj[0].count
                    }
                }

                grouped[val].count = !BoldBIDashboard.isNullOrUndefined(groupDs) ? grouped[val].count :  grouped[val].count += 1;
                grouped[val].items.push(jsonArray[i]);
            }
            if (agg && agg.length) {

                for (var i = 0; i < groupedArray.length; i++) {
                    var res = {}, fn;
                    for (var j = 0; j < agg.length; j++) {

                        fn = BoldBIDashboard.aggregates[agg[j].type];
                        if(!BoldBIDashboard.isNullOrUndefined(groupDs)) {
                            var temp = bbdesigner$.grep(groupDs,function(e){return e.key==groupedArray[i].key});
                            if(fn)
                                res[agg[j].field + " - " + agg[j].type] = fn(temp[0].items, agg[j].field);
                        }
                        else{
                            if (fn)
                                res[agg[j].field + " - " + agg[j].type] = fn(groupedArray[i].items, agg[j].field);
                        }

                    }
                    groupedArray[i]["aggregates"] = res;
                }
            }
            return groupedArray;
        },

        parseTable: function (table, headerOption, headerRowIndex) {
            var tr = table.rows, headerRow, headerTds = [], data = [], i;

            if (!tr.length) return [];

            headerRowIndex = headerRowIndex || 0;

            switch ((headerOption || "").toLowerCase()) {
                case BoldBIDashboard.headerOption.tHead:
                    headerRow = table.tHead.rows[headerRowIndex];
                    break;
                case BoldBIDashboard.headerOption.row:
                default:
                    headerRow = table.rows[headerRowIndex];
                    break;
            }

            var hTd = headerRow.cells;

            for (i = 0; i < hTd.length; i++)
                headerTds.push(bbdesigner$.trim(hTd[i].innerHTML));

            for (i = headerRowIndex + 1; i < tr.length; i++) {
                var json = {}, td = tr[i].cells;
                for (var j = 0; j < td.length; j++) {
                    var temp = td[j].innerHTML;
                    if (typeof temp == "string" && bbdesigner$.isNumeric(temp))
                       json[headerTds[j]] = Number(temp);
				    else
                       json[headerTds[j]] = temp;
                }
                data.push(json);
            }
            return data;
        }
    };

    BoldBIDashboard.headerOption = {
        tHead: "thead",
        row: "row"
    };

    BoldBIDashboard.aggregates = {
        sum: function (ds, field) {
            return BoldBIDashboard.sum(ds, field);
        },
        average: function (ds, field) {
            return BoldBIDashboard.avg(ds, field);
        },
        minimum: function (ds, field) {
            return BoldBIDashboard.getObject(field, BoldBIDashboard.min(ds, field));
        },
        maximum: function (ds, field) {
            return  BoldBIDashboard.getObject(field, BoldBIDashboard.max(ds, field));
        },
        truecount: function (ds, field){
            var predicate = BoldBIDashboard.Predicate(field, "equal", true);
            return BoldBIDashboard.DataManager(ds).executeLocal(BoldBIDashboard.Query().where(predicate)).length;
        },
        falsecount: function (ds, field) {
            var predicate = BoldBIDashboard.Predicate(field, "equal", false);
            return BoldBIDashboard.DataManager(ds).executeLocal(BoldBIDashboard.Query().where(predicate)).length;
        },
        count: function (ds, field) {
            return ds.length;
        }

    };
    BoldBIDashboard.pvt = {
        filterQueries: filterQueries,
        mergeSort: function (jsonArray, fieldName, comparer) {
            if (jsonArray.length <= 1)
                return jsonArray;

            // else list size is > 1, so split the list into two sublists
            var middle = parseInt(jsonArray.length / 2, 10);

            var left = jsonArray.slice(0, middle),
                right = jsonArray.slice(middle);

            left = BoldBIDashboard.pvt.mergeSort(left, fieldName, comparer);
            right = BoldBIDashboard.pvt.mergeSort(right, fieldName, comparer);

            return BoldBIDashboard.pvt.merge(left, right, fieldName, comparer);
        },

        getItemFromComparer: function (array, field, comparer) {
            var keyVal, current, key, i = 0,castRequired = typeof getVal(array, field, 0) == "string";
            if (array.length)
            while (BoldBIDashboard.isNullOrUndefined(keyVal) && i < array.length) {
                keyVal = getVal(array, field, i);
                key = array[i++];
            }
            for (; i < array.length; i++) {
                current = getVal(array, field, i);
                if (BoldBIDashboard.isNullOrUndefined(current))
                    continue;
                if (castRequired) {
                    keyVal = +keyVal;
                    current = +current;
                }
                if (comparer(keyVal, current) > 0) {
                    keyVal = current;
                    key = array[i];
                }
            }
            return key;
        },

        quickSelect: function (array, fieldName, left, right, k, comparer) {
            if (left == right)
                return array[left];

            var pivotNewIndex = BoldBIDashboard.pvt.partition(array, fieldName, left, right, comparer);

            var pivotDist = pivotNewIndex - left + 1;

            if (pivotDist == k)
                return array[pivotNewIndex];

            else if (k < pivotDist)
                return BoldBIDashboard.pvt.quickSelect(array, fieldName, left, pivotNewIndex - 1, k, comparer);
            else
                return BoldBIDashboard.pvt.quickSelect(array, fieldName, pivotNewIndex + 1, right, k - pivotDist, comparer);
        },

        extractFields: function (obj, fields) {
            var newObj = {};

            if (fields.length == 1)
                return BoldBIDashboard.pvt.getObject(fields[0], obj);

            for (var i = 0; i < fields.length; i++) {
                newObj[fields[i].replace('.', BoldBIDashboard.pvt.consts.complexPropertyMerge)] = BoldBIDashboard.pvt.getObject(fields[i], obj);
            }

            return newObj;
        },

        partition: function (array, field, left, right, comparer) {

            var pivotIndex = parseInt((left + right) / 2, 10),
                pivot = getVal(array, field, pivotIndex);

            BoldBIDashboard.swap(array, pivotIndex, right);

            pivotIndex = left;

            for (var i = left; i < right; i++) {
                if (comparer(getVal(array, field, i), pivot)) {
                    BoldBIDashboard.swap(array, i, pivotIndex);
                    pivotIndex++;
                }
            }

            BoldBIDashboard.swap(array, pivotIndex, right);

            return pivotIndex;
        },

        fnSort: function (order) {
            order = order ? order.toLowerCase() : BoldBIDashboard.sortOrder.Ascending;

            if (order == BoldBIDashboard.sortOrder.Ascending)
                return BoldBIDashboard.pvt.fnAscending;

            return BoldBIDashboard.pvt.fnDescending;
        },

        fnGetComparer: function (field, fn) {
            return function (x, y) {
                return fn(BoldBIDashboard.pvt.getObject(field, x), BoldBIDashboard.pvt.getObject(field, y));
            }
        },

        fnAscending: function (x, y) {
            if (y === null || y === undefined)
                return -1;

            if (typeof x === "string")
                return x.localeCompare(y);

            if (x === null || x === undefined)
                return 1;

            return x - y;
        },

        fnDescending: function (x, y) {
            if (y === null || y === undefined)
                return 1;

            if (typeof x === "string")
                return x.localeCompare(y) * -1;

            if (x === null || x === undefined)
                return -1;

            return y - x;
        },

        merge: function (left, right, fieldName, comparer) {
            var result = [], current;

            while (left.length > 0 || right.length > 0) {
                if (left.length > 0 && right.length > 0) {
                    if (comparer)
                        current = comparer(getVal(left, fieldName, 0), getVal(right, fieldName, 0)) <= 0 ? left : right;
                    else
                        current = left[0][fieldName] < left[0][fieldName] ? left : right;
                } else {
                    current = left.length > 0 ? left : right;
                }

                result.push(current.shift());
            }

            return result;
        },

        getObject: function (nameSpace, from) {
            if (!from) return undefined;
            if (!nameSpace) return from;

            if (nameSpace.indexOf('.') === -1) return from[nameSpace];

            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (value == null) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i;

            for (i = 0; i < splits.length; i++) {

                if (i + 1 == splits.length)
                    from[splits[i]] = value === undefined ? {} : value;
                else if (from[splits[i]] == null)
                    from[splits[i]] = {};

                from = from[splits[i]];
            }

            return start;
        },

        getFieldList: function (obj, fields, prefix) {
            if (prefix === undefined)
                prefix = "";

            if (fields === undefined || fields === null)
                return BoldBIDashboard.pvt.getFieldList(obj, [], prefix);

            for (var prop in obj) {
                if (typeof obj[prop] === "object" && !(obj[prop] instanceof Array))
                    BoldBIDashboard.pvt.getFieldList(obj[prop], fields, prefix + prop + ".");
                else
                    fields.push(prefix + prop);
            }

            return fields;
        }
    };

    BoldBIDashboard.FilterOperators = {
        lessThan: "lessthan",
        greaterThan: "greaterthan",
        lessThanOrEqual: "lessthanorequal",
        greaterThanOrEqual: "greaterthanorequal",
        equal: "equal",
        contains: "contains",
        startsWith: "startswith",
        endsWith: "endswith",
        notEqual: "notequal",
        in: "in",
        notcontains: "notcontains"
    };

    BoldBIDashboard.data = {};

    BoldBIDashboard.data.operatorSymbols = {
        "<": "lessthan",
        ">": "greaterthan",
        "<=": "lessthanorequal",
        ">=": "greaterthanorequal",
        "==": "equal",
        "!=": "notequal",
        "*=": "contains",
        "$=": "endswith",
        "^=": "startswith",
        "!=": "notcontains",
        "==": "in"
    };

    BoldBIDashboard.data.odBiOperator = {
        "<": " lt ",
        ">": " gt ",
        "<=": " le ",
        ">=": " ge ",
        "==": " eq ",
        "!=": " ne ",
        "lessthan": " lt ",
        "lessthanorequal": " le ",
        "greaterthan": " gt ",
        "greaterthanorequal": " ge ",
        "equal": " eq ",
        "notequal": " ne "
    };

    BoldBIDashboard.data.odUniOperator = {
        "$=": "endswith",
        "^=": "startswith",
        "*=": "substringof",
        "endswith": "endswith",
        "startswith": "startswith",
        "contains": "substringof"
    };

    BoldBIDashboard.data.fnOperators = {
        equal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) == toLowerCase(expected);

            return actual == expected;
        },
        notequal: function (actual, expected, ignoreCase) {
            return !BoldBIDashboard.data.fnOperators.equal(actual, expected, ignoreCase);
        },
        lessthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) < toLowerCase(expected);

            return actual < expected;
        },
        greaterthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) > toLowerCase(expected);

            return actual > expected;
        },
        lessthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) <= toLowerCase(expected);

            return actual <= expected;
        },
        greaterthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) >= toLowerCase(expected);

            return actual >= expected;
        },
        contains: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return !isNull(actual) && !isNull(expected) && toLowerCase(actual).indexOf(toLowerCase(expected)) != -1;

            return !isNull(actual) && !isNull(expected) && actual.toString().indexOf(expected) != -1;
        },
        notnull: function (actual) {
            return actual !== null;
        },
        isnull: function (actual) {
            return actual === null;
        },
        startswith: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).startsWith(toLowerCase(expected));

            return actual && expected && actual.startsWith(expected);
        },
        endswith: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).endsWith(toLowerCase(expected));

            return actual && expected && actual.endsWith(expected);
        },
        notcontains: function (actual, expected, ignoreCase) {
            return !BoldBIDashboard.data.fnOperators.equal(actual, expected, ignoreCase);
        },
        in: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) == toLowerCase(expected);

            return actual == expected;
        },

        processSymbols: function (operator) {
            var fnName = BoldBIDashboard.data.operatorSymbols[operator];
            if (fnName) {
                var fn = BoldBIDashboard.data.fnOperators[fnName];
                if (fn) return fn;
            }

            return throwError("Query - Process Operator : Invalid operator");
        },

        processOperator: function (operator) {
            var fn = BoldBIDashboard.data.fnOperators[operator];
            if (fn) return fn;
            return BoldBIDashboard.data.fnOperators.processSymbols(operator);
        }
    };

    BoldBIDashboard.NotifierArray = function (array) {
        if (!instance(this, BoldBIDashboard.NotifierArray))
            return new BoldBIDashboard.NotifierArray(array);

        this.array = array;

        this._events = bbdesigner$({});
        this._isDirty = false;

        return this;
    };

    BoldBIDashboard.NotifierArray.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        push: function (item) {
            var ret;

            if (instance(item, Array))
                ret = [].push.apply(this.array, item);
            else
                ret = this.array.push(item);

            this._raise("add", { item: item, index: this.length() - 1 });

            return ret;
        },
        pop: function () {
            var ret = this.array.pop();

            this._raise("remove", { item: ret, index: this.length() - 1 });

            return ret;
        },
        addAt: function (index, item) {
            this.array.splice(index, 0, item);

            this._raise("add", { item: item, index: index });

            return item;
        },
        removeAt: function (index) {
            var ret = this.array.splice(index, 1)[0];

            this._raise("remove", { item: ret, index: index });

            return ret;
        },
        remove: function (item) {
            var index = this.array.indexOf(item);

            if (index > -1) {
                this.array.splice(index, 1);
                this._raise("remove", { item: item, index: index });
            }

            return index;
        },
        length: function () {
            return this.array.length;
        },
        _raise: function (e, args) {
            this._events.triggerHandler(bbdesigner$.extend({ type: e }, args));
            this._events.triggerHandler({ type: "all", name: e, args: args });
        },
        toArray: function () {
            return this.array;
        }
    };

    bbdesigner$.extend(BoldBIDashboard, BoldBIDashboard.dataUtil);

    // For IE8
    Array.prototype.forEach = Array.prototype.forEach || function (fn, scope) {
        for (var i = 0, len = this.length; i < len; ++i) {
            fn.call(scope, this[i], i, this);
        }
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    Array.prototype.filter = Array.prototype.filter || function (fn) {
        if (typeof fn != "function")
            throw new TypeError();

        var res = [];
        var thisp = arguments[1] || this;
        for (var i = 0; i < this.length; i++) {
            var val = this[i]; // in case fun mutates this
            if (fn.call(thisp, val, i, this))
                res.push(val);
        }

        return res;
    };

    String.prototype.endsWith = String.prototype.endsWith || function (key) {
        return this.slice(-key.length) === key;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };

    if (!BoldBIDashboard.support) BoldBIDashboard.support = {};
    BoldBIDashboard.support.stableSort = function () {
        var res = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16].sort(function () { return 0; });
		for(var i = 0; i < 17; i++){
		    if(i !== res[i]) return false;
		}
        return true;
    }();
    BoldBIDashboard.support.cors = bbdesigner$.support.cors;

    if (!bbdesigner$.support.cors && window.XDomainRequest) {
        var httpRegEx = /^https?:\/\//i;
        var getOrPostRegEx = /^get|post$/i;
        var sameSchemeRegEx = new RegExp('^' + location.protocol, 'i');
        var xmlRegEx = /\/xml/i;

        // ajaxTransport exists in jQuery 1.5+
        bbdesigner$.ajaxTransport('text html xml json', function (options, userOptions, jqXHR) {
            // XDomainRequests must be: asynchronous, GET or POST methods, HTTP or HTTPS protocol, and same scheme as calling page
            if (options.crossDomain && options.async && getOrPostRegEx.test(options.type) && httpRegEx.test(userOptions.url) && sameSchemeRegEx.test(userOptions.url)) {
                var xdr = null;
                var userType = (userOptions.dataType || '').toLowerCase();
                return {
                    send: function (headers, complete) {
                        xdr = new XDomainRequest();
                        if (/^\d+$/.test(userOptions.timeout)) {
                            xdr.timeout = userOptions.timeout;
                        }
                        xdr.ontimeout = function () {
                            complete(500, 'timeout');
                        };
                        xdr.onload = function () {
                            var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\r\nContent-Type: ' + xdr.contentType;
                            var status = {
                                code: 200,
                                message: 'success'
                            };
                            var responses = {
                                text: xdr.responseText
                            };

                            try {
                                if (userType === 'json') {
                                    try {
                                        responses.json = JSON.parse(xdr.responseText);
                                    } catch (e) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        //throw 'Invalid JSON: ' + xdr.responseText;
                                    }
                                } else if ((userType === 'xml') || ((userType !== 'text') && xmlRegEx.test(xdr.contentType))) {
                                    var doc = new ActiveXObject('Microsoft.XMLDOM');
                                    doc.async = false;
                                    try {
                                        doc.loadXML(xdr.responseText);
                                    } catch (e) {
                                        doc = undefined;
                                    }
                                    if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        throw 'Invalid XML: ' + xdr.responseText;
                                    }
                                    responses.xml = doc;
                                }
                            } catch (parseMessage) {
                                throw parseMessage;
                            } finally {
                                complete(status.code, status.message, responses, allResponseHeaders);
                            }
                        };
                        xdr.onerror = function () {
                            complete(500, 'error', {
                                text: xdr.responseText
                            });
                        };
						if(navigator.userAgent.indexOf("MSIE 9.0") != -1)
							xdr.onprogress = function() {};
                        xdr.open(options.type, options.url);
                        //xdr.send(userOptions.data);
                        xdr.send();
                    },
                    abort: function () {
                        if (xdr) {
                            xdr.abort();
                        }
                    }
                };
            }
        });
    }

    bbdesigner$.support.cors = true;

    BoldBIDashboard.sortOrder = {
        Ascending: "ascending",
        Descending: "descending"
    };

    // privates
    BoldBIDashboard.pvt.consts = {
        GROUPGUID: "{271bbba0-1ee7}",
        complexPropertyMerge: "_"
    };

    // private utils
    var nextTick = function (fn, context) {
        if (context) fn = bbdesigner$proxy(fn, context);
        (window.setImmediate || window.setTimeout)(fn, 0);
    };

    BoldBIDashboard.support.enableLocalizedSort = false;

    var stableSort = function (ds, field, comparer, queries) {
        if (BoldBIDashboard.support.stableSort) {
            if(!BoldBIDashboard.support.enableLocalizedSort && typeof BoldBIDashboard.pvt.getObject(field, ds[0] || {}) == "string" 
                && (comparer === BoldBIDashboard.pvt.fnAscending || comparer === BoldBIDashboard.pvt.fnDescending)
                && queries.filter(function(e){return e.fn === "onSortBy";}).length === 1)
                return fastSort(ds, field, comparer === BoldBIDashboard.pvt.fnDescending);
            return ds.sort(BoldBIDashboard.pvt.fnGetComparer(field, comparer));
        }
        return BoldBIDashboard.mergeSort(ds, field, comparer);
    };

    var fastSort = function(ds, field, isDesc){
        var old = Object.prototype.toString;
        Object.prototype.toString = (field.indexOf('.') === -1) ? function(){
            return this[field];
        }:function(){
            return BoldBIDashboard.pvt.getObject(field, this);
        };
        ds = ds.sort();
        Object.prototype.toString = old;
        if(isDesc)
            ds.reverse();
    }

    var toLowerCase = function (val) {
        return val ? val.toLowerCase ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : "";
    };

    var getVal = function (array, field, index) {
        return field ? BoldBIDashboard.pvt.getObject(field, array[index]) : array[index];
    };

    var isHtmlElement = function (e) {
        return typeof HTMLElement === "object" ? e instanceof HTMLElement :
            e && e.nodeType === 1 && typeof e === "object" && typeof e.nodeName === "string";
    };

    var instance = function (obj, element) {
        return obj instanceof element;
    };

    var getTableModel = function (name, result, dm, computed) {
        return function (tName) {
            if (typeof tName === "object") {
                computed = tName;
                tName = null;
            }
            return new BoldBIDashboard.TableModel(tName || name, result, dm, computed);
        };
    };

    var getKnockoutModel = function (result) {
        return function (computedObservables, ko) {
            ko = ko || window.ko;

            if (!ko) throwError("Knockout is undefined");

            var model, koModels = [], prop, ob;
            for (var i = 0; i < result.length; i++) {
                model = {};
                for (prop in result[i]) {
                    if (!prop.startsWith("_"))
                        model[prop] = ko.observable(result[i][prop]);
                }
                for (prop in computedObservables) {
                    ob = computedObservables[prop];

                    if (bbdesigner$.isPlainObject(ob)) {
                        if (!ob.owner) ob.owner = model;
                        ob = ko.computed(ob);
                    } else
                        ob = ko.computed(ob, model);

                    model[prop] = ob;
                }
                koModels.push(model);
            }

            return ko.observableArray(koModels);
        };
    };

    var uidIndex = 0;
    var getUid = function (prefix) {
        uidIndex += 1;
        return prefix + uidIndex;
    };

    BoldBIDashboard.getGuid = function (prefix) {
        var hexs = '0123456789abcdef', rand;
        return (prefix || "") + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
            if ("crypto" in window && "getRandomValues" in crypto) {
                var arr = new Uint8Array(1)
                window.crypto.getRandomValues(arr);
                rand = arr[0] % 16|0
            }
            else rand = Math.random() * 16 | 0;
            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
        });
    };

    var proxy = function (fn, context) {
        return function () {
            var args = [].slice.call(arguments, 0);
            args.push(this);

            return fn.apply(context || this, args);
        };
    };

    var bbdesigner$proxy = function (fn, context, arg) {
        if ('bind' in fn)
            return arg ? fn.bind(context, arg) : fn.bind(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    var dateSerialize = function (date) {
        date = JSON.parse(JSON.stringify({ val: date }, p.replacer)).val;
        return date.slice(0);
    };

    BoldBIDashboard.merge = function (first, second) {
        if (!first || !second) return;

        Array.prototype.push.apply(first, second);
    };

    var isNull = function (val) {
        return val === undefined || val === null;
    };

    var throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };

})(window.bbdesigner$, window.SyncfusionBoldBIDashboard, window.document);
;

(function (bbdesigner$, undefined) {

    var bbdesigner$document = bbdesigner$(document);
    // add new event shortcuts
    bbdesigner$.each(("touchstart touchmove touchend " +
		"tap doubletap taphold " +
		"swipe swipeleft swiperight " + "pinch pinchin pinchout pinchstop " +
		"scrollstart scrollstop").split(" "), function (i, name) {

		    bbdesigner$.fn[name] = function (fn) {
		        return fn ? this.on(name, fn) : this.trigger(name);
		    };

		    // jQuery < 1.8
		    if (bbdesigner$.attrFn) {
		        bbdesigner$.attrFn[name] = true;
		    }
		});

    var isPointer = browserInfo().isMSPointerEnabled,
    isIE11Pointer = browserInfo().pointerEnabled,
    supportTouch = 'ontouchstart' in window,
	scrollEvent = "scroll",
    isDesktop = (typeof window.orientation === "undefined"),
    isIosDevice = navigator.userAgent.match(/iPhone|iPad|iPod/i),
	touchStartEvent = isPointer ? (isIE11Pointer ? "pointerdown" : "MSPointerDown") : (supportTouch ? "touchstart" : "mousedown"),
	touchStopEvent = isPointer ? (isIE11Pointer ? "pointerup" : "MSPointerUp") : isIosDevice ? ("touchend") : (supportTouch ? "touchend" : "mouseup"),
	touchMoveEvent = isPointer ? (isIE11Pointer ? "pointermove" : "MSPointerMove") : (supportTouch ? "touchmove" : "mousemove"),
    touchCancelEvent = isPointer ? (isIE11Pointer ? "pointercancel" : "MSPointerCancel") : (supportTouch ? "touchcancel" : "mouseleave"),
    mouseStartEvent = isPointer || !isDesktop ? touchStartEvent : isIosDevice ? "touchstart" : "touchstart mousedown",
    mouseStopEvent = isPointer || !isDesktop ? touchStopEvent : "touchend mouseup",
    mouseMoveEvent = isPointer || !isDesktop ? touchMoveEvent : "touchmove mousemove",
    browser = browserInfo(),
    isIE9 = ((browser.name == 'msie') && (browser.version == '9.0')) ? true : false;

    function browserInfo() {
        var browser = {}, clientInfo = [],
        browserClients = {
            webkit: /(chrome)[ \/]([\w.]+)/i, safari: /(webkit)[ \/]([\w.]+)/i, msie: /(msie) ([\w.]+)/i,
            opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i, mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
        };
        for (var client in browserClients) {
            if (browserClients.hasOwnProperty(client)) {
                clientInfo = navigator.userAgent.match(browserClients[client]);
                if (clientInfo) {
                    browser.name = clientInfo[1].toLowerCase();
                    browser.version = clientInfo[2];
                    if (!!navigator.userAgent.match(/Trident\/7\./)) {
                        browser.name = "msie";
                    }
                    break;
                }
            }
        }
        browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
        browser.pointerEnabled = window.navigator.pointerEnabled;
        return browser;
    }
    function initiateCustomEvent(obj, eventType, e) {
        var originalType = e.type;
        e.type = eventType;
        bbdesigner$.event.dispatch.call(obj, e);
        e.type = originalType;
    }
    function copyObject(e, origEvent) {
        if (origEvent) {
            for (prop in origEvent) {
                if (!(prop in e)) {
                    e[prop] = origEvent[prop];
                }
            }
        }
    }
    bbdesigner$.event.special.ejtouchmove = {
        setup: function () {
            var thisObj = this,
				bbdesigner$this = bbdesigner$(thisObj);
            bbdesigner$this.on(touchStartEvent, startMoveHandler);
            bbdesigner$document.on(touchStopEvent, clearTouchMoveHandlers);
            function clearTouchMoveHandlers() {
               // bbdesigner$this.off(touchMoveEvent, moveHandler)
            }
            var coords = {};
            function startMoveHandler(e) {
                if (!(e.which && e.which !== 1)) {
                    var origTarget = e.target,
					origEvent = e.originalEvent;
                    if (isPointer)
                        coords = { x: origEvent.x, y: origEvent.y };
                    bbdesigner$this.on(touchMoveEvent, moveHandler);
                }
            }
            function moveHandler(e) {
                if (!(e.which && e.which !== 1)) {
                    var origTarget = e.target,
					origEvent = e.originalEvent;
                    copyObject(e, e.originalEvent);
                    if (!isPointer || !coords || (Math.abs(coords.x - origEvent.x) > 10 || Math.abs(coords.y - origEvent.y) > 10 && isPointer))
                        initiateCustomEvent(thisObj, "ejtouchmove", e);
                }
            }
        }
    };
    function touchObj(e) {
        return e.originalEvent.touches ?
					e.originalEvent.touches[0] : isPointer ? e.originalEvent : e;
    }
    // handles swipeup and swipedown
    bbdesigner$.event.special.swipeupdown = {
        setup: function () {
            var thisObj = this, bbdesigner$this = bbdesigner$(thisObj);
            checkMsieTouch(bbdesigner$this);
            bbdesigner$this.on(touchStartEvent, function (e) {
                var _startevent = e;
                var data = touchObj(e),
                            startPoint = {
                                time: (new Date).getTime(),
                                coords: [data.pageX, data.pageY],
                                origin: bbdesigner$(e.target)
                            },
                            stopPoint;
                function moveHandler(e) {
                    e.preventDefault();
                    if (!startPoint) return;
                    var data = touchObj(e);
                    stopPoint = {
                        time: (new Date).getTime(),
                        coords: [data.pageX, data.pageY]
                    };
                    if (Math.abs(startPoint.coords[1] - stopPoint.coords[1]) > 10) e.preventDefault();
                }

                bbdesigner$this
                            .on(touchMoveEvent, moveHandler)
                            .one(touchStopEvent, function (e) {
                                bbdesigner$this.off(touchMoveEvent, moveHandler);
                                if (startPoint && stopPoint) {
                                    if (stopPoint.time - startPoint.time < 1000 &&
                                    Math.abs(startPoint.coords[1] - stopPoint.coords[1]) > 30 &&
                                    Math.abs(startPoint.coords[0] - stopPoint.coords[0]) < 75) {
                                        var _addDetails = { time: stopPoint.time - startPoint.time, _isSwipe: true, _isDelta: true, stopPoint: stopPoint };
                                        var _options = _getOptions(e, _addDetails, _startevent);

                                        startPoint.origin
                                        .trigger(bbdesigner$.extend(true, { type: "swipeupdown" }, _options))
                                        .trigger(bbdesigner$.extend(true, { type: startPoint.coords[1] > stopPoint.coords[1] ? "swipeup" : "swipedown" }, _options));
                                    }
                                }
                                startPoint = stopPoint = undefined;
                            });
            });
        }
    };
    bbdesigner$.event.special.scrollstart = {
        isEnabled: true,
        setup: function () {
            var thisObj = this, bbdesigner$this = bbdesigner$(thisObj), scrolling, timer;
            function trigger(e, scrollState) {
                scrolling = scrollState;
                initiateCustomEvent(thisObj, scrolling ? "scrollstart" : "scrollstop", e);
            }
            bbdesigner$this.on(scrollEvent, function (e) {
                if (!bbdesigner$.event.special.scrollstart.isEnabled) return;
                if (!scrolling) trigger(e, true);
                clearTimeout(timer);
                timer = setTimeout(function () {
                    trigger(e, false);
                }, 250);
            });
        }
    };

    // also handles doubletap, taphold
    bbdesigner$.event.special.tap = {
        doubleTapThreshold: 500,
        tapholdThreshold: 650,
        canDoubleTap: function (d) {
            return ((getTimeSpan() - d.doubleTapStartTime) <= bbdesigner$.event.special.tap.doubleTapThreshold);
        },
        setup: function () {
            var thisObj = this, bbdesigner$this = bbdesigner$(thisObj), d = bbdesigner$this.data();
            var mouseDownTarget;            
            checkMsieTouch(bbdesigner$this);
            d.isDoubleTapWait = false;
            d.stopProcess = false;
            d.preTouchend = null;
            d.preTouchstart = null;

            bbdesigner$this.on(mouseStartEvent, function (event) {
                if (event.type == "mousedown" || event.type == "pointerdown" || "MSPointerDown")                   
                    mouseDownTarget = event.target;
                               
                d = bbdesigner$this.data();
                d.startTime = getTimeSpan();
                if (!d.isDoubleTapWait) d.doubleTapStartTime = d.startTime;
                if (event.type == "touchstart") d.preTouchstart = d.startTime;
                // checked mousedown event arrives within 300'ms after the touchend completes
                if (event.type == "mousedown" && (d.startTime - d.preTouchend < 300 || d.startTime - d.preTouchstart < 30))
                    d.stopProcess = true;
                else d.stopProcess = false;

                var origTarget = event.currentTarget,
					origEvent = event.originalEvent,
					timer;

                function clearTapHandlers() {
                    clearTimeout(timer);

                    bbdesigner$this.off(mouseStopEvent, clickHandler);
                    if (isIE9) bbdesigner$document.off(mouseStopEvent, clickHandler);
                    bbdesigner$this.off(touchCancelEvent, clearTapHandlers);
                    bbdesigner$this.off(mouseMoveEvent, touchMoveAction);
                    bbdesigner$this.off('dragstart', dragAction);
                }
                function touchMoveAction(e) {
                    var coor1 = (e.originalEvent.changedTouches ? e.originalEvent.changedTouches[0] : e.originalEvent),
                        coor2 = (event.originalEvent.changedTouches ? event.originalEvent.changedTouches[0] : event.originalEvent);                        
                    if (!(coor1.pageX == coor2.pageX && coor1.pageY == coor2.pageY)) {                        
                        if (e.type == "mousemove" || (e.type == "pointermove" && e.originalEvent.pointerType == "mouse") ||
                            e.type == "MSPointerMove" && e.originalEvent.pointerType == 4) {
                            clearTimeout(timer);
                            bbdesigner$this.off(touchCancelEvent, clearTapHandlers);
                            bbdesigner$this.off(mouseMoveEvent, touchMoveAction);
                        }
                        else
                          clearTapHandlers();                                            
                    }                    
                }
                function clickHandler(e) {
                    if (e.type == "touchend") d.preTouchend = getTimeSpan();
                    clearTapHandlers();

                    // Modify the tap event target
                    if (mouseDownTarget != e.target && (e.type == "mouseup" || event.type == "pointerup" || "MSPointerUp")) {
                        var mouseupTarget = e.target;                        
                        // Mousedown element is the parent of the mouseup element.                       
                        if (bbdesigner$.contains(mouseDownTarget, mouseupTarget))
                            // Mousedown element is target.
                            updateTargetEle(e, mouseDownTarget);
                       
                        // Mousedown element is the sibiling of the mouseup element.                            
                        else if (!(bbdesigner$.contains(mouseupTarget, mouseDownTarget))) {
                            var ele = bbdesigner$(mouseDownTarget).parents().has(bbdesigner$(mouseupTarget)).first()[0];
							if(!BoldBIDashboard.isNullOrUndefined(ele))
                                updateTargetEle(e, ele);                         
                        }
                    }

                    // ONLY trigger a 'tap' event if the startPoint target is
                    // the same as the stopPoint target.
                    if (origTarget === e.currentTarget) {
                        initiateCustomEvent(thisObj, "tap", bbdesigner$.extend(_getBaseOptions(e), {
                            time: getTimeSpan() - d.startTime
                        }));

                        if (d.isDoubleTapWait && bbdesigner$.event.special.tap.canDoubleTap(d)) {
                            d.isDoubleTapWait = false;

                            initiateCustomEvent(thisObj, "doubletap", bbdesigner$.extend(_getBaseOptions(e), {
                                time: getTimeSpan() - d.doubleTapStartTime
                            }));
                        }
                        else {
                            if (d.isDoubleTapWait) {
                                d.isDoubleTapWait = false;
                                d.doubleTapStartTime = d.startTime;
                            }
                            if (bbdesigner$.event.special.tap.canDoubleTap(d)) {
                                d.isDoubleTapWait = true;
                            }
                        }
                    }
                }
                function updateTargetEle(e,target) {
                    e.target = target;
                    e.toElement = target;                  
                }
                function dragAction(e) {
                    // Remove the tap handler while moving the element inside the tap.
                    clearTapHandlers();
                }
                if (!(event.which && event.which !== 1) && !d.stopProcess) {                   
                    bbdesigner$this.on(mouseStopEvent, clickHandler);
                    if (isIE9) bbdesigner$document.on(mouseStopEvent, clickHandler);
                    bbdesigner$this.on(touchCancelEvent, clearTapHandlers);
                    bbdesigner$this.on(mouseMoveEvent, touchMoveAction);
                    bbdesigner$this.on('dragstart', dragAction);
                    timer = setTimeout(function () {
                        if (d.isDoubleTapWait) d.isDoubleTapWait = false;
                        initiateCustomEvent(thisObj, "taphold", bbdesigner$.extend(_getBaseOptions(event), {
                            options: origEvent,
                            time: getTimeSpan() - d.startTime
                        }));

                    }, bbdesigner$.event.special.tap.tapholdThreshold);
                }
                else if (d.stopProcess) d.stopProcess = false;
            });
        }
    };    
    bbdesigner$.event.special.swipe = {
        scrollSupression: 10,
        duration: 1000,
        horizontalDistance: 30,
        verticalDistance: 75,
        pointers: window.navigator.msPointerEnabled,
        startPoint: function (e) {
            var data = touchObj(e);
            return {
                time: (new Date()).getTime(),
                coords: [data.pageX, data.pageY],
                origin: bbdesigner$(e.target)
            };
        },
        stopPoint: function (e) {
            var data = touchObj(e);
            return {
                time: (new Date()).getTime(),
                coords: [data.pageX, data.pageY]
            };
        },
        handleSwipe: function (startPoint, stopPoint, e, _startevent) {

            if (stopPoint.time - startPoint.time < bbdesigner$.event.special.swipe.duration &&
				Math.abs(startPoint.coords[0] - stopPoint.coords[0]) > bbdesigner$.event.special.swipe.horizontalDistance &&
				Math.abs(startPoint.coords[1] - stopPoint.coords[1]) < bbdesigner$.event.special.swipe.verticalDistance) {

                var _addDetails = { time: stopPoint.time - startPoint.time, _isSwipe: true, _isDelta: true, stopPoint: stopPoint };
                var _options = _getOptions(e, _addDetails, _startevent);

                startPoint.origin.trigger(bbdesigner$.extend(true, { type: "swipe" }, _options))
					.trigger(bbdesigner$.extend(true,
                    { type: startPoint.coords[0] > stopPoint.coords[0] ? "swipeleft" : "swiperight" }, _options));
            }
        },

        setup: function () {
            var thisObj = this, bbdesigner$this = bbdesigner$(thisObj);
            checkMsieTouch(bbdesigner$this);

            bbdesigner$this.on(touchStartEvent, function (e) {
                var startPoint = bbdesigner$.event.special.swipe.startPoint(e),
					stopPoint;
                var _startevent = e;
                bbdesigner$(e.target).data('_dataTouchStart', { event: e, _now: new Date().getTime() });

                function moveHandler(e) {
                    if (!startPoint) return;
                    stopPoint = bbdesigner$.event.special.swipe.stopPoint(e);
                    if (Math.abs(startPoint.coords[0] - stopPoint.coords[0]) > bbdesigner$.event.special.swipe.scrollSupression) e.preventDefault();
                }

                bbdesigner$this.on(touchMoveEvent, moveHandler)
					.one(touchStopEvent, function (e) {
					    bbdesigner$this.off(touchMoveEvent, moveHandler);
					    if (startPoint && stopPoint) {
					        bbdesigner$.event.special.swipe.handleSwipe(startPoint, stopPoint, e, _startevent);
					    }
					    startPoint = stopPoint = undefined;
					});
            });
        }
    };
    // also handles pinchin, pinchout
    bbdesigner$.event.special.pinch = {
        distance: function (e) {
            if (e.originalEvent.touches.length < 2) return null;
            return bbdesigner$.event.special.pinch._getdistance(e.originalEvent.touches[0], e.originalEvent.touches[1]);
        },
        _getdistance: function (coor1, coor2) {
            return Math.sqrt((coor1.pageX - coor2.pageX) * (coor1.pageX - coor2.pageX) +
                (coor1.pageY - coor2.pageY) * (coor1.pageY - coor2.pageY));
        },
        setup: function () {
            var thisObj = this, bbdesigner$this = bbdesigner$(thisObj);
            checkMsieTouch(bbdesigner$this);
            bbdesigner$this.on(touchStartEvent, function (e) {
                var _startevent = e;
                if (e.originalEvent.touches && e.originalEvent.touches.length >= 2) {
                    var startPoint = bbdesigner$.event.special.pinch.distance(e), stopPoint, minDistance = 5;

                    var _pinchDistance = startPoint, moveEvent;
                    var _options = _getOptions(e, { _isPinch: true, _pinchDistance: _pinchDistance }, _startevent);

                    bbdesigner$(e.target).trigger(bbdesigner$.extend(true, { type: "pinch" }, _options));

                    function moveHandler(e) {
                        moveEvent = e;
                        stopPoint = bbdesigner$.event.special.pinch.distance(e) || null;
                        if (startPoint && stopPoint && Math.abs(startPoint - stopPoint) > minDistance) {

                            bbdesigner$(e.target).trigger(bbdesigner$.extend(true,
                                { type: startPoint > stopPoint ? "pinchin" : "pinchout" }, _getOptions(e,
                                { _isPinch: true, _pinchDistance: _pinchDistance }, _startevent)));

                            startPoint = stopPoint;
                        }
                    }

                    bbdesigner$this.on(touchMoveEvent, moveHandler)
                        .one(touchStopEvent, function () {
                            bbdesigner$this.off(touchMoveEvent, moveHandler);
                            bbdesigner$(e.target).trigger(bbdesigner$.extend(true, { type: "pinchstop" }, _getOptions(moveEvent,
                                { _isPinch: true, _pinchDistance: stopPoint }, _startevent)));
                            startPoint = stopPoint = undefined;
                        });
                }
            });
        }
    };
    //  handles touchdrag, touchdrag
    bbdesigner$.event.special.touchdrag = {

        setup: function () {
            var thisObj = this, bbdesigner$this = bbdesigner$(thisObj);
            checkMsieTouch(bbdesigner$this);

            bbdesigner$this.on(touchStartEvent, function (e) {

                var startPoint = touchObj(e),
					stopPoint;
                var _startevent = e;
                bbdesigner$(e.target).data('_dataTouchStart', { event: e, _now: new Date().getTime() });

                function moveHandler(e) {
                    if (!startPoint) {
                        return;
                    }
                    stopPoint = touchObj(e);

                    if (bbdesigner$.event.special.pinch._getdistance(startPoint, stopPoint) > 5)
                        bbdesigner$(e.target).trigger(bbdesigner$.extend(true, { type: "touchdrag" },
                            _getOptions(e, { _isdrag: true, stopPoint: stopPoint, _isDelta: true }, _startevent)));
                }

                bbdesigner$this.on(touchMoveEvent, moveHandler)
					.one(touchStopEvent, function (e) {
					    bbdesigner$this.off(touchMoveEvent, moveHandler);
					    startPoint = stopPoint = undefined;
					});
            });
        }
    };
    function _getBaseOptions(e) {
        var _pointer = isPointer ? e.originalEvent.pointerType : (!e.originalEvent.touches ? "mouse" : "touch")
        var pointerType = (isPointer && isIE11Pointer == undefined) ? (_pointer == 4 ? "mouse" : "touch") : _pointer;
        e["pointerType"] = pointerType;
        if (e.type != "mousedown" && e.type != "mouseup") {
            copyObject(e, e.originalEvent);
        }
        return e;
    }
    function _getOptions(e, _details, _startevent) {
        var _distance, _time, _scale, _iDelta = {}, _startXY, _endXY;
        if (_startevent) {
            var coor;
            if (!_startevent.originalEvent.touches) coor = [_startevent.originalEvent, e.originalEvent];
            else coor = [_startevent.originalEvent.touches[0], e.originalEvent.changedTouches[0]];

            if (_details._isSwipe || _details._isdrag) {
                _distance = bbdesigner$.event.special.pinch._getdistance(coor[0], coor[1]);
                _time = _details.time;
                _endXY = { pageX: _details.stopPoint.pageX, pageY: _details.stopPoint.pageY };
            }
            else if (_details._isPinch) {
                _distance = bbdesigner$.event.special.pinch.distance(e);
                _time = e.timeStamp - _startevent.timeStamp;
                _scale = _details._pinchDistance;
            }
            if (_details._isDelta) {
                _iDelta._dTime = e.timeStamp - _startevent.timeStamp;
                _iDelta._x = coor[1].pageX - coor[0].pageX;
                _iDelta._y = coor[1].pageY - coor[0].pageY;
            }
        }

        return {
            options: e,
            delta: {
                time: _iDelta._dTime || null,
                X: _iDelta._x || null,
                Y: _iDelta._y || null
            },
            distance: _distance,
            scale: _details._isPinch ? _scale : null,
            time: _time,
            velocity: {
                XY: _distance / _iDelta._dTime || null,
                X: _iDelta._x / _iDelta._dTime || null,
                Y: _iDelta._y / _iDelta._dTime || null
            },
            currentPosition: { pageX: _endXY ? _endXY.pageX : null, pageY: _endXY ? _endXY.pageY : null }
        };
    }

    function getTimeSpan() {
        var now = new Date();
        return now.getTime();
    }
    function checkMsieTouch(bbdesigner$this) {
        if (isPointer)
            bbdesigner$this.css("-ms-touch-action", "pinch-zoom").css("touch-action", "pinch-zoom");
    }

    bbdesigner$.each({
        scrollstop: "scrollstart",
        doubletap: "tap",
        taphold: "tap",
        swipeleft: "swipe",
        swiperight: "swipe",
        swipedown: "swipeupdown",
        swipeup: "swipeupdown",
        pinchin: "pinch",
        pinchout: "pinch",
        pinchstop: "pinch"
    }, function (event, sourceEvent) {

        bbdesigner$.event.special[event] = {
            setup: function () {
                bbdesigner$(this).on(sourceEvent, bbdesigner$.noop);
            }
        };
    });

})(bbdesigner$);
;
/**
* @fileOverview Plugin to drag the html elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) { 
    BoldBIDashboard.widget("BoldBIDashboardDraggable", "BoldBIDashboard.Draggable", {
        
        element: null,

        
        model: null,
        validTags: ["div", "span", "a"],

        
        defaults: {
            
            scope: 'default', 
            
            handle: null,  
            
            dragArea: null,
            
            clone: false,
            
            distance: 1, 
			
			dragOnTaphold: false,
            
            cursorAt: { top: -1, left: -2 }, 
            
            dragStart: null, 
            
            drag: null, 
            
            dragStop: null, 
			
			create: null,
            
            destroy: null, 
            
            helper: function () {
                return bbdesigner$('<div class="e-drag-helper" />').html("draggable").appendTo(document.body);
            }
        },

        
        _init: function () {
            this.handler = function () { },
			this.resizables = {};
            this._wireEvents();
            this._browser = BoldBIDashboard.browserInfo();
            this._isIE8 = this._browser.name == "msie" && this._browser.version == "8.0";
            this._isIE9 = this._browser.name == "msie" && this._browser.version == "9.0";
            //e-pinch class enables the touch mode operations in IE browsers
            this._browser.name == "msie" && this.element.addClass("e-pinch");
            this._browser.name == "edge" && this.element.css("touch-action", "none");
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "dragArea":
                        this.model.dragArea = options[key];
                        break;
						case "dragOnTaphold":
                        this.model.dragOnTaphold = options[key];
                        break; 
                }
            }
        },
        
        
        _destroy: function () {
            bbdesigner$(document)
                .off(BoldBIDashboard.eventType.mouseUp, this._destroyHandler)
                .off(BoldBIDashboard.eventType.mouseUp, this._dragStopHandler)
                .off(BoldBIDashboard.eventType.mouseMove, this._dragStartHandler)
                .off(BoldBIDashboard.eventType.mouseMove, this._dragHandler)
                .off("mouseleave", this._dragMouseOutHandler)
                .off('selectstart', false);

            

            BoldBIDashboard.widgetBase.droppables[this.scope] = null;
            
        },

        _initialize: function (e) {
            if( e.target && e.target.nodeName && bbdesigner$( e.target ).closest( "input[type='text'], input[type='checkbox'], textarea, select, option" ).length) return true;
            var ori = e;
			e.preventDefault();
            e = this._getCoordinate(e);
            this.target = bbdesigner$(ori.currentTarget);
            this._initPosition = { x: e.pageX, y: e.pageY };
            
            bbdesigner$(document).on(BoldBIDashboard.eventType.mouseMove, this._dragStartHandler).on(BoldBIDashboard.eventType.mouseUp, this._destroyHandler);
            if (!this.model.clone) {
                var _offset = this.element.offset();
                this._relXposition = e.pageX - _offset.left;
                this._relYposition = e.pageY - _offset.top;
            }
            bbdesigner$(document.documentElement).trigger(BoldBIDashboard.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
           //return false;
        },
        _setDragArea: function () {
            var _dragElement = bbdesigner$(this.model.dragArea)[0]; if (!_dragElement) return;
            var elementArea, elementWidthBound, elementHeightBound, elementArea, direction = ["left", "right", "bottom", "top"], top, left;
            if (!BoldBIDashboard.isNullOrUndefined(_dragElement.getBoundingClientRect)) {
                elementArea = _dragElement.getBoundingClientRect();
                elementArea.width ? elementWidthBound = elementArea.width : elementWidthBound = elementArea.right - elementArea.left;
                elementArea.height ? elementHeightBound = elementArea.height : elementHeightBound = elementArea.bottom - elementArea.top;
                for (var j = 0; j < direction.length; j++) {
                    this["border-" + direction[j] + "-width"] = isNaN(parseFloat(bbdesigner$(bbdesigner$(this.model.dragArea)[0]).css("border-" + direction[j] + "-width"))) ? 0 : parseFloat(bbdesigner$(bbdesigner$(this.model.dragArea)[0]).css("border-" + direction[j] + "-width"));
                    this["padding-" + direction[j]] = isNaN(parseFloat(bbdesigner$(bbdesigner$(this.model.dragArea)[0]).css("padding-" + direction[j]))) ? 0 : parseFloat(bbdesigner$(bbdesigner$(this.model.dragArea)[0]).css("padding-" + direction[j]));
                }
                top = bbdesigner$(this.model.dragArea).offset().top; left = bbdesigner$(this.model.dragArea).offset().left;
            } else {
                elementWidthBound = bbdesigner$(this.model.dragArea).outerWidth();
                elementHeightBound = bbdesigner$(this.model.dragArea).outerHeight();
                for (var j = 0; j < direction.length; j++) {
                    this["border-" + direction[j] + "-width"] = 0;
                    this["padding-" + direction[j]] = 0;
                }
                top = left = 0;
            }
            this._left = BoldBIDashboard.isNullOrUndefined(bbdesigner$(this.model.dragArea).offset()) ? 0 + this["border-left-width"] + this["padding-left"] : left + this["border-left-width"] + this["padding-left"];
            this._top = BoldBIDashboard.isNullOrUndefined(bbdesigner$(this.model.dragArea).offset()) ? 0 + this["border-top-width"] + this["padding-top"] : top + this["border-top-width"] + this["padding-top"];
            this._right = left + elementWidthBound - [this["border-right-width"] + this["padding-right"]];
            this._bottom = top + elementHeightBound - [this["border-bottom-width"] + this["padding-bottom"]];
        },
        _dragStart: function (e) {
            if(e.type =="touchmove" || ( e.type =="mousemove" && ((e.buttons !== undefined ? e.buttons : e.which) == 1) || (this._isIE8 || this._isIE9))){
            var ori = e;
            e = this._getCoordinate(e);
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0),
                right: (parseInt(this.element.css("marginRight"), 10) || 0),
                bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
            };
            this.offset = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.position = this._getMousePosition(ori);
            var x = this._initPosition.x - e.pageX, y = this._initPosition.y - e.pageY;
            var distance = Math.sqrt((x * x) + (y * y));

            if (distance >= this.model.distance) {
			    var ele = this.model.helper({ sender: ori, element: this.target });
				if(!ele || BoldBIDashboard.isNullOrUndefined(ele)) return;
                var dragTargetElmnt = this.model.handle = this.helper = ele;
                if (this.model.dragStart) {
                    var currTarget = null;
                    if (ori.type == 'touchmove') {
                        var coor = ori.originalEvent.changedTouches[0];
                        currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
                    }
                    else currTarget = ori.originalEvent.target || ori.target;
					if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0)
						currTarget = this._checkTargetElement(e) || currTarget;   
                    if (this._trigger("dragStart", { event: ori, element: this.element, target: currTarget, currentTarget: this._getCurrTarget(e)})) {
                        this._destroy();
                        return false;
                    }
                }
                if (this.model.dragArea) this._setDragArea();
                else {
                    this._left = this._top = this._right = this._bottom = 0;
                    this["border-top-width"] = this["border-left-width"] = 0;
                }
                
                var pos= dragTargetElmnt.offsetParent().offset();
                bbdesigner$(document).off(BoldBIDashboard.eventType.mouseMove, this._dragStartHandler).off(BoldBIDashboard.eventType.mouseUp, this._destroyHandler)
                    .on(BoldBIDashboard.eventType.mouseMove, this._dragHandler).on(BoldBIDashboard.eventType.mouseUp, this._dragStopHandler).on("mouseleave", this._dragMouseOutHandler).on("selectstart", false);
                BoldBIDashboard.widgetBase.droppables[this.model.scope] = {
                    draggable: this.element,
                    helper: dragTargetElmnt.css({ position: 'absolute',  left: (this.position.left-pos.left), top: (this.position.top-pos.top) }),
                    destroy: this._destroyHandler
                }
            }
            }
        },

        _drag: function (e) {
            var left, top, pageX, pageY;
			e.preventDefault();
            this.position = this._getMousePosition(e);
            if (this.position.top < 0)
                this.position.top = 0;
            if (bbdesigner$(document).height() < this.position.top)
                this.position.top = bbdesigner$(document).height();
            if (bbdesigner$(document).width() < this.position.left)
                this.position.left = bbdesigner$(document).width();
            var helperElement = BoldBIDashboard.widgetBase.droppables[this.model.scope].helper;
            if (this.model.drag) {
                var currTarget = null;
                if (e.type == 'touchmove') {
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
                }
                else currTarget = e.originalEvent.target || e.target;
				if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0 )
                    currTarget = this._checkTargetElement(e)|| currTarget; 
                this._trigger("drag", { event: e, element: this.target, target: currTarget, currentTarget: this._getCurrTarget(e) });// Raise the dragging event
            }
            var element = this._checkTargetElement(e);
            if (!BoldBIDashboard.isNullOrUndefined(element)) {
                e.target = e.toElement = element;
                element.object._over(e); 
                this._hoverTarget = element; 
            }
            else if (this._hoverTarget) {
                e.target = e.toElement = this._hoverTarget;
                this._hoverTarget.object._out(e);
                this._hoverTarget = null;
            }
            var helperElement = BoldBIDashboard.widgetBase.droppables[this.model.scope].helper;
			var pos= helperElement.offsetParent().offset();			 
            pageX = BoldBIDashboard.isNullOrUndefined(e.pageX) ? e.originalEvent.changedTouches[0].pageX : e.pageX;
            pageY = BoldBIDashboard.isNullOrUndefined(e.pageY) ? e.originalEvent.changedTouches[0].pageY : e.pageY;
            if (this.model.dragArea) {
                if (this._pageX != pageX) {
                    if (this._left > this.position.left) left = this._left;
                    else if (this._right < this.position.left + helperElement.outerWidth(true)) left = this._right - helperElement.outerWidth(true);
                    else left = this.position.left;
                }
                if (this._pageY != pageY) {
                    if (this._top > this.position.top) top = this._top;
                    else if (this._bottom < this.position.top + helperElement.outerHeight(true)) top = this._bottom - helperElement.outerHeight(true);
                    else top = this.position.top;
                }
            }
            else {
                left = this.position.left;
                top = this.position.top;
            }
            if (top < 0 || top - [pos.top + this["border-top-width"]] < 0) top = [pos.top + this["border-top-width"]];
            if (left < 0 || left - [pos.left + this["border-left-width"]] < 0) left = [pos.left + this["border-left-width"]];
            helperElement.css({ left: left - [pos.left + this["border-left-width"]], top: top - [pos.top + this["border-top-width"]] });
            this.position.left = left;
            this.position.top = top;
            this._pageX = pageX;
            this._pageY = pageY;
        },

        _dragStop: function (e) {
            if (e.type == 'mouseup' || e.type == 'touchend') 
                this._destroy(e);
            if (this.model.dragStop) {
                var currTarget = null;
                if (e.type == 'touchend') {
                if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0)
				currTarget = e.originalEvent.target || e.target;  
                else{
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
                }  
                }
                else currTarget = e.originalEvent.target || e.target;                
                if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0)
                    currTarget = this._checkTargetElement(e) || currTarget;              
                this._trigger("dragStop", { event: e, element: this.target, target: currTarget, currentTarget: this._getCurrTarget(e) });// Raise the dragstop event
            }
            this._dragEnd(e);
        },
        _dragEnd: function (e) {
            var element = this._checkTargetElement(e);
            if (!BoldBIDashboard.isNullOrUndefined(element)) {
                e.target = e.toElement = element;
                element.object._drop(e, this.element);
            }
        },

        _dragMouseEnter: function (e) {
            bbdesigner$(document).off("mouseenter", this._dragMouseEnterHandler);
            if (this._isIE9)
                this._dragManualStop(e);
            else if (this._isIE8) {
                if (e.button == 0)
                    this._dragManualStop(e);
            }
            else if (e.buttons == 0)
                this._dragManualStop(e);
        },

        _dragManualStop: function (e) {
            if (this.model.dragStop != null)
                this._trigger("dragStop", { event: e, element: this.target, target: e.originalEvent.target || e.target, currentTarget: this._getCurrTarget(e) });  // Raise the dragstop event
            this._destroy(e);
        },

        _dragMouseOut: function (e) {
            bbdesigner$(document).on("mouseenter", this._dragMouseEnterHandler);
        },

        _checkTargetElement:function(e)
        {
            var target ;
			if (e.type == "touchmove" || e.type == "touchstart" || e.type == "touchend" || e.type=="taphold") {
				var coor = e.originalEvent.changedTouches[0];
				target = document.elementFromPoint(coor.clientX, coor.clientY);
			}
			else
				target = e.target;
            if (this.helper && this._contains(this.helper[0], target)) {
                this.helper.hide();
                target = this._elementUnderCursor(e);
                this.helper.show();
                return this._withDropElement(target);
            }
            return this._withDropElement(target);
        },
        _getCurrTarget: function(e) {
            var target = (e.originalEvent && e.originalEvent.target) || e.target;
            if(!BoldBIDashboard.isNullOrUndefined(target.style)){
            var styleVal = target.style.display;
            if (this.element.is(target))
                target.style.display = "none";
			var currTarget = null;
			if((!BoldBIDashboard.isNullOrUndefined(e.pageX)) && !(BoldBIDashboard.isNullOrUndefined(e.pageY)))
				currTarget = document.elementFromPoint(e.pageX, e.pageY);
            target.style.display = styleVal;
            return currTarget;
            }
        },
        _withDropElement:function(target)
        {
            if (target) {
                var dropObj = bbdesigner$(target).data('BoldBIDashboardDroppable');
                if (BoldBIDashboard.isNullOrUndefined(dropObj)) dropObj = this._checkParentElement(bbdesigner$(target));
                if (!BoldBIDashboard.isNullOrUndefined(dropObj)) {
                    return bbdesigner$.extend(target, { object: dropObj });
                }
            }
        },
        _checkParentElement: function (element) {
            var target = bbdesigner$(element).closest('.e-droppable');
            if (target.length > 0) {
                var dropObj = bbdesigner$(target).data('BoldBIDashboardDroppable');
                if (!BoldBIDashboard.isNullOrUndefined(dropObj)) return dropObj;
            }
        },
        _elementUnderCursor:function(e){
            if(e.type == "touchmove" || e.type == "touchstart" || e.type == "touchend" || e.type=="taphold")
                return document.elementFromPoint(e.originalEvent.changedTouches[0].clientX, e.originalEvent.changedTouches[0].clientY);
            else return document.elementFromPoint(e.clientX, e.clientY);
        },
        _contains:function(parent, child) {
            try {
                return bbdesigner$.contains(parent, child) || parent == child;
            } catch (e) {
                    return false;
                }
        },
        _wireEvents: function () {
			if(BoldBIDashboard.isDevice()==true && this.model.dragOnTaphold==true)
            this._on(this.element, "taphold", this._initialize);
		else
            this._on(this.element, BoldBIDashboard.eventType.mouseDown, this._initialize);
            this._dragStartHandler = bbdesigner$.proxy(this._dragStart, this);
            this._destroyHandler = bbdesigner$.proxy(this._destroy, this);
            this._dragStopHandler = bbdesigner$.proxy(this._dragStop, this);
            this._dragHandler = bbdesigner$.proxy(this._drag, this);
            this._dragMouseEnterHandler = bbdesigner$.proxy(this._dragMouseEnter, this);
            this._dragMouseOutHandler = bbdesigner$.proxy(this._dragMouseOut, this);
        },
        _getMousePosition: function (event) {
            event = this._getCoordinate(event);
            var pageX = this.model.clone ? event.pageX : event.pageX - this._relXposition;
            var pageY = this.model.clone ? event.pageY : event.pageY - this._relYposition;
            return { left: pageX - [this.margins.left + this.model.cursorAt.left ], top: pageY - [this.margins.top + this.model.cursorAt.top ] };
        },
        _getCoordinate: function (evt) {
            var coor = evt;
            if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend" || evt.type== "taphold" && BoldBIDashboard.browserInfo().name !="msie")
                coor = evt.originalEvent.changedTouches[0];
            return coor;
        }
    });

})(bbdesigner$, SyncfusionBoldBIDashboard);
;

/**
* @fileOverview Plugin to style the Html ScrollBar elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, window, undefined) {
    'use strict';

    BoldBIDashboard.widget("BoldBIDashboardScrollBar", "BoldBIDashboard.ScrollBar", {
        defaults: {

            orientation: "horizontal",

            viewportSize: 0,

            height: 18,

            width: 18,

            smallChange: 57,

            largeChange: 57,

            value: 0,

            maximum: 0,

            minimum: 0,

            buttonSize: 18,

            infiniteScrolling: false
        },
        validTags: ["div"],
        type: "transclude",
        dataTypes: {
            buttonSize: "number",
            smallChange: "number",
            largeChange: "number",
        },
        observables: ["value"],
        value: BoldBIDashboard.util.valueFunction("value"),
        _enabled: true,
        content: function () {
            if (!this._content || !this._content.length) {
                if (this.model.orientation === "horizontal") {
                    this._content = this.element.find(".e-hhandle");
                }
                else {
                    this._content = this.element.find(".e-vhandle");
                }
            }
            return this._content;
        },
        _init: function () {
            this.element.addClass("e-widget");
            this._ensureScrollers();
            this.content();
            this._setInitialValues();

        },

        _setInitialValues: function () {
            var xy = "X";
            if (this.model.orientation === BoldBIDashboard.ScrollBar.Orientation.Horizontal) {
                this.element.addClass("e-hscrollbar");
            }
            else {
                this.element.addClass("e-vscrollbar");
                xy = "Y";
            }
            if (this.value() !== 0 || this.model.minimum !== 0) {
                if (this.value() < this.model.minimum)
                    this.value(this.model.minimum);
                this["scroll"](this.value(), "none");
            }
        },

        _ensureScrollers: function () {
            var jqVersion = bbdesigner$.fn.jquery, height, width;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }            
            var d2;
            if (!this._scrollData) {
                if (this.model.orientation === "vertical") {
                    this._scrollData = this._createScroller("Height", "Y", "Top", "e-v");
                }
                else {
                    this._scrollData = this._createScroller("Width", "X", "Left", "e-h");
                }
            }
        },

        _setModel: function (option) {
            for (var prop in option) {
                if (prop === "value") {
                    if (this.value()) {
                        this.scroll(this.value(), "none");
                    }
                } else {
                    this.refresh();
                    break;
                }
            }
        },

        _createScroller: function (dimension, xy, position, css) {
            var height;
            var d = {};
            var jqVersion = bbdesigner$.fn.jquery;
            d.dimension = dimension;
            d.xy = xy;
            d.position = position;
            d.css = css;
            d.uDimension = dimension;

            this._calculateLayout(d);
            this._createLayout(d);
            var buttons = this[d.main].find(".e-button");

            this._off(buttons, "mousedown")
                ._on(buttons, "mousedown", { d: d, step: 1 }, this._spaceMouseDown);
            this._off(this[d.scroll], "mousedown")
                ._on(this[d.scroll], "mousedown", { d: d }, this._spaceMouseDown);
            this._off(this[d.handler], "mousedown touchstart")
                ._on(this[d.handler], "mousedown touchstart", { d: d }, this._mouseDown);

            return d;
        },
        _createLayout: function (d) {
            var divString = "<div class='" + d.css + "{0}' style='" + d.dimension + ":{1}px'>{2}</div>";
            var jqVersion = bbdesigner$.fn.jquery;
            var lit = {}, height;
            lit[d.dimension] = d.modelDim;

            var el = BoldBIDashboard.buildTag(
                "div." + d.css + "scroll e-box",
                    String.format(divString, "up e-chevron-up_01 e-icon e-box e-button", d.buttonSize) +
                    String.format(divString, "handlespace", d.handleSpace,
                        String.format(divString, "handle e-box e-pinch" , d.handle)) +
                    String.format(divString, "down e-chevron-down_01 e-icon e-box e-button", d.buttonSize),
                lit
            );

            this.element.append(el);
            this.element.find('.e-vhandle').addClass("e-v-line e-icon");
            this.element.find('.e-hhandle').addClass("e-h-line e-icon");
            jqVersion === "1.7.1" || jqVersion === "1.7.2" ? height = d.uDimension.toLowerCase() : height = "outer" + d.uDimension;
            this[d.handler] = this.element.find("." + d.handler);
            this[d.handler].css("transition", "none");
            this[d.scroll] = this[d.handler].parent();
            this[d.main] = this[d.scroll].parent();
            this[d.main].find(".e-button")["outer" + d.uDimension](d.buttonSize);
        },
        _calculateLayout: function (d) {
            d.scrollDim = "scroll" + d.dimension;
            d.lPosition = d.position.toLowerCase();
            d.clientXy = "page" + d.xy;
            d.scrollVal = "scroll" + d.position;
            d.scrollOneStepBy = this.model.smallChange;
            d.modelDim = this.model[(d.dimension = d.dimension.toLowerCase())];
            d.handler = d.css + "handle";
            d.buttonSize = this.model.buttonSize;
            d.main = d.css + "scroll";
            d.scroll = d.css + "ScrollSpace";
            d.handleSpace = d.modelDim - 2 * d.buttonSize;
            d.scrollable = (this.model.maximum - this.model.minimum);
            var trackLength = this.model.height;
            if (this.model.orientation === "horizontal")
                trackLength = this.model.width;
            d.handle = (this.model.viewportSize / ((this.model.maximum - this.model.minimum) + this.model.viewportSize)) * (trackLength - 2 * this.model.buttonSize);
            var check;
            !BoldBIDashboard.isNullOrUndefined(this.model.elementHeight) && typeof this.model.elementHeight === "string" && this.model.elementHeight.indexOf("%") != -1 ? check = true : check = false;
            if (d.handle < 20 && !check) d.handle = 20;
            d.onePx = d.scrollable / (d.handleSpace - d.handle);
            d.fromScroller = false;
            d.up = true;
            d.vInterval = undefined;
        },
        _updateLayout: function (d) {
            this.element.height(this.model.height);
            this.element.width(this.model.width);
            var handle = this.element.find("." + d.css + "handle");
            var handleSpace = this.element.find("." + d.css + "handlespace");
            var size = d.dimension == "width" ? handle.css('left') : handle.css('top'); 
            var dimension = d.dimension == "width" ? handleSpace.outerWidth() : handleSpace.outerHeight(); 
            if (size !== undefined && size !== "auto"){
                if (!(dimension >= d.handle + parseFloat(size)))
                    if (this.model.enableRTL) handle.css(d.dimension === "width" ? 'left' : 'top', (parseFloat(dimension) - d.handle));
                    else handle.css(d.dimension === "width" ? 'left' : 'top', (parseFloat(dimension) - d.handle) > 0 ? (parseFloat(dimension) - d.handle) : 0);
            }
            this.element.find("." + d.css + "scroll").css(d.dimension, d.modelDim + "px")
                .find(".e-button").css(d.dimension, this.model.buttonSize).end()
                .find("." + d.css + "handlespace").css(d.dimension, d.handleSpace + "px")
                .find("." + d.css + "handle").css(d.dimension, d.handle + "px");
        },
        refresh: function () {
            this._ensureScrollers();
            if (this.value()) {
                this.scroll(this.value(), "none");
            }
            if (this._scrollData) {
                this._calculateLayout(this._scrollData);
                this._updateLayout(this._scrollData);
            }
        },

        scroll: function (pixel, source, triggerEvent, e) {
            var dS = this._scrollData;
            if (!triggerEvent) {
                if (this.model.orientation === BoldBIDashboard.ScrollBar.Orientation.Horizontal) {
                    if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollLeft: pixel, originalEvent: e }))
                        return;
                }
                else {
                    if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollTop: pixel, originalEvent: e }))
                        return;
                }
            }
			if (this._scrollData) { 
            if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && BoldBIDashboard.browserInfo().name != "msie") 
                this.value(-dS.scrollable + pixel);              
            else {
                if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && BoldBIDashboard.browserInfo().name == "msie")  this.value(-1 * pixel);              
                else this.value(pixel);
            }
            if (this.content().length > 0) {
                if (this.model.orientation === BoldBIDashboard.ScrollBar.Orientation.Horizontal) {
                        var left = (this.element.find('.e-hhandlespace').width() - this.element.find('.e-hhandle').outerWidth());
                        pixel = left < ((pixel - this.model.minimum) / this._scrollData.onePx) ? left : ((pixel - this.model.minimum) / this._scrollData.onePx);
                        if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && BoldBIDashboard.browserInfo().name != "msie") {
                            pixel = left - pixel;
                            pixel > 0 ? pixel = pixel * -1 : pixel;                           
                        }
                        if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && BoldBIDashboard.browserInfo().name == "msie") pixel = -pixel;       
                        this._scrollData.enableRTL && pixel > 0 && !this._scrollData._scrollleftflag ? pixel = 0 : pixel             
                        if (this._scrollData._scrollleftflag) {
                           
                            pixel > 0 ? pixel = pixel * -1 : pixel;
                            this.value(pixel);
                        }
                        this.content()[0].style.left = pixel + "px";
                        this._scrollData._scrollleftflag = false;
                }
                else {
                    var top = (this.element.find('.e-vhandlespace').height() - this.element.find('.e-vhandle').outerHeight());
                    pixel = top < ((pixel - this.model.minimum) / this._scrollData.onePx) ? top : ((pixel - this.model.minimum) / this._scrollData.onePx);
                    this.content()[0].style.top = pixel + "px";
                }
				}
			}
        },

        _changeTop: function (d, step, source) {
            var start, t;
            if (d.dimension === "height")
                start = this.value();
            else
                start = this.value();
            t = start + step;
            d.step = step;
            if ((d.enableRTL && step < 0) || (step > 0 && !d.enableRTL)) {
                if (d.enableRTL) {
                    if (t < this.model.maximum * -1)
                        t = this.model.maximum * -1;
                }
                else {
                    if (t > this.model.maximum)
                        t = this.model.maximum;
                }
            }
            else {
                if (d.enableRTL) {
                    if (t > this.model.minimum)
                        t = this.model.minimum;
                }
                else {
                    if (t < this.model.minimum)
                        t = this.model.minimum;
                }
            }
            if (t !== start || this.model.infiniteScrolling) {
                this["scroll"](t, source);
            }
            return t !== start;
        },

        _mouseUp: function (e) {
            if (!e.data) return;
            var d = e.data.d;
            clearInterval(d.vInterval);
            if (e.type == "touchend") bbdesigner$(e.target).removeClass("e-touch");
            if (e.type === "mouseup"  || e.type === "touchend" || (!e.toElement && !e.relatedTarget && !e.target)) {
                this._prevY = this._d = this._data = null;
                this._off(bbdesigner$(document), "mousemove touchmove", this._mouseMove);
                bbdesigner$(document).off("mouseup touchend", BoldBIDashboard.proxy(this._mouseUp, this));
                d.fromScroller = false;
                this[d.scroll].off("mousemove");
                this[d.handler].off("mousemove").css("transition", "");
                if (e.data.source === "thumb" && !BoldBIDashboard.isNullOrUndefined(this.model)) {
                    bbdesigner$.when(this.content()).done(BoldBIDashboard.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                }
            }
            d.up = true;
        },


        _mouseDown: function (down) {
            if (!this._enabled) return;
            this._d = down;
            this._data = this._d.data.d,
            this._data.target = this._d.target;
            this._data.fromScroller = true;
            this[this._data.handler].css("transition", "none");
            this._on(bbdesigner$(document), "mousemove touchmove", { d: this._data, source: "thumb" }, this._mouseMove);
            this._trigger("thumbStart", { originalEvent: this._d, scrollData: this._data });
            bbdesigner$(document).one("mouseup touchend", { d: this._data, source: "thumb" }, BoldBIDashboard.proxy(this._mouseUp, this));
            if (down.type == "touchstart") bbdesigner$(down.target).addClass("e-touch");
        },
        _mouseCall:function(move){
            move.type = "mouseup";
            this._mouseUp(move);
        },
        _mouseMove:function(move){
            var value, step = 0, top = parseInt(this[this._data.handler].css(this._data.lPosition)) || 0;
            move.preventDefault();
            var skip = 1;
            if (BoldBIDashboard.isNullOrUndefined(move.target.tagName)) {
                if (bbdesigner$(move.target).is(document)) {
                    this._mouseCall(move);
                    return;
                }
            }
            else if (move.target.tagName.toLowerCase() === "iframe") { this._mouseCall(move); return; }
            var pageXY = move.type == "mousemove" ? move[this._data.clientXy] : move.originalEvent.changedTouches[0][this._data.clientXy];
            if (this._prevY && pageXY !== this._prevY) {
                step = (pageXY - this._prevY);
                if (this.model.infiniteScrolling) {
                    top = top + step;
                    this._data.step = step;
                    if (this._data.enableRTL ? top > 0 : top < 0) top = 0;
                    if ((top * (this._data.enableRTL ? -1 : 1)) + this._data.handle >= this._data.handleSpace)
                        top = (this._data.handleSpace - this._data.handle) * (this._data.enableRTL ? -1 : 1);
                    value = Math.ceil(top * this._data.onePx);
                    this["scroll"](value, "thumb");
                }
                else {
                    value = step * this._data.onePx;
                    this._changeTop(this._data, value, "thumb", this._d);
                }
                this._trigger("thumbMove", { originalEvent: move, direction: (this._data.step > 0) ? +1 : -1, scrollData: this._data });
            }
            if (skip === 1)
                this._prevY = pageXY;
        },

        _spaceMouseDown: function (e) {
            if (!e.data || !this._enabled) return;
            var d = e.data.d;
            if (e.which !== 1 || e.target === this[d.handler][0]) return;
            var step = e.data.step ? this.model.smallChange : this.model.largeChange, hTop = e.data.top || this[d.handler].offset()[d.lPosition];
            e[d.clientXy] = e[d.clientXy] || 0;
            if (e[d.clientXy] < hTop) step *= -1;
            d.target = e.target;
            this._changeTop(d, step, step === 3 ? "track" : "button", e);
            if (e.data.step !== 1) {
                this[d.scroll].mousemove(function () {
                    d.up = true;
                });
            }
            d.up = false;
            d.vInterval = setInterval(BoldBIDashboard.proxy(function () {
                if (step < 0 ? hTop + (step / d.onePx) < e[d.clientXy] : hTop + d.handle + (step / d.onePx) > e[d.clientXy])
                    d.up = true;
                if (d.up) {
                    clearInterval(d.vInterval);
                    return;
                }
                this._changeTop(d, step, step === 3 ? "track" : "button", e);
                e.data ? hTop = e.data.top || this[d.handler].offset()[d.lPosition] : hTop = this[d.handler].offset()[d.lPosition];
            }, this), 150);

            bbdesigner$(document).one("mouseup", { d: d }, BoldBIDashboard.proxy(this._mouseUp, this));
            bbdesigner$(document).mouseout({ d: d }, BoldBIDashboard.proxy(this._mouseUp, this));
        },

        _remove: function () {
            if (this.model.orientation === BoldBIDashboard.ScrollBar.Orientation.Horizontal)
                this.element.find(".e-hscroll").remove();
            if (this.model.orientation === BoldBIDashboard.ScrollBar.Orientation.Vertical)
                this.element.find(".e-vscroll").remove();
            this._scrollData = null;
            this._content = null;
        },

        _destroy: function () {
            this.element.remove();
        },
    });

    BoldBIDashboard.ScrollBar.Orientation = {
        Horizontal: "horizontal",
        Vertical: "vertical"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard, window);;

/**
* @fileOverview Plugin to style the Html Scroller elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/


(function (bbdesigner$, BoldBIDashboard, window, undefined) {
    'use strict';

    BoldBIDashboard.widget("BoldBIDashboardScroller", "BoldBIDashboard.Scroller", {
        _addToPersist: ["scrollLeft", "scrollTop"],
        defaults: {

            height: 250,

            autoHide: false,

            animationSpeed: 600,

            width: 0,

            scrollOneStepBy: 57,

            buttonSize: 18,

            scrollLeft: 0,

            scrollTop: 0,

            targetPane: null,

            scrollerSize: 18,

            enablePersistence: false,

            enableRTL: undefined,

            enableTouchScroll: true,

            enabled: true,

            create: null,

            destroy: null,

            wheelStart: null,

            wheelMove: null,

            wheelStop: null
        },
        validTags: ["div"],
        type: "transclude",

        dataTypes: {
            buttonSize: "number",
            scrollOneStepBy: "number"
        },
        observables: ["scrollTop", "scrollLeft"],
        scrollTop: BoldBIDashboard.util.valueFunction("scrollTop"),
        scrollLeft: BoldBIDashboard.util.valueFunction("scrollLeft"),

        keyConfigs: {
            up: "38",
            down: "40",
            left: "37",
            right: "39",
            pageUp: "33",
            pageDown: "34",
            pageLeft: "ctrl+37",
            pageRight: "ctrl+39"
        },

        content: function () {
            if (!this._content || !this._content.length || !this._content[0].offsetParent)
                this._content = this.element.children().first().addClass("e-content");

            return this._content;
        },
        _setFirst: true,
        _updateScroll: false,

        _init: function () {
			if(!BoldBIDashboard.isNullOrUndefined(this.content()[0])){
            this._prevScrollWidth = this.content()[0].scrollWidth, this._prevScrollHeight = this.content()[0].scrollHeight;
            this.element.addClass("e-widget");
            this.content();
            this._browser = BoldBIDashboard.browserInfo().name;
            this._wheelStart = true;
            this._eleHeight = this.model.height;
            this._eleWidth = this.model.width;
            if (this.model.enableRTL === undefined) {
                this.model.enableRTL = this.element.css("direction") === "rtl";
            }
			this.model.autoHide && this._on((this.element), "mousedown", this._mouseDownInitContent);
            this._ensureScrollers();
            if (this.model.enableRTL) {
                this.element.addClass("e-rtl");
                this._rtlScrollLeftValue = this.content().scrollLeft();
            }
            this._on(this.content(), "scroll", this._scroll);
            this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
            if (this.scrollLeft())
                this._setScrollLeftValue(this.scrollLeft());
            if (this.scrollTop())
                this.content().scrollTop(this.scrollTop());

            if (this.model.autoHide) {
                this._autohide();
            }
            if (this.model.enabled) {
                this.enable();
            }
            else {
                this.disable();
            }
            this._setDimension();
            if (this._prevScrollWidth !== this.content()[0].scrollWidth || this._prevScrollHeight !== this.content()[0].scrollHeight) this.refresh();
			}
            this._addActionClass();
        },
		_mouseDownInitContent: function(){
            this.model.autoHide && this._on(bbdesigner$(document), "mouseup", this._mouseUpContent);
            this.element.addClass("e-scroll-focus");
        },
        _addActionClass: function () {
            //e-pinch class enables the touch mode operations in IE browsers
            if (this._browser == "msie") {
                this.content().removeClass('e-pinch e-pan-x e-pan-y');
                if (this._vScrollbar && this._hScrollbar) this.content().addClass('e-pinch');
                else if (this._vScrollbar && !this._hScrollbar) this.content().addClass('e-pan-x');
                else if (this._hScrollbar && !this._vScrollbar) this.content().addClass('e-pan-y');
            }
        },
        _setDimension:function(){
            if (!BoldBIDashboard.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1) {
                if (!this._vScroll) bbdesigner$(this.content()[0]).height("");
                else this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
                if (!this._hScroll) bbdesigner$(this.content()[0]).width("");
                else this.model.width = this._convertPercentageToPixel(parseInt(this._eleWidth), this.element.parent().width());
            }
        },
        _setScrollLeftValue: function (leftValue) {
            if (this.model.enableRTL) {
                if (BoldBIDashboard.browserInfo().name == "mozilla")
                    leftValue = leftValue < 0 ? leftValue : (leftValue * -1);
                else if (!BoldBIDashboard.isNullOrUndefined(this._rtlScrollLeftValue) && (BoldBIDashboard.browserInfo().name == "chrome" || this._rtlScrollLeftValue > 0))
                    leftValue = leftValue < 0 ? (this._rtlScrollLeftValue + leftValue) : (this._rtlScrollLeftValue - leftValue);
                else
                    leftValue = Math.abs(leftValue);
            }
            this.content().scrollLeft(leftValue);
        },
        _ensureScrollers: function () {
            var jqVersion = bbdesigner$.fn.jquery, height, width;
          this.model.height = typeof this.model.height == "string" && this.model.height.indexOf("px") != -1 ? parseInt(this.model.height) : this.model.height;
          this.model.width = typeof this.model.width == "string" && this.model.width.indexOf("px") != -1 ? parseInt(this.model.width) : this.model.width;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }            

            this._off(this.content(), "mousedown touchstart");
            if (this.content().length > 0) {
                if (this.isVScroll()) {
                    if (!this._tempVscrollbar) {
                        this._vScrollbar = this._createScrollbar(BoldBIDashboard.ScrollBar.Orientation.Vertical, this.isHScroll());
						this._tempVscrollbar = this._vScrollbar;
                    }
                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "touchstart", { d: this._vScrollbar._scrollData }, this._mouseDownOnContent);
                } else {
                    this._vScrollbar = null;
					this._tempVscrollbar = this._vScrollbar;
                    this.element.children(".e-vscrollbar").remove();
                }
                if (this.isHScroll()) {
                    if (!this._tempHscrollbar) {
                        this._hScrollbar = this._createScrollbar(BoldBIDashboard.ScrollBar.Orientation.Horizontal, this.isVScroll());
						this._tempHscrollbar = this._hScrollbar;
                    }
                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "touchstart", { d: this._hScrollbar._scrollData }, this._mouseDownOnContent);
                } else {
                    this._hScrollbar = null;
					this._tempHscrollbar = this._hScrollbar;
                    this.element.children(".e-hscrollbar").remove();
                }

                if (!this._vScrollbar && !this._hScrollbar)
                    this.content().css({ width: "auto", height: "auto" });

                if (!(this.element.find(".e-hscroll").length > 0)) {
                    if (this._vScrollbar) {
                        this.content().outerHeight(this.content().outerHeight() - 1);
                    }
                }
                this._hScroll = this.isHScroll(), this._vScroll = this.isVScroll();
		if ( Math.round(this.model.height) === this.content()[0].scrollHeight)
                {
                    this._tempVscrollbar = this._vScrollbar;
                    this.element.children(".e-vscrollbar").remove();
                }
				jqVersion = bbdesigner$.fn.jquery ? (this._contentHeight = "height", this._contentWidth = "width") : (this._contentHeight = "outerHeight", this._contentWidth = "outerWidth");
                if (this._hScroll || this._vScroll) {
                    this.content().addClass("e-content");
                    var rect = this._exactElementDimension(this.element);
                    this._elementDimension(rect);
                    if (this.model.targetPane !== null && this.content().find(this.model.targetPane)[0] !== undefined) this.content().find(this.model.targetPane)[0].scrollLeft = this.scrollLeft();
                    else if (!this.isHScroll() && (this.element.children(".e-hscrollbar").length > 0)) this._ensureScrollers();
                    if ((isNaN(this._eleWidth) && (this._eleWidth.indexOf("%") > 0)) && (isNaN(this._eleHeight) && (this._eleHeight.indexOf("%") > 0))) bbdesigner$(window).on('resize', bbdesigner$.proxy(this._resetScroller, this));
                } else
                    this.content().removeClass("e-content");
                this._setDimension();
                this._parentHeight = bbdesigner$(this.element).parent().height(); this._parentWidth = bbdesigner$(this.element).parent().width();
            }
        }, 
         _elementDimension: function (rect) {
            this._ElementHeight = rect.height - (this["border_bottom"] + this["border_top"] + this["padding_bottom"] + this["padding_top"]);
            this.content()[this._contentHeight](this._ElementHeight - ((this._hScroll && !this.model.autoHide) ? this.model.scrollerSize :
                this.element.find(".e-hscrollbar").is(':visible') ? this.model.scrollerSize : 0));
            this._ElementWidth = rect.width - (this["border_left"] + this["border_right"] + this["padding_left"] + this["padding_right"]);
            this.content()[this._contentWidth](this._ElementWidth - ((this._vScroll && !this.model.autoHide) ? this.model.scrollerSize : 0));
        },
        _convertPercentageToPixel: function (ele, outer) {
            return Math.floor((ele * outer) / 100);
        },
        isHScroll: function () {
            var updatedWidth = (parseFloat(bbdesigner$.fn.jquery) >= 3) ? Math.ceil(this.element.width()) : this.element.width();
            var modelWidth = this.model.width;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.width)) {
                if (typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
                    modelWidth = updatedWidth;
                } else {
                    modelWidth = (parseFloat(bbdesigner$.fn.jquery) >= 3 && !isNaN(parseFloat(this.model.width))) ? Math.ceil(parseFloat(this.model.width)) : this.model.width;
                }
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._tempWidth) && typeof this._tempWidth === "string" && this._tempWidth.indexOf("%") != -1) {
                if (!BoldBIDashboard.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1)
                    return this.content()[0].scrollWidth > this.element.width();
                else if (this.content()[0].scrollWidth > this.element.width()) return true;
            }
            else {
                if (modelWidth > 0) {
                    var $paneObject = this.content().find(this.model.targetPane);
                    if (this.model.targetPane != null && $paneObject.length)
                        return ($paneObject[0].scrollWidth + $paneObject.siblings().width()) > modelWidth;
                    else {
                        if (this.content()[0].scrollWidth > modelWidth) return true;
                        else if (this.content()[0].scrollWidth == modelWidth)
                            if (this.model.autoHide && bbdesigner$(this.content()[0]).find('> *').length > 0) return bbdesigner$(this.content()[0]).find('> *')[0].scrollWidth > bbdesigner$(this.content()[0]).width();
                            else if( bbdesigner$(this.content()[0]).find('> *').length > 0) return bbdesigner$(this.content()[0]).find('> *')[0].scrollWidth > (!BoldBIDashboard.isNullOrUndefined(this._tempVscrollbar) ? this.model.width - this.model.scrollerSize : this.model.width);
                        return false;
                    }
                    return false;
                }
                return false;
            }
        },
        isVScroll: function () {
            //To avoid unnecessarilly render the vertical scrollbar for 1 or 2 px difference range.
            var border = 2;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
                return this.content()[0].scrollHeight > this.element.outerHeight(); //this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());        
            else if (this.model.height > 0){
                if((this.content()[0].scrollHeight > this.model.height)) return true;
                else if(this.isHScroll()) if((this.content()[0].scrollHeight == this.model.height || (this.content()[0].scrollHeight > this.model.height - (this.model.scrollerSize - border)))) return true;
            }
            return false;
        },
        _setModel: function (option) {
            for (var prop in option) {
                switch(prop){
                    case "enableRTL":
                        if (option[prop]) {
                            this.element.addClass("e-rtl");
                            this._rtlScrollLeftValue = this.content().scrollLeft();
                            if(!BoldBIDashboard.isNullOrUndefined(this._hScrollbar)) this._hScrollbar._scrollData.enableRTL = true;
                        
                        } else {
                            this.element.removeClass("e-rtl");
                            if (!BoldBIDashboard.isNullOrUndefined(this._hScrollbar)) this._hScrollbar._scrollData.enableRTL = false;
                        }
                        if (this._hScrollbar) {
                            this.element.find(".e-hhandle").css("left", 0);
                            this._hScrollbar.value(0);
                        }
                        break;
                    case "scrollLeft":
                        if (parseFloat(BoldBIDashboard.util.getVal(option[prop])) < 0 || !this._hScroll) option[prop] = 0;
                        this._externalCall = true;
                        if (this._hScrollbar) option[prop] = parseFloat(BoldBIDashboard.util.getVal(option[prop])) > this._hScrollbar._scrollData.scrollable ? this._hScrollbar._scrollData.scrollable : parseFloat(BoldBIDashboard.util.getVal(option[prop]));
                        this._setScrollLeftValue(parseFloat(option[prop]));
                        this["scrollLeft"](option[prop]);
                        if (this._hScrollbar && !(this._hScrollbar._scrollData._scrollleftflag && this.model.enableRTL))
                        this.scrollX(option[prop]);
                        break;
                    case "scrollTop":
                        if (this._vScrollbar) option[prop] = parseFloat(BoldBIDashboard.util.getVal(option[prop])) > this._vScrollbar._scrollData.scrollable ? this._vScrollbar._scrollData.scrollable : parseFloat(BoldBIDashboard.util.getVal(option[prop]));
                        if (parseFloat(option[prop]) < 0 || !this._vScroll) option[prop] = 0;
                        this._externalCall = true;
                        this.content().scrollTop(parseFloat(option[prop]));
                        this["scrollTop"](option[prop]);
                        this.scrollY(option[prop]);
                        break;
                    case "touchScroll" :
                        if (!this.model.enableTouchScroll)
                            this._off(this.content(), "mousedown touchstart");
                        else {
                            if (this._vScrollbar)
                                this._on(this.content(), "mousedown touchstart", { d: this._vScrollbar._scrollData }, this._mouseDownOnContent);
                            if (this._hScrollbar)
                                this._on(this.content(), "mousedown touchstart", { d: this._hScrollbar._scrollData }, this._mouseDownOnContent);
                        }
                        break;
                    case "scrollOneStepBy" : 
                        if (this._vScrollbar) {
                            this._vScrollbar._scrollData.scrollOneStepBy = option[prop];
                            this._vScrollbar.model.smallChange = option[prop];
                        }
                        if (this._hScrollbar) {
                            this._hScrollbar._scrollData.scrollOneStepBy = option[prop];
                            this._hScrollbar.model.smallChange = option[prop];
                        }
                        break;
                    case "buttonSize" :
                        if (this._vScrollbar) this._vScrollbar.model.buttonSize = this.model.buttonSize;
                        if (this._hScrollbar) this._hScrollbar.model.buttonSize = this.model.buttonSize;
                        this.refresh();
                        break;
                    case "height" : this._eleHeight = option[prop];
                        this.refresh();
                        break;
                    case "width" : this._eleWidth = option[prop];
                        this.refresh();
                        break;
					default:
						this.refresh();
                }
            }
        },

        _createScrollbar: function (orientation, isOtherScroll) {
            var proxy = this;
            var id, viewportSize, width, height, maximum, value;
            var div = document.createElement("div");
            if (orientation === BoldBIDashboard.ScrollBar.Orientation.Vertical) {
                width = this.model.scrollerSize;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
                    height = viewportSize = this.element.height() - (isOtherScroll ? this.model.scrollerSize : 0);
                else
                    height = viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
                maximum = this.content()[0]["scrollHeight"];
                value = this.scrollTop();
            }
            else {
                width = viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
                height = this.model.scrollerSize;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
                    width = viewportSize = this.element.width() - (isOtherScroll ? this.model.scrollerSize : 0);
                    maximum = this.content()[0]["scrollWidth"];
                }
                else {
                    var bbdesigner$pane = this.content().find(this.model.targetPane);
                    if (this.model.targetPane != null && bbdesigner$pane.length)
                        maximum = bbdesigner$pane[0]["scrollWidth"] + bbdesigner$pane.parent().width() - bbdesigner$pane.width();
                    else
                        maximum = this.content()[0]["scrollWidth"];
                }
                value = this.scrollLeft();
            }
            if (this.element.children(".e-hscrollbar").length > 0)
                bbdesigner$(this.element.children(".e-hscrollbar")).before(div);
            else
                this.element.append(div);
            bbdesigner$(div).BoldBIDashboardScrollBar({
                elementHeight: proxy._eleHeight,
                elementWidth: proxy._eleWidth,
                buttonSize: proxy.model.buttonSize,
                orientation: orientation,
                viewportSize: viewportSize,
                height: height,
                width: width,
                maximum: maximum - viewportSize,
                value: value,
                smallChange: this.model.scrollOneStepBy,
                largeChange: 3 * this.model.scrollOneStepBy,
                scroll: BoldBIDashboard.proxy(this._scrollChanged, this),
                thumbEnd: BoldBIDashboard.proxy(this._thumbEnd, this),
                thumbStart: BoldBIDashboard.proxy(this._thumbStart, this),
                thumbMove: BoldBIDashboard.proxy(this._thumbMove, this),
            });
            var scrollbar = bbdesigner$(div).BoldBIDashboardScrollBar("instance");
            (orientation === BoldBIDashboard.ScrollBar.Orientation.Vertical || !isOtherScroll) && this._off(this.element, this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll", this._mouseWheel)
                ._on(this.element, this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll", { d: scrollbar._scrollData }, this._mouseWheel);
            if (orientation === BoldBIDashboard.ScrollBar.Orientation.Horizontal) {
                this._scrollXdata = scrollbar._scrollData;
            }
            else
                this._scrollYdata = scrollbar._scrollData;
            if (orientation === BoldBIDashboard.ScrollBar.Orientation.Horizontal && this.model.enableRTL) {
                scrollbar._scrollData.enableRTL = true;
            }
            scrollbar._enabled = this.model.enabled;
            return scrollbar;
        },

        _updateScrollbar: function (orientation, isOtherScroll) {
            var scrollbar = orientation === BoldBIDashboard.ScrollBar.Orientation.Vertical ? this._vScrollbar : this._hScrollbar;
            if (scrollbar) {
                if (orientation === BoldBIDashboard.ScrollBar.Orientation.Vertical) {
                    scrollbar.model.width = this.model.scrollerSize;
                    scrollbar.model.height = scrollbar.model.viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
                    scrollbar.model.maximum = this.content()[0]["scrollHeight"] - scrollbar.model.viewportSize;
                    scrollbar.model.value = this.scrollTop();
                }
                else {
                    scrollbar.model.width = scrollbar.model.viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
                    scrollbar.model.height = this.model.scrollerSize;
                    scrollbar.model.maximum = ((this.model.targetPane != null && this.content().find(this.model.targetPane).length >0) ? this.content().find(this.model.targetPane)[0]["scrollWidth"] + (this.content().width() - bbdesigner$(this.model.targetPane).outerWidth()) : this.content()[0]["scrollWidth"]) - scrollbar.model.viewportSize;
                    if (!this.model.enableRTL)
                        scrollbar.model.value = this.scrollLeft();
                }
            }
        },

        _autohide: function(){
            if (this.model.autoHide) {
                this.element.addClass("e-autohide");
                this._on(this.element, "mouseenter mouseleave touchstart touchend", this._scrollerHover);
                this.content().siblings(".e-scrollbar.e-js").hide();
            }
            else {
                this.element.removeClass("e-autohide");
                this._off(this.element, "mouseenter mouseleave touchstart touchend", this._scrollerHover);
                this.content().siblings(".e-scrollbar.e-js").show();
            }
        },
		
        _mouseUpContent: function (e) {
            if (e.type == "mouseup") {
                this.element.removeClass("e-scroll-focus");
                this._autohide();
                this._off(bbdesigner$(document), "mouseup", this._mouseUpContent);
            }
        },

        _scrollChanged: function (e) {
            this._updateScroll = true;
            if (e.scrollTop !== undefined)
                this.scrollY(e.scrollTop, true, "", e.source);
            else if (e.scrollLeft !== undefined)
                this.scrollX(e.scrollLeft, true, "", e.source);
            this._updateScroll = false;
            var proxy = this;
            bbdesigner$.when(this.content()).done(BoldBIDashboard.proxy(function () {
                proxy._trigger("scrollEnd", { scrollData: e });
            }));
        },
        _bindBlurEvent: function (scrollObj, e) {
            this._scrollEle = bbdesigner$(scrollObj).data('BoldBIDashboardScrollBar');
            this._event = e; var proxy = this;
            this._listener = function (e) {
                this._scrollEle._off(bbdesigner$(document), "mousemove touchmove", this._scrollEle._mouseMove);
                bbdesigner$(document).off("mouseup touchend", BoldBIDashboard.proxy(this._scrollEle._mouseUp, this._scrollEle));
                this._scrollEle._prevY = null;
                this._off(bbdesigner$(document), "mousemove touchmove", this._mouseMove);
                this._off(bbdesigner$(document), "mouseup touchend", this._mouseUp);
                this._off(bbdesigner$(window), "blur");
                if (this._evtData.handler === "e-vhandle") this._scrollEle._trigger("thumbEnd", { originalEvent: this._event, scrollData: this._evtData });
                else this._scrollEle._trigger("thumbEnd", { originalEvent: this._event, scrollData: this._evtData });
            };
            this._on(bbdesigner$(window), "blur", this._listener);
        },
        _thumbStart: function (e) {
            this._evtData = e.scrollData;
            var scrollObj = e.scrollData.handler === "e-vhandle" ? this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar') : this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar'); var scrollObj = e.scrollData.handler === "e-vhandle" ? this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar') : this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar');            
            this._bindBlurEvent(scrollObj, e);
            this._trigger("thumbStart", e);            
        },
        _thumbMove: function (e) {
            this._trigger("thumbMove", e);            
        },
        _thumbEnd: function (e) {
            this._trigger("thumbEnd", e);
            this._off(bbdesigner$(window), "blur");
        },

        refresh: function (needRefresh) {
	     if (!needRefresh) {
                this.element.find(">.e-content").removeAttr("style");
                this._tempVscrollbar = null;
                this.element.children(".e-vscrollbar").remove();
                this._tempHscrollbar = null;
                this.element.children(".e-hscrollbar").remove();
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._eleHeight) && typeof this._eleHeight === "string" && this._eleHeight.indexOf("%") != -1 && this._parentHeight != bbdesigner$(this.element).parent().height()) {
               var element = this._exactElementDimension(this.element.parent());
               element = element.height - (this["border_bottom"] + this["border_top"] + this["padding_bottom"] + this["padding_top"]);
               this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), element);
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._eleWidth) && typeof this._eleWidth === "string" && this._eleWidth.indexOf("%") != -1 && this._parentWidth != bbdesigner$(this.element).parent().width()) {
               var element = this._exactElementDimension(this.element.parent());
               element = element.width - (this["border_left"] + this["border_right"] + this["padding_left"] + this["padding_right"]);
               this.model.width = this._convertPercentageToPixel(parseInt(this._eleWidth), element);
            }

            this._ensureScrollers();
            var scrollLeftValue = this.scrollLeft();
            if (this.model.enableRTL) {
                !this.element.hasClass("e-rtl") && this.element.addClass("e-rtl");
                this._rtlScrollLeftValue = this.content().scrollLeft();
                scrollLeftValue > 0 ? this.content().scrollLeft(scrollLeftValue) : this._setScrollLeftValue(scrollLeftValue);
            }
            else
                this.content().scrollLeft(scrollLeftValue);
            if ((this.scrollTop() && this._vScrollbar == null) || (this._vScrollbar !== null && (this._vScrollbar && this._vScrollbar._scrollData != null) && !this._vScrollbar._scrollData.skipChange))
                this.content().scrollTop(this.scrollTop());

            if (this._vScrollbar) {
                this._vScrollbar._scrollData.dimension = "Height";
                this._updateScrollbar(BoldBIDashboard.ScrollBar.Orientation.Vertical, this._hScroll);
                this._vScroll && !this._vScrollbar._calculateLayout(this._vScrollbar._scrollData) && this._vScrollbar._updateLayout(this._vScrollbar._scrollData);
            }
            if (this._hScrollbar) {
                this._hScrollbar._scrollData.dimension = "Width";
                this._updateScrollbar(BoldBIDashboard.ScrollBar.Orientation.Horizontal, this._vScroll);
                this._hScroll && !this._hScrollbar._calculateLayout(this._hScrollbar._scrollData) && this._hScrollbar._updateLayout(this._hScrollbar._scrollData);
            }
            if (BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version == "8.0")
                this.element.find(".e-hhandle").css("left", "0px");
            else
                this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
            this._addActionClass();
            this._autohide();
        },
        _exactElementDimension:function(element){
            var rect = element.get(0).getBoundingClientRect(), direction = ["left", "right", "top", "bottom"],width,height;
            rect.width ? width = rect.width : width = rect.right - rect.left;
            rect.height ? height = rect.height : height = rect.bottom - rect.top;
            for (var i = 0; i < direction.length; i++) {
                this["border_" + direction[i]] = isNaN(parseFloat(element.css("border-" + direction[i] + "-width"))) ? 0 : parseFloat(element.css("border-" + direction[i] + "-width"));
                this["padding_" + direction[i]] = isNaN(parseFloat(element.css("padding-" + direction[i]))) ? 0 : parseFloat(element.css("padding-" + direction[i]));
            }
            return rect = { width: width, height: height };
		},
        _keyPressed: function (action, target) {
            if (!this.model.enabled) return;
            if (["input", "select", "textarea"].indexOf(target.tagName.toLowerCase()) !== -1)
                return true;

            var d, iChar;

            if (["up", "down", "pageUp", "pageDown"].indexOf(action) !== -1) {
                if (this._vScrollbar) {
                    if (BoldBIDashboard.browserInfo().name == "msie" && this.model.allowVirtualScrolling)
                        this._content.focus();
                    d = this._vScrollbar._scrollData;
                }
                iChar = "o";
            } else if (["left", "right", "pageLeft", "pageRight"].indexOf(action) !== -1) {
                if (this._hScrollbar)
                    d = this._hScrollbar._scrollData;
                iChar = "i";
            } else return true;
            if (!d) return true;

            return !this._changeTop(d, (action.indexOf(iChar) < 0 ? -1 : 1) * (action[0] !== "p" ? 1 : 3) * d.scrollOneStepBy, "key");
        },

        scrollY: function (pixel, disableAnimation, animationSpeed, source, e) {
            var proxy=this;
            if (pixel === "") return;
            if (disableAnimation) {
                var e = { source: source || "custom", scrollData: this._vScrollbar ? this._vScrollbar._scrollData : null, scrollTop: pixel, originalEvent: e };
                pixel = e.scrollTop;
                this.scrollTop(pixel);
                if (this._trigger("scroll", e)) return;
                this.content().scrollTop(pixel);
                return;
            }
            if (BoldBIDashboard.isNullOrUndefined(animationSpeed) || animationSpeed === "") animationSpeed = 100;
            if (this._vScrollbar) pixel = parseFloat(pixel) > this._vScrollbar._scrollData.scrollable ? this._vScrollbar._scrollData.scrollable : parseFloat(pixel)
            this.scrollTop(pixel);
            this.content().stop().animate({
                scrollTop: pixel
            }, animationSpeed, 'linear',function(){
            if (proxy._trigger("scroll", { source: source || "custom", scrollData: proxy._vScrollbar ? proxy._vScrollbar._scrollData : null, scrollTop: pixel, originalEvent: e })) return;      
	   })
        },

        scrollX: function (pixel, disableAnimation, animationSpeed, source, e) {   
            var proxy=this;		
            if (pixel === "") return;
            if (this._hScrollbar) pixel = parseFloat(pixel) > this._hScrollbar._scrollData.scrollable ? this._hScrollbar._scrollData.scrollable : parseFloat(pixel)
            this._externalCall = true;
            var browserName = BoldBIDashboard.browserInfo().name;
            if (this.model.enableRTL && browserName != "mozilla") {
                if (pixel < 0) pixel = Math.abs(pixel);
                var content = this.model.targetPane != null ? this.content().find(this.model.targetPane)[0] : this.content()[0];
                if (e != "mousemove" && e != "touchmove" && (browserName != "msie")) if (browserName != "msie") pixel = this._hScrollbar._scrollData.scrollable - pixel;
            }
            this.scrollLeft(pixel);
            if (disableAnimation) {
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._hScrollbar ? this._hScrollbar._scrollData : null, scrollLeft: pixel, originalEvent: e }))
                    return;
                if (this.model.targetPane != null && this.content().find(this.model.targetPane).length)
                    this.content().find(this.model.targetPane).scrollLeft(pixel);
                else
                    this.content().scrollLeft(pixel);
                return;
            }
            if (BoldBIDashboard.isNullOrUndefined(animationSpeed) || animationSpeed === "") animationSpeed = 100;
            if (this.model.targetPane != null && this.content().find(this.model.targetPane).length)
                this.content().find(this.model.targetPane).stop().animate({
                    scrollLeft: pixel
                }, animationSpeed, 'linear');
            else this.content().stop().animate({
                scrollLeft: pixel
            }, animationSpeed, 'linear',function() {
            if (proxy._trigger("scroll", { source: source || "custom", scrollData: proxy._hScrollbar ? proxy._hScrollbar._scrollData : null, scrollLeft: pixel, originalEvent: e })) return;
			});
        },

        enable: function () {
            var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
            if (scroller.hasClass("e-disable")) {
                scroller.removeClass("e-disable").attr({ "aria-disabled": false });
                this.model.enabled = true;
            }
            if (this._vScrollbar)
                this._vScrollbar._enabled = this.model.enabled;
            if (this._hScrollbar)
                this._hScrollbar._enabled = this.model.enabled;
        },

        disable: function () {
            var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
            scroller.addClass("e-disable").attr({ "aria-disabled": true });
            this.model.enabled = false;
            if (this._vScrollbar)
                this._vScrollbar._enabled = this.model.enabled;
            if (this._hScrollbar)
                this._hScrollbar._enabled = this.model.enabled;
        },

        _changeTop: function (d, step, source, e) {
            var start =Math.ceil(this.model.targetPane != null && d.dimension != "height" ? this.content().find(this.model.targetPane)[d.scrollVal]() : this.content()[d.scrollVal]()), t;

            if (d.dimension == "height" && start == 0)
                start = this.scrollTop() != 0 ? this.scrollTop() : 0;
            t = start + step;
            if (!d.enableRTL ? t > d.scrollable : t < d.scrollable) t = Math.round(d.scrollable);
            if (!d.enableRTL ? t < 0 : t > 0) t = 0;

            if (t !== start) {
                this["scroll" + d.xy](t, true, "", source, e);
                if (d.xy === "X" && !BoldBIDashboard.isNullOrUndefined(this._hScrollbar))
                    this._hScrollbar["scroll"](t, source, true, e);
                else if (!BoldBIDashboard.isNullOrUndefined(this._vScrollbar))
                    this._vScrollbar["scroll"](t, source, true, e);
            }

            return t !== start;
        },

        _mouseWheel: function (e) {
			 if (this._vScrollbar && e.ctrlKey )
                    return;
            if (!this._vScrollbar && !e.shiftKey )
                    return;
            if (!e.data || !this.model.enabled) return;
            var delta = 0, data = e.data.d, ori = e, direction;
            e = e.originalEvent;
            this._wheelStart && this._trigger("wheelStart", { originalEvent: e, scrollData: ori.data.d });
            this._wheelStart = false;
            clearTimeout(bbdesigner$.data(this, 'timer'));
            if (this._wheelx != 1 && (e.wheelDeltaX == 0 || e.wheelDeltaY == 0))
                this._wheelx = 1;
            if (navigator.platform.indexOf("Mac") == 0 && (this._wheelx == 0)) {
                if (this._browser == "webkit" || this._browser == "chrome")
                    return true;
            }
            if (this._browser == "mozilla")
                e.axis == e.HORIZONTAL_AXIS ? data = this._scrollXdata : this._scrollYdata;
            else if (this._browser == "msie") {
                if ((e.type == "wheel")) delta = e.deltaX / 120;
                if ((e.type == "mousewheel" && e.shiftKey)) {
                    data = this._scrollXdata;
                    e.preventDefault ? e.preventDefault() : (e.returnValue = false);
                }
            }
            else if (this._wheelx && e.wheelDeltaX != 0 && e.wheelDeltaY == 0 && this._scrollXdata)
                data = this._scrollXdata;
            if (e.wheelDeltaX == 0) this._wheelx = e.wheelDeltaX;
            if (e.wheelDelta) {
                delta = navigator.platform.indexOf("Mac") == 0 ? ((Math.abs(e.wheelDelta) !== 120) ? -e.wheelDelta / 3: -e.wheelDelta / 80) : -e.wheelDelta / 120;
                if (window.opera) {
                    if (parseFloat(window.opera.version, 10) < 10)
                        delta = -delta;
                }
            } else if (e.detail) delta = e.detail / 3;
            if (!delta) return;            
            if ((ori.originalEvent))
                if (ori.originalEvent.wheelDelta && ori.originalEvent.wheelDelta > 0 || ori.originalEvent.detail && ori.originalEvent.detail < 0) direction = -1;
                else direction = 1;
            if (this._changeTop(data, delta * data.scrollOneStepBy, "wheel", e)) {
                e.preventDefault ? e.preventDefault() : ori.preventDefault();
                ori.stopImmediatePropagation();
                ori.stopPropagation();
                this._trigger("wheelMove", { originalEvent: e, scrollData: ori.data.d, direction: direction });
            }
            else {
                this._trigger("scrollEnd", { originalEvent: e, scrollData: ori });
                this._wheelx = 0;
            }
            var proxy = this;
            bbdesigner$.data(this, 'timer', setTimeout(function () {
                proxy._wheelStart = true;
                proxy._trigger("wheelStop", { originalEvent: e, scrollData: ori.data.d, direction: direction });
            }, 250));
        },
        _contentHeightWidth: function () {
            if (this.content().siblings().css("display") == "block" && this.model.autoHide && this._hScroll) {
                this.content()[this._contentHeight](this._ElementHeight - (this.model.scrollerSize));
                this.content()[this._contentWidth](this._ElementWidth - (this.model.scrollerSize));
            }
            else if (this.content().siblings().css("display") == "none" && this.model.autoHide &&this._vScroll) {
                this.content()[this._contentHeight](this._ElementHeight);
                this.content()[this._contentWidth](this._ElementWidth);
            }
        },
        _scrollerHover: function (e) {
            if (this.model.enabled) {
                if ((e.type == "mouseenter" || e.type == "touchstart") && !this.content().siblings().is(":visible")) {

                    this.content().siblings().css("display", "block");
                    this._contentHeightWidth();
                    this._trigger("scrollVisible", { originalEvent: e });
                }
                else if ((e.type == "mouseleave" || e.type == "touchend") && !this.element.hasClass("e-scroll-focus")) {
                    this.content().siblings().hide();
                    this._contentHeightWidth();
                    this._trigger("scrollHide", { originalEvent: e });
                }
            }
        },

        _mouseUp: function (e) {
            if (!e.data) return;
            var d = e.data.d;
            if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget)) {
			    this.content().css("cursor", "default");
                this._off(bbdesigner$(document), "mousemove touchmove");
                this._off(bbdesigner$(document), "mouseup touchend", this._mouseUp);
                d.fromScroller = false;
                if (this._mouseMoved === true && e.data.source === "thumb" && !BoldBIDashboard.isNullOrUndefined(this.model)) {
                    bbdesigner$.when(this.content()).done(BoldBIDashboard.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                    this._off(bbdesigner$(window), "blur");
                }
            }
            d.up = true;
        },

        _mouseDownOnContent: function (down) {
            if (bbdesigner$(down.target).hasClass("e-vhandle")) return;
            if (!BoldBIDashboard.isNullOrUndefined(this._scrollYdata) && this.model.scrollTop != this._scrollYdata.scrollable && this.model.scrollTop != 0) {
                down.stopPropagation();
            }
            this._startX = (down.clientX != undefined) ? down.clientX : down.originalEvent.changedTouches[0].clientX;
            this._startY = (down.clientY != undefined) ? down.clientY : down.originalEvent.changedTouches[0].clientY;
            this._timeStart = down.timeStamp || Date.now();
            if (!this.model.enabled) return;
            var d = down.data.d;
            this._evtData = down.data;
            var scrollObj = d.handler === "e-vhandle" ? this.element.find('.' + d.handler).closest('.e-scrollbar') : this.element.find('.' + d.handler).closest('.e-scrollbar');            
            this._bindBlurEvent(scrollObj, down);
            if (this._trigger("thumbStart", { originalEvent: down, scrollData: d }))
                return;
		    if (down.which == 3 && down.button == 2) return;
            d.fromScroller = true;
            var prevY = null, skip = 1, min = 5, direction;
            this._document = bbdesigner$(document); this._window = bbdesigner$(window);
            this._mouseMove = function (move) {
                this._relDisX = ((move.clientX != undefined) ? this._startx = move.clientX : this._startx = move.originalEvent.changedTouches[0].clientX) - this._startX;
                this._relDisY = ((move.clientY != undefined) ? this._starty = move.clientY : this._starty = move.originalEvent.changedTouches[0].clientY) - this._startY;
                this._duration = (move.timeStamp || Date.now()) - this._timeStart;
                this._velocityY = Math.abs(this._relDisY) / this._duration;
                this._velocityX = Math.abs(this._relDisX) / this._duration;
                if (Math.abs(this._relDisX) > Math.abs(this._relDisY)) {
                    this._swipe = (this._relDisX > 0) ? "left" : "right";
                } else {
                    this._swipe = (this._relDisY > 0) ? "up" : "down";
                }
                move.preventDefault();
                if (!BoldBIDashboard.isNullOrUndefined(move.target.tagName) && move.target.tagName.toLowerCase() === "iframe") {
                    move.type = "mouseup";
                    this._mouseUp(move);
                    return;
                }
                var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];
                if (prevY && pageXY !== prevY) {
                    this._mouseMoved = true;
                    var diff = pageXY - prevY, sTop = this.model[d.scrollVal] - (diff);

                    if (skip == 1 && Math.abs(diff) > min) {
                        direction = d.position;
                        skip = 0;
                    }
                    if (skip == 0) prevY = pageXY;

                    if (sTop >= 0 && sTop <= d.scrollable && direction === d.position) {
                        var top = this._velocityY > 0.5 && this._duration < 50 && d.position == "Top";
                        var left = this._velocityX > 0.5 && this._duration < 50 && d.position == "Left";
                        var swipeXY = ((this._velocityY > 0.5) || (this._velocityX > 0.5)) && this._duration < 50;
                        if (swipeXY) {
                            if (top) {
                                sTop = Math.abs(this._relDisY) + (this._duration * this._velocityY);
                                if (this._startY > this._starty) {
                                    sTop += this.scrollTop();
                                    if (sTop > d.scrollable) sTop = d.scrollable;
                                }
                                else {
                                    if (sTop < this.scrollTop()) sTop = Math.abs(sTop - this.scrollTop());
									if(sTop>this.scrollTop())								
									sTop=0;								
                                }
                                if (this.scrollTop() <= d.scrollable) this["scrollY"](sTop, false, this.model.animationSpeed, "thumb");
                            }
                            else if (left) {
                                sTop = Math.abs(this._relDisX);
                                if (this._startX > this._startx) {
                                    sTop += this.scrollLeft();
                                    if (sTop > d.scrollable) sTop = d.scrollable;
                                }
                                else {
                                    sTop -= this.scrollLeft();
                                    sTop = Math.abs(sTop);
                                    if (sTop > d.scrollable || sTop >= this.scrollLeft()) sTop = 0;
                                }
                                if (this.scrollLeft() <= d.scrollable) this["scrollX"](sTop, false, this.model.animationSpeed, "thumb");
                            }
                        }
                        else {
                            this["scroll" + d.xy](sTop, true, "", "thumb",move.type);
                            if (d.xy === "X")
                                this._hScrollbar["scroll"](sTop, "thumb", true,move.type);
                            else if (!BoldBIDashboard.isNullOrUndefined(this._vScrollbar))
                                this._vScrollbar["scroll"](sTop, "thumb", true,move.type);
                            this.content().css("cursor", "pointer");
                            this._trigger("thumbMove", { originalEvent: move, direction: (this._swipe == "down" || this._swipe == "right") ? 1 : -1, scrollData: d });
                        }
                    }
                }
                if (prevY == null) prevY = pageXY;
                if (((Math.round(this._content["scrollTop"]()) == 0) && this._swipe == "down" || ((Math.ceil(this._content["scrollTop"]()) == d.scrollable) && this._swipe == "up"))) {
                    this._trigger("scrollEnd", { originalEvent: move.originalEvent, scrollData: move });
                    if (window.removeEventListener) window.removeEventListener('DOMMouseScroll', this._preventDefault, false);

                    window.ontouchmove = null;
                }
                else if (move.data.d.clientXy == "pageY") {
                    if (window.addEventListener) window.addEventListener('DOMMouseScroll', this._preventDefault, false);

                    window.ontouchmove = this._preventDefault; // mobile
                } 
            }
            this._on(bbdesigner$(document), "mousemove touchmove", { d: d, source: "thumb" }, this._mouseMove);
            this._mouseMoved = false;
            this._on(bbdesigner$(document), "mouseup touchend", { d: d, source: "thumb" }, this._mouseUp);
        },
		
        _scroll: function (e) {
            var dS = [this._vScrollbar ? this._vScrollbar._scrollData : null, this._hScrollbar ? this._hScrollbar._scrollData : null];

            for (var i = 0; i < 2; i++) {
                var d = dS[i];
                if (!d || d.skipChange) continue;
                if(!this._externalCall) d.dimension === "height" ? this.scrollTop(e.target[d.scrollVal]) : this.scrollLeft(e.target[d.scrollVal])
                if (this.model && this.model.targetPane != null && i == 1 && this.content().find(this.model.targetPane).length)
                    d.sTop = this.content().find(this.model.targetPane)[0][d.scrollVal];
                else d.scrollVal == "scrollTop" ? d.sTop = this.scrollTop() : d.sTop = this.scrollLeft();
                this[d.scrollVal](d.sTop);
                if (d.fromScroller) return;
                if (i === 1) {
                    var content = this.content()[0];
                    if (this._rtlScrollLeftValue && content.scrollWidth - content.clientWidth != this._rtlScrollLeftValue)
                        this._rtlScrollLeftValue = content.scrollWidth - content.clientWidth;
                    d.sTop = (this.model && BoldBIDashboard.browserInfo().name != "mozilla" && this.model.enableRTL && !this._hScrollbar._scrollData._scrollleftflag) ? (this._rtlScrollLeftValue == 0 ? (d.sTop * -1) : (d.sTop - this._rtlScrollLeftValue)) : d.sTop;
                    this._hScrollbar["scroll"](d.sTop, "", true);
                } else
                    this._vScrollbar["scroll"](d.sTop, "", true);
                if (dS.length == 2 && i == 1 || dS.length == 1 && i == 0) this._externalScroller = false;
            }
        },

        _changevHandlerPosition: function (top) {
            var scrollbar = this._vScrollbar;
            if (scrollbar) {
                top = scrollbar._scrollData != null && top >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : top;
                if (scrollbar != null && top >= 0 && top <= scrollbar._scrollData.scrollable)
                    scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (top / scrollbar._scrollData.onePx) + "px");
            }
        },

        _changehHandlerPosition: function (left) {
            var scrollbar = this._hScrollbar;
            if (scrollbar) {
                left = scrollbar._scrollData != null && left >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : left;
                if (scrollbar != null && top >= 0 && left <= scrollbar._scrollData.scrollable)
                    scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (left / scrollbar._scrollData.onePx) + "px");
            }
        },

        _destroy: function () {
            this._off(bbdesigner$(document), "mouseup", this._mouseUpContent);
            this.element.css({ "width": "", "height": "" }).children(".e-vscrollbar,.e-hscrollbar").remove();
            this.content().removeClass("e-content").css({ "width": "", "height": "" });
        },
        _preventDefault: function (e) {
            e = e || window.event;
            if (e.preventDefault) e.preventDefault();

            e.returnValue = false;
        } 
    });
})(bbdesigner$, SyncfusionBoldBIDashboard, window);
;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardAutocomplete", "BoldBIDashboard.Autocomplete", {

        element: null,

        model: null,
        validTags: ["input"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "focusIn", "focusOut", "change", "select",
                            "create", "destroy", "open", "close", "actionComplete", "actionSuccess", "actionFailure"],
        _setFirst: false,

        _rootCSS: "e-autocomplete",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },


        defaults: {

            dataSource: null,

            query: null,

            fields: {

                text: null,

                key: null,
                //Deprecated
                category: null,

                groupBy: null,

                htmlAttributes: null
            },
            locale: "en-US",

            template: null,
            //Deprecated
            allowGrouping: false,

            enableDistinct: false,

            allowSorting: true,

            sortOrder: "ascending",

            htmlAttributes: {},

            multiSelectMode: "none",

            delimiterChar: ',',

            allowAddNew: false,

            addNewText: "Add New",

            showRoundedCorner: false,

            readOnly: false,

            cssClass: "",

            watermarkText: null,

            value: "",

            selectValueByKey: null,

            filterType: "startswith",

            caseSensitiveSearch: false,

            showLoadingIcon: true,

            itemsCount: 0,

            minCharacter: 1,

            delaySuggestionTimeout: 200,

            showPopupButton: false,

            highlightSearch: false,

            enableAutoFill: false,

            enableRTL: false,

            enabled: true,

            visible: true,

            height: "",

            width: "",

            emptyResultText: "No suggestions",

            animateType: "slide",

            showEmptyResultText: true,

            enablePersistence: false,

            popupHeight: "152px",

            popupWidth: "auto",

            autoFocus: false,

            validationRules: null,

            validationMessage: null,

            focusIn: null,

            focusOut: null,

            change: null,

            select: null,

            create: null,

            open: null,

            close: null,

            destroy: null,

            actionBegin: null,

            actionComplete: null,

            actionSuccess: null,

            actionFailure: null
        },

        dataTypes: {
            autoFocus: "boolean",
            watermarkText: "string",
            locale: "string",
            cssClass: "string",
            filterType: "enum",
            caseSensitiveSearch: "boolean",
            showLoadingIcon: "boolean",
            template: "string",
            //Deprecated
            allowGrouping: "boolean",
            enableDistinct: "boolean",
            allowSorting: "boolean",
            sortOrder: "enum",
            allowAddNew: "boolean",
            addNewText: "string",
            showRoundedCorner: "boolean",
            readOnly: "boolean",
            itemsCount: "number",
            animateType: "enum",
            minCharacter: "number",
            showPopupButton: "boolean",
            highlightSearch: "boolean",
            enableAutoFill: "boolean",
            enableRTL: "boolean",
            multiSelectMode: "enum",
            delimiterChar: "string",
            emptyResultText: "string",
            showEmptyResultText: "boolean",
            enabled: "boolean",
            visible: "boolean",
            enablePersistence: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
        },
        observables: ["value"],
        value: BoldBIDashboard.util.valueFunction("value"),
        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.target.disabled = false;
                this.element.removeClass("e-disable").attr({ "aria-disabled": false });
                this.element.removeAttr("disabled");
                if (this.model.showPopupButton) this.dropdownbutton.removeClass("e-disable").attr({ "aria-disabled": false });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable").attr({ "aria-disabled": false });
            }
        },

        disable: function () {
            if (this.model.enabled) {
                this._hideResult();
                this.model.enabled = false;
                this.target.disabled = true;
                this.element.attr("disabled", "disabled");
                this.element.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.showPopupButton) this.dropdownbutton.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable").attr({ "aria-disabled": true });
            }
        },

        clearText: function () {
            if (this.model.multiSelectMode == "visualmode")
                this._deleteBox(this._ulBox.children("li"));
            this.element.val("");
            this._valueChange();
            if (this._isFocused) this.element.blur();
            else this._focusOutAction();
        },

        getValue: function () {
            var value = this.value();
            return (value == null) ? "" : value; 
        },

        getSelectedItems: function () {
            if (this._isFocused && this.model.multiSelectMode != "visualmode")
                this._updateSelectedItemArray();
            return this._selectedItems;
        },
        _setValue: function (value) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            if (typeof value === "object" || (typeof value === "number" && isNaN(value)) || bbdesigner$.trim(value) == "") value = null;
            value = bbdesigner$.trim(value);
            if (this.model.multiSelectMode == "visualmode")
                this._hiddenInput.val("");
            this.element.val("");
            if (value) {
                if (this.model.multiSelectMode == "visualmode") {
                    this._selectedItems = [];
                    this._hiddenInput.val(value);
                    this._modelValue = value;
                    this._deleteBox(this._ulBox.children("li"));
                    var values = value.split(this.model.delimiterChar);
                    if (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) {
                        this._createBoxForObjectType(values);
                    }
                    else {
                        this.suggestionListItems = this.model.dataSource;
                        if (this.suggestionListItems && typeof this.suggestionListItems[0] != "object") {
                            for (var i = 0; i < values.length; i++) {
                                if (values[i]) {
                                    this._ulBox.append(this._createBox(values[i]));
                                    this._selectedItems.push(values[i]);
                                }
                            }
                        }
                        else this._createBoxForObjectType(values);
                    }
                }
                else {
                    this.element.val(value);
                    this._updateSelectedItemArray();
                }
            }
            this.value(this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val());
            this._preVal = this.element.val();
            !this._isWatermark && this._setWatermarkTxt();
            return value;
        },
        _createBoxForObjectType: function (values) {
            var dataQuery, promise, mapper, strData, proxy = this;
            mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
            mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
            for (var data = 0; data < values.length; data++) {
                var _val = bbdesigner$.trim(values[data]);
                if (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) {
                    dataQuery = this._getQuery().where(mapFld._text, "equal", _val, false);
                    promise = (this.model.dataSource).executeQuery(dataQuery);
                    promise.done(function (e) {
                        var res = e.result;
                        strData = res instanceof Array && res.length ? res[0] : _val;
                        proxy._selectedItems.push(strData);
                    }).fail(function (e) {
                        proxy._selectedItems.push(_val);
                    });
                }
                else {
                    dataQuery = BoldBIDashboard.Query().where(mapFld._text, "equal", _val, false);
                    promise = BoldBIDashboard.DataManager(this.suggestionListItems).executeLocal(dataQuery);
                    strData = promise instanceof Array && promise.length ? promise[0] : _val;
                    this._selectedItems.push(strData);
                }
                if (this.model.multiSelectMode == "visualmode")
                    this._ulBox.append(this._createBox(_val));
            }
        },


        selectValueByKey: function (key) {
            var proxy = this;
            key = key.toString();
            var result = key.split(",");
            if (Object.prototype.toString.call(result) === '[object Array]') {
                bbdesigner$.each(result, function (index, value) {
                    proxy._setOperation(bbdesigner$.trim(value), "key");
                });
            }
        },

        selectValueByText: function (text) {
            this._setOperation(text, "text");
        },

        setValue: function (text) {
            this._setText(text);
        },

        _setOperation: function (source, value) {
            if (!this.model.enabled) return false;
            var bindTo = "", promise, dataQuery, proxy = this, list = this.model.dataSource;
            if (BoldBIDashboard.isNullOrUndefined(list)) return false;
            if (typeof list[0] == "object" || list instanceof BoldBIDashboard.DataManager) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper[value]) ? mapper[value] : value;
            } else if (value == "key")
                return false;
            if (BoldBIDashboard.DataManager && list instanceof BoldBIDashboard.DataManager) {
                dataQuery = this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = (list).executeQuery(dataQuery);
                promise.done(function (e) {
                    proxy._setText(e.result[0]);
                });
            }
            else {
                if ((!list || !list.length || list.length < 1)) return false;
                dataQuery = BoldBIDashboard.Query().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = BoldBIDashboard.DataManager(list).executeLocal(dataQuery);
                this._setText(promise[0]);
            }
        },

        _setText: function (data) {
            if (!data) return false;
            var currentValue, mapper = this.model.fields;
            if ((typeof this.model.dataSource[0] == "object") || (typeof data == "object"))
                currentValue = typeof data == "string" ? data : (mapper && mapper["text"]) ? data[mapper["text"]] : data["text"];
            else currentValue = data;
            if (currentValue) {
                if (this.model.multiSelectMode == "visualmode" && this._removeDuplicates(data)) return false;
                this._valueToTextBox(currentValue, data, true);
                this.value(this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val());
            }
        },

        _valueToTextBox: function (currentValue, data, flag) {
            var delimiterIndex;
            if (this.model.multiSelectMode == "visualmode") {
                if (this._addNewTemplate) currentValue = currentValue.substr(0, currentValue.length - this._addNewTemplate.length);
                delimiterIndex = this._hiddenInput.val() ? this.model.delimiterChar : "";
                var key = this._getUniqueKey();
                this._hiddenInput.val(this._hiddenInput.val() + delimiterIndex + (key || currentValue));
                this._modelValue = this._modelValue + delimiterIndex + currentValue;
                this.element.val("").removeAttr('placeholder').width(1);
                this._ulBox.append(this._createBox(currentValue));
                this._addNewTemplate = null;
            }
            else if (this.model.multiSelectMode == "delimiter") {
                delimiterIndex = (this.target.value).lastIndexOf(this.model.delimiterChar)
                if (this._typed || this.element.val() == "" || flag || !this.model.showPopupButton) {
                    if (flag)
                        this.element.val(this.element.val() == "" ? (currentValue) : (this.element.val() + this.model.delimiterChar + currentValue));
                    else
                        this.element.val(this._queryString.substr(0, delimiterIndex + 1) + currentValue + this.model.delimiterChar);
                }
                else {
                    if (this._checkDeli())
                        this.element.val(this._queryString.substr(0, delimiterIndex) + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                    else
                        this.element.val(this.element.val() + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                }
                this._typed = false;
            }
            else {
                this.element.val(currentValue);
                this.model.selectValueByKey = this._getField(data, this.model.fields.key).toString();
                this._selectedItems = [];
            }
            this._selectedItems.push(data);
            this._moveCaretToEnd(this.element[0]);
        },

        _removeDuplicates: function (currentValue) {
            if (this._selectedItems.length == 0) return false;
            if (this._selectedItems.indexOf(currentValue) != -1) return true;
        },

        search: function () {
            if (this.model.enabled && this._checkDelimiter()) {
                this._hideResult();
                this._autoFill = false;
                this._queryString = bbdesigner$.trim(this._queryString);
                if (this._queryString.length > 0) this._OnTextEnter();
            }
        },
        setVisible: function (value) {
            if (value)
                this.wrapper.show();
            else
                this.wrapper.hide();
        },

        hide: function () {
            this._hideResult();
        },

        open: function () {
            this._showFullList();
        },

        _changeWatermark: function (text) {
            if (this._isWatermark) this.element.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.suggestionList.removeClass(this.model.cssClass).addClass(skin);
        },
        _setDropdown: function (boolean) {
            this.model.showPopupButton = boolean;
            if (boolean) this._renderDropdown();
            else this._destroyDropdown();
        },
        _changeHeight: function (height) {
            this.wrapper.height(height);
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },
        _setCulture: function () {
            if (this.defaults.addNewText === this.model.addNewText)
                this.model.addNewText = this._getLocalizedLabels("addNewText");
            if (this.defaults.emptyResultText === this.model.emptyResultText)
                this.model.emptyResultText = this._getLocalizedLabels("emptyResultText");
        },
        _init: function () {
            this._setCulture();
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            //deprecated Property Added
            this.model.fields.groupBy = !this.model.fields.groupBy ? this.model.fields.category : this.model.fields.groupBy;
            this._initialize();
            this._render();
            this._wireEvents();
            this.initialRender = false;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            if (!this.model.validationRules) return;
            var element = this.model.multiSelectMode == "visualmode" ? this._hiddenInput : this.element;
            element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            name = element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                }
            }
        },


        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": this.model.dataSource = null; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "delaySuggestionTimeout": this.model.delaySuggestionTimeout = parseInt(options[option]); break;
                    case "value":
                        options[option] = this._setValue(options[option]);
                        var currValue = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val() == "" ? null : this.element.val();
                        this._changeEvtTrigger(currValue);
                        break;
                    case "showPopupButton": this._setDropdown(options[option]); break;
                    case "enableRTL": this._RightToLeft(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "readOnly": this._checkReadOnly(options[option]); break;
                    case "delimiterChar": var delchar = this.model.delimiterChar; options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option]; this.element.val(this.value().replace(new RegExp(delchar, 'g'), this.model.delimiterChar));
                        this.value(this.element.val());
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[option];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "multiSelectMode":
                        this.model.multiSelectMode = options[option];
                        if (options[option] == "visualmode") {
                            if (this.model.validationRules != null)
                                this.element.rules('remove');
                            this._renderBoxModel();
                        }
                        else if (this.element.hasClass("e-visual-mode"))
                            this._destroyBoxModel();
                        this._setValue(this.value());
                        this._setValidation();
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "visible":
                        this.setVisible(options[option]);
                        break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "itemsCount ": if (options[option] <= 0 || isNaN(options[option])) options[option] = 0; break;
                    case "popupHeight": this.suggestionList.css({ "max-height": options[option] }); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "selectValueByKey": this.selectValueByKey(options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "emptyResultText": this._setCulture(); break;
                    case "addNewText": this._setCulture(); break;
                }
            }
        },

        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            if (this.model.multiSelectMode == "visualmode")
                this.element.attr("name", this._hiddenInput.attr("name"));
            this.wrapper.remove();
            this.element.removeClass("e-input").val("");
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.suggestionList.remove();
        },

        _initialize: function () {
            this.value(this.value() === "" ? this.element[0].value : this.value());
            this.element.attr("role", "combobox").attr("aria-label", "Autocomplete textbox").attr("aria-expanded", false).attr("tabindex", 0).attr("aria-autocomplete", "list");
            this.target = this.element[0];
            this.dropdownbutton = null;
            this._isIE8 = (BoldBIDashboard.browserInfo().name == "msie") && (BoldBIDashboard.browserInfo().version == "8.0") ? true : false;
            this.showSuggestionBox = false;
            this.noresult = true;
            this._queryString = null;
            this.suggLen = 0;
            this._selectedItems = [];
            this._modelValue = "";

            this._activeItem = 0;
            this.ctrlKeyPressed = false;
            this._isFocused = false;
            this._isOpened = false;
            this._typed = false;
            this._cancelEvent = false;
            this._isWatermark = this._checkWatermarkSupport();
        },

        _render: function () {
            this._renderWrapper();
            this._addAttr(this.model.htmlAttributes);
            this._setDimentions();
            this._renderDropdown();
            this._checkProperties();
            this._isWatermark ? this._setWatermark() : this._setWatermarkTxt();
            this._renderSuggestionList();
            this._RightToLeft(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
            this.setVisible(this.model.visible);
            this._setListPosition();
        },
        _renderWrapper: function () {
            this.initialRender = true;
            this.element.addClass("e-input").attr("autocomplete", "off");
            this.wrapper = BoldBIDashboard.buildTag("span.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
            this.container = BoldBIDashboard.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            if (!this._isWatermark) {
                this._hiddenSpan = BoldBIDashboard.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                var proxy = this;
                this._hiddenSpan.click(function (event) {
                    if (!this._isFocused) proxy.element.focus();
                });
            }
        },

        _renderDropdown: function () {
            if (this.model.showPopupButton) {
                var span = BoldBIDashboard.buildTag("span.e-icon e-search").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this.dropdownbutton = BoldBIDashboard.buildTag("span.e-select#" + this.target.id + "_dropdown").attr((this._isIE8) ? { 'unselectable': 'on' } : {}).append(span);
                this.container.append(this.dropdownbutton).addClass("e-padding");
                this.dropdownbutton.bind("mousedown", bbdesigner$.proxy(this._OnDropdownClick, this));
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "required") proxy.element.attr(key, value);
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._disabled(true);
                else if (key == "readOnly" && value == "readOnly") proxy._checkReadOnly(true);
                else proxy.wrapper.attr(key, value);
            });
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },

        _renderBoxModel: function () {
            this._ulBox = BoldBIDashboard.buildTag("ul.e-ul e-boxes");
            this._hiddenInput = BoldBIDashboard.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            this._hiddenInput.attr("name", this.element.attr("name"));
            this.element.val("").removeAttr("name").addClass("e-visual-mode");
            this.element.width(1);
            this.container.prepend(this._hiddenInput, this._ulBox);
            this.wrapper.height("auto");
            this._on(this.container, "mousedown", function (e) {
                if (!this.model.enabled) return false;
                var bbdesigner$target = bbdesigner$(e.target);
                if (!bbdesigner$target.is(this.element)) {
                    e.preventDefault();
                    if (!this._isFocused) this.element.focus();
                    if (bbdesigner$target.hasClass("e-options")) {
                        if (!e.ctrlKey && bbdesigner$target.siblings().hasClass("e-active")) this._removeActive();
                        if (bbdesigner$target.hasClass("e-active")) bbdesigner$target.removeClass("e-active");
                        else bbdesigner$target.addClass("e-active");
                    }
                    else this._moveCaretToEnd(this.element[0]);
                }
                if (!e.ctrlKey && (bbdesigner$target.hasClass("e-boxes") || bbdesigner$target.hasClass("e-input"))) this._removeActive();
            });
        },
        _destroyBoxModel: function () {
            this.container.prepend(this.element);
            this.element.attr({ name: this._hiddenInput.attr("name") }).removeAttr("style").removeClass("e-visual-mode");
            this.wrapper.height(this.model.height);
            this._hiddenInput.remove();
            this._ulBox.remove();
            this._off(this.container, "mousedown");
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children();
            var item = items.last(), flag = item.hasClass("e-active");
            this._removeActive();
            flag ? this._deleteBox(item) : item.addClass("e-active");
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {
                var boxes = this._ulBox.children();
                var index = boxes.index(items[i]);
                this._selectedItems.splice(index, 1);

                var deli = this.model.delimiterChar;
                var values = this._hiddenInput.val().split(deli);
                values.splice(index, 1);
                this._hiddenInput.val(values.join(deli));

                var val = this._modelValue.split(deli);
                val.splice(index, 1);
                this._modelValue = val.join(deli);
                bbdesigner$(items[i]).remove();
            }
            if (this.showSuggestionBox) this._refreshPopup();
            this._valueChange();
            if (this._hiddenInput.val() == "")
                this._setWatermark();
        },
        _removeActive: function () {
            this._ulBox.children("li.e-active").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = BoldBIDashboard.buildTag("span", this.element.val()), wid, minWidth;
            this.container.append(tempSpan);
            minWidth = 30;  //  some additional width for textbox in visualmode
            wid = tempSpan.width() + minWidth;
            if (this.element.width() != wid)
                this.element.width(wid);
            if (this._hiddenInput.val() == "")
                this._setWatermark();
            tempSpan.remove();
        },

        _checkProperties: function () {
            this._checkReadOnly(this.model.readOnly);
            this.model.delimiterChar = this._validateDelimiter(this.model.delimiterChar);
            if (!this.model.enabled) {
                this.model.enabled = true;
                this._disabled(true);
            }
            else if (this.model.enabled && bbdesigner$(this.element).hasClass("e-disable")) {
                this.model.enabled = false;
                this._disabled(false);
            }
            this._checkNameAttr();
            if (this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            this.value(this._setValue(this.value()));
            if (this.model.selectValueByKey != null)
                this.selectValueByKey(this.model.selectValueByKey);
        },

        _checkNameAttr: function () {
            if (!this.element.attr("name"))
                this.element.attr("name", this.element[0].id);
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _destroyDropdown: function () {
            this.dropdownbutton.unbind("mousedown", bbdesigner$.proxy(this._OnDropdownClick, this));
            this.dropdownbutton.remove();
            this.dropdownbutton = null;
            this.container.removeClass("e-padding");
        },

        _validateDelimiter: function (deli) {
            if (bbdesigner$.trim(deli).length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _checkWatermarkSupport: function () {
            return 'placeholder' in document.createElement('input');
        },
        _setWatermark: function () {
            if ((this.model.watermarkText && this.value() == "") || (this.model.multiSelectMode != "visualmode"))
                this.element.attr("placeholder", this.model.watermarkText).width("");
        },
        _setWatermarkTxt: function () {
            if (this.model.watermarkText != null && bbdesigner$.trim(this.element.val()) == "" && (this.model.multiSelectMode != "visualmode" || bbdesigner$.trim(this._hiddenInput.val()) == "")) {
                this._hiddenSpan.css("display", "block").text(this.model.watermarkText);
            }
        },

        _renderSuggestionList: function () {
            var oldWrapper = bbdesigner$("#" + this.element.context.id + "_suggestion").get(0);
            if (oldWrapper)
                bbdesigner$(oldWrapper).remove();
            this.suggestionList = BoldBIDashboard.buildTag("div.e-atc-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_suggestion", "", { "display": "none" }).attr("role", "listbox");
            this.element.attr("aria-owns", this.target.id + "_suggestion");
            this.popup = this.suggestionList;
            var scrollerDiv = BoldBIDashboard.buildTag("div");
            this.ul = BoldBIDashboard.buildTag("ul.e-ul").attr("role", "listbox");
            this.ul.on({
                mouseenter: bbdesigner$.proxy(this._OnMouseEnter, this),
                mouseleave: bbdesigner$.proxy(this._OnMouseLeave, this),
                click: bbdesigner$.proxy(this._OnMouseClick, this)
            }, "li:not('.e-category')");
            scrollerDiv.append(this.ul);
            this.suggestionList.append(scrollerDiv);
            bbdesigner$('body').append(this.suggestionList);
            this._setListWidth();
            this._setListHeight();
            this.suggestionList.BoldBIDashboardScroller({ height: this.suggestionList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.suggestionList.BoldBIDashboardScroller("instance");
        },

        _checkEmptyList: function () {
            if (this.model.multiSelectMode == "visualmode") this._removeRepeated();
            if (this.suggestionListItems.length == 0) {
                this.suggestionListItems.push(this.model.emptyResultText);
                this.noresult = true;
            }
            else this.noresult = false;
        },
        _showSuggestionList: function (e) {
            this._checkEmptyList();
            this._addNewTemplate = null;
            if (this.noresult && this.model.multiSelectMode == "visualmode" && this.model.allowAddNew && this.element.val() != "") {
                this.noresult = false;
                this.suggestionListItems.pop();
                this._addNewTemplate = "   (" + this.model.addNewText + ")";
                this.suggestionListItems.push(this.element.val() + this._addNewTemplate);
                this._checkEmptyList();
            }

            if (!this.noresult || this.model.showEmptyResultText)
                this._generateSuggestionList(e);
        },

        _generateSuggestionList: function (e) {
            var list = this.suggestionListItems, i, suggList = [];
            this.ul.empty();

            if (typeof list[0] != "object") {

                if (this.model.enableDistinct) list = BoldBIDashboard.dataUtil.distinct(list, "", true);
                for (i = 0; i < list.length; i++) {
                    var _txt = (this.model.highlightSearch && !this.noresult) ? this._highlightSuggestion(list[i]) : list[i];
                    this.ul.append(BoldBIDashboard.buildTag("li", _txt).attr("role", "option").attr((this._isIE8) ? { 'unselectable': 'on' } : {}));
                }
                this._currList = list;
                this._mapper = { txt: null, key: null };
            }
            else {
                var mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
                mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key";
                mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
                mapFld._attr = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
                this._mapper = { txt: mapFld._text, key: mapFld._key }, this._currList = [];
                if (this.model.enableDistinct) list = BoldBIDashboard.dataUtil.distinct(list, mapFld._text, true);
                if (this.model.fields.groupBy) {
                    var mapCateg = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy", groupedList, _query;
                    _query = BoldBIDashboard.Query().group(mapCateg);
                    this._addSortingQuery(_query, "key");
                    groupedList = BoldBIDashboard.DataManager(list).executeLocal(_query);
                    this._swapUnCategorized(groupedList);
                    for (i = 0; i < groupedList.length; i++) {
                        if (groupedList[i].key)
                            this.ul.append(BoldBIDashboard.buildTag("li.e-category", groupedList[i].key).attr("role", "option").attr((this._isIE8) ? { 'unselectable': 'on' } : {}));
                        this._generateLi(groupedList[i].items, mapFld);
                    }
                }
                else this._generateLi(list, mapFld);
            }
            if (this._getLiTags().length > 0) this._showResult(e);
        },

        _swapUnCategorized: function (list) {
            bbdesigner$(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },

        _generateLi: function (list, mapFld) {
            for (var j = 0; j < list.length; j++) {
                var _text = this._getField(list[j], mapFld._text);
                var _key = this._getField(list[j], mapFld._key);
                if (!BoldBIDashboard.isNullOrUndefined(_text)) {
                    if (this.model.highlightSearch) _text = this._highlightSuggestion(_text);
                    if (this.model.template) _text = this._getTemplatedString(list[j], mapFld._text, _text);

                    var li = document.createElement("li");
                    li.innerHTML += _text;
                    if (_key)
                        li.setAttribute("id", _key);
                    this._setAttributes(this._getField(list[j], mapFld._attr), li);
                    this.ul[0].appendChild(li);
                    this._currList = bbdesigner$.merge(this._currList, [list[j]]);
                }
            }
        },

        _getLiTags: function () {
            return this.ul.children("li:not('.e-category')");
        },

        _getTemplatedString: function (list, searchLabl, searchTxt) {
            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                var replace = this._getField(list, field);
                // if highlightSearch is enabled, it replaces the highlighted search text
                if (searchLabl == field) replace = searchTxt;
                if (!replace) replace = "";
                str = str.split(content).join(replace);
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _getField: function (obj, fieldName) {
            return BoldBIDashboard.pvt.getObject(fieldName, obj);
        },

        _setAttributes: function (data, element) {
            if (data) {
                if (typeof data == "string")
                    data = bbdesigner$.parseJSON(data);
                for (var key in data)
                    element.setAttribute(key, data[key]);
            }
        },

        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width && width != "auto") this.suggestionList.css({ "width": width });
            else this.suggestionList.css({ "width": this.wrapper.width() });
        },

        _setListHeight: function () {
            this.suggestionList.css({ "max-height": this.model.popupHeight });
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && this.wrapper.outerWidth() != this.suggestionList.outerWidth()) {
                this.suggestionList.css({ "width": this.wrapper.width() });
                this._refreshScroller();
            }
            this._setListPosition();
        },

        _showResult: function (e) {
            this._refreshScroller();
            this._refreshPopup();
            if (this._isOpened)
                bbdesigner$(document).bind("mousedown", bbdesigner$.proxy(this._OnDocumentClick, this));
            else {
                this.suggestionList.css("display", "none");
                var tis = this;
                clearTimeout(this._typing);
                this._typing = setTimeout(function () {
                    tis.suggestionList[(tis.model.animateType == "slide" ? "slideDown" : "fadeIn")]((tis.model.animateType == "none" ? 0 : 300), "easeOutQuad", function () {
                        bbdesigner$(document).bind("mousedown", bbdesigner$.proxy(tis._OnDocumentClick, tis));
                    });
                }, this.model.delaySuggestionTimeout);
                var args = (e != undefined) ? { event: e, isInteraction: true } : { isInteraction: false };
                this._trigger("open", args);
                this.wrapper.addClass("e-active");
            }

            this._isOpened = true;
            this.showSuggestionBox = true;
            var _suggestionListItems = this._getLiTags();
            this._listSize = _suggestionListItems.size();


            bbdesigner$(window).bind("resize", bbdesigner$.proxy(this._OnWindowResize, this));
            var scrObj = BoldBIDashboard.getScrollableParents(this.wrapper);
            if (scrObj[0] != window)
                this._on(scrObj, "scroll", this._hideResult);
        },

        _hideResult: function (e) {
            if (this.showSuggestionBox) {
                this.showSuggestionBox = false;
                this._activeItem = 0;
                this.element.attr("aria-expanded", false);
                if (this._isOpened) {
                    this.suggestionList.css("display", "none");
                    var args = (e != undefined) ? { event: e, isInteraction: true } : { isInteraction: false };
                    this._trigger("close", args);
                }
                else this.suggestionList[(this.model.animateType == "slide" ? "slideUp" : "fadeOut")]((this.model.animateType == "none" ? 0 : 100), "easeOutQuad");
                bbdesigner$(document).unbind("mousedown", bbdesigner$.proxy(this._OnDocumentClick, this));
                bbdesigner$(window).unbind("resize", bbdesigner$.proxy(this._OnWindowResize, this));
                this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                this.wrapper.removeClass("e-active");
            }
        },

        _refreshScroller: function () {
            this.suggestionList.css("height", "auto");
            this.suggestionList.find(".e-content, .e-vscroll").removeAttr("style");
            this.suggestionList.find(".e-vscroll div").removeAttr("style");
            this.suggestionList.find(".e-content, .e-vhandle").removeAttr("style");
            this.suggestionList.find(".e-vhandle div").removeAttr("style");

            this.suggestionList.css("display", "block");

            if (this.suggestionList.height() > (parseInt(bbdesigner$.isNumeric(this.model.popupHeight) ? this.model.popupHeight : this.model.popupHeight.replace("px", "")) - 4)) {
                this.scrollerObj.model.height = this.suggestionList.height();
                this.scrollerObj.refresh();
                this.scrollerObj.option("scrollTop", 0);
                this.suggestionList.addClass("e-scroller")
            }
            else
                this.suggestionList.removeClass("e-scroller")
            this.suggestionList.css("height", "auto");
            if (this._isIE8)
                this.suggestionList.find('.e-vscroll div, .e-hscroll div').attr("unselectable", "on");
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = bbdesigner$(document).scrollTop() + bbdesigner$(window).height() - (pos.top + bbdesigner$(elementObj).outerHeight()),
            winTopHeight = pos.top - bbdesigner$(document).scrollTop(),
            popupHeight = this.suggestionList.outerHeight(),
            popupWidth = this.suggestionList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = bbdesigner$(document).scrollLeft() + bbdesigner$(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.suggestionList.outerWidth() - elementObj.outerWidth();
            this.suggestionList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            return BoldBIDashboard.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return BoldBIDashboard.util.getZindexPartial(this.element, this.suggestionList);
        },

        _targetFocus: function (e) {
            var minWidth = 30;  //  minimum width for textbox in visualmode
            if (this.model.multiSelectMode == "visualmode")
                this._setWatermarkWidth(minWidth);
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
            this._isFocused = true;
            this._trigger("focusIn", { event: e, isInteraction: true, value: this.value() });
        },
        _focusOutAction: function (e) {
            this._isFocused = false;
            this.wrapper.removeClass("e-focus");
            !this._isWatermark && this._setWatermarkTxt();
            this._removeSelection();
            if (this.model.multiSelectMode == "visualmode") {
                this._removeActive();
                this.element.val("");
                this._setWatermarkWidth(1);
                this._preVal = "";
                this._addNewTemplate = null;
            }
            else {
                if (this.model.multiSelectMode == "delimiter") {
                    if (this._checkDeli())
                        this._valueChange(e);
                }
                this._updateSelectedItemArray();
            }
        },
        _targetBlur: function (e) {
            this._focusOutAction(e);
            this._trigger("focusOut", { event: e, isInteraction: true, value: this.value() });
        },
        _setWatermarkWidth: function (width) {
            this.model.watermarkText && this.element.attr('placeholder') ? this.element.width("") : this.element.val("").width(width);
        },
        _checkDeli: function () {
            var val, deli, last;
            val = this.element.val();
            deli = this.model.delimiterChar;
            last = val.substr(val.length - deli.length, val.length);
            if (last == deli) {
                this.element.val(val.substr(0, val.length - deli.length));
                return true;
            }
            else return false;
        },
        _removeSelection: function () {
            if (this.model.enableAutoFill) {
                this.element.attr("aria-autocomplete", "both");
                var selection = this._getCaretSelection();
                if (selection.end - selection.start != 0 && selection.end - selection.start != this.element.val().length)
                    this.target.value = this.target.value.substr(0, selection.start);
            }
        },

        _removeListHover: function () {
            this._getLiTags().removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = bbdesigner$(this._getLiTags()[this._activeItem - 1]);
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
        },

        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), li = this.ul.find("li"), liH = 0, index, top, i;
            index = this.ul.find("li.e-hover").index();
            liH = li.eq(0).outerHeight() * index;
            top = liH - ((this.suggestionList.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top;
        },

        _getActiveText: function () {
            if (this._mapper.txt) return this._getField(this._currList[this._activeItem - 1], this._mapper.txt);
            else return this._currList[this._activeItem - 1];
        },

        _getUniqueKey: function () {
            var key = null;
			if(!BoldBIDashboard.isNullOrUndefined(this._mapper))
			{
			    if (this._mapper.key) key = this._getField(this._currList[this._activeItem - 1], this._mapper.key);
			    BoldBIDashboard.isNullOrUndefined(key) && (key = null);
			}
            return key;
        },

        _setTextBoxValue: function () {
            if (this._activeItem && !this.noresult) {
                var currentValue, selection, val, text;
                currentValue = this._getActiveText();
                selection = this._getCaretSelection();
                this.suggLen = selection.start;
                val = this.target.value.substr(0, this.suggLen);

                if (val && val.toLowerCase() == currentValue.substr(0, this.suggLen).toLowerCase()) {
                    if (this.model.multiSelectMode == "delimiter") {
                        var _deliIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
                        var query = bbdesigner$.trim(val.substr(_deliIndex + 1, this.suggLen));
                        text = val + currentValue.substr(query.length, currentValue.length);
                    }
                    else {
                        text = val + currentValue.substr(val.length, currentValue.length);
                    }
                    this.element.val(text);
                    this._autofilSelection();
                    if (this.model.multiSelectMode == "visualmode") {
						this._adjustWidth();
						if(this.model.enableAutoFill) this._refreshPopup();
					}
                    if (this.model.autoFocus && !this.noresult) this._addListHover();
                }
                else this._removeSelection();
            }
        },

        _enterTextBoxValue: function (e) {
            if (this._activeItem && !this.noresult && !this.model.readOnly) {
                var currentValue = this._getActiveText(), currItem = this._currList[this._activeItem - 1];
                this._valueToTextBox(currentValue, currItem, false);
                var _value = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
                this._trigger("select", { event: e, isInteraction: true, value: _value, text: currentValue, key: this._getUniqueKey(), item: currItem });
                this._valueChange(e);
            }
            this._trigger("close", { event: e, isInteraction: true });
        },

        _createBox: function (value) {
            var span = BoldBIDashboard.buildTag("span.e-icon e-close");
            var li = BoldBIDashboard.buildTag("li.e-options", value).append(span);

            this._on(span, "click", function (e) {
                if (!this.model.enabled) return false;
                this._deleteBox(bbdesigner$(e.target).parent());
            });
            return li;
        },

        _addLoadingClass: function () {
            if (this.model.showLoadingIcon)
                this.element.addClass("e-load");
        },

        _removeLoadingClass: function () {
            this.element.removeClass("e-load");
        },


        _highlightSuggestion: function (suggestion) {
            if (bbdesigner$.trim(this._queryString) != "") {
                var caseSensitive, tempQueryString, RegEx, mch, split, query, str;
                caseSensitive = this.model.caseSensitiveSearch ? "g" : "gi";
                query = bbdesigner$.trim(this._queryString);
                query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                tempQueryString = this.model.filterType == "startswith" ? "^" + query : this.model.filterType == "endswith" ? query + "$" : query;
                RegEx = new RegExp(tempQueryString, caseSensitive);
                if (RegEx.test(suggestion)) {
                    mch = suggestion.match(RegEx);
                    //for IE-8 the regEx doesnt returns the empty string.So manually we replace string to return empty string.
                    str = suggestion.replace(RegEx, "~^");
                    split = str.split("~^");
                    suggestion = "";
                    bbdesigner$(split).each(function (i, val) {
                        if (mch[i])
                            suggestion += val + "<span class='e-hilight-txt'>" + mch[i] + "</span>";
                        else
                            suggestion += val;
                    });
                }
            }
            return suggestion;
        },

        _RightToLeft: function (value) {
            if (value) {
                this.wrapper.addClass("e-rtl");
                this.suggestionList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.suggestionList.removeClass("e-rtl");
            }
        },

        _setRoundedCorner: function (value) {
            if (value) {
                this.container.addClass("e-corner");
                this.suggestionList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                this.suggestionList.removeClass("e-corner");
            }
        },

        _checkReadOnly: function (value) {
            this.model.readOnly = value;
            if (this.model.readOnly) {
                this.element.attr({ "readonly": "readonly", "aria-readonly": true });
                this._off(this.element, "keydown", this._OnKeyDown);
                this._off(this.element, "keyup", this._OnKeyUp);
            }
            else {
                this.element.removeAttr("readonly").removeAttr("aria-readonly");
                this._on(this.element, "keydown", this._OnKeyDown);
                this._on(this.element, "keyup", this._OnKeyUp);
            }
        },

        _OnKeyDown: function (e) {
            if (this.model.filterType != "startswith")
                this.model.enableAutoFill = false;

            switch (e.keyCode) {
                case 37:
                case 35:
                case 36:
                    this._removeSelection();
                case 39:
                    break;
                case 38:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem > 1)
                            this._activeItem -= 1;
                        else
                            this._activeItem = this._listSize;
                        this._addListHover();
                        if (this.model.enableAutoFill) {
                            this.element.attr("aria-autocomplete", "both");
                            this._queryString = this.target.value;
                            this._setTextBoxValue();
                        }
                    }
                    this._PreventDefaultAction(e);
                    break;
                case 40:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem < this._listSize)
                            this._activeItem += 1;
                        else
                            this._activeItem = 1;
                        this._addListHover();
                        if (this.model.enableAutoFill) {
                            this.element.attr("aria-autocomplete", "both");
                            this._queryString = this.target.value;
                            this._setTextBoxValue();
                        }
                    } else {
                        if (e.ctrlKey && this.element.val() == "") {
                            this._showFullList(e);
                        }
                        else if (e.ctrlKey) {
                            this._showSuggestionList(e);
                        }
                    }
                    this._PreventDefaultAction(e);
                    break;
                case 8:
                    if (bbdesigner$.trim(this.element.val()) == "") this._isOpened = false;
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteLastBox();
                    }
                    break;
                case 17:
                    this.ctrlKeyPressed = true;
                    break;
                case 13:
                    e.preventDefault();
                    break;
                case 9:
                    if (this.showSuggestionBox) {
                        this._queryString = this.element.val();
                        this._enterTextBoxValue(e);
                        this._hideResult(e);
                        this._isOpened = false;
                        this._PreventDefaultAction(e);
                    }
                    break;
                case 27:
                    this._isOpened = false;
                    this._hideResult(e);
                    this._PreventDefaultAction(e);
                    break;
            }
            if (this.model.multiSelectMode == "visualmode") {
                if (e.keyCode != 17 && e.keyCode != 8 && e.keyCode != 46) this._removeActive();
                this._adjustWidth();
            }
        },


        _PreventDefaultAction: function (e) {

            e.preventDefault();
            if (!this._cancelEvent) {
                e.stopPropagation();
                e.cancelBubble = true;
                e.returnValue = true;
            }

        },
        _bubbleEvent: function (cancelevent) {

            if (typeof cancelevent == "boolean")
                this._cancelEvent = cancelevent;
            return this._cancelEvent;
        },


        _OnKeyUp: function (e) {
            this._keyDownComplete(e);
            if (this.ctrlKeyPressed) {
                if (e.keyCode == 17)
                    this.ctrlKeyPressed = false;
                return false;
            }

            if (bbdesigner$.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                this._hideResult(e);
                return false;
            }
            if (!this._checkDelimiter()) return false;
            this._queryString = bbdesigner$.trim(this._queryString);

            switch (e.keyCode) {
                case 38:
                case 40:
                case 37:
                case 39:
                case 20:
                case 16:
                case 17:
                case 18:
                case 35:
                case 36:
                case 144:
                case 9:
                case 27: break;

                case 13:
                    e.preventDefault();
                    this._queryString = this.element.val();
                    this._enterTextBoxValue(e);
                    if (this.model.enableAutoFill) {
                        this.element.attr("aria-autocomplete", "both");
                        this.suggLen = this.element.val().length;
                        this._autofilSelection();
                    }
                    this._isOpened = false;
                    this._hideResult(e);
                    break;

                case 46:
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteBox(this._ulBox.children("li.e-active"));
                        break;
                    }
                case 8:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = false;
                        this._OnTextEnter(e);
                    }
                    else {
                        this.noresult = true;
                        this._hideResult(e);
                        if (bbdesigner$.trim(this.element.val()) == "") {
                            this._isOpened = false;
                            this._trigger("close", { event: e, isInteraction: true });
                        }
                    }
                    this._typed = true;
                    break;

                default:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = true;
                        this._OnTextEnter(e);
                    }
                    else this.noresult = true;
                    this._typed = true;
                    break;
            }
        },

        _getFilteredList: function (list, e) {
            if (!BoldBIDashboard.isNullOrUndefined(list) && typeof list[0] == "object") {
                var bindTo = (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text";
                if (BoldBIDashboard.isNullOrUndefined((BoldBIDashboard.DataManager(list).executeLocal(BoldBIDashboard.Query().select(bindTo))[0])) && this.model.actionFailure)
                    this._trigger("actionFailure", { error: this._getLocalizedLabels("actionFailure") });
            }
            if (!list || !list.length || list.length < 1) {
                this.suggestionListItems = [];
                if (this.model.actionFailure) this._trigger("actionFailure", { error: this._getLocalizedLabels("actionFailure") });
            }
            else {
                var tempQuery = BoldBIDashboard.Query();
                this._addQuery(tempQuery, typeof list[0] == "object");
                this.suggestionListItems = BoldBIDashboard.DataManager(list).executeLocal(tempQuery);
                if (this.model.actionSuccess) this._trigger("actionSuccess");
            }
            this._doneRemaining(e);
            if (this.model.actionComplete)
                this._trigger("actionComplete");
        },

        _performSearch: function (e) {
            if (this.model.actionBegin)
                this._trigger("actionBegin");
            var source = this.model.dataSource;
            if (BoldBIDashboard.DataManager && source instanceof BoldBIDashboard.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    window.clearTimeout(this.timer);
                    var proxy = this;

                    this.timer = window.setTimeout(function () {
                        proxy._fetchRemoteDat(source);
                    }, 700);
                }
                else this._getFilteredList(source.dataSource.json, e);
            }
            else this._getFilteredList(source, e);
        },

        _fetchRemoteDat: function (source) {
            var proxy = this, queryPromise, tempQuery = this._getQuery();
            this._addQuery(tempQuery, true);
            queryPromise = source.executeQuery(tempQuery);
            queryPromise.fail(function (e) {
                proxy.suggestionListItems = null;
                proxy._removeLoadingClass();
                proxy._trigger("actionFailure", e);
            }).done(function (e) {
                proxy.suggestionListItems = e.result;
                proxy._doneRemaining(e);
                proxy._trigger("actionSuccess", e);
            }).always(function (e) {
                proxy._trigger("actionComplete", e);
            });
        },

        _addSortingQuery: function (query, key) {
            if (this.model.allowSorting) {
                var order = (this.model.sortOrder == "descending") ? true : false;
                query.sortBy(key, order);
            }
        },

        _addQuery: function (_query, checkMapper) {
            var bindTo = "";
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
            if (this._queryString) _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
            this._addSortingQuery(_query, bindTo);
            if (this.model.itemsCount > 0) _query.take(this.model.itemsCount);
        },

        _getQuery: function () {
            if (BoldBIDashboard.isNullOrUndefined(this.model.query)) {
                var column = [], queryManager = BoldBIDashboard.Query(), mapper = this.model.fields;
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!BoldBIDashboard.isNullOrUndefined(this.model.dataSource.dataSource.url) && !this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
                    !BoldBIDashboard.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = this.model.query.clone();
            return queryManager;
        },

        _OnTextEnter: function (e) {
            this._addLoadingClass();
            this.element.attr("aria-expanded", false);
            this._performSearch(e);
        },

        _doneRemaining: function (e) {
            this._showSuggestionList(e);
            this.element.attr("aria-expanded", true).attr("aria-haspopup", true);
            if (this.model.enableAutoFill && this._autoFill && !this.noresult || this.model.autoFocus) {
                this.element.attr("aria-autocomplete", "both");
                this._activeItem = 1;
                this._queryString = this.target.value;
            }
            if (this.model.enableAutoFill && this._autoFill && !this.noresult) this._setTextBoxValue();
            if (this.model.autoFocus && !this.noresult) this._addListHover();
            this._removeLoadingClass();
            if (this.noresult && !this.model.showEmptyResultText)
                this._hideResult(e);
        },

        _removeRepeated: function () {
            var results = this.suggestionListItems;
            if (!results || results.length == 0 || this._selectedItems.length == 0)
                return false;
            for (var i = 0; i < this._selectedItems.length; i++) {
                var index = results.indexOf(this._selectedItems[i]);
                if (index != -1) this.suggestionListItems.splice(index, 1);
            }
        },

        _checkDelimiter: function () {
            this._queryString = this.element.val();
            var _deliIndex = (this.model.multiSelectMode != "delimiter") ? -1 : this._queryString.lastIndexOf(this.model.delimiterChar);


            if (_deliIndex == -1) {
                return true;
            }
            else if (_deliIndex + 1 == this._queryString.length) {
                this._hideResult();
                return false;
            }
            else {
                this._queryString = this._queryString.substr(_deliIndex + 1, this._queryString.length);
                return true;
            }
        },

        _autofilSelection: function () {
            var element = this.element[0], totLen = this.element.val().length;

            if (element.setSelectionRange)
                element.setSelectionRange(this.suggLen, totLen);
            else if (element.createTextRange) {

                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', totLen);
                element.moveStart('character', this.suggLen);
                element.select();
            }
        },

        _OnDropdownClick: function (e) {
            if (this.model.enabled && !this.model.readOnly) {
                e.preventDefault();
                this._addLoadingClass();
                if (this.showSuggestionBox) {
                    this._isOpened = false;
                    this._hideResult(e);
                    this._removeLoadingClass();
                }
                else this._showFullList(e);
            }
        },

        _showFullList: function (e) {
            if (!this._isFocused)
                this.element.focus();
            this._queryString = null;
            this._autoFill = false;
            this._performSearch(e);
        },

        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            if (e.target.tagName != "LI") targetEle = bbdesigner$(e.target).parents("li");
            this._getLiTags().removeClass("e-hover");
            bbdesigner$(targetEle).addClass("e-hover");

            this._queryString = this.element.val();
            this._activeItem = this._getLiTags().index(bbdesigner$(targetEle)) + 1;
        },

        _OnMouseLeave: function (e) {
            this._getLiTags().removeClass("e-hover");
            if (this.model.highlightSearch)
                this._getLiTags().find(".e-hilight-txt").removeClass("e-hover");
        },

        _OnMouseClick: function (e) {
            if (!this.noresult) {
                this._enterTextBoxValue(e);
                this._isOpened = false;
                this._hideResult(e);
            }
        },

        _OnDocumentClick: function (e) {
            if (!bbdesigner$(e.target).is(this.suggestionList) && !bbdesigner$(e.target).parents(".e-atc-popup").is(this.suggestionList) &&
                !bbdesigner$(e.target).is(this.element) && !bbdesigner$(e.target).parents(".e-atc").is(this.wrapper)) {
                this._isOpened = false;
                this._hideResult(e);
                this._trigger("close", { event: e, isInteraction: true });
            }
            else if (bbdesigner$(e.target).is(this.suggestionList) || bbdesigner$(e.target).parents(".e-atc-popup").is(this.suggestionList))
                e.preventDefault();
        },

        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

        _valueChange: function (e) {
            var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val() == "" ? null : this.element.val();
            if (this.value() != currValue) {
                this.value(currValue);
                this._changeEvtTrigger(currValue, e);
            }
        },
        _changeEvtTrigger: function (currValue, e) {
            var args = (e != undefined) ? { event: e, isInteraction: true, value: currValue } : { isInteraction: false, value: currValue };
            if (!this.initialRender) {
                this._trigger("change", args);
                this._trigger("_change", { value: currValue });
            }
        },

        _updateSelectedItemArray: function (e) {
            var value = this.getValue(), values = [];
            this._selectedItems = [];
            this.suggestionListItems = this.model.dataSource;
            if (this.model.multiSelectMode == "delimiter" && value) {
                values = value.split(this.model.delimiterChar);
                if ((BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) || ((!BoldBIDashboard.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
                    for (var i = 0; i < values.length; i++) {
                        if (values[i])
                            this._selectedItems.push(values[i]);
                    }
                }
                else
                    this._createBoxForObjectType(values);
            }
            else if (this.model.multiSelectMode == "none" && value) {
                values.push(value);
                if ((BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) || ((!BoldBIDashboard.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object")))
                    this._selectedItems.push(value);
                else
                    this._createBoxForObjectType(values);
            }
        },

        _keyDownComplete: function (e) {
            var currValue = this.element.val();
            if (this._preVal != currValue) {
                this._preVal = currValue;
                if (this.model.multiSelectMode == "visualmode") this._adjustWidth();
                this._valueChange(e);
            }
        },

        _moveCaretToEnd: function (el) {
            //Chrome Scroll content
            el.scrollLeft = el.scrollWidth;
            //IE Scroll the content
            if (el.createTextRange) {
                var rng = el.createTextRange();
                rng.moveEnd('textedit');
                rng.moveStart('textedit');
                rng.select();
            }
            if (typeof el.selectionStart == "number") {
                el.selectionStart = el.selectionEnd = el.value.length;
            } else if (typeof el.createTextRange != "undefined") {
                var range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;

            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }

            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },
        _getLocalizedLabels: function (property) {
            return BoldBIDashboard.Autocomplete.Locale[this.model.locale][property] === undefined ? BoldBIDashboard.Autocomplete.Locale["en-US"][property] : BoldBIDashboard.Autocomplete.Locale[this.model.locale][property]
        },
        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
        }
    });
    BoldBIDashboard.Autocomplete.Locale = BoldBIDashboard.Autocomplete.Locale || {};
    BoldBIDashboard.Autocomplete.Locale["default"] = BoldBIDashboard.Autocomplete.Locale["en-US"] = {
        addNewText: "Add New",
        emptyResultText: "No suggestions",
        actionFailure: "The specified field doesn't exist in given data source"
    };

    BoldBIDashboard.filterType = {
        /**  Supports to search text with startswith  */
        StartsWith: "startswith",
        /**  Supports to search text with contains */
        Contains: "contains",
        /**  Supports to search text with endswith */
        EndsWith: "endswith",
        /**  Supports only for number lessthan only */
        LessThan: "lessthan",
        /**  Supports only for number greaterthan only */
        GreaterThan: "greaterthan",
        /**  Supports only for number lessthanorequal only */
        LessThanOrEqual: "lessthanorequal",
        /**  Supports only for number greaterthanorequal only */
        GreaterThanOrEqual: "greaterthanorequal",
        /**  Supports only for number equal only */
        Equal: "equal",
        /** Supports only for number notequal only */
        NotEqual: "notequal"
    };

    BoldBIDashboard.SortOrder = {
        /** Supports to sorts with ascending only */
        Ascending: "ascending",
        /** Supports to sorts with descending only */
        Descending: "descending"
    };

    BoldBIDashboard.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
    BoldBIDashboard.Animation = {
        /** Supports to animation type with none only */
        None: "none",
        /** Supports to animation type with slide only */
        Slide: "slide",
        /** Supports to animation type with fade only */
        Fade: "fade"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget(
    {
        "ejNumericTextbox": ["BoldBIDashboard.NumericTextbox", "e-numerictextbox"],
        "ejPercentageTextbox": ["BoldBIDashboard.PercentageTextbox", "e-percentagetextbox"],
        "ejCurrencyTextbox": ["BoldBIDashboard.CurrencyTextbox", "e-currencytextbox"]
    },
    {
        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true,
            requireParser:true
        },

        defaults: {

            width: "",

            height: "",

            value: null,

            name: null,

            htmlAttributes: {},

            minValue: -(Number.MAX_VALUE),

            maxValue: Number.MAX_VALUE,

            incrementStep: 1,

            decimalPlaces: 0,

            validateOnType: false,

            cssClass: "",

            enablePersistence: false,

            showSpinButton: true,

            locale: "en-US",

            enableStrictMode: false,

            showRoundedCorner: false,

            readOnly: false,

            enabled: true,

            enableRTL: false,

            watermarkText: "Enter value",

            validationRules: null,

            validationMessage: null,

            groupSeparator: null,

            groupSize: null,

            positivePattern: null,

            currencySymbol:null,

            negativePattern: null,

            change: null,

            focusIn: null,

            focusOut: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            minValue: "number",
            maxValue: "number",
            incrementStep: "number",
            decimalPlaces: "number",
            showSpinButton: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            locale: "string",
            watermarkText: "string",
            cssClass: "string",
            readOnly: "boolean",
            enabled: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            validateOnType: "boolean",
            groupSeparator: "string"
        },
        observables: ["value"],

        _setModel: function (jsondata) {
            var validate = false;
            for (var key in jsondata) {
                switch (key) {
                    case "value":
                        if (BoldBIDashboard.isNullOrUndefined(jsondata["minValue"]) && BoldBIDashboard.isNullOrUndefined(jsondata["maxValue"])) {
                            this._setValue(jsondata[key], true);
                            jsondata[key] = this.model.value;
                        }
                        else {
                            this.model.value = this._checkNumValue(jsondata[key]);
                            this._localizedFormat();
                            this._raiseChangeEvent(true);
                            validate = true;
                        }
                        break;
                    case "enableRTL": this._enableRTL(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "minValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.minValue = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        validate = true;
                        break;
                    case "maxValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.maxValue = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        validate = true;
                        break;
                    case "incrementStep":
                        if (isNaN(jsondata[key])) return;
                        this.model.incrementStep = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        break;
                    case "enableStrictMode": this.model.enableStrictMode = jsondata[key]; break;
                    case "showSpinButton": this._showSpin(jsondata[key]); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "locale":                        
                        this.model.decimalPlaces = ((BoldBIDashboard.isNullOrUndefined(this._options.decimalPlaces)) && (this.model.decimalPlaces === this.culture.numberFormat.decimals))
                           ? -1 : (this._options.decimalPlaces === -1) ? -1 : this.model.decimalPlaces;
                        this._setLocalize(jsondata[key]);
                        this._options.decimalPlaces = this.model.decimalPlaces;
						jsondata[key] = this.model.locale;
						break;
                    case "decimalPlaces":
                        this._setDecimal(jsondata[key]);
                        if (BoldBIDashboard.isNullOrUndefined(this._options)) this._options = {};
                        this._options["decimalPlaces"] = jsondata[key];
                        break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": if (jsondata[key]) this.enable(); else this.disable(); break;
                    case "watermarkText":
                        if(!BoldBIDashboard.isNullOrUndefined(this._options)) this._options = [];
                        this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
                        this._localizedLabels.watermarkText = this.model.watermarkText;						
						this._changeWatermark(jsondata[key]);
						break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "groupSeparator":
                        this._checkSeparator(jsondata[key]);
                        jsondata[key] = this.model.groupSeparator;
                        break;
                    case "positivePattern":
                    case "negativePattern":
                    case "groupSize":
                    case "currencySymbol":
                        this.model[key] = jsondata[key];
                        this._options[key] = jsondata[key];
                        this._initCustomValue();
                        jsondata[key] = this.model[key];
                        this._setValue(this.model.value, true);
                        break;                    
                }
            }
            if (validate) {
                this._validateMinMaxValue(true, true);
                jsondata["value"] = this.model.value;
                jsondata["maxValue"] = this.model.maxValue;
                jsondata["minValue"] = this.model.minValue;
                if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
				this.wrapper.attr({ 'aria-valuemin': this.model.minValue, 'aria-valuemax': this.model.maxValue, 'aria-valuenow': this.model.value });
            }
            this._checkSeparator(this.model.groupSeparator);
            this.element.val(this._removeSeparator(this.model.value));
            this._updateSeparator();
            this._checkErrorClass();
        },


        _destroy: function () {
            if (this.wrapper) {
                this.element.insertBefore(this.wrapper);
                this.wrapper.remove();
            }
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.element.val("").removeClass('e-input e-disable').empty();
            this.element.removeAttr('disabled aria-disabled');
			this.wrapper.removeAttr('aria-valuemin aria-valuemax aria-valuenow aria-live');
            if (!(this._cloneElement).attr('role')) this.element.removeAttr('role');
            this.element.css("display", "block");
        },



        _init: function (options) {
            this._cloneElement = this.element.clone();
            this._options = BoldBIDashboard.isNullOrUndefined(options) ? {} :options;
            if (this.element.is("input") && (this.element.is("input[type=text]") || this.element.is("input[type=number]") || !this.element.attr('type'))) {
                if(this.model.decimalPlaces > 0){
                    this.element[0].type = "text";
                }
                this._isWatermark = 'placeholder' in document.createElement('input');
                this.model.locale = BoldBIDashboard.preferredCulture(this.model.locale).name == "en" ? "en-US" : BoldBIDashboard.preferredCulture(this.model.locale).name;
                this._localizedLabels = this._getLocalizedLabels();
                this.culture = BoldBIDashboard.preferredCulture(this.model.locale);
                this._browsername = BoldBIDashboard.browserInfo().name;
                this._initCustomValue();
                this._prevSeparator = null;
                this._checkSeparator(this.model.groupSeparator);
                this._checkAttribute();
                this._renderControl();
                this._setValues();
                this._wireEvents();
                this._initObjects();
                this._addAttr(this.model.htmlAttributes);
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
                this._updateSeparator();
                if (options && options.value != undefined) {
                    this._trigger("_change", { value: this.model.value });
                }
            }
            else {
                this._destroy();
                return false;
            }
        },
		
        _checkAttribute: function () {
            var attr = ["min", "max", "step", "readonly", "disabled", "placeholder"], propName = ["minValue", "maxValue", "incrementStep", "readOnly", "enabled", "watermarkText"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if ((!BoldBIDashboard.isNullOrUndefined(value)) && !BoldBIDashboard.isNullOrUndefined(this._options) && (BoldBIDashboard.isNullOrUndefined(this._options[propValue]))) {
                    if (propValue == "watermarkText") this._options[propValue] = value;
                    else this.model[propValue] = ((propValue != "disabled") && (propValue != "readOnly")) ? BoldBIDashboard.parseFloat(value, this.model.locale) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "accesskey") proxy._hiddenInput.attr(key, value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readonly" && value == "readOnly") proxy._setReadOnly(true);
                else if (keyName == "tabindex") {
                    proxy._hiddenInput.attr(key, value);
                    proxy.element.attr(key, value);
                }
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (BoldBIDashboard.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);
            });
        },

        _setValues: function () {
            this._id = this.element[0].id;
            this._textBox = this._hiddenInput[0];
            this._error = false;
            this._timeout = null;
            this.isValidState = true;
            this._allowkeyboard = true;
            this._validateOnType = false;
            this._focused = false;
            this._startValue = 0;
            if (this.sfType === "BoldBIDashboard.CurrencyTextbox" && this.model.minValue == -(Number.MAX_VALUE))
                this.model.minValue = 0;
            if (BoldBIDashboard.isNullOrUndefined(this.model.decimalPlaces)) {
                if (this.sfType === "BoldBIDashboard.CurrencyTextbox")
                    this.model.decimalPlaces = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat.currency.decimals;
                else this.model.decimalPlaces = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat.decimals;

            }
            if (this.model.decimalPlaces >= 0) {
                this.model.minValue = parseFloat(this.model.minValue.toFixed(this.model.decimalPlaces));
                this.model.maxValue = parseFloat(this.model.maxValue.toFixed(this.model.decimalPlaces));
            }
            if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
			if (!BoldBIDashboard.isNullOrUndefined(this._options)) {
                if (!BoldBIDashboard.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
                
            }
            this._localizedLabelToModel();
            this._localizedFormat();
            this._validateMinMaxValue(true);
            this._updateSymbol(this.model.locale);
            var value;
            if (BoldBIDashboard.isNullOrUndefined(this.model.value)) {
                value = this.model.value;
                this.wrapper.removeClass('e-valid');
            }
            else {
                value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.wrapper.addClass('e-valid');
            }
           this.element.val(value);
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            var rules = this.model.validationRules;
            this.element.rules("add", rules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in rules) {
                var message = null;
                if (!BoldBIDashboard.isNullOrUndefined(rules[ruleName])) {
                    if (!BoldBIDashboard.isNullOrUndefined(rules["messages"] && rules["messages"][ruleName]))
                        message = rules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                }
            }
        },


        _renderControl: function () {
            this.wrapper = BoldBIDashboard.buildTag("span.e-widget e-pinch");
            this.innerWrap = BoldBIDashboard.buildTag("span.e-in-wrap e-box ");
            this.wrapper.attr("style", this.element.attr("style"));
            if (this.sfType === "BoldBIDashboard.NumericTextbox")
                this.wrapper.addClass('e-numeric');
            else if (this.sfType === "BoldBIDashboard.PercentageTextbox")
                this.wrapper.addClass('e-percent');
            else if (this.sfType === "BoldBIDashboard.CurrencyTextbox")
                this.wrapper.addClass('e-currency');
            this.wrapper.append(this.innerWrap).insertAfter(this.element);
            this.innerWrap.append(this.element);
            this._hiddenInput = BoldBIDashboard.buildTag("input", "", {}, { type: "text" }).insertBefore(this.element);
            this._hiddenInput.attr('data-role', 'none');

            this._hiddenInput[0].tabIndex = this.element[0].tabIndex;
            this._hiddenInput.attr("accesskey", this.element[0].accessKey);
            this.element[0].accessKey = "";

            this._hiddenInput.css("display", "block");
            this.element.css("display", "none");
            if (!this._isWatermark) {
                this._hiddenSpan = BoldBIDashboard.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this._localizedLabels.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._on(this._hiddenSpan,"mousedown", this._focusIn);
                this._on(this._hiddenSpan,'mousewheel', this._mouseWheel);
                this._on(this._hiddenSpan,'DOMMouseScroll',this._mouseWheel);
            }
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
            this.element.attr("name") == null ? this.element.attr("name", this.model.name) : "";
            this.element.addClass('e-input');
            if (BoldBIDashboard.isNullOrUndefined(this.model.value) && this.element[0].value != "") {
                if (BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[','] == ".")
                    this.element[0].value = this.element[0].value.replace(".", ",");
                this.model.value = this._checkNumValue(this.element[0].value);
            }   
            else {
                if (typeof this.model.value== "string" && BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[','] == ".")
                    this.model.value = this.model.value.replace(".", ",");
                this.model.value = this._checkNumValue(this.model.value);
            }
            this._hiddenInput.attr({ 'value': this.model.value }).addClass('e-input');
			this.wrapper.attr({'role': 'spinbutton', 'aria-valuemin': this.model.minValue, 'aria-valuemax': this.model.maxValue, 'aria-valuenow': this.model.value,});
            this.element.attr({'aria-live': 'assertive', "value": this.model.value });
            var spinbutton = bbdesigner$('<span class="e-select"><span class="e-spin e-spin-up " role="button" aria-label="Increase Value" unselectable="on" /><span class="e-spin e-spin-down" role="button" aria-label="Decrease Value" unselectable="on" /></span>');
            spinbutton.find('.e-spin-up').append(BoldBIDashboard.buildTag('span.e-icon e-arrow e-arrow-sans-up').attr({ 'role': 'presentation', 'unselectable': 'on' }));
            spinbutton.find('.e-spin-down').append(BoldBIDashboard.buildTag('span.e-icon e-arrow e-arrow-sans-down').attr({ 'role': 'presentation', 'unselectable': 'on' }));
            this.innerWrap.append(spinbutton);
            this.spin = this.wrapper.find('.e-select');
            this.spinUp = this.wrapper.find('.e-spin-up');
            this.spinDown = this.wrapper.find('.e-spin-down');
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            if (this.model.cssClass != "") this._setSkin(this.model.cssClass);
            this._showSpin(this.model.showSpinButton);
            if (this.model.showRoundedCorner) this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL) this._enableRTL(this.model.enableRTL);
            if (this.model.readOnly) this._setReadOnly(this.model.readOnly);
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && this.element.hasClass("e-disable")) this.enable();
        },


        _initObjects: function () {
            this._preVal = this.model.value;
            if (this.model.value === null) {
                this.isValidState = true;
                this._hiddenInput.val(null);
            }
            else if ((this.model.value < this.model.minValue) || (this.model.value > this.model.maxValue))
                this.isValidState = false;
            this._checkErrorClass();
            this._setWaterMark();
        },


        _showSpin: function (value) {
            if (!value) {
                if (this.spin) {
                    this.spin.hide();
                    this.innerWrap.removeClass('e-padding');
                }
                this._spinEvents("_off");
            }
            else {
                if (this.spin) {
                    this.spin.show();
                    this.innerWrap.addClass('e-padding');
                }
                this._spinEvents("_on");
            }
        },


        _roundedCorner: function (value) {
            if (value && !this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.addClass('e-corner');
            } else if (this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.removeClass('e-corner');
            }
        },


        _enableRTL: function (enableRTL) {
            if (enableRTL) {
                if (this.spin) {
                    this.wrapper.addClass("e-rtl");
                }
                else this.element.addClass("e-rtl");
            }
            else {
                if (this.spin) {
                    this.wrapper.removeClass("e-rtl");
                }
                else this.element.removeClass("e-rtl");
            }
        },


        _setWidth: function (value) {
            value != "" ? this.wrapper.width(value) : this.model.width = this.wrapper.outerWidth();
        },


        _setHeight: function (value) {
            value != "" ? this.wrapper.height(value) : this.model.height = this.wrapper.outerHeight();
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },


        _setValue: function (value, isCode) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.model.value = this._checkNumValue(value);
            this._validateMinMaxValue(false);
            this._checkErrorClass();
            this._localizedFormat();
            this._raiseChangeEvent(isCode);
            this._setWaterMark();
        },

        _setLocalize: function (val) {
            var prevSeparator = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[',']
            this.model.locale = BoldBIDashboard.preferredCulture(val).name == "en" ? "en-US" : BoldBIDashboard.preferredCulture(val).name;
            this.model.groupSeparator = ((BoldBIDashboard.isNullOrUndefined(this._options.groupSeparator) && (prevSeparator === this.model.groupSeparator))) ?
                BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[','] : this.model.groupSeparator;
			this._localizedLabels = this._getLocalizedLabels();
            if (!BoldBIDashboard.isNullOrUndefined(this._options)) {
                if (!BoldBIDashboard.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            this.culture = BoldBIDashboard.preferredCulture(this.model.locale);
            this._initCustomValue();
            this._updateSymbol(this.model.locale);
            this._localizedFormat();
            this._changeWatermark(this.model.watermarkText);
            if (BoldBIDashboard.isNullOrUndefined(this.model.value)) value = this.model.value;
            else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n",true) : this._convertToExponetial(this.model.value).unformattedValue;
            this.element.val(value);
			
        },
		 _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            
        },
        _updateSymbol: function (locale) {
            this._percentSymbol = BoldBIDashboard.preferredCulture(locale).numberFormat.percent.symbol;
            this._currencySymbol = BoldBIDashboard.preferredCulture(locale).numberFormat.currency.symbol;
        },

        _setDecimal: function (val) {
            this.model.decimalPlaces = val;
            this._localizedFormat();
        },


        _validateMinMaxValue: function (fromMinMax, isCode) {
            var valChange = false, value;
            if (this.model.minValue > this.model.maxValue) this.model.minValue = this.model.maxValue;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.value) && this.model.minValue > this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this._startValue = this.model.value = this.model.minValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else if (!BoldBIDashboard.isNullOrUndefined(this.model.value) && this.model.maxValue < this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this.model.value = this.model.maxValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else this.isValidState = true;
            if (this.model.minValue == this.model.maxValue) this._startValue = this.model.minValue;
            if ((valChange && fromMinMax)) {
                value = this._formatValue(this.model.value, "n", true);
                this._hiddenInput.val(value);
                if (BoldBIDashboard.isNullOrUndefined(this.model.value)) value = this.model.value;
                else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n", true) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._localizedFormat();
                this._raiseChangeEvent(isCode);
            }
        },

        _convertToExponetial: function (value) {
            var number = "", pattern, format;
            var negative = value < 0 ? true : false;
            value = value.toString();
            format = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            unformattedValue = value;
            var length = null;
            if (this.sfType === "BoldBIDashboard.NumericTextbox") {
                pattern = negative ? format.pattern[0] : BoldBIDashboard.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = "";
            }
            else if (this.sfType === "BoldBIDashboard.PercentageTextbox") {
                pattern = negative ? format.percent.pattern[0] : format.percent.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.percent.symbol;
            }
            else if (this.sfType === "BoldBIDashboard.CurrencyTextbox") {
                pattern = negative ? format.currency.pattern[0] : format.currency.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.currency.symbol;
            }
            for (idx = 0, length = pattern.length; idx < length; idx++) {
                ch = pattern.charAt(idx);
                (ch === "n") ? number += value : (ch === "$" || ch === "%") ? number += symbol : number += ch;
            }
            return { formattedValue: number, unformattedValue: unformattedValue }
        },

        _localizedFormat: function () {
            this.culture = BoldBIDashboard.preferredCulture(this.model.locale);
            this._decimalSep = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat['.'];
            if (BoldBIDashboard.isNullOrUndefined(this.model.value)) {
                this._textBox.value = "";
                return;
            }
            if (this.model.value.toString().indexOf('e') == -1) {
                this._textBox.value = this._removeSeparator(this.model.value)
                if (!this._focused && this._textBox.value != "") {
                    this._textBox.value = this._formatValue(this.model.value, "n", true);
					
                    if (this.sfType === "BoldBIDashboard.PercentageTextbox") this._appendPercentSymbol(this._textBox.value);
                    else if (this.sfType === "BoldBIDashboard.CurrencyTextbox") this._appendCurrencySymbol(this._textBox.value);


                    var symbolIndex = (this.sfType === "BoldBIDashboard.CurrencyTextbox") ? this._textBox.value.indexOf(this._currencySymbol) : (this.sfType === "BoldBIDashboard.PercentageTextbox") ? this._textBox.value.indexOf(this._percentSymbol) : -1;

                    if (this.model.decimalPlaces == -1) {
                        this._textBox.value = this._textBox.value.substr(0, this._textBox.value.lastIndexOf(this._decimalSep));
                        if (symbolIndex > 1 && (BoldBIDashboard.isNullOrUndefined(this._afterDec) || this._afterDec == "")) {
                            if (this.sfType === "BoldBIDashboard.CurrencyTextbox")
                                this._textBox.value = this._textBox.value + " " + this._currencySymbol;
                            if (this.sfType === "BoldBIDashboard.PercentageTextbox")
                                this._textBox.value = this._textBox.value + " " + this._percentSymbol;
                        }
                        if (this.model.decimalPlaces == -1 && !BoldBIDashboard.isNullOrUndefined(this._afterDec) && this._afterDec != "") {
                            var index = this._textBox.value.lastIndexOf(this._decimalSep);
                            if (index >= 0) {
                                this._textBox.value = this._textBox.value.substr(0, index);
                            }
                            var symbolPos = this._afterDec;
                            if (symbolIndex > 1) {
                                if (this.sfType === "BoldBIDashboard.CurrencyTextbox")
                                    symbolPos = symbolPos + " " + this._currencySymbol;
                                if (this.sfType === "BoldBIDashboard.PercentageTextbox")
                                    symbolPos = symbolPos + " " + this._percentSymbol;

                            }
                            this._textBox.value = this._textBox.value + this._decimalSep + symbolPos;
                        }
                    }
                }
                else {
                    var value = this._convertToExponetial(this.model.value);
                    this._textBox.value = value.unformattedValue;
                    if (!this._focused && this._textBox.value != "")
                        this._textBox.value = value.formattedValue;
                }
            }
        },

        _checkNumValue: function (value) {
            if (typeof value == "string")
                value = !this._changeSeparator ? value : this._replaceSeparator(value, this.model.groupSeparator, BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[',']);
            if (typeof value == "string" && !isNaN(this._parseValue(value))) {
                value = this._parseValue(value);
                return parseFloat(value);
            }
            else if ((typeof value == "number") && !isNaN(value))
                return value;
            else return null;
        },


        _setReadOnly: function (bool) {
            this.model.readOnly = bool;
            if (bool) {
                this.element.attr("readonly", true);
                this._hiddenInput.attr("readonly", true);
            }
            else {
                this.element.prop("readonly",false);
                this._hiddenInput.prop("readonly",false);
            }
        },


        _setWaterMark: function () {
            if ((this._localizedLabels.watermarkText != null) && (this._textBox.value === "") && bbdesigner$.trim(this._hiddenInput.val()) === "") {
                if (this._isWatermark) {
                    this._hiddenInput.attr("placeholder", this._localizedLabels.watermarkText);
                    this.element.attr("placeholder", this._localizedLabels.watermarkText);
                }
                else
                    this._hiddenSpan.css("display", "block").text(this._localizedLabels.watermarkText);
            }
        },


        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) {
                this._hiddenInput.attr("placeholder", text);
                this.element.attr("placeholder", text);
            }
            else this._hiddenSpan.text(text);
        },


        _setSelectionRange: function (selectionStart, selectionEnd) {
            var input = this._textBox;
            try {
                if (input.setSelectionRange) {
                    if (this._browsername == "edge")  setTimeout(function () { input.setSelectionRange(selectionStart, selectionEnd) })
                    else input.setSelectionRange(selectionStart, selectionEnd);
                }
                else if (input.createTextRange) {
                    var range = input.createTextRange();
                    _setselction(range);
                }
            }
            catch (e) {
                var control = this;
                window.setTimeout(function () {
                    document.body.focus();
                    control._textBox.select();
                    if (document.selection) {
                        var range = document.selection.createRange();
                        _setselction(range);
                    }
                }, 1);
            }
            function _setselction(range) {
                range.collapse(true);
                range.moveEnd('character', selectionEnd);
                range.moveStart('character', selectionStart);
                range.select();
            }
        },


        _getSelection: function (value) {
            if (this._textBox.type != "number") {
                var oSel = null;
                if (document.selection) {
                    oSel = document.selection.createRange();
                    return (oSel.text === "" ? oSel.text : this._removeFormats(oSel.text));
                }
                else {
                    if (value == null)
                        return this.model.value;
                    else {
                        oSel = this._removeFormats(value.substring(this._textBox.selectionStart, this._textBox.selectionEnd));
                        return oSel;
                    }
                }
            }
        },


        _caretPosition: function () {
            var oField = this._textBox;
            var iCaretPos = 0;
            // IE Support
            if (oField.type != "number") {
                if (document.selection) {
                    oField.focus();
                    // To get cursor position, get empty selection range
                    var oSel = document.selection.createRange();
                    // Move selection start to 0 position
                    oSel.moveStart('character', -oField.value.length);
                    // The caret position is selection length
                    iCaretPos = oSel.text.length;
                }
                    // Firefox support
                else if (oField.selectionStart || oField.selectionStart == '0')
                    iCaretPos = oField.selectionEnd;
                return (iCaretPos);
            }  
        },


        _appendPercentSymbol: function (value) {
            if (this._percentSymbol) value = value.replace(this._percentSymbol, "");
            if (value.indexOf(BoldBIDashboard.preferredCulture(this.model.locale).numberFormat.percent.symbol) < 0)
                this._textBox.value = this._formatValue(this._parseValue(value) / 100, "p", true);
            this._percentSymbol = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat.percent.symbol;
        },

        _appendCurrencySymbol: function (value) {
            if (this._currencySymbol) value = value.replace(this._currencySymbol, "");
            if (value.indexOf(BoldBIDashboard.preferredCulture(this.model.locale).numberFormat.currency.symbol) < 0)
                this._textBox.value = this._formatValue(this._parseValue(value), "c", true);
            this._currencySymbol = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat.currency.symbol;

        },

        _removeFormats: function (val) {
            var grpSep = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[","];
            if (val != null) {
                if (grpSep == ".")
                    return (val.toString().replace(/["."]/g, ""));
                else if (val.toString().match(new RegExp(grpSep, "g")))
                    return (val.toString().replace(new RegExp(grpSep, "g"), ""));
                else
                    return val;
            }
            else
                return null;
        },


        _checkErrorClass: function (obj) {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
		


        enable: function () {
            this.model.enabled = true;
            this.element[0].disabled = false;
            this.element.prop("disabled",false);
            this._hiddenInput.prop("disabled", false);
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this._hiddenInput.removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select").removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select span.e-icon.e-arrow").removeClass('e-disable');
            this.wrapper.removeClass('e-disable-wrap');
        },


        disable: function () {
            this.model.enabled = false;
            this.element[0].disabled = true;
            this.element.attr("disabled", "disabled");
            this._hiddenInput.attr("disabled", "disabled");
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this._hiddenInput.addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select").addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select span.e-icon.e-arrow").addClass('e-disable');
            this.wrapper.addClass('e-disable-wrap');
        },


        getValue: function () {
            return this.model.value;
        },

        _wireEvents: function () {
            this._on(this._hiddenInput, 'focus', this._focusIn);
            this._on(this.element, 'paste', this._paste);
            this._on(this.element, 'blur', this._focusOut);
            this._on(this.element, 'keydown', this._keyDown);
            this._on(this.element, 'keypress', this._keyPress);
            this._on(this.element, 'mousewheel', this._mouseWheel);
            this._on(this.element, 'DOMMouseScroll', this._mouseWheel);
        },

        _spinEvents: function (action) {
            this[action](this.spinUp, "mousedown mouseup touchstart touchend", this._spinUpClick);
            this[action](this.spinDown, "mousedown mouseup touchstart touchend", this._spinDownClick);
        },

        _isIE8: function () {
            var _ie8 = false, browserInfo = BoldBIDashboard.browserInfo();
            if (browserInfo.name == 'msie' && browserInfo.version == "8.0") {
                _ie8 = true;
            }
            return _ie8;
        },

        _spinUpClick: function (event) {
            var isNotLeftClick = false;
            if (event.button)
                isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
            else if (event.which)
                isNotLeftClick = (event.which == 3); //for Opera
            if (isNotLeftClick) return;
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this.wrapper.find(".e-animate").removeClass("e-animate");
            this.spinUp.addClass("e-animate");
            this._on(this.spinUp, 'mouseleave', this._mouseUpClick);
            this.spinUp.addClass("e-active");
            var self = this;
            if (event.type == "mouseup"|| event.type == "touchend") {
                this._updateInputField("increment");
                this.spinUp.removeClass("e-active");
                this._off(bbdesigner$(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown"|| event.type == "touchstart") {
                if (!this._focused) this._hiddenInput[0].focus();
                this._timeout = setInterval(function () {
                    self._updateInputField("increment");
                }, 150);
                this._on(bbdesigner$(document), 'mouseup', this._mouseUpClick);
            }
        },

        _spinDownClick: function (event) {
            var isNotLeftClick = false;
            if (event.button)
                isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
            else if (event.which)
                isNotLeftClick = (event.which == 3); //for Opera
            if (isNotLeftClick) return;
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this.wrapper.find(".e-animate").removeClass("e-animate");
            this.spinDown.addClass("e-animate");
            this._on(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.addClass("e-active");
            if (event.type == "mouseup"|| event.type == "touchend") {
                this._updateInputField("decrement");
                this.spinDown.removeClass("e-active");
                this._off(bbdesigner$(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown"|| event.type == "touchstart") {
                if (!this._focused) this._hiddenInput[0].focus()
                this._timeout = setInterval(function () {
                    self._updateInputField("decrement");
                }, 150);
                this._on(bbdesigner$(document), 'mouseup', this._mouseUpClick);
            }
        },

        _mouseUpClick: function (event) {
            event.stopPropagation();
            clearTimeout(this._timeout);
            this._off(this.spinUp, 'mouseleave', this._mouseUpClick);
            this._off(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.removeClass("e-active");
            this.spinUp.removeClass("e-active");
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (!this._focused) this.element[0].focus();
            if (!this.model.enabled || this.model.readOnly) return;
            var delta;
            var rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._updateInputField("increment");
            else if (delta < 0)
                this._updateInputField("decrement");
            this._cancelEvent(event);
        },


        _numberValue: function () {
            var value = this._textBox.value;
            if (this.sfType === "BoldBIDashboard.NumericTextbox")
                value = this._formatValue(this.model.value, "n", true);
            if (this.sfType === "BoldBIDashboard.PercentageTextbox")
                value = this._formatValue(this.model.value, "n", true);
            else if (this.sfType === "BoldBIDashboard.CurrencyTextbox")
                value = this._formatValue(this.model.value, "n", true);
            value = (typeof value == "string" && !isNaN(this._parseValue(value))) ? value : "";
            return value;
        },
        _formatValue: function (value, format,flag) {
            if(flag) this._updateCultureInfo();
            var value = BoldBIDashboard.format(value, format + this.model.decimalPlaces, this.model.locale);
            if (flag) this._restCultureInfo();
            return value;
        },
        _parseValue: function (value) {
            this._updateCultureInfo();
            var value = BoldBIDashboard.parseFloat(value, this.model.locale);
            this._restCultureInfo();
            return value;            
        },

        _initCustomValue: function () {
            var format, ctr = this.sfType == "BoldBIDashboard.PercentageTextbox" ? "percent" : this.sfType == "BoldBIDashboard.CurrencyTextbox" ? "currency" : "numeric";
            switch (ctr) {
                case "percent":
                case "currency":
                    format = this.culture.numberFormat[ctr];
                    if (BoldBIDashboard.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
                    if (BoldBIDashboard.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = format.pattern[1];
                    if (BoldBIDashboard.isNullOrUndefined(this._options.currencySymbol) && ctr == "currency") this.model.currencySymbol = format.symbol;
                    if (BoldBIDashboard.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];                    
                    break;
                case "numeric":
                    format = this.culture.numberFormat;
                    if (BoldBIDashboard.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
                    if (BoldBIDashboard.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = BoldBIDashboard.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
                    if (BoldBIDashboard.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];
                    break;
            }
        },

        _updateCultureInfo: function (flag) {
            var format, ctr = this.sfType == "BoldBIDashboard.PercentageTextbox" ? "percent" : this.sfType == "BoldBIDashboard.CurrencyTextbox" ? "currency" : "numeric";
            format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
            this._oldNegativePattern = format.pattern[0];
            this._oldGroupSize = format.groupSizes[0];
            format.pattern[0] = this.model.negativePattern;
            format.groupSizes[0] = this.model.groupSize;
            this._oldPositivePattern = format.pattern[1];
            format.pattern[1] = this.model.positivePattern;
            if (ctr == "currency") {
                this._oldcurrencySymbol = format.symbol;
                format.symbol = this.model.currencySymbol;
            }
        },
        _restCultureInfo: function () {
            var format, ctr = this.sfType == "BoldBIDashboard.PercentageTextbox" ? "percent" : this.sfType == "BoldBIDashboard.CurrencyTextbox" ? "currency" : "numeric";
            format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
            format.pattern[0] = this._oldNegativePattern;
            format.groupSizes[0] = this._oldGroupSize;
            format.pattern[1] = this._oldPositivePattern;
            if (ctr == "currency")
                format.symbol = this._oldcurrencySymbol;;
        },
        _toggleTextbox: function (toggle) {
            var proxy = this;
            proxy._hiddenInput.toggle(toggle);
            proxy.element.toggle(!toggle);
        },

        _paste: function (event) {
            var text;
            if (window.clipboardData && window.clipboardData.getData) { // IE
                text = window.clipboardData.getData('Text');
            }
            else if (event.originalEvent.clipboardData && event.originalEvent.clipboardData.getData) { // other browsers
                text = event.originalEvent.clipboardData.getData('text/plain');
            }
            var data = BoldBIDashboard.parseFloat(text, this.model.locale);
            if (isNaN(data))
                this._cancelEvent(event)
            else {
                this.element.val(data);
                this._cancelEvent(event);
            }
        },
        _focusIn: function (event) {
            if (this.model.readOnly)
                return;
            this._focused = true;
            if(!BoldBIDashboard.isNullOrUndefined(this.model.value)) this.element.val(this._removeSeparator(this.model.value));
            this._toggleTextbox(false);
            this._textBox = this.element[0];
            this.element[0].focus();
            this._preVal = this.model.value;
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass('e-error');
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = this._formatValue(this._textBox.value, "n", true);
                    if (this.model.decimalPlaces == -1) {
                        this._separateValue(this._textBox.value.toString(), true, true);
                        if (!BoldBIDashboard.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            value = this._beforeDec + this._decimalSep + this._afterDec
                    }
                    this._textBox.value = value;
                    this._hiddenInput.val(value);
                }
                this._setSelectionRange(0, this._textBox.value.length);
            }
            this._trigger("focusIn", { value: this.model.value });
        },

        _separateValue: function (value, isDecimal, isgroupSep) {
            var index = (!isDecimal) ? value.lastIndexOf(".") : value.lastIndexOf(this._decimalSep);
            this._beforeDec = (index >= 0) ? value.substr(0, index) : value;
            if (!isDecimal && isgroupSep)
                this._afterDec = (index >= 0) ? value.substr(index + 1) : "";
        },

        _focusOut: function (event) {
            this._focused = false;
            this.wrapper.removeClass("e-focus");
            this._separateValue(this._textBox.value,false,true);
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = BoldBIDashboard.parseFloat(this._textBox.value, this.model.locale);
                    if (value < this.model.minValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.minValue, "n", false)
                        else
                            this.isValidState = false
                    }
                    else if (value > this.model.maxValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.maxValue, "n", false);
                        else
                            this.isValidState = false;
                    }
                    this.model.value = (this.model.decimalPlaces == -1 && !BoldBIDashboard.isNullOrUndefined(this._afterDec) && (this._textBox.value.lastIndexOf(this._decimalSep) == -1)) ? BoldBIDashboard.parseFloat(this._textBox.value + this._decimalSep + this._afterDec, this.model.locale) : BoldBIDashboard.parseFloat(this._textBox.value, this.model.locale);
                    if (isNaN(this.model.value) && !this.model.value) {
                        this.model.value = null;
                        this.isValidState = false;
                    }
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                    this._localizedFormat();
                    this._checkErrorClass();
                }
                else {
                    var value = this._textBox.value == "" ? null : this._textBox.value;
                    this.model.value = value;
                    this._hiddenInput.val(value);
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                }
                if (this.model.value === null || this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) this.isValidState = true;
                else if (this.model.enableStrictMode) this.isValidState = false;
                this._raiseChangeEvent();
                this._setWaterMark();
                if (BoldBIDashboard.isNullOrUndefined(this.model.value)) value = this.model.value;
                else value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._updateSeparator();
                this._trigger("focusOut", { value: this.model.value });
            }
            this._checkErrorClass();
            this._afterDec = "";
        },

        _cancelEvent: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            e.stopPropagation();
            e.preventDefault();
            return false;
        },

        _updateInputField: function (operation) {
            this.isValidState = true;
            if (!this._focused) bbdesigner$(this._hiddenInput[0]).focus();
            var step = this.model.incrementStep;
            var itemValue = this.model.value;
            if (this._textBox.value === "") {
                this._textBox.value = this._formatValue(this._startValue, "n", true);
                step = 0;
            }
            else if (this._textBox.value.indexOf(" ") >= 0)
                this._textBox.value = this._textBox.value.replace(" ", "");
            if (this.sfType === "BoldBIDashboard.PercentageTextbox" || this.sfType === "BoldBIDashboard.CurrencyTextbox") {
                var editorvalue = this._textBox.value, value = editorvalue;
                if (editorvalue.indexOf(BoldBIDashboard.preferredCulture(this.model.locale).numberFormat.percent.symbol) > -1)
                    value = editorvalue.substring(0, editorvalue.length - 1);
                this.model.value = this._parseValue(value);
            }
            else if (this.sfType == "BoldBIDashboard.NumericTextbox")
                this.model.value = BoldBIDashboard.parseFloat(this._textBox.value, this.model.locale);

            if (isNaN(this.model.value) && !this.model.value)
                this.model.value = this._startValue;

            if (this.model.value >= this.model.minValue && this.model.value > this.model.maxValue) {
                this.model.value = this.model.maxValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value < this.model.minValue && this.model.value <= this.model.maxValue) {
                this.model.value = this.model.minValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                value = operation == "increment" ? this.model.value + step : this.model.value - step;
                 if(this.model.decimalPlaces == -1) value = parseFloat(value.toFixed(this._afterDec.length));
                if (value >= this.model.minValue && value <= this.model.maxValue)
                    this._setValue(value);
            }
            this._checkErrorClass();
        },

        _validateDecimal: function (e) {
            var char = String.fromCharCode(e.keyCode);
            char = e.keyCode == 188 ? "," : (e.keyCode == 190) ? "." : (e.keyCode == 110) ? BoldBIDashboard.preferredCulture(this.model.locale).numberFormat["."] : char;
            if (BoldBIDashboard.preferredCulture(this.model.locale).numberFormat["."].charCodeAt(0) == char.charCodeAt(0))
                return true;
            return false;
        },

        _allowKeyCodes: function (e) {
            var keys = new Array(38, 40, 35, 36, 109, 189, 46, 8, 127, 37, 39, 190, 9, 13, 16, 17, 18, 20, 110, 173, 86, 88, 67);
            for (var i = 0; i < keys.length; i++) {
                if (e.keyCode == keys[i] || (this._validateDecimal(e) && this.model.decimalPlaces != 0))
                    return true;
            }
            return false;
        },

        _raiseChangeEvent: function (isCode) {
            var currVal = this.model.value, value;
            if ((this._checkNumValue(this._preVal) !== this._checkNumValue(currVal))) {
                this._preVal = currVal;
                this.model.value = (this.model.decimalPlaces == -1 && !BoldBIDashboard.isNullOrUndefined(this.model.value)) ? parseFloat(this.model.value) : this._checkNumValue(this._formatValue(this._preVal, "n", false));
                this._updateHiddenField();
                if (BoldBIDashboard.isNullOrUndefined(this.model.value)) {
                    value = this.model.value;
                    this.wrapper.removeClass('e-valid');
                }
                else {
                    value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                    if (this.model.decimalPlaces == -1) {
                        this._separateValue(this.model.value.toString(), false,true);
                        if (!BoldBIDashboard.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            value = this._beforeDec + this._decimalSep + this._afterDec;
                    }
                    this.wrapper.addClass('e-valid');
                }
                this.element.val(value);
			    this.wrapper.attr('aria-valuenow', value);
                this._updateSeparator();
                // Trigger the Jquery change event for the input element.
                this.element.trigger("change");
                this._trigger("_change", { value: this.model.value, isInteraction: !isCode });
                this._trigger("change", { value: this.model.value, isInteraction: !isCode });
            }
        },
        _updateHiddenField: function () {
            var prevActive = this._textBox;
            this._textBox = this._hiddenInput[0];
            this._localizedFormat();
            this._textBox = prevActive;
        },
        _removeSeparator: function (number) {
            if (BoldBIDashboard.isNullOrUndefined(number)) return;
            var value, format, tag;
            if (this.model.decimalPlaces == -1) {
                this._separateValue(number.toString(), false,true);
            }
            number = this._checkNumValue(this._formatValue(number, "n", false));
            value = number.toString();
            format = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            return value;
        },
        _updateSeparator: function () {
            if (this._changeSeparator && this.model.value) {
                var formatValue;
                    if (this.sfType === "BoldBIDashboard.NumericTextbox")
                        formatValue = this._formatValue(this.model.value, "n", true);
                    else if (this.sfType === "BoldBIDashboard.PercentageTextbox")
                        formatValue = this._formatValue((this.model.value) / 100, "p", true);
                    else if (this.sfType === "BoldBIDashboard.CurrencyTextbox")
                        formatValue = this._formatValue(this.model.value, "c", true);
                    if (this.model.decimalPlaces == -1) {
                        var index = formatValue.lastIndexOf(this._decimalSep);
                        var val = formatValue.substr(index + 1);
                        this._separateValue(formatValue, true, false);
                        var symbolIndex = (this.sfType === "BoldBIDashboard.CurrencyTextbox") ? formatValue.indexOf(this._currencySymbol) : (this.sfType === "BoldBIDashboard.PercentageTextbox") ? this._textBox.value.indexOf(this._percentSymbol) : -1;
                        var symbolPos = this._afterDec;
                         if (symbolIndex > 1) {
                           if (this.sfType === "BoldBIDashboard.CurrencyTextbox")
                                symbolPos = symbolPos + " " + this._currencySymbol;
                            if (this.sfType === "BoldBIDashboard.PercentageTextbox")
                                symbolPos = symbolPos + " " + this._percentSymbol;
                         }
                        if (!BoldBIDashboard.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            formatValue = this._beforeDec + this._decimalSep + symbolPos;
                        if (!BoldBIDashboard.isNullOrUndefined(this._afterDec) && this._afterDec == "")
                            formatValue = this._beforeDec + this._decimalSep + val;
                    }
                
                this._hiddenInput.val(this._replaceSeparator(formatValue, BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[","], this.model.groupSeparator));
            }
        },

        _replaceSeparator: function (value, find, replaceWith) {
            this._decimalSep = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat['.'];
            var reg = find === "" ? new RegExp("\\s", "g") : new RegExp("\\" + find, "g");
            if (this.model.groupSeparator == BoldBIDashboard.preferredCulture(this.model.locale).numberFormat['.']) {
                var decimalpoints = this.model.decimalPlaces;
                if (this.model.decimalPlaces == -1) {
                    var index = value.lastIndexOf(this._decimalSep);
                    decimalpoints = value.substr(index + 1).length;
                 }
                var valuelength = value.length - decimalpoints - 1;
                return value.substring(0, valuelength).replace(reg, replaceWith) + value.substring(valuelength, value.length);
            }
            return value.replace(reg, replaceWith);
        },

        _checkSeparator: function (value) {
            this.model.groupSeparator = value != null ? this._validateSeparator(value) : BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[','];
            this._changeSeparator = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[","] != this.model.groupSeparator ? true : false;
            this._prevSeparator = this.model.groupSeparator;
        },
        _validateSeparator: function (value) {
            var separator = value.toString();
            var reg = new RegExp("[a-zA-Z0-9]");
            separator = (separator.length > 1) ? separator[0] : separator;
            separator = (!reg.test(separator)) ? separator : this._prevSeparator != null ? this._prevSeparator : BoldBIDashboard.preferredCulture(this.model.locale).numberFormat[','];
            return separator;
        },
        _keyPress: function (e) {
            if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === 8 || e.keyCode === 13)
                return;
            var proxy = this, regExp = null, point = ".", cursor, beforeCursor, afterCursor, numberFormat, value;
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            numberFormat = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat;

            var character = String.fromCharCode(e.which);
            value = beforeCursor + character + afterCursor;
            var separator = numberFormat[point];
            separator = (separator === point) ? "\\" + separator : separator;
            regExp = proxy.model.decimalPlaces === 0 ? new RegExp("^((-)?(\\d*)(-)?)?$") : new RegExp("^(-)?(((\\d+(" + separator + "\\d*)?)|(" + separator + "\\d*)))?((-)?)$");
            // Validate the textbox value 
            if (!regExp.test(value))
                return false;
        },
        _validateDecimalOnType: function (e) {
            var cursor, cancelEvent, beforeCursor, afterCursor, sel, temp;
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            sel = this._getSelection(this._textBox.value);
            var decSep = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat["."];
            temp = (BoldBIDashboard.isNullOrUndefined(this.model.value)) ? "" : this.model.value.toString();
            if (this.model.decimalPlaces != 0) {
                var afterdeci = (this._textBox.value).split(decSep)[1];
                if (temp.indexOf(decSep) > 0) {
                    if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                        cancelEvent = true;
                    else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                    else cancelEvent = false;
                }
                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                else
                    cancelEvent = false;
            }
            else
                cancelEvent = false;
            if (cancelEvent) {
                this._keypressFlag = false;
                this._cancelEvent(e);
                return false;
            }
        },

        _keyDown: function (e) {
            if (this.model.readOnly) return;
            this._CurrentCultureInfo = JSON.parse(JSON.stringify(BoldBIDashboard.preferredCulture()));
            var cursor, cancelEvent, beforeCursor, afterCursor, sel;
            if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || this._allowKeyCodes(e)) {
                if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 118 || e.keyCode == 67 || e.keyCode == 88)))
                    return true;
                if ((((e.ctrlKey == true) && (e.keyCode != 9 && e.keyCode != 17 && e.keyCode != 86 && e.keyCode != 67))) || (e.keyCode == 67 || e.keyCode == 86 || e.keyCode == 88)) {//Prevent Shift + Tab event
                    this._keypressFlag = false;
                    this._cancelEvent(e);
                    return false;
                }

                if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode == 110) {//Numbers from 0 to 9 in keyboard and numpad (110 for decimal)
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.toString().substring(0, cursor);
                    afterCursor = this._textBox.value.toString().substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                    // For Numpad issue
                    if (e.keyCode >= 96 && e.keyCode <= 105)
                        e.keyCode -= 48;
                    if (this.model.validateOnType) this._validateDecimalOnType(e);
                    if (this._validateOnType) {
                        var decSep = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat["."];
                        var temp = this.model.value.toString();
                        var tempIndex = temp.indexOf(decSep);
                        var value = this.model.value;

                        var replaceminVal = (this.model.decimalPlaces == -1) ? this.model.minValue : this.model.minValue.toFixed(this.model.decimalPlaces);
                        var replacemaxVal = (this.model.decimalPlaces == -1) ? this.model.maxValue : this.model.maxValue.toFixed(this.model.decimalPlaces);
                        var exp = false;
                        if (replaceminVal.toString().indexOf("e") > 0 || replacemaxVal.toString().indexOf("e") > 0)
                            exp = true;
                        if (!exp) {
                            if (decSep != ".") {
                                temp = this._textBox.value.toString();
                                if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                    replaceminVal = this.model.minValue.toString().replace(/["."]/g, decSep);
                                if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                    replacemaxVal = this.model.maxValue.toString().replace(/["."]/g, decSep);
                            }
                            if (replaceminVal.toString().indexOf(decSep) > 0)
                                minVal = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                            else
                                minVal = this.model.minValue;
                            if (replacemaxVal.toString().indexOf(decSep) > 0)
                                maxVal = Number(replacemaxVal.toString().toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                            else
                                maxVal = this.model.maxValue;
                            if (tempIndex > 0) {
                                value = Number(temp.substring(temp.indexOf(decSep) + 1, temp.toString().length));
                                if (replaceminVal.toString().indexOf(decSep) > 0)
                                    minVal = Number(replaceminVal.toString().substring(replaceminVal.toString().indexOf(decSep) + 1, replaceminVal.toString().length));
                                else
                                    minVal = 0;
                                if (replacemaxVal.toString().indexOf(decSep) > 0)
                                    maxVal = Number(replacemaxVal.toString().substring(replacemaxVal.toString().indexOf(decSep) + 1, replacemaxVal.toString().length));
                                else
                                    maxVal = 0;
                                var valb4Dec = Number(temp.substring(0, temp.indexOf(decSep)));
                                var minValb4Dec = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                                var maxValb4Dec = Number(replacemaxVal.toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                                if (!this._validateValue(value, minVal, maxVal, true, valb4Dec, minValb4Dec, maxValb4Dec))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                            else {
                                if (!this._validateValue(value, minVal, maxVal, false))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                        }
                        else if (this.model.decimalPlaces != 0) {
                            var afterdeci = (this._textBox.value).split(".")[1];
                            if (temp.indexOf(decSep) > 0 || (Number(temp) < Number(replaceminVal) || Number(temp) > Number(replacemaxVal))) {
                                if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                                    cancelEvent = true;
                                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                                else cancelEvent = false;
                            }
                            else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                            else
                                cancelEvent = false;
                        }
                        else
                            cancelEvent = false;
                        if (cancelEvent) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                    }

                }
                if (e.keyCode == 38 && this._allowkeyboard) {
                    this._updateInputField("increment");
                    this._cancelEvent(e);
                }

                if (e.keyCode == 40 && this._allowkeyboard) {
                    this._updateInputField("decrement");
                    this._cancelEvent(e);

                }
                if (e.keyCode == 8) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }

                if (e.keyCode == 46 || e.keyCode == 127) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }
                if (this._validateDecimal(e) && this.model.decimalPlaces != 0 && e.keyCode != 46) {
                    var decChar = BoldBIDashboard.preferredCulture(this.model.locale).numberFormat["."];
                    var minVal, maxVal;
                    var dotSplit = this._textBox.value.split(decChar);
                    if (dotSplit[1] == undefined) {
                        var curPosition = this._caretPosition();
                        var strBeforeCursor = dotSplit[0].substring(0, curPosition);
                        var strAfterCursor = dotSplit[0].substring(curPosition);
                        if (this.model.minValue.toString().indexOf("e") > 0 || this.model.maxValue.toString().indexOf("e") > 0)
                            exp = true;
                        if (strAfterCursor.length > this.model.decimalPlaces && this.model.validateOnType == true) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                        if (this._validateOnType && !exp) {
                            if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                minVal = this.model.minValue.toString().replace(/["."]/g, decChar);
                            if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                maxVal = this.model.maxValue.toString().replace(/["."]/g, decChar);
                            if (minVal.indexOf(decChar) > 0)
                                minVal = Number(minVal.substring(0, minVal.indexOf(decChar)));
                            else
                                minVal = Number(minVal);
                            if (maxVal.indexOf(decChar) > 0)
                                maxVal = Number(maxVal.substring(0, maxVal.indexOf(decChar)));
                            else
                                maxVal = Number(maxVal);
                            if (this._validateValue(this.model.value, minVal, maxVal, "DecimalKeyPressed"))
                                this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                            else {
                                this._keypressFlag = false;
                                this._cancelEvent(e);
                                return false;
                            }
                        }
                        else
                            this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                        this._setSelectionRange(curPosition + 1, curPosition + 1);
                    }
                    this._cancelEvent(e);
                } else if (e.keyCode == 190 || e.keyCode == 110) {
                    this._cancelEvent(e);
                }
                if (e.keyCode == 109 || e.keyCode == 189 || e.keyCode == 173) { //'-' char key press.
                    if ((this._caretPosition() != 0 && this._getSelection(this._removeFormats(this._textBox.value)) != this.model.value) || (this.model.minValue >= 0 && !this.model.enableStrictMode) || (this._textBox.value.toString().match(new RegExp("-", "g")) && this._getSelection(this._textBox.value) === ""))
                        this._cancelEvent(e);

                    else if (this._getSelection() == this.model.value)
                        this.model.value = null;
                }

                if (e.keyCode == 13)
                    if ((this._checkNumValue(this._preVal) !== this._checkNumValue(this._textBox.value)))
                        this._setValue(this._textBox.value);
            }

            else if (e.keyCode != 27 && !e.ctrlKey || (e.ctrlKey && e.keyCode == 90 && bbdesigner$.trim(this._textBox.value) === "")) {
                this._keypressFlag = false;
                this._cancelEvent(e);
            }
        },
		_getLocalizedLabels: function(){
            return BoldBIDashboard.getLocalizedConstants(this.sfType, this.model.locale);
        }
		
    });
	
    BoldBIDashboard.NumericTextbox.Locale = BoldBIDashboard.NumericTextbox.Locale || {} ;
    
    BoldBIDashboard.NumericTextbox.Locale['default'] = BoldBIDashboard.NumericTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	BoldBIDashboard.PercentageTextbox.Locale = BoldBIDashboard.PercentageTextbox.Locale || {} ;
    
    BoldBIDashboard.PercentageTextbox.Locale['default'] = BoldBIDashboard.PercentageTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	BoldBIDashboard.CurrencyTextbox.Locale = BoldBIDashboard.CurrencyTextbox.Locale || {} ;
    
    BoldBIDashboard.CurrencyTextbox.Locale['default'] = BoldBIDashboard.CurrencyTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	
		
})(bbdesigner$, SyncfusionBoldBIDashboard);;
;
(function(bbdesigner$, undefined){
    
    BoldBIDashboard.globalize = {};
    BoldBIDashboard.cultures = {};
    
    BoldBIDashboard.cultures['default'] = BoldBIDashboard.cultures['en-US'] = bbdesigner$.extend(true, {
        name: 'en-US',
        englishName: "English",
        nativeName: "English",
        language: 'en',
        isRTL: false,
        numberFormat: {
            pattern: ["-n"],
            decimals: 2,
            ',': ",",
            '.': ".",
            groupSizes: [3],
            '+': "+",
            '-': "-",
            percent: {
                pattern: ["-n %", "n %"],
                decimals: 2,
                groupSizes: [3],
                ',': ",",
                '.': ".",
                symbol: '%'
            },
            currency: {
                pattern: ["($n)", "$n"],
                decimals: 2,
                groupSizes: [3],
                ',': ",",
                '.': ".",
                symbol: '$'
            }
        },
        calendars: {
            standard: {
                '/': '/',
                ':': ':',
                firstDay: 0,
                week:{
                name:"Week",
                nameAbbr:"Wek",
                nameShort:"Wk"
                },
                days: {
                    names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
                },
                months: {
                    names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                    namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
                },
                AM: ['AM', 'am', 'AM'],
                PM: ['PM', 'pm', 'PM'],
                twoDigitYearMax: 2029,
                patterns: {
                    d: "M/d/yyyy",
                    D: "dddd, MMMM dd, yyyy",
                    t: "h:mm tt",
                    T: "h:mm:ss tt",
                    f: "dddd, MMMM dd, yyyy h:mm tt",
                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                    M: "MMMM dd",
                    Y: "yyyy MMMM",
                    S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
    
                }
            }
        }
    }, BoldBIDashboard.cultures['en-US']);
    
    BoldBIDashboard.cultures['en-US'].calendar = BoldBIDashboard.cultures['en-US'].calendar || BoldBIDashboard.cultures['en-US'].calendars.standard; 
    
    
    
    // *************************************** Numbers ***************************************
    var regexTrim = /^\s+|\s+$/g,
        regexInfinity = /^[+-]?infinity$/i,
        regexHex = /^0x[a-f0-9]+$/i,
		regexExpo = /[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)/,
        regexParseFloat = /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/;
    var charMap =  {
                    '9': "[0-9 ]",
                    '0': "[0-9 ]",
                    'a': "[A-Za-z0-9 ]",
                    'A': "[A-Za-z0-9]",
                    'N': "[0-9]",
                    '#': "[0-9]",
                    '&': '[^\x7f]+',
                    '<': "",
                    '>': "",
                    'C': "[A-Za-z ]",
                    '?': "[A-Za-z]",
                };
    
    function  formatMapper (format, value) {
        var mask = format || "", rules = charMap, value = value.toString(), isDecimal = value.indexOf(".") > -1 || format.indexOf(".") > -1, diff = 0, stIdx = 0, preFormat = "", escFormat = "",
            separator = format.split(","), newChar = "0", expValue, exponentIdx = format.toLowerCase().indexOf("e"), valueColl, formatColl, hashIdx = mask.indexOf("#");
        if(format.indexOf("\\") > -1) {
            escFormat = format.substr(0, format.lastIndexOf("\\") + 1);
            format = format.substr(format.lastIndexOf("\\") + 1, format.length);
            hashIdx = format.indexOf("#");
        }
        if(exponentIdx > -1) {
            var maskFirst = "", mask = "";
            formatColl = format.toLowerCase().split("e");
            expValue = format.indexOf("+") > -1 ? format.split("+")[1] : format.split("-")[1];
            value = parseInt(value).toExponential();
            valueColl = value.split("e");
            diff = formatColl[1].length - valueColl[1].length;
            for(var k = formatColl[1].length - 1; k > 0; k--) {
                if(formatColl[1][k] != "0")
                    mask += formatColl[1][k];
                else if(diff > 1) {
                    mask += "#";
                    diff--;
                }
                else
                    mask += "0";
            }
            oprMask = (format.indexOf("+") > -1) ? "+" : "";
            mask = oprMask + mask.split("").reverse().join("");
            for(var k = 0; k < valueColl[0].length; k++)
                maskFirst = (valueColl[0][k] != ".") ? maskFirst.concat("#") : maskFirst.concat(".");
            if(maskFirst.length > formatColl[0].length)
                maskFirst = formatColl[0];
            mask = escFormat + maskFirst + "e" + mask;
        }
        else if(isDecimal) {
            formatColl = format.split(".");
            valueColl = value.split(".");
            formatColl[1] = formatColl[1].replace(/[,.]/g, "");
            diff = formatColl[0].replace(/[,.]/g, "").length - valueColl[0].replace(/[,.]/g, "").length;
            if(diff < 0 && BoldBIDashboard.isNullOrUndefined(format.match(/[\[\(\)\]]/g))) {
                separator = formatColl[0].split(",");
                preFormat = formatColl[0].split(",")
                for(var j = separator.length - 1;j >= 0; j--) {
                    if(separator[j]) {
                        var cnt = separator[j].length;
                        for(var k = 0, len = Math.abs(diff); k < len; k++) {
                            if(cnt === 3) {
                                break;
                                cnt = 0;
                            }
                            preFormat[j] = "0" + preFormat[j];
                            cnt++;
                            diff++;
                        }
                    }
                }
                preFormat = preFormat.join();
                if(diff < 0) {
                    (!BoldBIDashboard.isNullOrUndefined(cnt) && cnt != 3) && (preFormat = "," + preFormat);
                    for(var k = 0, len = Math.abs(diff); k < len; k++) {
                        if(cnt === 3) {
                            preFormat = "," + preFormat;
                            cnt = 0;
                        }
                        preFormat = "0" + preFormat;
                        cnt++;
                    }
                }
                diff = 0;
                mask = escFormat + preFormat + "." + formatColl[1];
            }
            else if(BoldBIDashboard.isNullOrUndefined(format.match(/[\[\(\)\]]/g))){
                preFormat = formatColl[0].replace(/[,.]/g, "");
                postFormat = "";
                var cnt = 0;
                for(var i = preFormat.length - 1; i >= 0; i--) {
                    if(cnt === 3) {
                        postFormat = "," + postFormat;
                        cnt = 0;
                    }
                    else
                        cnt++;
                    postFormat = preFormat[i] + postFormat;
                }
                mask = escFormat + postFormat + "." + formatColl[1];
            }
        }
        else {
            var hashCount = 0, separatorColl = separator.splice(1, separator.length);
            diff = format.replace(/[,.\[\(\]\)]/g, "").length - value.replace(/[,.]/g, "").length;
            if(hashIdx > -1) {
                for(var f = 0, len = format.length; f < len; f++)
                    (format[f] === "#") && hashCount++;
                if(hashCount === 1 || (separator[1] && hashCount === 2))
                    newChar = "#";
                (hashCount === 1) && (separatorColl = separator[0]);
            }
            if(diff < 0) {
                formatColl = mask.split(",");
                preFormat = formatColl.splice(1, formatColl.length);	
                for(var j = separator.length - 1;j >= 0; j--) {
                    if(separatorColl[j]) {
                        var cnt = separatorColl[j].length;
                        !preFormat[j] && (preFormat[j] = "");
                        for(var k = 0, len = Math.abs(diff) + 1; k < len; k++) {
                            if(hashCount != 1 && cnt === 3) {
                                cnt = 0;
                                break;
                            }
                            preFormat[j] = preFormat[j].concat(newChar);
                            cnt++;
                            diff++;
                        }
                    }
                }
                preFormat = preFormat.join();
                if(diff < 0) {
                    (!BoldBIDashboard.isNullOrUndefined(cnt) && cnt != 3) && (preFormat = "," + preFormat);
                    for(var k = 0, len = Math.abs(diff) + 1; k < len; k++) {
                        if(hashCount != 1 && cnt === 3) {
                            preFormat = "," + preFormat;
                            cnt = 0;
                        }
                        preFormat = newChar + preFormat;
                        cnt++;
                    }
                }
                diff = 0;
                mask = escFormat + preFormat;
            }
            stIdx = 0;
        }
        var mapper = [], maskChars = mask.split(""), mapperIdx = 0, i = 0, idx = 0, chr, rule, isEscChar = false, isExp = false, escIdx = format.indexOf("\\");
        for (; i < mask.length; i++) {
            chr = maskChars[i];
            if(chr === "e")
                isExp = true;
            if((chr === "0" && hashIdx < 0)) {
                if((diff > 0 && stIdx <= i)) {
                    diff--;
                    stIdx++;
                }
                else if(diff > 0)
                    diff--;
                else
                    rule = rules[chr];
            }
            else if(chr != "0" || (!isExp && chr == "0")) 
                rule = rules[chr];
            if(chr === "0" && escIdx > -1) 
                rule = rules[chr];
            if(i === mask.lastIndexOf("\\"))
                isEscChar = false;
            if (rule && !isEscChar) {
                mapper[mapperIdx] = { rule: rule };
                mapperIdx += 1;
            } else {
                if (chr === "\\") {
                    chr = "";
                    !(i === mask.lastIndexOf("\\")) && (isEscChar = true);
                }
                chr = chr.split("");
                for (var j = 0; j < chr.length; j++) {
                    mapper[mapperIdx] = chr[j];
                    mapperIdx += 1;
                }
            }
        }
        rules = mapper;
        return {"rules": rules, "format": mask};
    }
    
    function customFormat(value, format, locale) {
        if(!value || typeof value === "string" || !format)
            throw "Bad Number Format Exception";
        var formatLength, formatObj, rules, orgFormat = format;
        formatObj = formatMapper(format, value);
        rules = formatObj.rules;
        format = formatObj.format;
        if (!(format.indexOf("\\") >= 0))
            formatModel = format.replace(/[9?CANa#&]/g, '_');
        else {
            var escIdx = format.lastIndexOf("\\"), first = format.slice(0, escIdx), second = format.slice(escIdx + 1, format.length), altFormat;
            second = second.replace(/[9?CANa#&]/g, '_');
            altFormat = first + second;
            formatModel = altFormat.replace(/[\\]/g, "");
            format = format.replace(/[\\]/g, "");
        }
        formatModel = changeCulture(formatModel, locale);
        return validateValue(value, format, formatModel, rules, locale, orgFormat);
    }
    
    function changeCulture(formatModel, locale) {
        if (formatModel.length != 0) {
            var preferredlocale = BoldBIDashboard.preferredCulture(locale), groupSep, currecySymbol, decimalSep,unmask = "";
            groupSep = preferredlocale.numberFormat[','];
            currecySymbol = preferredlocale.numberFormat.currency.symbol;
            decimalSep = preferredlocale.numberFormat['.'];
            for (var i = 0; i < formatModel.length; i++) {
                if (formatModel[i] == ",")
                    unmask += groupSep;
                else if (formatModel[i] == ".")
                    unmask += decimalSep;
                else if (formatModel[i] == "$")
                    unmask += currecySymbol;
                else
                    unmask += formatModel[i];
            }
            formatModel = unmask;
        }
        return formatModel;
    }
    
    function validateValue(value, format, formatModel, rules, locale, orgFormat) {
        if(BoldBIDashboard.isNullOrUndefined(value))
            return;
        if(format.toLowerCase().indexOf("e") > -1) {
            var expValue = orgFormat.indexOf("+") > -1 ? orgFormat.split("+")[1] : orgFormat.split("-")[1];
            value = value.toExponential();
            (orgFormat.indexOf("-") > -1) && (value = value.replace("+", "")); 
        }
        var tempValue = oldvalue = replacestring = value.toString(), tempModel = formatModel, maskIndex = i = 0, chr, prompt = "_", rule,
            strBefore, strAfter, charValue, isBracket = format.match(/[\(\[\]\)]/g);
        if (!format.indexOf("\\") >= 0)
            tempValue = value = replacestring.replace(/[\(\)-]/g, "");
        else
            tempValue = tvalue;
        j = rules.length - 1;
        v = oldvalue.length - 1;
        if(!BoldBIDashboard.isNullOrUndefined(isBracket)) {
            while (j >= 0) {
                chr = oldvalue[v];
                rule = rules[j];
                if (chr == undefined) break;
                if (chr === rule || chr === prompt || (chr === "e" && (chr === rule.toLowerCase()))) {
                    chr === prompt ? prompt : "";
                    strBefore = tempModel.substring(0, j+1);
                    strAfter = tempModel.substring(j+1);
                    chr = changeCulture(chr, locale);
                    tempModel = strBefore.substr(0, strBefore.length - 1)  + chr + strAfter;
                    j--;
                    v--;
                }
                else if (rules[j].rule != undefined ) {
                    var charCode = oldvalue.charCodeAt(v);
                    if (validateChars(format, charCode, j)) {
                        strBefore = tempModel.substring(0, j +1);
                        strAfter = tempModel.substring(j+1);
                        charValue = getRoundValue(oldvalue, v, j, format, formatModel);
                        tempModel = strBefore.substr(0, strBefore.length - 1) + charValue + strAfter;
                        j--;
                        v--;
                    } else 
                        j--;
                } 
                else
                    j--;
                if (i > tempValue.length || j<0) break;
            }
        }
        else {
            while (maskIndex < rules.length) {
                chr = oldvalue[i];
                rule = rules[maskIndex];
                if (chr == undefined) break;
                if (chr === rule || chr === prompt || (chr === "e" && (chr === rule.toLowerCase()))) {
                    chr === prompt ? prompt : "";
                    strBefore = tempModel.substring(0, maskIndex);
                    strAfter = tempModel.substring(maskIndex);
                    chr = changeCulture(chr, locale);
                    tempModel = strBefore + chr + strAfter.substr(1, strAfter.length);
                    i += 1;
                    maskIndex += 1;
                }
                else if (rules[maskIndex].rule != undefined ) {
                    var charCode = oldvalue.charCodeAt(i);
                    if (validateChars(format, charCode, maskIndex)) {
                        strBefore = tempModel.substring(0, maskIndex);
                        strAfter = tempModel.substring(maskIndex);
                        charValue = getRoundValue(oldvalue, i, maskIndex, format, formatModel);
                        tempModel = strBefore + charValue + strAfter.substr(1, strAfter.length);
                        maskIndex++;
                        i++;
                    } else
                        maskIndex++;
                } 
                else {
                    if(rule === "e")
                        i = oldvalue.indexOf("e") + 1;
                    maskIndex++;
                }
                if (i > tempValue.length || j<0) break;
            }
        }
        if (value) {
            if((tempModel.indexOf("_") - tempModel.indexOf(",") === 1) || (tempModel.indexOf("_") - tempModel.indexOf(".") === 1))
                tempModel = tempModel.slice(0, tempModel.indexOf("_")-1);
            strippedValue = bbdesigner$.trim(tempModel.replace(/[_]/g, "")) == "" ? null : tempModel.replace(/[_]/g, "");
            return strippedValue;
        }
    }
    
    function validateChars (format, keyChar, caretPos){
        var charmap = charMap, match = false, maskChar = format.substr(caretPos, 1), actualkey = String.fromCharCode(keyChar);
        bbdesigner$.each(charmap, function (key, value) {
            if (maskChar == key) {
                if (actualkey.match(new RegExp(value))) match = true;
                    else match = false;
            }
        });
        return match;
    }
    
    function getRoundValue(value, valIdx, maskIndex, format, formatModel) {
        var isCeil = false;
        if(format.indexOf(".") > -1 && (maskIndex === formatModel.length - 1))
            (value[valIdx + 1] > 5) && (isCeil = true);
        return (isCeil ? (parseInt(value[valIdx]) + 1).toString() : value[valIdx]);
    }
    
    function patternStartsWith(value, pattern) {
        return value.indexOf( pattern ) === 0;
    }
    
    function patternEndsWith(value, pattern) {
        return value.substr( value.length - pattern.length ) === pattern;
    }
    
    function trim(value) {
        return (value+"").replace( regexTrim, "" );
    }
    
    function truncate(value){
        if(isNaN(value))
            return NaN;
        
        return Math[value < 0 ? "ceil" : "floor"](value);
    }
    
    function padWithZero(str, count, left) {
        for (var l = str.length; l < count; l++) {
            str = (left ? ('0' + str) : (str + '0'));
        }
        return str;
    }
    
    function parseNumberWithNegativePattern(value, nf, negativePattern) {
        var neg = nf["-"],
            pos = nf["+"],
            ret;
        switch (negativePattern) {
            case "n -":
                neg = ' ' + neg;
                pos = ' ' + pos;
                // fall through
            case "n-":
                if ( patternEndsWith( value, neg ) ) {
                    ret = [ '-', value.substr( 0, value.length - neg.length ) ];
                }
                else if ( patternEndsWith( value, pos ) ) {
                    ret = [ '+', value.substr( 0, value.length - pos.length ) ];
                }
                break;
            case "- n":
                neg += ' ';
                pos += ' ';
                // fall through
            case "-n":
                if ( patternStartsWith( value, neg ) ) {
                    ret = [ '-', value.substr( neg.length ) ];
                }
                else if ( patternStartsWith(value, pos) ) {
                    ret = [ '+', value.substr( pos.length ) ];
                }
                break;
            case "(n)":
                if ( patternStartsWith( value, '(' ) && patternEndsWith( value, ')' ) ) {
                    ret = [ '-', value.substr( 1, value.length - 2 ) ];
                }
                break;
        }
        return ret || [ '', value ];
    }
    
    function getFullNumber(number, precision, formatInfo) {
        var groupSizes = formatInfo.groupSizes || [3],
            curSize = groupSizes[0],
            curGroupIndex = 1,
            factor = Math.pow(10, precision),
            rounded = Math.round(number * factor) / factor;
        if (!isFinite(rounded)) {
            rounded = number;
        }
        number = rounded;
    
        var numberString = number + "",
            right = "",
            split = numberString.split(/e/i),
            exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
        numberString = split[0];
        split = numberString.split(".");
        numberString = split[0];
        right = split.length > 1 ? split[1] : "";
    
        var l;
        if (exponent > 0) {
            right = padWithZero(right, exponent, false);
            numberString += right.slice(0, exponent);
            right = right.substr(exponent);
        } else if (exponent < 0) {
            exponent = -exponent;
            numberString = padWithZero(numberString, exponent + 1, true);
            right = numberString.slice(-exponent, numberString.length) + right;
            numberString = numberString.slice(0, -exponent);
        }
    
        var dot = formatInfo['.'] || '.';
        if (precision > 0) {
            right = dot +
                ((right.length > precision) ? right.slice(0, precision) : padWithZero(right, precision));
        } else {
            right = "";
        }
    
        var stringIndex = numberString.length - 1,
            sep = formatInfo[","] || ',',
            ret = "";
    
        while (stringIndex >= 0) {
            if (curSize === 0 || curSize > stringIndex) {
                return numberString.slice(0, stringIndex + 1) + (ret.length ? (sep + ret + right) : right);
            }
            ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? (sep + ret) : "");
    
            stringIndex -= curSize;
    
            if (curGroupIndex < groupSizes.length) {
                curSize = groupSizes[curGroupIndex];
                curGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
    }
    
    function formatNumberToCulture(value, format, culture) {
        if (!format || format === 'i') {
            return culture.name.length ? value.toLocaleString() : value.toString();
        }
        format = format || "D";
    
        var nf = culture.numberFormat,
            number = Math.abs(value),
            precision = -1,
            pattern;
    
        if (format.length > 1) precision = parseInt(format.slice(1), 10);
    
        var current = format.charAt(0).toUpperCase(),
            formatInfo;
    
        switch (current) {
            case 'D':
                pattern = 'n';
                number = truncate(number);
                if (precision !== -1) {
                    number = padWithZero("" + number, precision, true);
                }
                if (value < 0) number = -number;
                break;
            case 'N':
                formatInfo = nf;
                formatInfo.pattern = formatInfo.pattern || ['-n'];
                // fall through
            case 'C':
                formatInfo = formatInfo || nf.currency;
                formatInfo.pattern = formatInfo.pattern || ['-$n', '$n'];
                // fall through
            case 'P':
                formatInfo = formatInfo || nf.percent;
                formatInfo.pattern = formatInfo.pattern || ['-n %', 'n %'];
                pattern = value < 0 ? (formatInfo.pattern[0] || "-n") : (formatInfo.pattern[1] || "n");
                if (precision === -1) precision = formatInfo.decimals;
                number = getFullNumber(number * (current === "P" ? 100 : 1), precision, formatInfo);
                break;
            default:
                return customFormat(value, format, culture);
        }
    
        return matchNumberToPattern(number, pattern, nf);
    }
    
    
    
    function matchNumberToPattern(number, pattern, nf){
        var patternParts = /n|\$|-|%/g,
            ret = "";
        for (;;) {
            var index = patternParts.lastIndex,
                ar = patternParts.exec(pattern);
    
            ret += pattern.slice(index, ar ? ar.index : pattern.length);
    
            if (!ar) {
                break;
            }
    
            switch (ar[0]) {
                case "n":
                    ret += number;
                    break;
                case "$":
                    ret += nf.currency.symbol || "$";
                    break;
                case "-":
                    // don't make 0 negative
                    if (/[1-9]/.test(number)) {
                        ret += nf["-"] || "-";
                    }
                    break;
                case "%":
                    ret += nf.percent.symbol || "%";
                    break;
            }
        }
    
        return ret;
    }
    
    function parseValue(value, culture, radix ) {
            // make radix optional
        if (typeof radix === "string") {
            culture = radix;
            radix = 10;
        }
        culture = BoldBIDashboard.globalize.findCulture(culture);
        var ret = NaN, nf = culture.numberFormat, npattern = culture.numberFormat.pattern[0];
        value = value.replace(/ /g, '');
        if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {
            // remove currency symbol
            value = value.replace(culture.numberFormat.currency.symbol || "$", "");
            // replace decimal seperator
            value = value.replace(culture.numberFormat.currency["."] || ".", culture.numberFormat["."] || ".");
            // pattern of the currency
            npattern = trim(culture.numberFormat.currency.pattern[0].replace("$", ""));
        } else if (value.indexOf(culture.numberFormat.percent.symbol) > -1) {
            // remove percentage symbol
            value = value.replace(culture.numberFormat.percent.symbol || "%", "");
            // replace decimal seperator
            value = value.replace(culture.numberFormat.percent["."] || ".", culture.numberFormat["."] || ".");
            // pattern of the percent
            npattern = trim(culture.numberFormat.percent.pattern[0].replace("%", ""));
        }
    
        // trim leading and trailing whitespace
        value = trim( value );
    
        // allow infinity or hexidecimal
        if (regexInfinity.test(value)) {
            ret = parseFloat(value, "" ,radix);
        }
        else if (regexHex.test(value)) {
            ret = parseInt(value, 16);
        }
        else {
            var signInfo = parseNumberWithNegativePattern( value, nf, npattern ),
                sign = signInfo[0],
                num = signInfo[1];
            // determine sign and number
            if ( sign === "" && nf.pattern[0] !== "-n" ) {
                signInfo = parseNumberWithNegativePattern( value, nf, "-n" );
                sign = signInfo[0];
                num = signInfo[1];
            }
            sign = sign || "+";
            // determine exponent and number
            var exponent,
                intAndFraction, exponentPos = -1;                
            if (regexExpo.test(num)) {
                exponentPos = num.indexOf('e');
                if (exponentPos < 0) exponentPos = num.indexOf('E');
            }
            if ( exponentPos < 0 ) {
                intAndFraction = num;
                exponent = null;
            }
            else {
                intAndFraction = num.substr( 0, exponentPos );
                exponent = num.substr( exponentPos + 1 );
            }
            // determine decimal position
            var integer,
                fraction,
                decSep = nf['.'] || '.',
                decimalPos = intAndFraction.indexOf( decSep );
            if ( decimalPos < 0 ) {
                integer = intAndFraction;
                fraction = null;
            }
            else {
                integer = intAndFraction.substr( 0, decimalPos );
                fraction = intAndFraction.substr( decimalPos + decSep.length );
            }
            // handle groups (e.g. 1,000,000)
            var groupSep = nf[","] || ",";
            integer = integer.split(groupSep).join('');
            var altGroupSep = groupSep.replace(/\u00A0/g, " ");
            if ( groupSep !== altGroupSep ) {
                integer = integer.split(altGroupSep).join('');
            }
            // build a natively parsable number string
            var p = sign + integer;
            if ( fraction !== null ) {
                p += '.' + fraction;
            }
            if ( exponent !== null ) {
                // exponent itself may have a number patternd
                var expSignInfo = parseNumberWithNegativePattern( exponent, nf, npattern );
                p += 'e' + (expSignInfo[0] || "+") + expSignInfo[1];
            }
            if ( !radix && regexParseFloat.test( p ) ) {
                ret = parseFloat( p );
            }
            else if(radix)
                ret = parseInt(p, radix);
        }
        return ret;
    }
    
    // *************************************** Dates ***************************************
    
    var dateFormat = {
        DAY_OF_WEEK_THREE_LETTER : "ddd",
        DAY_OF_WEEK_FULL_NAME : "dddd",
        DAY_OF_MONTH_SINGLE_DIGIT : "d",
        DAY_OF_MONTH_DOUBLE_DIGIT : "dd",
        MONTH_THREE_LETTER : "MMM",
        MONTH_FULL_NAME : "MMMM",
        MONTH_SINGLE_DIGIT : "M",
        MONTH_DOUBLE_DIGIT : "MM",
        YEAR_SINGLE_DIGIT : "y",
        YEAR_DOUBLE_DIGIT : "yy",
        YEAR_FULL : "yyyy",
        HOURS_SINGLE_DIGIT_12_HOUR_CLOCK : "h",
        HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK : "hh",
        HOURS_SINGLE_DIGIT_24_HOUR_CLOCK : "H",
        HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK : "HH",
        MINUTES_SINGLE_DIGIT : "m",
        MINUTES_DOUBLE_DIGIT : "mm",
        SECONDS_SINGLE_DIGIT : "s",
        SECONDS_DOUBLE_DIGIT : "ss",
        MERIDIAN_INDICATOR_SINGLE : "t",
        MERIDIAN_INDICATOR_FULL : "tt",
        DECISECONDS : "f",
        CENTISECONDS: "ff",
        MILLISECONDS : "fff",
        TIME_ZONE_OFFSET_SINGLE_DIGIT : "z",
        TIME_ZONE_OFFSET_DOUBLE_DIGIT : "zz",
        TIME_ZONE_OFFSET_FULL : "zzz",
        DATE_SEPARATOR : "/"
    };
    
    function valueOutOfRange(value, low, high) {
        return value < low || value > high;
    }
    
    function expandYear(cal, year) {
        // expands 2-digit year into 4 digits.
        var now = new Date();
        if ( year < 100 ) {
            var twoDigitYearMax = cal.twoDigitYearMax;
            twoDigitYearMax = typeof twoDigitYearMax === 'string' ? new Date().getFullYear() % 100 + parseInt( twoDigitYearMax, 10 ) : twoDigitYearMax;
            var curr = now.getFullYear();
            year += curr - ( curr % 100 );
            if ( year > twoDigitYearMax ) {
                year -= 100;
            }
        }
        return year;
    }
    
    function arrayIndexOf( array, item ) {
        if ( array.indexOf ) {
            return array.indexOf( item );
        }
        for ( var i = 0, length = array.length; i < length; i++ ) {
            if ( array[ i ] === item ) return i;
        }
        return -1;
    }
    
    function toUpper(value) {
        // 'he-IL' has non-breaking space in weekday names.
        return value.split( "\u00A0" ).join(' ').toUpperCase();
    }
    
    function toUpperArray(arr) {
        var results = [];
        for ( var i = 0, l = arr.length; i < l; i++ ) {
            results[i] = toUpper(arr[i]);
        }
        return results;
    }
    
    function getIndexOfDay(cal, value, abbr) {
        var ret,
            days = cal.days,
            upperDays = cal._upperDays;
        if ( !upperDays ) {
            cal._upperDays = upperDays = [
                toUpperArray( days.names ),
                toUpperArray( days.namesAbbr ),
                toUpperArray( days.namesShort )
            ];
        }
        value = toUpper( value );
        if ( abbr ) {
            ret = arrayIndexOf( upperDays[ 1 ], value );
            if ( ret === -1 ) {
                ret = arrayIndexOf( upperDays[ 2 ], value );
            }
        }
        else {
            ret = arrayIndexOf( upperDays[ 0 ], value );
        }
        return ret;
    }
    
    function getIndexOfMonth(cal, value, abbr) {
        var months = cal.months,
            monthsGen = cal.monthsGenitive || cal.months,
            upperMonths = cal._upperMonths,
            upperMonthsGen = cal._upperMonthsGen;
        if ( !upperMonths ) {
            cal._upperMonths = upperMonths = [
                toUpperArray( months.names ),
                toUpperArray( months.namesAbbr )
            ];
            cal._upperMonthsGen = upperMonthsGen = [
                toUpperArray( monthsGen.names ),
                toUpperArray( monthsGen.namesAbbr )
            ];
        }
        value = toUpper( value );
        var i = arrayIndexOf( abbr ? upperMonths[ 1 ] : upperMonths[ 0 ], value );
        if ( i < 0 ) {
            i = arrayIndexOf( abbr ? upperMonthsGen[ 1 ] : upperMonthsGen[ 0 ], value );
        }
        return i;
    }
    
    function appendMatchStringCount(preMatch, strings) {
        var quoteCount = 0,
            escaped = false;
        for ( var i = 0, il = preMatch.length; i < il; i++ ) {
            var c = preMatch.charAt( i );
            if(c == '\''){
                escaped ? strings.push( "'" ) : quoteCount++;
                escaped = false;
            } else if( c == '\\'){
                if (escaped) strings.push( "\\" );
                escaped = !escaped;
            } else {
                strings.push( c );
                escaped = false;
            }
        }
        return quoteCount;
    }
    
    
    function parseDayByInt(value, format, culture, cal) {
        if (!value) {
            return null;
        }
        var index = 0, valueX = 0, day = null;
        format = format.split("");
        length = format.length;
        var countDays = function (match) {
            var i = 0;
            while (format[index] === match) {
                i++;
                index++;
            }
            if (i > 0) {
                index -= 1;
            }
            return i;
        },
        getNumber = function (size) {
            var rg = new RegExp('^\\d{1,' + size + '}'),
                match = value.substr(valueX, size).match(rg);
    
            if (match) {
                match = match[0];
                valueX += match.length;
                return parseInt(match, 10);
            }
            return null;
        },
        getName = function (names, lower) {
            var i = 0,
                length = names.length,
                name, nameLength,
                subValue;
    
            for (; i < length; i++) {
                name = names[i];
                nameLength = name.length;
                subValue = value.substr(valueX, nameLength);
    
                if (lower) {
                    subValue = subValue.toLowerCase();
                }
    
                if (subValue == name) {
                    valueX += nameLength;
                    return i + 1;
                }
            }
            return null;
        },
         lowerArray = function (data) {
             var index = 0,
                 length = data.length,
                 array = [];
    
             for (; index < length; index++) {
                 array[index] = (data[index] + "").toLowerCase();
             }
    
             return array;
         },
         lowerInfo = function (localInfo) {
             var newLocalInfo = {}, property;
    
             for (property in localInfo) {
                 newLocalInfo[property] = lowerArray(localInfo[property]);
             }
    
             return newLocalInfo;
         };
        for (; index < length; index++) {
            ch = format[index];
            if (ch === "d") {
                count = countDays("d");
                if (!cal._lowerDays) {
                    cal._lowerDays = lowerInfo(cal.days);
                }
                day = count < 3 ? getNumber(2) : getName(cal._lowerDays[count == 3 ? "namesAbbr" : "names"], true)
            }
        }
        return day;
    }
    
    
    function getFullDateFormat(cal, format) {
        // expands unspecified or single character date formats into the full pattern.
        format = format || "F";
        var pattern,
            patterns = cal.patterns,
            len = format.length;
        if ( len === 1 ) {
            pattern = patterns[ format ];
            if ( !pattern ) {
                throw "Invalid date format string '" + format + "'.";
            }
            format = pattern;
        }
        else if ( len === 2  && format.charAt(0) === "%" ) {
            // %X escape format -- intended as a custom format string that is only one character, not a built-in format.
            format = format.charAt( 1 );
        }
        return format;
    }
    
    BoldBIDashboard.globalize._getDateParseRegExp = function (cal, format) {
        // converts a format string into a regular expression with groups that
        // can be used to extract date fields from a date string.
        // check for a cached parse regex.
        var re = cal._parseRegExp;
        if ( !re ) {
            cal._parseRegExp = re = {};
        }
        else {
            var reFormat = re[ format ];
            if ( reFormat ) {
                return reFormat;
            }
        }
    
        // expand single digit formats, then escape regular expression characters.
        var expFormat = getFullDateFormat( cal, format ).replace( /([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1" ),
            regexp = ["^"],
            groups = [],
            index = 0,
            quoteCount = 0,
            tokenRegExp = /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g,
            match;
    
        // iterate through each date token found.
        while ( (match = tokenRegExp.exec( expFormat )) !== null ) {
            var preMatch = expFormat.slice( index, match.index );
            index = tokenRegExp.lastIndex;
    
            // don't replace any matches that occur inside a string literal.
            quoteCount += appendMatchStringCount( preMatch, regexp );
            if ( quoteCount % 2 ) {
                regexp.push( match[ 0 ] );
                continue;
            }
    
            // add a regex group for the token.
            var m = match[ 0 ],
                len = m.length,
                add;
                
            switch ( m ) {
                case dateFormat.DAY_OF_WEEK_THREE_LETTER: case dateFormat.DAY_OF_WEEK_FULL_NAME:
                case dateFormat.MONTH_FULL_NAME: case dateFormat.MONTH_THREE_LETTER:
                    add = "(\\D+)";
                    break;
                case dateFormat.MERIDIAN_INDICATOR_FULL: case dateFormat.MERIDIAN_INDICATOR_SINGLE:
                    add = "(\\D*)";
                    break;
                case dateFormat.YEAR_FULL:
                case dateFormat.MILLISECONDS:
                case dateFormat.CENTISECONDS:
                case dateFormat.DECISECONDS:
                    add = "(\\d{" + len + "})";
                    break;
                case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT: case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
                case dateFormat.MONTH_DOUBLE_DIGIT: case dateFormat.MONTH_SINGLE_DIGIT:
                case dateFormat.YEAR_DOUBLE_DIGIT: case dateFormat.YEAR_SINGLE_DIGIT:
                case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK: case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK:
                case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK: case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK:
                case dateFormat.MINUTES_DOUBLE_DIGIT: case dateFormat.MINUTES_SINGLE_DIGIT:
                case dateFormat.SECONDS_DOUBLE_DIGIT: case dateFormat.SECONDS_SINGLE_DIGIT:
                    add = "(\\d\\d?)";
                    break;
                case dateFormat.TIME_ZONE_OFFSET_FULL:
                    add = "([+-]?\\d\\d?:\\d{2})";
                    break;
                case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT: case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT:
                    add = "([+-]?\\d\\d?)";
                    break;
                case dateFormat.DATE_SEPARATOR:
                    add = "(\\" + cal["/"] + ")";
                    break;
                default:
                    throw "Invalid date format pattern '" + m + "'.";
                    break;
            }
            if ( add ) {
                regexp.push( add );
            }
            groups.push( match[ 0 ] );
        }
        appendMatchStringCount( expFormat.slice( index ), regexp );
        regexp.push( "$" );
    
        // allow whitespace to differ when matching formats.
        var regexpStr = regexp.join( '' ).replace( /\s+/g, "\\s+" ),
            parseRegExp = {'regExp': regexpStr, 'groups': groups};
    
        // cache the regex for this format.
        return re[ format ] = parseRegExp;
    }
    
    function getParsedDate(value, format, culture) {
        // try to parse the date string by matching against the format string
        // while using the specified culture for date field names.
        value = trim( value );
        format = trim(format);
        var cal = culture.calendar,
            // convert date formats into regular expressions with groupings.
            parseInfo = BoldBIDashboard.globalize._getDateParseRegExp(cal, format),
            match = new RegExp(parseInfo.regExp).exec(value);
        if (match === null) {
            return null;
        }
        // found a date format that matches the input.
        var groups = parseInfo.groups,
            year = null, month = null, date = null, weekDay = null,
            hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
            pmHour = false;
        // iterate the format groups to extract and set the date fields.
        for ( var j = 0, jl = groups.length; j < jl; j++ ) {
            var matchGroup = match[ j + 1 ];
            if ( matchGroup ) {
                var current = groups[ j ],
                    clength = current.length,
                    matchInt = parseInt( matchGroup, 10 );
                
                switch ( current ) {
                    case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT: case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
                        date = matchInt;
                        if ( valueOutOfRange( date, 1, 31 ) ) return null;
                        break;
                    case dateFormat.MONTH_THREE_LETTER:
                    case dateFormat.MONTH_FULL_NAME:
                        month = getIndexOfMonth( cal, matchGroup, clength === 3 );
                        if ( valueOutOfRange( month, 0, 11 ) ) return null;
                        break;
                    case dateFormat.MONTH_SINGLE_DIGIT: case dateFormat.MONTH_DOUBLE_DIGIT:
                        month = matchInt - 1;
                        if ( valueOutOfRange( month, 0, 11 ) ) return null;
                        break;
                    case dateFormat.YEAR_SINGLE_DIGIT: case dateFormat.YEAR_DOUBLE_DIGIT:
                    case dateFormat.YEAR_FULL:
                        year = clength < 4 ? expandYear( cal, matchInt ) : matchInt;
                        if ( valueOutOfRange( year, 0, 9999 ) ) return null;
                        break;
                    case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK: case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK:
                        hour = matchInt;
                        if ( hour === 12 ) hour = 0;
                        if ( valueOutOfRange( hour, 0, 11 ) ) return null;
                        break;
                    case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK: case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK:
                        hour = matchInt;
                        if ( valueOutOfRange( hour, 0, 23 ) ) return null;
                        break;
                    case dateFormat.MINUTES_SINGLE_DIGIT: case dateFormat.MINUTES_DOUBLE_DIGIT:
                        min = matchInt;
                        if ( valueOutOfRange( min, 0, 59 ) ) return null;
                        break;
                    case dateFormat.SECONDS_SINGLE_DIGIT: case dateFormat.SECONDS_DOUBLE_DIGIT:
                        sec = matchInt;
                        if ( valueOutOfRange( sec, 0, 59 ) ) return null;
                        break;
                    case dateFormat.MERIDIAN_INDICATOR_FULL: case dateFormat.MERIDIAN_INDICATOR_SINGLE:
                        pmHour = cal.PM && ( matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2] );
                        if ( !pmHour && ( !cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2]) ) ) return null;
                        break;
                    case dateFormat.DECISECONDS:
                    case dateFormat.CENTISECONDS:
                    case dateFormat.MILLISECONDS:
                        msec = matchInt * Math.pow( 10, 3-clength );
                        if ( valueOutOfRange( msec, 0, 999 ) ) return null;
                        break;
                    case dateFormat.DAY_OF_WEEK_THREE_LETTER:
                        date = parseDayByInt(value, format, culture, cal);
                        break;
                    case dateFormat.DAY_OF_WEEK_FULL_NAME:
                         getIndexOfDay( cal, matchGroup, clength === 3 );
                        if ( valueOutOfRange( weekDay, 0, 6 ) ) return null;
                        break;
                    case dateFormat.TIME_ZONE_OFFSET_FULL:
                        var offsets = matchGroup.split( /:/ );
                        if ( offsets.length !== 2 ) return null;
    
                        hourOffset = parseInt( offsets[ 0 ], 10 );
                        if ( valueOutOfRange( hourOffset, -12, 13 ) ) return null;
                        
                        var minOffset = parseInt( offsets[ 1 ], 10 );
                        if ( valueOutOfRange( minOffset, 0, 59 ) ) return null;
                        
                        tzMinOffset = (hourOffset * 60) + (patternStartsWith( matchGroup, '-' ) ? -minOffset : minOffset);
                        break;
                    case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT: case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT:
                        // Time zone offset in +/- hours.
                        hourOffset = matchInt;
                        if ( valueOutOfRange( hourOffset, -12, 13 ) ) return null;
                        tzMinOffset = hourOffset * 60;
                        break;
                }
            }
        }
        var result = new Date(), defaultYear, convert = cal.convert;
        defaultYear = convert ? convert.fromGregorian( result )[ 0 ] : result.getFullYear();
        if ( year === null ) {
            year = defaultYear;
        }
        
        // set default day and month to 1 and January, so if unspecified, these are the defaults
        // instead of the current day/month.
        if ( month === null ) {
            month = 0;
        }
        if ( date === null ) {
            date = 1;
        }
        // now have year, month, and date, but in the culture's calendar.
        if ( convert ) {
            result = convert.toGregorian( year, month, date );
            if ( result === null ) return null;
        }
        else {
            // have to set year, month and date together to avoid overflow based on current date.
            result.setFullYear( year, month, date );
            // check to see if date overflowed for specified month (only checked 1-31 above).
            if ( result.getDate() !== date ) return null;
            // invalid day of week.
            if ( weekDay !== null && result.getDay() !== weekDay ) {
                return null;
            }
        }
        // if pm designator token was found make sure the hours fit the 24-hour clock.
        if ( pmHour && hour < 12 ) {
            hour += 12;
        }
        result.setHours( hour, min, sec, msec );
        if ( tzMinOffset !== null ) {
            var adjustedMin = result.getMinutes() - ( tzMinOffset + result.getTimezoneOffset() );
            result.setHours( result.getHours() + parseInt( adjustedMin / 60, 10 ), adjustedMin % 60 );
        }
        return result;
    }
    
    
    function formatDateToCulture(value, format, culture) {
        var cal = culture.calendar,
            convert = cal.convert;
        if ( !format || !format.length || format === 'i' ) {
            var ret;
            if ( culture && culture.name.length ) {
                if ( convert ) {
                    // non-gregorian calendar, so we cannot use built-in toLocaleString()
                    ret = formatDateToCulture( value, cal.patterns.F, culture );
                }
                else {
                    ret = value.toLocaleString();
                }
            }
            else {
                ret = value.toString();
            }
            return ret;
        }
    
        var sortable = format === "s";
            format = getFullDateFormat(cal, format);
    
    
        // Start with an empty string
        ret = [];
        var hour,
            zeros = ['0','00','000'],
            foundDay,
            checkedDay,
            dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
            quoteCount = 0,
            tokenRegExp = /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g,
            converted;
    
        function padWithZeros(num, c) {
            var r, s = num+'';
            if ( c > 1 && s.length < c ) {
                r = ( zeros[ c - 2 ] + s);
                return r.substr( r.length - c, c );
            }
            else {
                r = s;
            }
            return r;
        }
    
        function hasDay() {
            if ( foundDay || checkedDay ) {
                return foundDay;
            }
            foundDay = dayPartRegExp.test( format );
            checkedDay = true;
            return foundDay;
        }
    
        if ( !sortable && convert ) {
            converted = convert.fromGregorian( value );
        }
    
        for (;;) {
            // Save the current index
            var index = tokenRegExp.lastIndex,
                // Look for the next pattern
                ar = tokenRegExp.exec( format );
    
            // Append the text before the pattern (or the end of the string if not found)
            var preMatch = format.slice( index, ar ? ar.index : format.length );
            quoteCount += appendMatchStringCount( preMatch, ret );
    
            if ( !ar ) {
                break;
            }
    
            // do not replace any matches that occur inside a string literal.
            if ( quoteCount % 2 ) {
                ret.push( ar[ 0 ] );
                continue;
            }
    
            var current = ar[ 0 ],
                clength = current.length;
    
    
            switch ( current ) {
                case dateFormat.DAY_OF_WEEK_THREE_LETTER:
                case dateFormat.DAY_OF_WEEK_FULL_NAME:
                    var names = (clength === 3) ? cal.days.namesAbbr : cal.days.names;
                    ret.push( names[ value.getDay() ] );
                    break;
                case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
                case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT:
                    foundDay = true;
                    ret.push( padWithZeros( (converted ? converted[2] : value.getDate()), clength ) );
                    break;
                case dateFormat.MONTH_THREE_LETTER:
                case dateFormat.MONTH_FULL_NAME:
                    var part = converted ? converted[1] : value.getMonth();
                    ret.push( (cal.monthsGenitive && hasDay())
                        ? cal.monthsGenitive[ clength === 3 ? "namesAbbr" : "names" ][ part ]
                        : cal.months[ clength === 3 ? "namesAbbr" : "names" ][ part ] );
                    break;
                case dateFormat.MONTH_SINGLE_DIGIT:
                case dateFormat.MONTH_DOUBLE_DIGIT:
                    ret.push( padWithZeros((converted ? converted[1] : value.getMonth()) + 1, clength ) );
                    break;
                case dateFormat.YEAR_SINGLE_DIGIT:
                case dateFormat.YEAR_DOUBLE_DIGIT:
                case dateFormat.YEAR_FULL:
                    part = converted ? converted[ 0 ] : value.getFullYear();
                    if ( clength < 4 ) {
                        part = part % 100;
                    }
                    ret.push( padWithZeros( part, clength ) );
                    break;
                case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK:
                case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK:
                    hour = value.getHours() % 12;
                    if ( hour === 0 ) hour = 12;
                    ret.push( padWithZeros( hour, clength ) );
                    break;
                case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK:
                case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK:
                    ret.push( padWithZeros( value.getHours(), clength ) );
                    break;
                case dateFormat.MINUTES_SINGLE_DIGIT:
                case dateFormat.MINUTES_DOUBLE_DIGIT:
                    ret.push( padWithZeros( value.getMinutes(), clength ) );
                    break;
                case dateFormat.SECONDS_SINGLE_DIGIT:
                case dateFormat.SECONDS_DOUBLE_DIGIT:
                    ret.push( padWithZeros(value .getSeconds(), clength ) );
                    break;
                case dateFormat.MERIDIAN_INDICATOR_SINGLE:
                case dateFormat.MERIDIAN_INDICATOR_FULL:
                    part = value.getHours() < 12 ? (cal.AM ? cal.AM[0] : " ") : (cal.PM ? cal.PM[0] : " ");
                    ret.push( clength === 1 ? part.charAt( 0 ) : part );
                    break;
                case dateFormat.DECISECONDS:
                case dateFormat.CENTISECONDS:
                case dateFormat.MILLISECONDS:
                    ret.push( padWithZeros( value.getMilliseconds(), 3 ).substr( 0, clength ) );
                    break;
                case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT:
                case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT:
                    hour = value.getTimezoneOffset() / 60;
                    ret.push( (hour <= 0 ? '+' : '-') + padWithZeros( Math.floor( Math.abs( hour ) ), clength ) );
                    break;
                case dateFormat.TIME_ZONE_OFFSET_FULL:
                    hour = value.getTimezoneOffset() / 60;
                    ret.push( (hour <= 0 ? '+' : '-') + padWithZeros( Math.floor( Math.abs( hour ) ), 2 ) +
                        ":" + padWithZeros( Math.abs( value.getTimezoneOffset() % 60 ), 2 ) );
                    break;
                case dateFormat.DATE_SEPARATOR:
                    ret.push( cal["/"] || "/" );
                    break;
                default:
                    throw "Invalid date format pattern '" + current + "'.";
                    break;
            }
        }
        return ret.join( '' );
    }
    
    //add new culture into BoldBIDashboard 
    BoldBIDashboard.globalize.addCulture = function (name, culture) {
        BoldBIDashboard.cultures[name] = bbdesigner$.extend(true, bbdesigner$.extend(true, {}, BoldBIDashboard.cultures['default'], culture), BoldBIDashboard.cultures[name]);
        BoldBIDashboard.cultures[name].calendar = BoldBIDashboard.cultures[name].calendars.standard;
    }
    
    //return the specified culture or default if not found
    BoldBIDashboard.globalize.preferredCulture = function (culture) {
        culture = (typeof culture != "undefined" && typeof culture === typeof this.cultureObject) ? culture.name : culture;
        this.cultureObject = BoldBIDashboard.globalize.findCulture(culture);
        return this.cultureObject;
    }
    BoldBIDashboard.globalize.setCulture = function (culture) {
        if (BoldBIDashboard.isNullOrUndefined(this.globalCultureObject)) this.globalCultureObject = BoldBIDashboard.globalize.findCulture(culture);
        culture = (typeof culture != "undefined" && typeof culture === typeof this.globalCultureObject) ? culture.name : culture;
        if (culture) this.globalCultureObject = BoldBIDashboard.globalize.findCulture(culture);
        BoldBIDashboard.cultures.current = this.globalCultureObject;
        return this.globalCultureObject;
    }
    BoldBIDashboard.globalize.culture=function(name){
        BoldBIDashboard.cultures.current = BoldBIDashboard.globalize.findCulture(name);
    }
    
    //return the specified culture or current else default if not found
    BoldBIDashboard.globalize.findCulture = function (culture) {
        var cultureObject;
        if (culture) {
    
            if (bbdesigner$.isPlainObject(culture) && culture.numberFormat) {
                cultureObject = culture;
            }
            if (typeof culture === "string") {
                var cultures = BoldBIDashboard.cultures;
                if (cultures[culture]) {
                    return cultures[culture];
                }
                else {
                    if (culture.indexOf("-") > -1) {
                        var cultureShortName = culture.split("-")[0];
                        if (cultures[cultureShortName]) {
                            return cultures[cultureShortName];
                        }
                    }
                    else {
                        var cultureArray = bbdesigner$.map(cultures, function (el) { return el });
                        for (var i = 0; i < cultureArray.length; i++) {
                            var shortName = cultureArray[i].name.split("-")[0];
                            if (shortName === culture) {
                                return cultureArray[i];
                            }
                        };
                    }
                }
                return BoldBIDashboard.cultures["default"];
            }
        }
        else {
            cultureObject = BoldBIDashboard.cultures.current || BoldBIDashboard.cultures["default"];
        }
    
        return cultureObject;
    }
    //formatting date and number based on given format
    BoldBIDashboard.globalize.format = function (value, format, culture) {
        var cultureObject =  BoldBIDashboard.globalize.findCulture(culture);
        if (typeof(value) === 'number') {
            value = formatNumberToCulture(value, format, cultureObject);
        } else if(value instanceof Date){
            value = formatDateToCulture(value, format, cultureObject);
        }
    
        return value;
    }
    
    //parsing integer takes string as input and return as number
    BoldBIDashboard.globalize.parseInt = function(value, radix, culture) {
        if(!radix)
            radix = 10;
        return Math.floor( parseValue( value, culture, radix ) );
    }
    
    //returns the ISO date string from date object
    BoldBIDashboard.globalize.getISODate = function(value) {
        if(value instanceof Date) return value.toISOString();
    }
    
    //parsing floationg poing number takes string as input and return as number
    BoldBIDashboard.globalize.parseFloat = function(value, radix, culture) {
        if (typeof radix === "string") {
            culture = radix;
            radix = 10;
        }
        return parseValue( value, culture);
    }
    
    //parsing date takes string as input and return as date object
    BoldBIDashboard.globalize.parseDate = function(value, formats, culture) {
        culture = BoldBIDashboard.globalize.findCulture(culture);
    
        var date, prop, patterns;
        if ( formats ) {
            if ( typeof formats === "string" ) {
                formats = [ formats ];
            }
            if ( formats.length ) {
                for ( var i = 0, l = formats.length; i < l; i++ ) {
                    var format = formats[ i ];
                    if ( format ) {
                        date = getParsedDate( value, format, culture );
                        if ( date ) break;
                    }
                }
            }
        }
        else {
            patterns = culture.calendar.patterns;
            for ( prop in patterns ) {
                date = getParsedDate( value, patterns[prop], culture );
                if ( date ) break;
            }
        }
        return date || null;
    }
    
    function getControlObject(obj, stringArray){
        return stringArray.length ? getControlObject(obj[stringArray[0]], stringArray.slice(1)) : obj;
    }
    
    //return localized constants as object for the given widget control and culture
    BoldBIDashboard.globalize.getLocalizedConstants = function(controlName, culture){
        var returnObject,
            controlNameArray = controlName.replace("BoldBIDashboard.", "").split(".");
        
        returnObject = getControlObject(BoldBIDashboard, controlNameArray);
    
        return ( bbdesigner$.extend(true, {}, returnObject.Locale['default'], returnObject.Locale[culture ? culture : this.cultureObject.name]) ) ;
    }
    
    bbdesigner$.extend(BoldBIDashboard, BoldBIDashboard.globalize);
    
    }(bbdesigner$));;;
/**
* @fileOverview Plugin to style the Waiting pop elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardWaitingPopup", "BoldBIDashboard.WaitingPopup", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        _rootCSS: "e-waitingpopup",


        defaults: {

            showOnInit: false,

            target: null,

            appendTo: null,

            showImage: true,

            htmlAttributes: {},

            cssClass: "",

            text: null,

            template: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            showOnInit: "boolean",
            showImage: "boolean",
            cssClass: "string"
        },

        show: function () {
            this._refreshPanel();
            this.maindiv.css("display", "block");
            this.model.showOnInit = true;
        },

        hide: function () {
            this.maindiv.css("display", "none");
            this.model.showOnInit = false;
        },

        refresh: function () {
            this._refreshPanel();
        },

        _setText: function (text) {
            if (text) {
                if (this.popupText) this.popupText.html(text);
                else {
                    this._generateTextTag(text);
                    this._setContentPosition();
                }
            }
            else if (this.popupText) {
                this.popupText.remove();
                this.popupText = null;
            }
        },

        _showImage: function (boolean) {
            if (boolean) {
                this.popupImage = BoldBIDashboard.buildTag("span.e-image");
                if (this.popupText) this.popupImage.insertBefore(this.popupText);
                else this.maindiv.append(this.popupImage);
            }
            else if (this.popupImage) {
                this.popupImage.remove();
                this.popupImage = null;
            }
        },

        _setTemplate: function () {
            var template = this.model.template;
            if (typeof template === "string") template = bbdesigner$(template);
            if (typeof template === "object" && typeof template.css === "function")
                this.templateObj = template;
            else
                this.templateObj = BoldBIDashboard.buildTag("div", "", { "text-align": "center" }).append(template);

            this.templateObj.css({ "visibility": "visible", "display": "block" });
            this.maindiv.append(this.templateObj);
        },

        _setTheme: function (skin) {
            this.maindiv.removeClass(this.model.cssClass).addClass(skin);
        },



        _init: function () {
            this._initialize();
            this._render();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "text": this._setText(options[option]); break;
                    case "cssClass": this._setTheme(options[option]); break;
                    case "htmlAttributes ": this._addAttr(options[option]); break;
                    case "showOnInit": this._setVisibility(options[option]); break;
                    case "showImage": this._showImage(options[option]); this._setContentPosition(); break;
                    case "target": this.model.target = options[option]; this._setTarget(); this.refresh(); break;
                    case "appendTo": this.model.appendTo = options[option]; this._setTarget();
                        if (!BoldBIDashboard.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
                            this.maindiv.appendTo(bbdesigner$(this.model.appendTo));
                        else
                            bbdesigner$('body').append(this.maindiv);
                        this.refresh(); break;
                    case "template":
                        this.maindiv.empty();
                        if (options[option]) {
                            this.model.template = options[option];
                            this._setTemplate();
                        }
                        else {
                            this.model.template = options[option] = null;
                            this._showImage(this.model.showImage);
                            if (this.model.text) this._generateTextTag(this.model.text);
                        }
                        this._setContentPosition();
                        break;
                }
            }
        },
        _setTarget: function () {
            if (this.model.target == "document")
                this.targetElement = bbdesigner$(document);
            else if (this.model.target == "window")
                this.targetElement = bbdesigner$(window);
            else if (!BoldBIDashboard.isNullOrUndefined(this.model.appendTo) || !BoldBIDashboard.isNullOrUndefined(this.model.target))
                this.targetElement = !BoldBIDashboard.isNullOrUndefined(this.model.target) ? bbdesigner$(this.model.target) : !BoldBIDashboard.isNullOrUndefined(this.model.appendTo) ? bbdesigner$(this.model.appendTo) : bbdesigner$(this.model.target);
            else
                this.targetElement = this.element;
        },
        _destroy: function () {
            this.maindiv.remove();
        },

        _initialize: function () {
            this.maindiv = null;
            this.popupText = null;
            this.popupImage = null;
            this.templateObj = null;
            this.targetElement = null;
        },


        _render: function () {
            this._setTarget();
            var oldWrapper = bbdesigner$("#" + this.element[0].id + "_WaitingPopup").get(0);
            if (oldWrapper)
                bbdesigner$(oldWrapper).remove();
            this.maindiv = BoldBIDashboard.buildTag("div.e-waitpopup-pane e-widget " + this.model.cssClass + "#" + this.element[0].id + "_WaitingPopup");
            if (this.model.template) {
                this._setTemplate();
            }
            else {
                this._showImage(this.model.showImage);
                if (this.model.text) {
                    this._generateTextTag(this.model.text);
                }
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
                this.maindiv.appendTo(bbdesigner$(this.model.appendTo));
            else
                bbdesigner$('body').append(this.maindiv);
            this._setVisibility(this.model.showOnInit);
            this._addAttr(this.model.htmlAttributes);
        },

        _refreshPanel: function () {
            this.maindiv.width(this.targetElement.outerWidth());
            this.maindiv.height(this.targetElement.outerHeight());
            this._setPanelPosition();
            this._setContentPosition();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.maindiv.addClass(value);
                else proxy.maindiv.attr(key, value)
            });
        },


        _setPanelPosition: function () {
             var location = BoldBIDashboard.util.getOffset(this.targetElement);
            if (this.model.appendTo != null && bbdesigner$(this.model.appendTo).length > 0) {
                if ((this.targetElement.css("position") == "relative" || this.targetElement.css("position") == "absolute") && this.targetElement[0] === bbdesigner$(this.model.appendTo)[0]) {
                    location = { left: 0, top: 0 };
                }
                else {
                    location.left -= this.targetElement.offsetParent().offset().left;
                    location.top -= this.targetElement.offsetParent().offset().top;
                }
            }
            this.maindiv.css({
                "position": "absolute",
                "left": Math.ceil(location.left) + "px",
                "top": Math.ceil(location.top) + "px",
                "z-index": this._maxZindex() + 1
            });
        },

        _setContentPosition: function () {
            if (this.model.template == null) {
                var textHeight = 0, imgHeight = 0, targetHeight, top = null;
                targetHeight = this.targetElement.outerHeight();
                if (this.popupText) textHeight = this.popupText.outerHeight();
                if (this.popupImage) imgHeight = this.popupImage.outerHeight();

                if (this.popupImage) {
                    top = Math.ceil((targetHeight - (imgHeight + textHeight)) / 2);
                    this.popupImage.css("top", top + "px");
                }
                if (this.popupText) {
                    if (!top) top = Math.ceil((targetHeight - textHeight) / 2);
                    this.popupText.css("top", top + "px");
                }
            }
            else {
                this.templateObj.css({
                    "position": "relative",
                    "left": Math.ceil((this.targetElement.outerWidth() - this.templateObj.outerWidth()) / 2),
                    "top": Math.ceil((this.targetElement.outerHeight() - this.templateObj.outerHeight()) / 2)
                });
            }
        },

        _generateTextTag: function (text) {
            this.popupText = BoldBIDashboard.buildTag("div.e-text", text);
            this.maindiv.append(this.popupText);
        },

        _setVisibility: function (showOnInit) {
            if (showOnInit) this.show();
            else this.hide();
        },

        _maxZindex: function () {
            return BoldBIDashboard.util.getZindexPartial(this.element);
        }
    });
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardButton", "BoldBIDashboard.Button", {

        element: null,

        model: null,
        validTags: ["button", "input"],
        _setFirst: false,

        _rootCSS: "e-button",
        _requiresID: true,

        defaults: {

            size: "normal",

            type: "submit",

            height: "",

            width: "",

            enabled: true,

            htmlAttributes: {},

            text: null,

            contentType: "textonly",

            imagePosition: "imageleft",

            showRoundedCorner: false,

            cssClass: "",

            prefixIcon: null,

            suffixIcon: null,

            enableRTL: false,

            repeatButton: false,

            timeInterval: "150",

            create: null,

            click: null,

            destroy: null
        },


        dataTypes: {
            size: "enum",
            enabled: "boolean",
            type: "enum",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            repeatButton: "boolean",
            enableRTL: "boolean",
            timeInterval: "string",
            htmlAttributes: "data"
        },

        disable: function () {
            this.element.addClass("e-disable").attr("aria-disabled", true);
            this.model.enabled = false;
        },

        enable: function () {
            this.element.removeClass("e-disable").attr("aria-disabled", false);
            this.model.enabled = true;
        },

        _init: function () {
            this._cloneElement = this.element.clone();
            this._initialize();
            this._render();
            this._controlStatus(this.model.enabled);
            this._wireEvents(this.model.repeatButton);
            this._addAttr(this.model.htmlAttributes);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else proxy.element.attr(key, value);
                if (key == "disabled" && value == "disabled") proxy.disable();
            });
        },

        _destroy: function () {
            this._off(this.element, "blur", this._btnBlur);
            this.element.removeClass(this.model.cssClass + "e-ntouch e-btn e-txt e-select e-disable e-corner e-widget").removeAttr("role aria-describedby aria-disabled");
            !this._cloneElement.attr("type") && this.element.attr("type") && this.element.removeAttr("type");			
            this.element.removeClass("e-btn-" + this.model.size);
            this.model.contentType && this.model.contentType != "textonly" ? this.element.append(this._cloneElement.text()) && this.imgtxtwrap[0].remove() : "";
            
        },


        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        if (!this.element.is("input"))
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        if (!this.element.is("input"))
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "timeInterval":
                        this.model.timeInterval = options[option];
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                }
            }
        },


        _setSize: function (val) {
            this.element.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal');
            this.element.addClass("e-btn-" + val);
        },
        _setType: function (val) {
            this.element.prop({ "type": val });
        },

        _setHeight: function (val) {
            this.element.css('height', val);
        },

        _setWidth: function (val) {
            this.element.css('width', val);
        },

        _setText: function (val) {
            if (this.buttonType == "inputButton") {
                this.element.val(val);
            } else {
                if (this.model.contentType == BoldBIDashboard.ContentType.TextOnly) {
                    this.element.html(val);
                } else {
                    this.textspan.html(val);
                }
            }
            this.model.text = val;
        },

        _setMajorIcon: function (val) {
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
            this.model.prefixIcon = val;
        },

        _setMinorIcon: function (val) {
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
            this.model.suffixIcon = val;
        },

        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                if (!this.element.is("input"))
                this._renderButtonNormal();
            }
        },

        _setImagePosition: function (val) {
            if ((this.model.contentType == BoldBIDashboard.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                this.element.empty();
                this.model.imagePosition = val;
                if (!this.element.is("input"))
                this._renderButtonNormal();
            }
        },

        _setRTL: function (val) {
            if (val) {
                this.element.addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
        },

        _controlStatus: function (value) {
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },

        _setSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
        },

        _initialize: function () {
            if(!BoldBIDashboard.isTouchDevice()) this.element.addClass("e-ntouch");
            if (this.element.is("input")) {
                this.buttonType = "inputButton";
            }
            else if ((this.element.is("a")) || (this.element.is("button"))) {
                this.buttonType = "tagButton";
            }
            else {
                this.element.removeClass("e-button");
            }
            if (this.element.attr("type")) {
                this.model.type = this.element.attr("type");
            }
            else
                this._setType(this.model.type);
            this._timeout = null;
        },


        _render: function () {
            this._setSize(this.model.size);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._setRTL(this.model.enableRTL);
            this.element.addClass(this.model.cssClass + " e-btn e-select e-widget").attr("role", "button");
            if (this.buttonType == "inputButton") {
                this.element.addClass("e-txt");
                if ((this.model.text != null) && (this.model.text != "")) {
                    this.element.val(this.model.text);
                } else {
                    this.model.text = this.element.val();
                }
            } else { this._renderButtonNormal(); }
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.element[0].id)
                this.element.attr("aria-describedby", this.element[0].id);
        },

        _renderButtonNormal: function () {
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.html();
            }
            this.element.empty();
            /*Image and Text*/
            this.textspan = BoldBIDashboard.buildTag('span.e-btntxt', this.model.text);
            if (this.model.contentType.indexOf("image") > -1) {
                this.majorimgtag = BoldBIDashboard.buildTag('span').addClass(this.model.prefixIcon);
                this.minorimgtag = BoldBIDashboard.buildTag('span').addClass(this.model.suffixIcon);
                this.imgtxtwrap = BoldBIDashboard.buildTag('span').addClass('e-btn-span');
            }

            if (this.model.contentType == BoldBIDashboard.ContentType.TextAndImage) {
                switch (this.model.imagePosition) {
                    case BoldBIDashboard.ImagePosition.ImageRight:
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case BoldBIDashboard.ImagePosition.ImageLeft:
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                    case BoldBIDashboard.ImagePosition.ImageBottom:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case BoldBIDashboard.ImagePosition.ImageTop:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                }
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == BoldBIDashboard.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == BoldBIDashboard.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == BoldBIDashboard.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
                this.element.append(this.imgtxtwrap);
            } else {
                this.element.addClass("e-txt");
                this.element.html(this.model.text);
            }
        },

        _roundedCorner: function (value) {
            value == true ? this.element.addClass('e-corner') : this.element.removeClass('e-corner');
        },

        _wireEvents: function (val) {
            if (val) {
                this._on(this.element, "mousedown", this._btnRepatMouseClickEvent);
                this._on(bbdesigner$(document), 'mouseup', this._mouseUpClick);
                this._on(this.element, "keyup", this._btnRepatKeyUpEvent);
                this._on(bbdesigner$(document), "keypress", this._btnRepatKeyDownEvent);

            }
            this._on(this.element, "click", this._btnMouseClickEvent);
            this._on(this.element, "blur", this._btnBlur);
        },

        _btnBlur:function(e){
            this.element.removeClass("e-animate");
        },

        _btnMouseClickEvent: function (e) {
            var self = this;
            this.element.addClass("e-animate");
            if(!self.model.enabled) return false;
            if (!self.element.hasClass("e-disable")) {
                // here aregument 'e' used in serverside events 
                var args = { target: e.currentTarget, e : e , status:self.model.enabled};
                self._trigger("click", args);
            } 
        },

        _btnRepatMouseClickEvent: function (e) {
            var self = this;
            if(!self.model.enabled) return false;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.button == 0) || (e.which == 1)) {

                    self._timeout = setInterval(function () { self._trigger("click", { target: e.currentTarget, status: self.model.enabled }); }, this.model.timeInterval);
                }
            }
        },

        _mouseUpClick: function (event) {
            clearTimeout(this._timeout);
        },

        _btnRepatKeyDownEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.keyCode == 32) || (e.keyCode == 13)) {
                    self._trigger("click", args);
                }
            }
        },

        _btnRepatKeyUpEvent: function (e) {
            if ((e.keyCode == 32) || (e.keyCode == 13)) {
                clearTimeout(this._timeout);
            }
        },
    });


    BoldBIDashboard.ContentType = {
		/**  Supports only for text content only */
		TextOnly: "textonly", 
		/** Supports only for image content only */
		ImageOnly: "imageonly", 
		/** Supports image for both ends of the button */
		ImageBoth: "imageboth", 
		/** Supports image with the text content */
		TextAndImage: "textandimage", 
		/** Supports image with both ends of the text */
        ImageTextImage: "imagetextimage"
    };


    BoldBIDashboard.ImagePosition = {
		/**  support for aligning text in left and image in right. */
		ImageRight: "imageright", 
		/**  support for aligning text in right and image in left. */
		ImageLeft: "imageleft",
		/**  support for aligning text in bottom and image in top. */
		ImageTop: "imagetop", 
		/**  support for aligning text in top and image in bottom. */
		ImageBottom: "imagebottom"
    };

    BoldBIDashboard.ButtonSize = {
		/**  Creates button with inbuilt default size height, width specified */
		Normal : "normal",
		/**  Creates button with inbuilt mini size height, width specified */
		Mini: "mini", 
		/**  Creates button with inbuilt small size height, width specified */
		Small: "small",
		/**  Creates button with inbuilt medium size height, width specified */
		Medium:"medium", 
		/**  Creates button with inbuilt large size height, width specified */
        Large: "large"
    };

    BoldBIDashboard.ButtonType = {
		/**  Creates button with inbuilt button type specified */
		Button : "button",
		/**  Creates button with inbuilt reset type specified */
		Reset: "reset", 
		/**  Creates button with inbuilt submit type specified */
		Submit: "submit"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the Menu control.
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) { 
    BoldBIDashboard.widget("BoldBIDashboardMenu", "BoldBIDashboard.Menu", {

        element: null,

        model: null,
        validTags: ["ul"],
        _setFirst: false,
        _rootCss: "e-menu",
        angular: {
            terminal: false
        },


        defaults: {

            height: "",

            width: "",

            animationType: "default",

            orientation: BoldBIDashboard.Orientation.Horizontal,

            menuType: "normalmenu",
			
			isResponsive: true,

            contextMenuTarget: null,

            htmlAttributes: {},

            cssClass: "",

            openOnClick: false,

            subMenuDirection: "none",

            enableCenterAlign: false,

            showRootLevelArrows: true,

            showSubLevelArrows: true,

            enableAnimation: true,
            
            container: null,

            enableSeparator: true,

            enabled: true,

            overflowHeight: "auto",

            overflowWidth: "auto",

            fields: {

                child: null,

                dataSource: null,

                query: null,

                tableName: null,

                id: "id",

                parentId: "parentId",

                text: "text",

                spriteCssClass: "spriteCssClass",

                url: "url",

                imageAttribute: "imageAttribute",

                htmlAttribute: "htmlAttribute",

                linkAttribute: "linkAttribute",

                imageUrl: "imageUrl",
            },

            enableRTL: false,

            titleText: "Menu",

            locale: "en-US",

            excludeTarget: null,

            beforeOpen: null,

            open: null,

            close: null,

            mouseover: null,

            mouseout: null,

            click: null,

            keydown: null,

            overflowOpen: null,

            overflowClose:null,

            create: null,

            destroy: null
        },

        dataTypes: {
            animationType: "enum",
            cssClass: "string",
            titleText: "string",
            locale: "string",
            openOnClick: "boolean",
            enabled: "boolean",
            enableCenterAlign: "boolean",
            showArrow: "boolean",
            showRootLevelArrows: "boolean",
            showSubLevelArrows: "boolean",
            enableSeparator: "boolean",
			isResponsive: "boolean",
            enableRTL: "boolean",
            enableAnimation: "boolean",
            fields: {
                dataSource: "data",
                query: "data",
                child: "data"
            },
            excludeTarget: "string",
            htmlAttributes: "data"
        },


        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "menuType":
                        jsondata[key] = this.model.menuType;
                        break;
                    case "fields":
                        this._wireEvents("_off");
                        this.element.empty().insertBefore(this.wrapper);
                        this.wrapper.remove();
                        bbdesigner$.extend(this.model.fields, jsondata[key]);
                        this._intializeData();
                        if (!this.model.enabled)
                            this._wireEvents("_off");
                        break;
                    case "orientation": this._setOrientation(jsondata[key]); break;
                    case "showRootLevelArrows": this._addArrow(jsondata[key], this.model.showSubLevelArrows); break;
                    case "showSubLevelArrows": this._addArrow(this.model.showRootLevelArrows, jsondata[key]); break;
                    case "enableSeparator": this._setSeparator(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "isResponsive":
                        if (this.model.isResponsive)
                            this._responsiveLayout();
                        else {
                            bbdesigner$(this.resWrap).remove();
                            bbdesigner$(this.wrapper).removeClass("e-menu-responsive");
                            bbdesigner$(this.element).removeClass("e-menu-responsive");
                            this.resWrap = null;
                        }
                        break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "enableRTL": this._setRTL(jsondata[key]); break;
                    case "enableCenterAlign": this._centerAlign(jsondata[key]); break;
                    case "excludeTarget": this.model.excludeTarget = jsondata[key];
                        break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                    case "animationType":
                        this._setAnimation(jsondata[key]);
                        break;
                    case "enableAnimation": this.model.enableAnimation = jsondata[key]; break;
                    case "openOnClick":
                            this._hoverOpen = !jsondata[key];
                            this._hoverClose = !jsondata[key]; 
                        break;
                    case "subMenuDirection": this._setSubMenuDirection(this.model.subMenuDirection); break;
                    case "titleText":
						this._titleText(jsondata[key]);
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
                        this._updateLocalConstant();
                        this._setLocale();
                        break;
                    case "overflowHeight":                       
                            this._setOverflowDimensions("height",jsondata[key]); break;
                    case "overflowWidth":                      
                        this._setOverflowDimensions("width",jsondata[key]); break;

                }
            }
        },
        _updateLocalConstant: function () {
            this._localizedLabels = BoldBIDashboard.getLocalizedConstants("BoldBIDashboard.Menu", this.model.locale);
        },
        		
        _setLocale: function () {
            this._titleText(this._localizedLabels.titleText);
        },
        _titleText: function(val){
            if ((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
                bbdesigner$(this.label).text(val);
        },

        _destroy: function () {
            this.model.menuType == BoldBIDashboard.MenuType.ContextMenu ? this._referenceElement.append(this._cloneElement) : this._cloneElement.insertBefore(this.wrapper);
            this._cloneElement.removeClass('e-menu e-js');
            this.wrapper.remove();
        },


        _init: function () {
            this._cloneElement = this.element.clone();
            this.element.css("visibility", "hidden");
            this._setValues();
            this._intializeData();
            this.element.css("visibility", "visible");
        },

        _setValues: function () {
            this._mouseOver = true;
            this._hoverOpen = true;
            this._hoverClose = true;
            this._isMenuOpen = false;
            this._hideSpeed = 100;
            this._showSpeed = 100;
            this._isSubMenuOpen = false;
            this._isContextMenuOpen = false;
            this._disabledMenuItems = new Array();
            this._hiddenMenuItems = new Array();
            this._delayMenuHover = 0;
            this._delaySubMenuHover = 0;
            this._delaySubMenuShow = 0;
            this._preventContextOpen = true;
            this._setAnimation(this.model.animationType);
            this._isFocused = true;
            this._menuOverflowItems = new Array();
            this._menuHeaderItems = new Array();
            this._menuCloneItems = new Array();
            this._itemWidth = 0; 
        },
        _intializeData: function () {
            if (!BoldBIDashboard.isNullOrUndefined(this.model.fields) && this.model.fields["dataSource"] != null) {
                this._generateTemplate(this.model.fields["dataSource"]);
                this._renderMenu();
            }
            else {
                this._renderMenu();
                this._wireEvents("_on");
                this._calculateOverflowItems();
            }
        },
        _renderMenu: function () {
            this._renderControl();
            this._addArrow(this.model.showRootLevelArrows, this.model.showSubLevelArrows);
			this._renderArrow();
			this._intializeMenu();
            //item Width for width property		
			    this._itemWidth = this.element.width();
			    if (this.model.isResponsive) {
			        this._ensureResponsiveClasses(bbdesigner$(window).width() < 767);
			    }
			    if (this.model.orientation == "horizontal") {
			        this._on(this.element.parent().find("span.e-check-wrap.e-icon"), "click", this._mobileResponsiveMenu);
			        if(this.model.fields["dataSource"] != null) this._calculateOverflowItems();
			    }
        },      

        _renderControl: function () {
            var label, checkBox, checkObj, list, spanlist, i;
            if (this.model.menuType == "normalmenu") {
                this.wrapper = BoldBIDashboard.buildTag("div");
                this.wrapper.addClass(this.model.cssClass + " e-menu-wrap");
            } else
                this.wrapper = BoldBIDashboard.buildTag("div.e-menu-wrap");
            if (this.model.isResponsive) this._responsiveLayout();
            if (this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) {
                this.wrapper.insertBefore(this.element);
                this.wrapper.append(this.element);
                }            
            this.element.addClass("e-menu e-widget e-box").attr({ "role": "menu", "tabindex": 0 });
            this._addAttr(this.model.htmlAttributes);
            if (this.model.enableRTL) this._setRTL(this.model.enableRTL);
            this._setSubMenuDirection(this.model.subMenuDirection);
            if (this.model.menuType == "normalmenu") {
                this.model.orientation == "horizontal" ? this.element.addClass("e-horizontal") : this.element.addClass("e-vertical");
            }
            //For ContextMenu Mode
            else this._contextMenu_Template();
            this._addClass();
            if (this.model.enableCenterAlign) this._centerAlign(this.model.enableCenterAlign);
            if (this.model.enableSeparator) this._setSeparator(true);
            (!this.model.enabled) && this.disable();
        },
        _renderPopupWrapper: function (e) {
            if(this._ensureOverflowPopup()){                          
                this.popupWrapper = BoldBIDashboard.buildTag("div.e-menu-popwrap");                         
                this.popupWrapper.insertAfter(this.element);              
                var height = typeof value === "number" ? this.model.overflowHeight + "px" :this.model.overflowHeight;
                var width = typeof value === "number" ? this.model.overflowWidth + "px" : this.model.overflowWidth;
                this.popupWrapper.css({ "height": height,"width":width});
                this.popupWrapper.hide();
                this._addOverflowItems();                
            }
        
        },
        _calculateOverflowItems: function (e) {        
            if (this._ensureOverflowPopup()) {
                this.element.find("li.e-list").removeClass("e-menu-show");
                bbdesigner$(this.lastelement).removeClass("e-last");
                this._menuHeaderItems = [];  
                var menuHeaderWidth = this.element.outerWidth();               
                if (this.element.find("li.e-ham-wrap").length > 0) //for window resizing event neglect the hamburger icon list from the listCollection
                {                   
                    if ((this._itemWidth<=this.element.width())||(this._itemWidth>=this.element.width()) && (!(this._isOverflowPopupOpen()))) {
						if(!BoldBIDashboard.isNullOrUndefined(this.popupWrapper))
							this.popupWrapper.hide();                        
                    }
                }
				this._renderHamburgerIcon();	
				this.element.find("li.e-ham-wrap").css({display: 'list-item'});
                var hamburgerWidth = this.element.find("li.e-ham-wrap").outerWidth(), itemsOuterWidth = 0, hideState=true;
				this.element.find("li.e-ham-wrap").hide();
                this._menuHeaderItems = this.element.find(">li.e-list");
                this._menuOverflowItems = [];
                for ( var i = 0; i < this._menuHeaderItems.length; i++) {
                   var menuItem = bbdesigner$(this._menuHeaderItems[i]);                                        
                        itemsOuterWidth = itemsOuterWidth + menuItem.outerWidth();
                        if (itemsOuterWidth < menuHeaderWidth) {                      
                            menuItem.removeClass('e-menu-hide');
							this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");
                            if (this.model.enableSeparator) this._setSeparator(true);                  
                        }
                        else {
							if(hideState)
							{
								hideState=false;
								this.element.find("li.e-ham-wrap").css({display: 'list-item'}); 
								itemsOuterWidth = itemsOuterWidth - menuItem.outerWidth() + hamburgerWidth;
								if(i>1){
									(itemsOuterWidth = itemsOuterWidth - bbdesigner$(this._menuHeaderItems[i-1]).outerWidth());
									i=i-2;
								}								
								continue;
							}
                            this._menuOverflowItems.push(bbdesigner$(menuItem).clone(true));                            
                            menuItem.addClass('e-menu-hide');                            
                        }
                }            
                if (this._menuOverflowItems.length>0) {
                    this._renderHamburgerIcon();
                    bbdesigner$('.e-menu-popwrap').length ?  this._addOverflowItems():  this._renderPopupWrapper();                     
                    this.lastelement = this.element.find('>li.e-list:visible').last().addClass('e-last');
                    this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");            
                }
                else if (this._menuOverflowItems.length == 0 && bbdesigner$("li.e-ham-wrap").length > 0) {
                    this.element.find("li.e-ham-wrap").remove();
                }

            }           
            if (this.model.orientation == "vertical" || this.model.menuType == BoldBIDashboard.MenuType.ContextMenu && (bbdesigner$(window).width() >= 768) && (this.model.isResponsive)) {
                this.element.find("span.e-icon.e-arrowhead-down").removeClass('e-arrowhead-down').addClass('e-arrowhead-right');
            }
            

        },
        _renderHamburgerIcon: function () {
            if((this._ensureOverflowPopup())&& (this.element.find("li.e-ham-wrap").length==0)){            
                var liTag = BoldBIDashboard.buildTag("li.e-ham-wrap");
                var divTag = BoldBIDashboard.buildTag("div");
                this.hamburgerspan = BoldBIDashboard.buildTag('span.e-hamburger');                                                     
                divTag.append(this.hamburgerspan);
                liTag.append(divTag);    
                this.element.append(liTag);
                //to set border
                if (this.model.height != 0) this._setHeight(this.model.height);
                else {                       
                    bbdesigner$("li.e-ham-wrap").css({"height":this.element.find("li.e-list").first().height()});
                }
                //button click event
                this._on(this.element.find("li.e-ham-wrap"), "click", this._overflowOpen);                
            }
        },
        _addOverflowItems: function () {
            if ((this._ensureOverflowPopup()) && (bbdesigner$('.e-menu-popwrap').length>0)) {
				if(!BoldBIDashboard.isNullOrUndefined(this.popupWrapper)){
					this.popupWrapper.empty();
					this._menuCloneItems.length = 0;                
					for (var i = 0; i < this._menuOverflowItems.length; i++) {
						this._menuCloneItems.push(bbdesigner$(this._menuOverflowItems[i]).clone(true));                    
					}
					this.ulTag = BoldBIDashboard.buildTag("ul");
					this.ulTag.addClass("e-menu e-js e-responsive e-widget e-box e-vertical");
					this.popupWrapper.append(this.ulTag);
					for (var i = 0; i < this._menuCloneItems.length; i++) {
						if (bbdesigner$(this._menuCloneItems[i]).hasClass('e-haschild')) {
							bbdesigner$(this._menuCloneItems[i]).find('span.e-icon').removeClass('e-arrowhead-down e-arrowhead-right').addClass('e-arrowhead-down');
							bbdesigner$(this._menuCloneItems[i]).children('span.e-menu-arrow.e-menu-left').remove();                       
						}
						this.ulTag.append(this._menuCloneItems[i]);
					}
					bbdesigner$(this.ulTag).children("li").removeClass("e-menu-hide");
					//to set width of ULTag          
					var popupWidth = Math.round(this.popupWrapper.width());
					if (popupWidth>0) {
						var popupWrapperWidth = this.popupWrapper.innerWidth();
						this.popupWrapper.find("ul.e-menu").css({ "width":popupWrapperWidth+ "px" });                
					}
					//to set the separator                  
					if (this.model.enableSeparator) this._setSeparator(true);                    
				}
            }         
        },
        _overflowOpen: function (e) {           
            if(this._isOverflowPopupOpen ()){   
                //set popup wrapper left position 
                 var location = BoldBIDashboard.util.getOffset(this.element);
					var left = location.left + (this.model.enableRTL? 0 :(this.element.outerWidth() - this.popupWrapper.outerWidth()));
					var top = location.top + this.element.outerHeight();
					
					if(this.wrapper.parent().length && (this.wrapper.parent().css("position") == "absolute" || this.wrapper.parent().css("position") == "relative"))
					{
						location = BoldBIDashboard.util.getOffset(this.wrapper.parent());
						left = left-location.left;
						top = top-location.top;
					}						
					this.popupWrapper.css({ "left": left,"top":top});                          
                this.popupWrapper.show();                                
                this._trigger("overflowOpen",  {e:e});
            }
            else {
                this._overflowClose(e);
            }
        },           
        _overflowClose: function (e) {
            if(this._ensureOverflowPopup() && !BoldBIDashboard.isNullOrUndefined(this.popupWrapper)){            
                this.popupWrapper.find("li.e-list").removeClass(".e-mhover.e-active.e-mfocused");
                this._hideAnimation(this.popupWrapper.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
                this.popupWrapper.hide();                               
                this._trigger("overflowClose", { e: e });
            }
        },
        _isOverflowPopupOpen: function () {
		       if(bbdesigner$(this.popupWrapper).length>0)
            return this.popupWrapper.css("display")=="none";           
        },
        _removePopup:function(e){
            if((bbdesigner$(window).width()<767)&& (this.model.isResponsive)){
			        this._ensureResponsiveClasses(bbdesigner$(window).width());
                if ((this.element.find("li.e-ham-wrap").length > 0) && (this.popupWrapper.length>0)){
                    this.element.find("li.e-ham-wrap").remove();
                    bbdesigner$('.e-menu-popwrap').remove();                   
                    this.element.find("li.e-list").addClass("e-menu-show");             
                }
            }          
        },      
        _mobileResponsiveMenu:function(e){            
            if ((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical") && ((this.element.css("display")=="none"))) {
                    this.element.removeClass("e-res-hide").addClass("e-res-show");                 
                }
            else if((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical") && (!(this.element.css("display")=="none")))
                {
                    this.element.removeClass("e-res-show").addClass("e-res-hide");                    
                }          
        },
        _ensureOverflowPopup:function(e){
            return (this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical") && (bbdesigner$(window).width() >= 768) && (this.model.isResponsive);                
        },
        _onResize:function(e){
			this.element.find("li.e-ham-wrap").hide(); 
            bbdesigner$(window).width()>=768 ? this._calculateOverflowItems() : this._removePopup();
        },
        _ensureResponsiveClasses:function(viewport){
            if (viewport && this.element.find("span.e-icon").hasClass("e-arrowhead-right") ) this.element.find("span.e-icon.e-arrowhead-right").removeClass('e-arrowhead-right').addClass('e-arrowhead-down');            
        },

        _responsiveLayout: function () {
            if ((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
                this.wrapper.addClass("e-menu-responsive");
                this.element.addClass("e-menu-responsive")
                this.resWrap = BoldBIDashboard.buildTag('span.e-menu-res-wrap e-menu-responsive');
                this.inResWrap = BoldBIDashboard.buildTag('span.e-in-wrap e-box e-menu-res-in-wrap');
                this.label = BoldBIDashboard.buildTag('span.e-res-title').html(this.model.locale == "en-US" ? this.model.titleText : (BoldBIDashboard.Menu.Locale[this.model.locale] && BoldBIDashboard.Menu.Locale[this.model.locale].titleText)?BoldBIDashboard.Menu.Locale[this.model.locale].titleText:this.model.titleText);
                this.check = BoldBIDashboard.buildTag('span.e-check-wrap e-icon');
                this.wrapper.append(this.resWrap)
                this.resWrap.append(this.inResWrap);
                this.inResWrap.append(this.label).append(this.check);
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },

        _oncheck: function (e) {
            var obj = this.element.parents('.e-menu-wrap').children('.e-menu');
            e.isChecked ? obj.removeClass('e-res-hide').addClass('e-res-show') : obj.removeClass('e-res-show').addClass('e-res-hide');
        },
        _addClass : function (){
            //Adding arrows to items with sub items
            this.element.find('li:has("> ul")').find('> a,> span').addClass('aschild');
            this.element.find('>li').addClass('e-list').attr({ "role": "menuitem" });
			this.element.find('li').find(">a, >span").addClass('e-menulink');
            var list = this.element.find('.e-list a.aschild');
            var spanlist = this.element.find('.e-list span.aschild');
            var listElement, spanElement;
            for ( var i = 0; i < list.length; i++) {
                listElement = bbdesigner$(list[i]);
                listElement.siblings().attr({ "aria-hidden": true });
                listElement.parent().attr({ "aria-haspopup": true, "role": "menuitem" }).addClass("e-haschild");
                listElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
            for ( var i = 0; i < spanlist.length; i++) {
                spanElement = bbdesigner$(spanlist[i]);
                spanElement.siblings().attr({ "aria-hidden": true });
                spanElement.parent().attr({ "aria-haspopup": true, "role": "menu" }).addClass("e-haschild");
                spanElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
        },
		_renderArrow : function(){
			 if ((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
				if( bbdesigner$(bbdesigner$(this.element).find("span.e-menu-arrow")).length == 0){
					var arrow = BoldBIDashboard.buildTag("span.e-menu-arrow e-menu-left");
					bbdesigner$(arrow).append("<span class='e-arrowMenuOuter'></span>").append("<span class='e-arrowMenuInner'></span>");
					this.element.find('>li.e-list.e-haschild').append(arrow);
				}
			 }
		},
        _generateTemplate: function (data) {
            var proxy = this, queryPromise;
            if (data instanceof BoldBIDashboard.DataManager) {
                queryPromise = data.executeQuery(this._columnToSelect(this.model.fields));
                queryPromise.done(function (e) {
                    proxy._odataFlag = true;
                    proxy._generateItemTemplate(e.result);
                    if (proxy.model.height != 0) proxy._setHeight(proxy.model.height);
                    proxy._wireEvents("_on");
                });
            } else {
                proxy._odataFlag = false;
                this._generateItemTemplate(proxy.model.fields['dataSource']);
                this._wireEvents("_on");
            }
        },

        _generateItemTemplate: function (items) {
            for (var i = 0; i < items.length; i++) {
                if ((items[i][this.model.fields.parentId] == null) || (items[i][this.model.fields.parentId] == 0)) {
                    var subItem = this._menuTemplate(items[i], items, this.model.fields);
                    this.element.append(subItem);
                }
            }
        },

        _menuTemplate: function (item, tableData, mapper) {
            var liTag, aTag, imgTag, spanTag;
            liTag = bbdesigner$(document.createElement('li'));
            liTag.attr("class", 'e-list');
            if (item[mapper.htmlAttribute]) this._setAttributes(item[mapper.htmlAttribute], liTag);
			aTag = bbdesigner$(document.createElement('a'));
			aTag.attr("class", 'e-menulink');
			if (item[mapper.imageUrl] && item[mapper.imageUrl] != "") {
				imgTag = bbdesigner$(document.createElement('img'));
				imgTag.attr('src', item[mapper.imageUrl]);
				if (item[mapper.imageAttribute]) this._setAttributes(item[mapper.imageAttribute], imgTag);
				aTag.append(imgTag);
			}
			else if (item[mapper.spriteCssClass] && item[mapper.spriteCssClass] != "") {
				spanTag = bbdesigner$(document.createElement('span'));
				spanTag.addClass(item[mapper.spriteCssClass]);
				aTag.append(spanTag);
			}
			aTag.append(item[mapper.text]);
			if (item[mapper.linkAttribute]) this._setAttributes(item[mapper.linkAttribute], aTag);
			if (item[mapper.url])
				aTag.attr('href', item[mapper.url]);
			liTag.append(aTag);
            if (item[mapper.id]) {
                liTag.prop("id", item[mapper.id]);
            }
            if (!BoldBIDashboard.isNullOrUndefined(mapper["child"])) {
                this._odataFlag = true;
                if (mapper["child"]["dataSource"] instanceof BoldBIDashboard.DataManager) {
                    var proxy = this, queryManager = BoldBIDashboard.Query();
					bbdesigner$(liTag).attr({ "aria-haspopup": true, "role": "menu" }).addClass("e-haschild");
                    queryManager = this._columnToSelect(mapper["child"]);
                    queryManager.where(mapper["child"]["parentId"], BoldBIDashboard.FilterOperators.equal, item[mapper.id]);
                    var queryPromise = mapper["child"]["dataSource"].executeQuery(queryManager);
                    queryPromise.done(function (e) {
                        var childItems = e.result;
                        if (childItems && childItems.length > 0) {
                            var ul = bbdesigner$(document.createElement('ul'));
                            for (var i = 0; i < childItems.length; i++) {
                                var liItem = proxy._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                                ul.append(liItem);
                            }
                            liTag.append(ul);
                            bbdesigner$(liTag).children('a').addClass('aschild');
                            if (bbdesigner$(liTag).parent().hasClass('e-menu') && (proxy.model.showRootLevelArrows))
                                bbdesigner$(liTag).children('a.aschild').append(bbdesigner$('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
                            else if (proxy.model.showSubLevelArrows)
                                bbdesigner$(liTag).children('a.aschild').append(bbdesigner$('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
                            if (proxy.model.height != 0) proxy._setHeight(proxy.model.height);
                        }
                    });
                    queryPromise.then(function (e) {
                        proxy._renderArrow();
                    });
                }
                else {
					var childItems;
					if(!BoldBIDashboard.isNullOrUndefined(item.child)){
						if(BoldBIDashboard.isPlainObject(item.child))
							childItems = BoldBIDashboard.DataManager(mapper["child"]["dataSource"]).executeLocal(BoldBIDashboard.Query().where(mapper["child"]["parentId"], BoldBIDashboard.FilterOperators.equal, item[mapper.id]));
						else if(item.child instanceof Array)
							childItems =  item.child;
					}	
                    if (childItems && childItems.length > 0) {
                        var ul = bbdesigner$(document.createElement('ul'));
                        for (var i = 0; i < childItems.length; i++) {
                            var liItem = this._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                            ul.append(liItem);
                        }
                        liTag.append(ul);
                    }
                }
            }
            else if (!this._odataFlag) {
                var childItems = BoldBIDashboard.DataManager(mapper["dataSource"]).executeLocal(BoldBIDashboard.Query().where(mapper["parentId"], BoldBIDashboard.FilterOperators.equal, item[mapper.id]));
                if (childItems && childItems.length > 0) {
                    var ul = BoldBIDashboard.buildTag('ul');
                    for (var i = 0; i < childItems.length; i++) {
                        var liItem = this._menuTemplate(childItems[i], mapper["dataSource"], mapper);
                        ul.append(liItem);
                    }
                    liTag.append(ul);
                }
            }
            return liTag;
        },

        _setAttributes: function (data, element) {
            for (var key in data) {
                if (key == "class")
                    element.addClass(data[key]);
                else
                    element.attr(key, data[key]);
            }
        },

        _addArrow: function (topArrows, bottomArrows) {
            if (topArrows) {
				var arrowIcon = (this.model.orientation == "horizontal") ? "e-arrowhead-down" : "e-arrowhead-right";
				this.element.find('>li.e-list:has("> ul")').children('a').append(bbdesigner$('<span>').addClass("e-icon "+arrowIcon)).addClass("e-arrow-space");
			}
            else {
                this.element.find('>li.e-list:has("> ul")').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

            if (bottomArrows)
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').append(bbdesigner$('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
            else {
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

        },

        _intializeMenu: function () {
            if (this.model.height != 0) this._setHeight(this.model.height);
            if (this.model.width != 0) this._setWidth(this.model.width);
            if (this.model.menuType == "contextmenu")
                this.model.openOnClick = false;
            if (this.model.openOnClick) {
                this._hoverOpen = false;
                this._hoverClose = false;
            }
        },

        _setOrientation: function (val) {
            if (val == "horizontal") {
                this.element.removeClass("e-vertical e-horizontal").addClass("e-horizontal");
            } else {
                this.element.removeClass("e-horizontal e-vertical").addClass("e-vertical");
            }
            if (val == "vertical") {
                this._removePopup();
            }
        },

        _setHeight: function (value) {
            if (this.model.orientation == "horizontal" && value !=="auto") {
                value = typeof value === "number" ? value + "px" : value;
                this.element.find('> li').find('>a:first').css("line-height", value);
                if (this.model.showRootLevelArrows)
                    this.element.find('> li').find('>a:first').find('> span:first').css({ "line-height": value, "top": "0px" })
                if ((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical")){
                    if (bbdesigner$("li.e-ham-wrap").length > 0) {                        
                        this.element.find("li.e-ham-wrap").children("div").css({ "line-height": value });
                        this.element.find("li.e-ham-wrap").css({ "height": value });
                        if(bbdesigner$(".e-menu-popwrap").length>0)
                        this.popupWrapper.find("a.e-menulink").css({ "line-height":value });                        
                    }
                }
            }
            else
                this.element.height(value);
        },

        _setWidth: function (value) {
            this.element.css("width", value);
            if (this.model.orientation === "horizontal" && value !== "auto") {
                if (this.model.isResponsive)
                    this.resWrap.css("width", value);
            }
            if (this.model.orientation == "horizontal" &&  ((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical")) ) {
                this._calculateOverflowItems();
            }
            
        },        
        _setOverflowDimensions:function(property,value){
            if ((this.model.menuType != BoldBIDashboard.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
                value = typeof value == "number" ? value + "px" : value;
                if (property == "height") this.popupWrapper.css({ height: value });
                else if (property == "width") this.popupWrapper.css({ width: value });                           
                this._addOverflowItems();
        },

        _setRTL: function (isRTL) {
            if (isRTL) {
                this.element.removeClass("e-rtl").addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
            if (isRTL && this.model.orientation === "horizontal")
                this.wrapper.removeClass("e-menu-rtl").addClass("e-menu-rtl");
            else
                this.wrapper.removeClass("e-menu-rtl");
			this.model.subMenuDirection = isRTL ? "left" : "right";
        },

        _setSubMenuDirection: function (direction) {
            if (direction != "left" && direction != "right")
                this.model.subMenuDirection = this.model.enableRTL ? "left" : "right";
        },

        _setAnimation: function (value) {
            value === "none" ? (this._showAnim = "none", this._hideAnim = "none") : (this._showAnim = "slideDown", this._hideAnim = "slideUp");
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _centerAlign: function (enableCenterAlign) {
            if (this.model.orientation == "horizontal" && enableCenterAlign)
                this.element.css('text-align', 'center');
            else
                this.element.css('text-align', 'inherit');
        },
        _columnToSelect: function (mapper) {
            var column = [], queryManager = BoldBIDashboard.Query();
            if (BoldBIDashboard.isNullOrUndefined(mapper.query)) {
                for (var col in mapper) {
                    if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.fields["dataSource"].dataSource.url.match(mapper.tableName + "bbdesigner$"))
                    !BoldBIDashboard.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else
                queryManager = mapper.query;
            return queryManager;
        },


        _max_zindex: function () {
            var parents, bodyEle, maxZ, index;
            if (this.model.menuType == "contextmenu") {
                parents = bbdesigner$(this._targetElement).parents();
                parents.push(this._targetElement);
            }
            else
                parents = bbdesigner$(this.element).parents();
            bodyEle = bbdesigner$('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            bbdesigner$(bodyEle).each(function (i, ele) { parents.push(ele); });
            maxZ = Math.max.apply(maxZ, bbdesigner$.map(parents, function (e, n) {
                if (bbdesigner$(e).css('position') != 'static') return parseInt(bbdesigner$(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;

        },

        _recursiveFunction: function (items, menuText) {
            var context = this;
            var isFound = false;
            bbdesigner$.each(items, function (key, value) {
                if (value.Text == menuText) {
                    context.selectedItem = value;
                    isFound = true;
                    return false;
                }
                else if (value.ChildItems != null) {
                    context._recursiveFunction(value.ChildItems, menuText);
                }
                if (isFound)
                    return false;
            });
        },

        _contextMenu_Template: function () {
            if(this.element[0].id !="")
            var oldWrapper = bbdesigner$(".e-menu-wrap #" + this.element[0].id).get(0);
            if (oldWrapper)
                bbdesigner$(oldWrapper.parentElement).remove();
            this.model.orientation = "vertical";
            this.element.addClass(this.model.cssClass + " e-context");
			 this.element.css("display", "none");
            this._referenceElement = this.element.parent();
            bbdesigner$("body").append(this.element);
            this.wrapper.insertBefore(this.element);
            this.wrapper.append(this.element);
        },

        _closeMenu: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
        },

        _onMenuIntent: function (element, obj, canOpen) {
            obj._delayMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == true && canOpen) {
                    var showanim = obj._showAnim;
                    var hideanim = obj._hideAnim;
                    var showSpeed = obj._showSpeed;
                    var hideSpeed = obj._hideSpeed;
                    obj._show(element, showanim, hideanim);
                }
            }, this._showSpeed);
        },

        _onHide: function (element, obj, canHide) {
            obj._delaySubMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == false && canHide) {
                    var id = obj._id;
                    var hideanim = obj._hideAnim;
                    var hideSpeed = obj._hideSpeed;
                    obj._closeAll();
                }

            }, obj._hideSpeed);
        },

        _subMenuPos: function (element, direction) {
            var pos = bbdesigner$(element).offset();
            var subMenuLeft, subMenuRight ;
            var posLeft = pos.left;
            var subMenu = bbdesigner$('ul:first', element);
            var menuWidth = bbdesigner$(element).outerWidth();
            if (pos == null || pos == undefined)
                return false;
            var submenuWidth = subMenu.outerWidth() + 1; // +1 for the space between menu and submenu
            var left = this.model.container ? bbdesigner$(this.model.container).width() + bbdesigner$(document).scrollLeft() : document.documentElement.clientWidth + bbdesigner$(document).scrollLeft();
            if (this.model.menuType == "normalmenu") {
                if (bbdesigner$(element.parentNode).is(this.element)) {
                    if (this.model.orientation == "horizontal"){
                        subMenu.css("top", bbdesigner$(element).outerHeight() + "px");
                        if (!this.model.enableRTL) {
                            subMenuLeft = (left < (posLeft + submenuWidth)) ? ((posLeft + submenuWidth) - left) : 1;
                            subMenu.css("left", (subMenuLeft *(-1)) + "px");
                        }
                        else {
                            subMenuRight = (((posLeft + menuWidth) - submenuWidth) < 0) ? ((posLeft + menuWidth) - submenuWidth) : 1;
                            subMenu.css({ "left": "auto", "right": subMenuRight + "px" });
                        }
                    }
                    else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth &&  posLeft > submenuWidth))
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                    else {
                        subMenu.css("left", (bbdesigner$(element).outerWidth() + 4) + "px");
                    }
                } else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth &&  posLeft > submenuWidth)) {
                    subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                else {
                    subMenu.css("left", (bbdesigner$(element).outerWidth() + 4) + "px");
                    var submenuHeight = subMenu.outerHeight();
                    var winHeight = bbdesigner$(window).height();
                    var submenuTop = (winHeight - (pos.top - bbdesigner$(window).scrollTop()));
                    if (winHeight < submenuHeight) {
					     var menuPos = pos.top - bbdesigner$(window).scrollTop();
						subMenu.css("top", -(menuPos) + 4 + "px");
					}
                    else if (submenuTop < submenuHeight) {
                        var menuPos = submenuTop - submenuHeight;
						subMenu.css("top", menuPos - 2 + "px");
					}
					else subMenu.css("top", "");
				}
            }
            else {
                left -= (pos.left + (2 * submenuWidth) + 4);
                if (left < 0) {
                    var menuLeftPos = (submenuWidth == null) ? "-206.5px" : "-" + (submenuWidth + 5) + "px";
                    subMenu.css("left", menuLeftPos);
                }
                else {
                    if (subMenu.parent('li.e-list').parent('ul').width() && direction == "right") {
                        subMenu.css("left", (subMenu.parent('li.e-list').parent('ul').width() + 4) + "px");
                    }
                    else if (pos.left > submenuWidth)
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                var submenuHeight = subMenu.outerHeight();
                if ((pos.top + submenuHeight > bbdesigner$(window).height())) {
                    var top = -(submenuHeight) + bbdesigner$(element).outerHeight();
                    if (submenuHeight > (pos.top + (bbdesigner$(element).outerHeight() / 2))) {
                        subMenu.css("top", -(submenuHeight / 2) + "px");
                    }
                    else
                        subMenu.css("top", top + "px");
                }
                else
                    subMenu.css("top","0px");
            }
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin + " e-menu-wrap");
        },

        _setSeparator: function (separator) {
            if (separator){
                this.element.addClass("e-separator");
                if (bbdesigner$('.e-menu-popwrap').length>0 && !BoldBIDashboard.isNullOrUndefined(this.ulTag))
                    this.ulTag.addClass("e-separator");     
            }
            else this.element.removeClass("e-separator");
        },

        _contextMenuEvents: function (action) {
            this[action](bbdesigner$(this.model.contextMenuTarget), "mouseup taphold", this._ContextMenuHandler);
            this[action](this.element, "contextmenu", this._onDefaultPreventer);
            this[action](bbdesigner$(this.model.contextMenuTarget), "contextmenu", this._onDefaultPreventer);
            this[action](bbdesigner$(document), "mousedown", this._onContextClose);
        },

        _show: function (element, showanim, hideanim) {
            var siblingElement;
            var sibling = bbdesigner$('> ul', element);
			var zIndex = this._max_zindex();
            sibling.attr({ "aria-hidden": false });
            this._hideAnimation(bbdesigner$(element).siblings().find(' > ul:visible'), hideanim);
            if (!(bbdesigner$.inArray(this._disabledMenuItems, element) > -1)) {
                if (sibling.css('display') != "none") {
                    siblingElement = this.model.openOnClick ? bbdesigner$(sibling) : sibling.children().find('> ul');
                    this._hideAnimation(siblingElement, hideanim);
                }
                else bbdesigner$('> ul', element).children().find('> ul').hide();
                this._subMenuPos(element, this.model.subMenuDirection);
                sibling.css({ "z-index": zIndex + 1 });
				bbdesigner$(element).children('span.e-menu-arrow').css({"z-index": zIndex + 2 });
                if (bbdesigner$('> ul', element).css('display') != 'block' && !bbdesigner$(element).hasClass("e-disable-item")) {
                    this._showAnimation(sibling, showanim);
                    sibling.closest('li').addClass('e-active e-mfocused');
                }
                if (bbdesigner$(element).siblings("li.e-active").length > 0)
                    bbdesigner$(element).siblings("li.e-active").removeClass("e-active e-mfocused");
            }
        },

        _closeAll: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
            this._hideAnimation(this.element.find('> ul:visible'), this._hideAnim);
        },

        _showAnimation: function (element, anim) {
            switch (anim) {
                case "slideDown":
                    element.slideDown(this.model.enableAnimation ? 200 : 0); break;
                case "none":
                    element.css("display", "block"); break;
            }
        },

        _hideAnimation: function (element, anim) {
            switch (anim) {
                case "slideUp":
                    bbdesigner$(element).attr({ "aria-hidden": true });
                    element.slideUp(this.model.enableAnimation ? 100 : 0); break;
                case "none":
                    element.css("display", "none"); break;
            }
            element.closest('li').removeClass('e-active e-mfocused');
        },

        _removeValue: function (text, disableList) {
            var bbdesigner$browInfo = BoldBIDashboard.browserInfo(), elementText;
            bbdesigner$browInfo.version === "8.0" && bbdesigner$browInfo.name === "msie" ? elementText = text[0].outerText : elementText = text[0].textContent;
            var count = bbdesigner$(disableList).length, i = 0;
            var childEle = bbdesigner$(disableList).children('a').length == 0 ? bbdesigner$(disableList).children('span') : bbdesigner$(disableList).children('a');
            while (i <= count) {
                if (bbdesigner$(childEle[i]).text() === elementText)
                    return i;
                i++;
            }
        },

        _createSubLevelItem: function (target, element) {
            var ulTag;
            ulTag = bbdesigner$(document.createElement('ul'));
            ulTag.append(element);
            target.append(ulTag);
            target.attr({ 'role': 'menu', 'aria-haspopup': 'true' });
            target.addClass("e-haschild");
            this.element.find('li:has("> ul")').find('> a,>span').addClass('aschild e-arrow-space');
            this._insertArrows(ulTag);
        },

        _insertArrows: function (ulTag) {
            if (this.model.showRootLevelArrows)
                ulTag.find('>a,>span').append(bbdesigner$('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
            else
                ulTag.find('>a,>span').removeClass("e-arrow-space").find('>span.e-icon').remove();

            if (this.model.showSubLevelArrows)
                ulTag.parent('li.e-list:has(>ul)').children('a,span').append(bbdesigner$('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
            else
                ulTag.parent('li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").find('>span.e-icon').remove();
        },

        _createMenuItem: function (item) {
            var liTag, aTag, imgTag, spanTag;
            liTag = bbdesigner$(document.createElement('li'));
            liTag.attr({ "class": 'e-list', "role": "menuitem" });
            if (item["htmlAttribute"]) this._setAttributes(item["htmlAttribute"], liTag);
            if (item["text"] && item["text"] != "") {
                aTag = bbdesigner$(document.createElement('a'));
				aTag.attr({ "class": 'e-menulink'});
                if (item["imageUrl"] && item["imageUrl"] != "") {
                    imgTag = bbdesigner$(document.createElement('img'));
                    imgTag.attr('src', item["imageUrl"]);
                    if (item["imageAttribute"]) this._setAttributes(item["imageAttribute"], imgTag);
                    aTag.append(imgTag);
                }
                else if (item["spriteCssClass"] && item["spriteCssClass"] != "") {
                    spanTag = bbdesigner$(document.createElement('span'));
                    spanTag.addClass(item["spriteCssClass"]);
                    aTag.append(spanTag);
                }
                aTag.append(item["text"]);
                if (item["linkAttribute"]) this._setAttributes(item["linkAttribute"], aTag);
                if (item["url"])
                    aTag.attr('href', item["url"]);
                liTag.append(aTag);
            }
            if (item["id"]) {
                liTag.prop("id", item["id"]);
            }
            if (!this.model.enabled)
                liTag.addClass("e-disable-item");
            return liTag;
        },

        _insertNode: function (itemCollection, targetNode, operation) {
            var item = 0, targetList = 0, target = 0, targetCollection = [];
            if (bbdesigner$(targetNode).is(this.element))
                targetCollection.push(this.element);
            else
                typeof (targetNode) === "string" ? targetCollection.push(this.element.find(targetNode)) : typeof (targetNode) === "undefined" ? targetCollection.push(this.element) : targetCollection.push(targetNode);
            for (targetList = 0; targetList < targetCollection.length; targetList++) {
                for (target = 0; target < targetCollection[targetList].length; target++)
                    for (item = 0; item < itemCollection.length && !BoldBIDashboard.isNullOrUndefined(itemCollection[item]) ; item++)
                        this._addItem(itemCollection[item], targetCollection[targetList][target], operation);
            }
        },

        _addItem: function (item, target, operation) {
            var element, targetElement;
            this._wireEvents("_off");
            element = this._createMenuItem(item);
            target = target === "default" ? bbdesigner$("#" + item["parentId"]) : bbdesigner$(target);
            switch (operation) {
                case "insert":
                    bbdesigner$(target).is(this.element) ? targetElement = target : targetElement = target.children('ul');
                    targetElement.length != 0 ? targetElement.append(element) : this._createSubLevelItem(target, element);
                    break;
                case "insertBefore":
                    if (!bbdesigner$(target).is(this.element))
                        element.insertBefore(target);
                    else
                        target.prepend(element);
                    break;
                case "insertAfter":
                    if (!bbdesigner$(target).is(this.element))
                        element.insertAfter(target);
                    else
                        target.append(element);
                    break;
            }
            this._wireEvents("_on");
        },

        _removeItem: function (item) {
            if (item.siblings('li').length == 0) {
                item.closest("ul").siblings('a.aschild').removeClass("aschild e-arrow-space").children('span.e-icon').remove();
                !item.closest("ul").hasClass("e-menu") ? item.closest("ul").remove() : item.remove();
            }
            else
                item.remove();
        },

        _hiddenElement: function (ele) {
            if (ele.length > 0 && (bbdesigner$.inArray(ele[0], this._hiddenMenuItems) == -1)) {
                ele.addClass("e-hidden-item");
                this._hiddenMenuItems.push(ele[0]);
            }
        },

        _showElement: function (ele) {
            if (ele.length > 0 && (bbdesigner$.inArray(ele[0], this._hiddenMenuItems) > -1)) {
                ele.removeClass("e-hidden-item");
                this._hiddenMenuItems.splice(this._hiddenMenuItems.indexOf(ele[0]), 1);
            }
        },

        _getNodeByID: function (node) {
            (typeof node != "object" && node != "") && (node = this.element.find(".e-list" + node));
            return bbdesigner$(node);
        },

        _processItems: function (node, bool) {
            var ele = this._getNodeByID(node);
            for (var i = 0; i < ele.length; i++) bool ? this._showElement(bbdesigner$(ele[i])) : this._hiddenElement(bbdesigner$(ele[i]));
        },

        insert: function (item, target) {
            this._insertNode(item, target, "insert");
        },

        insertBefore: function (item, target) {
            this._insertNode(item, target, "insertBefore");
        },

        insertAfter: function (item, target) {
            this._insertNode(item, target, "insertAfter");
        },

        remove: function (targetCollection) {
            var target = 0, innerTarget = 0;
            for (target = 0; target < targetCollection.length; target++) {
                targetCollection[target] = typeof (targetCollection[target]) === "string" ? (this.element.find(targetCollection[target])) : targetCollection[target];
                for (innerTarget = 0; innerTarget < targetCollection[target].length; innerTarget++)
                    (targetCollection[target][innerTarget].tagName === "LI" || targetCollection[target][innerTarget].tagName === "UL") ? this._removeItem(bbdesigner$(targetCollection[target][innerTarget])) : targetCollection[target][innerTarget].remove();
            }
        },

        showContextMenu: function (locationX, locationY, targetElement, e, update) {
            this._closeMenu();
            this._eventArgs = e;
            if (!BoldBIDashboard.isNullOrUndefined(e) && this._checkForExclusion(e.target)) return;
            if (this._trigger("beforeOpen", { target: targetElement, events: e })) return false;
            if (this._preventContextOpen) {
                if (!BoldBIDashboard.isNullOrUndefined(targetElement))
                    this._targetElement = targetElement;
                else if (!BoldBIDashboard.isNullOrUndefined(target))
                    this._targetElement = target;
                else
                    this._targetElement = this.element;
                if (update) {
                    var position = this._calculateContextMenuPosition(e);
                    locationX = position.X;
                    locationY = position.Y;
                }
                this.element.css({ "left": locationX, "top": locationY });
                this.element.css({ "z-index": this._max_zindex() + 1 });
                this._showAnimation(this.element, this._showAnim);
                this._isContextMenuOpen = true;
                this.element.focus();

                this._trigger("open", { target: targetElement });
                this._on(BoldBIDashboard.getScrollableParents(bbdesigner$(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
            }
            return false;
        },

        _checkForExclusion: function (e) {
            if (!BoldBIDashboard.isNullOrUndefined(this.model.excludeTarget)) {
                var excludeTargets = this.model.excludeTarget.split(",");
                for (var target = 0; target < excludeTargets.length; target++) {
                    if (bbdesigner$(e).closest(this.model.excludeTarget).is(bbdesigner$.trim(excludeTargets[target])))
                        return true;
                }
            }
        },


        hideContextMenu: function (e) {
            this._closeMenu();
            this.element.find(".e-mhover").removeClass("e-mhover");
            this.element.find(".e-mfocused").removeClass("e-mfocused");
            this._hideAnimation(this.element, this._hideAnim);
            this._isContextMenuOpen = false;

            this._trigger("close", bbdesigner$.extend({ events: e }, e));
            this._off(BoldBIDashboard.getScrollableParents(bbdesigner$(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
        },


        disableItem: function (itemToDisable) {
            var isMenuItem = bbdesigner$(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return bbdesigner$.trim(bbdesigner$(this).text()) === itemToDisable; });
            if (isMenuItem.length > 0 && !(bbdesigner$.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().addClass("e-disable-item").attr({ "aria-disabled": true });
                isMenuItem.parent().find('>a.aschild span.e-icon').addClass("e-disable");
                this._disabledMenuItems.push(isMenuItem.parent()[0]);
            }
        },


        disableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToDisable = this.element.find("#" + itemId) ? this.element.find("#" + itemId)[0] : undefined;
                if (itemToDisable && !(bbdesigner$.inArray(itemToDisable, this._disabledMenuItems) > -1)) {
                    bbdesigner$(itemToDisable).addClass("e-disable-item").attr({ "aria-disabled": true });
                    bbdesigner$(itemToDisable).find('>a.aschild span.e-icon').addClass("e-disable");
                    this._disabledMenuItems.push(itemToDisable);
                }
            }
        },

        getHiddenItems:function(){
            return this._hiddenMenuItems;
        },

        hideItems: function (node) {
            if (typeof node == "object" && node.length !== undefined) {
                for (var i = 0; i < node.length; i++) this._processItems(node[i], false);                
            }
            else this._processItems(node, false);
        },

        showItems:function(node){
            if (typeof node == "object" && node.length !== undefined) {
                for (var i = 0; i < node.length; i++) this._processItems(node[i], true);
            }
            else this._processItems(node, true);
        },

        enableItem: function (itemToEnable) {
            var isMenuItem = bbdesigner$(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return bbdesigner$.trim(bbdesigner$(this).text()) === itemToEnable; });
            if (isMenuItem.length > 0 && (bbdesigner$.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().removeClass("e-disable-item").attr({ "aria-disabled": false });
                isMenuItem.parent().find('>a.aschild span.e-icon').removeClass("e-disable");
                var index = this._removeValue(isMenuItem, this._disabledMenuItems);
                this._disabledMenuItems.splice(index, 1);
            }
        },


        enableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToEnable = this.element.find("#" + itemId)[0];
                if (itemToEnable && (bbdesigner$.inArray(itemToEnable, this._disabledMenuItems) > -1)) {
                    bbdesigner$(itemToEnable).removeClass("e-disable-item").attr({ "aria-disabled": false });
                    bbdesigner$(itemToEnable).find('>a.aschild span.e-icon').removeClass("e-disable");
                    for (var i = this._disabledMenuItems.length - 1; i >= 0; i--) {
                        if (this._disabledMenuItems[i].id == itemId) {
                            this._disabledMenuItems.splice(i, 1);
                        }
                    }
                }
            }
        },


        disable: function () {
            this.model.enabled = false;
            var menuItemCollection = this.element.find('>li[class~=e-list]');
            var proxy = this;
            bbdesigner$.each(menuItemCollection, function (key, value) {
                if (!(bbdesigner$.inArray(value, proxy._disabledMenuItems) > -1))
                {
                    bbdesigner$(value).addClass("e-disable-item").attr({ "aria-disabled": true });
                    bbdesigner$(value).find('>a.aschild span.e-icon').addClass("e-disable");
                    proxy._disabledMenuItems.push(value);
                }
                
            });
        },


        enable: function () {
            var proxy = this;
            this.model.enabled = true;
            var menuItemCollection = this.element.find('li.e-disable-item');
            bbdesigner$.each(menuItemCollection, function (key, value) {
                bbdesigner$(value).removeClass("e-disable-item").attr({ "aria-disabled": false });
                bbdesigner$(value).find('>a.aschild span.e-icon').removeClass("e-disable");
                proxy._disabledMenuItems.pop(value);
            });
        },

        show: function (locationX, locationY, targetElement, e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.showContextMenu(locationX, locationY, targetElement, e, false);
            else
                this.element.css("display", "block");
        },

        hide: function (e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.hideContextMenu(e);
            else {
                this._closeMenu();
                this.element.css("display", "none");
            }
        },

        _wireEvents: function (action) {
            this[action](this.element.find("li.e-list"), "mouseout", this._mouseOutHandler);
            this[action](this.element.find("li.e-list"), "mouseover", this._mouseOverHandler);
            this[action](this.element.children(), "click", this._onClickHandler); 
            this[action](this.element, "keydown", this._onKeyDownHandler);
            this[action](this.element, "focus", this._OnFocusHandler);
            this[action](this.element, "blur", this._OnFocusOutHandler);
            if (this.model.menuType == "contextmenu" && bbdesigner$(this.model.contextMenuTarget)[0] != null) {
                this._contextMenuEvents(action);
            }
            if (this.model.menuType != "contextmenu") {
                this[action](bbdesigner$(document), "click", this._onDocumentClick);
                this[action](this.element, "mousedown", this._onMouseDownHandler);
            }
            this[action](bbdesigner$(window),"resize", bbdesigner$.proxy(this._onResize, this));            
        },

        _mouseOverHandler: function (event) {
            var element, itemId = "";
            this.element.find(".e-mhover").removeClass("e-mhover");
            event.currentTarget = bbdesigner$(event.target).closest("li")[0];
            if (!bbdesigner$(event.currentTarget).hasClass('e-disable-item'))
                bbdesigner$(event.currentTarget).addClass("e-mhover");
            else this._isFocused = false;
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = true;
            this._isMenuOpen = true;
            if (bbdesigner$(event.currentTarget.parentNode.parentNode).is(this.element)) {
                this._isSubMenuOpen = false;
            }
            else {
                this._isSubMenuOpen = true;
            }
            if (event.currentTarget.nodeName == "LI")
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI")
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            if (!bbdesigner$(event.currentTarget).hasClass('e-disable-item'))
                this._onMenuIntent(element, this, this._hoverOpen);
            if (!(bbdesigner$.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = bbdesigner$(element).children('a,span').text();
                itemId = !BoldBIDashboard.isNullOrUndefined(element) ? bbdesigner$(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseover", bbdesigner$.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onMouseDownHandler: function (e) {
            if (bbdesigner$(e.target).hasClass('e-menu')) this._isFocused = false;
        },


        _mouseOutHandler: function (event) {
            var element, itemId = "";
            bbdesigner$(event.currentTarget).removeClass("e-mhover");
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = false;
            this._isMenuOpen = false;

            if (event.currentTarget.nodeName == "LI")
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI")
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            this._onHide(element, this, this._hoverClose);
            if (!(bbdesigner$.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = bbdesigner$(element).children('a,span').text();
                itemId = !BoldBIDashboard.isNullOrUndefined(element) ? bbdesigner$(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseout", bbdesigner$.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onClickHandler: function (event) {
            var element, itemId = "" , parentId, parentText;
            this._isFocused = true;
            var openOnClickStart = false;
            if (!bbdesigner$(event.target).closest("li.e-list").hasClass('e-disable-item') && bbdesigner$(event.target).closest("li.e-list").length > 0) {
                element = bbdesigner$(event.target).closest("li.e-list")[0];
                if (bbdesigner$(element).is(this.element.find(">li.e-list")))
                    this._activeElement = element;
            }
            else {
                if (bbdesigner$(event.target).is(this.element))
                    this._activeElement = this.element.find(">li:first");
                return;
            }
            if (bbdesigner$(event.target).is("a") && bbdesigner$(element).find(">a,>span").hasClass('aschild') && this.model.openOnClick) {
                this._isFocused = false;
            }
            if (!this._hoverOpen && bbdesigner$(element).find(">a,>span").hasClass('aschild')) {
                this._show(element, this._showAnim, this._hideAnim);
                this._hoverOpen = false;
                openOnClickStart = true;
            }
            if (!(bbdesigner$.inArray(element, this._disabledMenuItems) > -1)) {
                //Check if Context Menu, then hide the context menu firing the events
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && !bbdesigner$(element).hasClass("e-haschild")) {
                        this._hideAnimation(this.element, this._hideAnim);
                        this._isContextMenuOpen = false;

                        this._trigger("close", bbdesigner$.extend({ events: event }, event));
						this._off(BoldBIDashboard.getScrollableParents(bbdesigner$(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
                    }
                }
                if (!openOnClickStart) {



                    if (!bbdesigner$(element).find(">a,>span").hasClass("aschild")) {
                        this._closeMenu();
                        if (this.model.openOnClick)
                            this._hoverOpen = false;
                    }
                }
                var menuText = bbdesigner$(element).children('a,span').text();
                var parent = bbdesigner$(element).closest("ul").parent("li");
                if (parent.length != 0) {
                    parentId = BoldBIDashboard.isNullOrUndefined(parent.attr("id")) ? null : parent.attr("id");
                    parentText = parent.children('a,span').text();
                }
                else {
                    parentId = null;
                    parentText = null;
                }
                itemId = !BoldBIDashboard.isNullOrUndefined(element) ? bbdesigner$(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "selectedItem": this.selectedItem, "ID": itemId, "parentId": parentId, "parentText": parentText };
                this._trigger("click", bbdesigner$.extend({ events: eventArgs }, eventArgs));
                this.selectedItem = null;
                if (this.model.openOnClick && this.model.menuType != "contextmenu")
                    this.element.focus();
            }
        },


        _onKeyDownHandler: function (e) {
            if( e.target && e.target.nodeName && bbdesigner$( e.target ).closest( "input, textarea" ).length > 0) return true;
            if (this.model.menuType == "contextmenu" && !this._isContextMenuOpen) return;
            var element, focusEle, itemId = "", hoverElement = this.element.find(".e-mhover"), focusedElement = this.element.find(".e-mfocused"), currentElement, liVisible;
            if (!bbdesigner$(hoverElement).length > 0 && bbdesigner$(this._activeElement).length > 0)
                hoverElement = focusedElement = bbdesigner$(this._activeElement);

            if (e.keyCode == 9) {
                this._isFocused = false;
                this._OnFocusOutHandler();
            }
            else if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40)
                e.preventDefault();

            if (e.keyCode == 40) {
                if (this.model.orientation == "horizontal") {
                    if (this.element.find(">li.e-mhover").children("ul").length > 0 || bbdesigner$(this._activeElement).length > 0) {
                        if (bbdesigner$(hoverElement).children("ul").css('display') === "none")
                            this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
                        hoverElement.removeClass("e-mhover e-mfocused").children("ul:first").find("li:first").addClass("e-mhover");
                        this._activeElement == null ? hoverElement.addClass("e-mfocused") : bbdesigner$(this._activeElement).addClass("e-mfocused");
                    } else {
                        liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        bbdesigner$(hoverElement[hoverElement.length-1]).removeClass("e-mfocused e-mhover");
                        focusEle = bbdesigner$(liVisible[liVisible.index(hoverElement) + 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                        focusEle.addClass("e-mhover");
                    }
                }
                else if (this.model.orientation != "horizontal") {
                    if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    hoverElement.removeClass("e-mfocused e-mfocused");
                    if (hoverElement.length > 0) {
                        hoverElement.removeClass("e-mhover");
                        focusEle = bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                    } else focusEle = liVisible.first();
                    focusEle.addClass("e-mhover");
                }
            }
            if (e.keyCode == 39) {
                if (this.model.orientation == "horizontal" && (this.element.find(">li.e-list").hasClass("e-mhover") || bbdesigner$(this._activeElement).length > 0)) {
                    hoverElement.removeClass("e-mfocused e-mhover");
                    liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    focusEle = bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                    focusEle.addClass("e-mhover");
                }
                else if (bbdesigner$(hoverElement).children("ul").length > 0) {
                    hoverElement.removeClass("e-mfocused e-mhover");
                    var firstChild = hoverElement.children("ul:first").find("li:first");
                    this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
                    liVisible = hoverElement.addClass('e-mfocused').children("ul:first").children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    focusEle = bbdesigner$(liVisible[liVisible.index(firstChild)]).length > 0 ? bbdesigner$(liVisible[liVisible.index(firstChild)]) : liVisible.first();
                    focusEle.addClass("e-mhover");
                }
                else if (hoverElement.children("ul").length <= 0) {
                    if (this.model.orientation == "horizontal" && hoverElement.parent().closest('.e-list').parent().hasClass('e-menu')) {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        bbdesigner$(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]) : bbdesigner$(liVisible[liVisible.index(focusedElement.first())]);
                        focusEle.addClass("e-mhover");
                    }
                }
            }

            if (e.keyCode == 38) {
                if (this.model.orientation == "horizontal") {
                    liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    hoverElement.removeClass("e-mfocused e-mhover");
                    focusEle = bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                }
                else if (this.model.orientation != "horizontal") {
                    if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    if (hoverElement.length > 0) {
                        hoverElement.removeClass("e-mfocused e-mhover");
                        focusEle = bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                    } else focusEle = liVisible.last();
                }
                focusEle.addClass("e-mhover");
            }

            if (e.keyCode == 37) {
                if (this.model.orientation == "horizontal") {
                    if (this.element.find(">li.e-list").hasClass("e-mhover") || bbdesigner$(this._activeElement).length > 0) {
                        hoverElement.removeClass("e-mfocused e-mhover");
                        liVisible = this.element.find('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                        focusEle.addClass("e-mhover");
                    }
                    else {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        bbdesigner$(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused e-active");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        if (hoverElement.parent().closest('.e-list').parent('.e-menu').length > 0)
                            focusEle = bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]).length > 0 ? bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]) : liVisible.last();
                        else
                            focusEle = bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : liVisible.last();
                        focusEle.addClass("e-mhover");
                    }
                }
                else if (hoverElement.parent(".e-menu").length == 0 || (this.model.menuType == "contextmenu" && hoverElement.parent("ul.e-context").length == 0)) {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        bbdesigner$(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? bbdesigner$(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : bbdesigner$(liVisible[liVisible.index(focusedElement.last())]);
                        focusEle.addClass("e-mhover");
                }
            }
            if (e.keyCode == 13) {
                var menuText = bbdesigner$(hoverElement).children('a,span').text();
                itemId = !BoldBIDashboard.isNullOrUndefined(bbdesigner$(hoverElement)[0]) ? bbdesigner$(hoverElement)[0].id : "";
                var eventArgs = { "menuId": this.element[0].id, "text": menuText, "selectedItem": focusedElement, "ID": itemId };
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && hoverElement.length > 0 && !focusedElement.hasClass("e-disable-item")) {
                        if (this.model.click)
                            this._trigger("click", bbdesigner$.extend({ events: eventArgs }, eventArgs));
                        this.selectedItem = null;
                        this.hideContextMenu(e);
                    }
                } else {
                    if (hoverElement.length > 0 && !hoverElement.hasClass("e-disable-item")) {
                        if (bbdesigner$(hoverElement).find(">a,>span").hasClass('aschild') && bbdesigner$(hoverElement).children("ul").css('display') === "none") {
                            this._show(hoverElement[0], this._showAnim, this._hideAnim);
                            hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                        }
                        else {
                            this.element.find(".e-mhover >a,.e-mhover >span ").focus();
                            this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                            this._closeAll();
                        }
                        if (BoldBIDashboard.isNullOrUndefined(bbdesigner$(hoverElement).find(">a").attr("href")))
                            this._trigger("click", bbdesigner$.extend({ events: eventArgs }, eventArgs));
                    }
                }
            }
            if (e.keyCode == 27) {
                if (this.model.menuType == "contextmenu")
                    this.hideContextMenu(e);
                else
					this.element.find("li.e-list").removeClass("e-mhover");
                    this.element.find('li.e-list:has("> ul")').find('> ul:visible').parents("li.e-list").addClass("e-mhover");
                    this._closeAll();
            }
            if (bbdesigner$(e.target).is(this.element) && e.target.parentNode) {
                if (hoverElement.length)
                    element = hoverElement;
            }
            else
                return false;
            if (!(bbdesigner$.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = bbdesigner$(element).children('a,span').text();

                itemId = !BoldBIDashboard.isNullOrUndefined(element) ? bbdesigner$(element)[0].id : "";
                if (this.element.find('li.e-mfocused.e-mhover').length || e.keyCode == 13)
                    currentElement = (e.keyCode == 13) ? hoverElement : this.element.find('li.e-mfocused.e-mhover');
                var eventArgs = { "text": menuText, "element": element, "targetElement": currentElement , "event": e, "ID": itemId };

                this._trigger("keydown", bbdesigner$.extend({ events: eventArgs }, eventArgs));
            }
            this._activeElement = null; focusedElement = this.element.find(".e-mfocused");
        },

        _OnFocusHandler: function (event) {
            if (this.model.menuType != "contextmenu" && !this.element.find(">li:first").hasClass("e-disable-item") && this._isFocused && this.element.find(".e-mhover").length == 0 && bbdesigner$('li.e-ham-wrap').length ==0) {
                this.element.find(">li:first").addClass("e-mhover");
            }
            else this._isFocused = true;
            if (this.model.menuType != "contextmenu")
                this._activeElement = this.element.find(">li:first");
        },

        _OnFocusOutHandler: function () {
            if (!this._isFocused) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
            }
            this._isFocused = false;
        },

        _onDocumentClick: function (event) {
            if (this.model.openOnClick)
                this._hoverOpen = false;
            if (!bbdesigner$(event.target).parents(".e-menu").is(this.element)) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
                this._isFocused = true;
            }
            if ((!bbdesigner$(event.target).parents("ul.e-menu").is(this.popupWrapper)) && (!bbdesigner$(event.target).hasClass('e-ham-wrap')) && (!(bbdesigner$(event.target).parent().hasClass('e-ham-wrap'))) && (!bbdesigner$(event.target).hasClass('e-hamburger')) && (!bbdesigner$(event.target).parent("li").hasClass("e-haschild")) && (!bbdesigner$(event.target).is('span.e-icon.e-arrowhead-down')) && !(this._isOverflowPopupOpen()) && this.model.menuType != "contextmenu" && bbdesigner$("li.e-ham-wrap").length > 0) {
                this._overflowClose();
            }           
        },


        _ContextMenuHandler: function (e) {
            var isRightClick = false;
            if (e.type == "taphold" && e.button != 0)
                isRightClick = true;
            else if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            var targetElement = e.target;
            if (isRightClick) {
                var evt = e;
                if (e.type == "taphold") {
                    if (e.options.type == "touchstart") evt = e.options.touches[0];
                    else evt = e.options;
                }
                var showSpeed = this._showSpeed;
                this.showContextMenu(null, null, targetElement, evt, true);
            }
            else {
                if (this._isContextMenuOpen) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                }
            }
        },

        _calculateContextMenuPosition: function (e) {
            var locationX, locationY;
            this.element.css({"top": "", "left": ""}); 
            locationX = (e.clientX + this.element.width() < bbdesigner$(window).width()) ? e.pageX : e.pageX - this.element.width();
            locationY = (e.clientY + this.element.height() < bbdesigner$(window).height()) ? e.pageY : (e.clientY > this.element.height()) ? e.pageY - this.element.height() : bbdesigner$(window).height() - this.element.outerHeight();
            var bodyPos = bbdesigner$("body").css("position") != "static" ? bbdesigner$("body").offset() : { left: 0, top: 0 };
            locationX -= bodyPos.left, locationY -= bodyPos.top;
            return {
                X: locationX,
                Y: locationY
            };
        },


        _onDefaultPreventer: function (e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
        },


        _onContextClose: function (e) {
            var proxy = this;
            if (this._isContextMenuOpen) {
                var isRightClick = false;
                if (bbdesigner$(e.target).is(this.element) || bbdesigner$(e.target).parents(".e-context").is(this.element))
                    isRightClick = true;
                if (!isRightClick) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                    var parentElements = bbdesigner$(e.target).parents();
                    bbdesigner$.each(parentElements, function (index, value) {
                        if (value.id == proxy._ContextTargetId) {
                            return;
                        }
                    });

                }
            }
        }

    });

    BoldBIDashboard.Menu.Locale = BoldBIDashboard.Menu.Locale || {} ;
       
    BoldBIDashboard.Menu.Locale['default'] = BoldBIDashboard.Menu.Locale["en-US"] = {  	
        titleText: "Menu"
    };
    BoldBIDashboard.MenuType = {
        /**  support for list of items appears as normal menu in horizontal or vertical direction. */
        NormalMenu: "normalmenu",
        /**  support for list of items appears as menu when right clicked on target area, thereby preventing browser’s default right click.. */
        ContextMenu: "contextmenu"
    };

    BoldBIDashboard.Direction = {
        /**  support for Render sub menu popup in left direction. */
        Left: "left",
        /**  support for Render sub menu popup in Right direction. */
        Right: "right",
        /** Default opening direction of menu sub items */
        None: "none",
    };

    BoldBIDashboard.AnimationType = {
        /**  support for disable the AnimationType while hover or click an menu items. */
        None: "none",
        /**  support for enable the AnimationType while hover or click an menu items. */
        Default: "default"
    };

})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the Html CheckBox elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardCheckBox", "BoldBIDashboard.CheckBox", {
        _rootCSS: "e-checkbox",

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["checked", "checkState"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },


        defaults: {

            id: null,

            name: null,

            value: null,

            htmlAttributes: {},

            checked: false,

            enabled: true,

            enableTriState: false,

            showRoundedCorner: false,

            enablePersistence: false,

            cssClass: "",

            text: "",

            enableRTL: false,

            idPrefix: "BoldBIDashboard",

            size: "small",

            checkState: "uncheck",

            validationRules: null,

            validationMessage: null,
            validationMessages: null,

            beforeChange: null,

            change: null,

            create: null,

            destroy: null

        },

        dataTypes: {
            id: "string",
            name: "string",
            enablePersistence: "boolean",
            enableTriState: "boolean",
            size: "enum",
            enabled: "boolean",
            idPrefix: "string",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data"
        },
        observables: ["checked", "checkState"],
        checked: BoldBIDashboard.util.valueFunction("checked"),
        checkState: BoldBIDashboard.util.valueFunction("checkState"),

        _init: function (options) {
            this._cloneElement = this.element.clone();
            var browserInfo = BoldBIDashboard.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            this._isIE9 = (browserInfo.name == 'msie' && browserInfo.version == '9.0') ? true : false;
            this._isDevice = this._checkDevice();
            this._setValue();
            this._renderControl();
            this.model.enableRTL && this._setRTL();
            if (this.model.enabled)
                this._wireEvents();
            this._setEnabled(this.model.enabled);
			if (!BoldBIDashboard.isNullOrUndefined(options) && !BoldBIDashboard.isNullOrUndefined(options.validationMessage))
				this.model.validationMessages= this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._addAttr(this.model.htmlAttributes);
            if (this._isIE9 || this._isIE8) {
                // In IE8 and IE9, the text of the checkox will float to next line while the length of the text is high fixed this by adding the following class and procssed with CSS
                this.wrapper.addClass("e-tb-cell");
            }
        },
        _checkDevice: function () {
            return (BoldBIDashboard.isDevice() && BoldBIDashboard.isTouchDevice());
        },
        _setRTL: function () {
            bbdesigner$(this.maindiv).addClass("e-rtl");
        },
        _initValidator: function () {
            (!this.wrapper.closest("form").data("validator")) && this.wrapper.closest("form").validate();
        },
        _setValidation: function () {
            this.wrapper.find('input').rules("add", this.model.validationRules);
            var validator = this.wrapper.closest("form").data("validator");
            validator = validator ? validator : this.wrapper.closest("form").validate();
            name = this.wrapper.find('input').attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy.element.attr(key, value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._setEnabled(false);
                else if (key == "checked" && value == "checked") {
                    if (proxy.checked() instanceof Array)
                        proxy._updateCheckedItem();
                    else
                        proxy._checked(true);
                }
                else proxy.wrapper.attr(key, value);
            });
        },

        _triggerBeforeChange: function () {
            var data = { isChecked: this._isChecked, isInteraction: false };
            if (true == this._trigger("beforeChange", data)) return false;
        },

        _triggerChange: function () {
            var data = { isChecked: this._isChecked, checkState: this.checkState(), isInteraction: false };
            this._trigger("change", data);
        },

        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "checked":
                        bbdesigner$(this.maindiv).removeClass("e-material-animate");
                        if (this.model.beforeChange) this._triggerBeforeChange();
                        if (this.checked() instanceof Array) {
                            var checkedItemArray = BoldBIDashboard.util.getVal(options[prop]);
                            var lastVal = checkedItemArray[checkedItemArray.length - 1];
                            if (this.model.value == lastVal) this._isChecked = true;
                        }
                        else {
                            this._isChecked = BoldBIDashboard.util.getVal(options[prop]);
                            this.checked(this._isChecked);
                        }
                        this._isChecked ? this._checked() : this._unChecked();
                        if (this.model.change) this._triggerChange();
                        break;
                    case "enableTriState":
                        if (options[prop]) {
                            this.model.enableTriState = options[prop];
                            this._indeterminateState = options[prop];
                        }
                        break;
                    case "checkState":
                        if (this.model.enableTriState) {
                            if (this.model.beforeChange) this._triggerBeforeChange();
                            this._isChecked = BoldBIDashboard.util.getVal(options[prop]);
                            this.checkState(this._isChecked);
                            this._changeState(this._isChecked);
                            this._setCheckBoxState();
                            this.checked(this._isChecked);
                            if (this.model.checkState == "indeterminate")
                                this._setIndeterminate(this._indeterminateState);
                            if (this.checked() instanceof Array)
                                this._updateCheckedItem();
                            else if (options[prop] == "check") this._hiddenInput.removeAttribute("name");
                            else this._hiddenInput.setAttribute("name", this.model.name);
                            if (this.model.change) {
                                if (!(this.checked() instanceof Array)) this._isChecked = this.checkState() == "uncheck" ? false : true;
                                this._triggerChange();
                            }
                        }
                        break;
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        (options[prop]) ? this._setRTL() : bbdesigner$(this.maindiv).removeClass("e-rtl");
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.wrapper.find('input').rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[prop];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
					this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                         break;
					case "validationMessages":
					  this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.element.attr('name', options[prop]);
                        if (!this._isChecked || this.spanImg.hasClass("e-chk-indeter")) this._hiddenInput.setAttribute('name', options[prop]);
                        this.model.name = options[prop];
                        break;
                    case "value": this.element.attr('value', options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[prop]); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "htmlAttributes": this._addAttr(options[prop]); break;
                }
            }
        },

        _destroy: function () {
            this.element.removeClass("e-checkbox e-input");
            !this._cloneElement.attr("name") && this.element.attr("name") && this.element.removeAttr("name");
            !this._cloneElement.attr("value") && this.element.attr("value") && this.element.removeAttr("value");
            this.element.insertBefore(this.wrapper);
            this.wrapper.remove();
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.wrapper.removeClass(this.model.cssClass).addClass(skin);
                bbdesigner$("#" + this.model.idPrefix + this.model.id + "_wrapper").removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setValue: function () {
            this._indeterminateState = false;
            this._isChecked = false;
            var _id = this.element[0].getAttribute("id"), _name = this.element[0].getAttribute('name'), _value = this.element[0].getAttribute('value');
            !BoldBIDashboard.isNullOrUndefined(_id) && (this.model.id = _id);
            !BoldBIDashboard.isNullOrUndefined(_name) && (this.model.name = _name);
            if (!BoldBIDashboard.isNullOrUndefined(_value) && _value != "") this.model.value = _value;
            if (!this.checked() && !BoldBIDashboard.isNullOrUndefined(this.element.attr('checked'))) this._isChecked = true;
            BoldBIDashboard.isNullOrUndefined(this.model.name) && (this.model.name = this.model.id);
            this.model.enabled = this.model.enabled && !this.element.attr("disabled");
        },

        _setSize: function (val) {
            if (val == BoldBIDashboard.CheckboxSize.Medium) {
                bbdesigner$(this.innerdiv).removeClass('e-chkbox-small').addClass('e-chkbox-medium');
                bbdesigner$(this.maindiv).removeClass('e-check-small').addClass('e-check-medium');
				
			}
            else {
                bbdesigner$(this.innerdiv).removeClass('e-chkbox-medium').addClass('e-chkbox-small');
				bbdesigner$(this.maindiv).removeClass('e-check-medium').addClass('e-check-small');
			}
        },

        _setRoundedCorner: function (val) {
            if (val)
                this.span.addClass("e-corner");
            else
                this.span.removeClass("e-corner");
        },

        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },
        _setCheckBoxState: function () {
            if (this.model.enableTriState) {
                if (this.checkState() == "indeterminate")
                    this._indeterminateState = true;
                else if (this.checkState() == "check")
                    this._isChecked = true;
                else if (this.checkState() == "uncheck")
                    this._isChecked = false;
            }
            else if (this.checkState() == "indeterminate")
                this.checkState("uncheck");
        },
        _createElement: function (tagName, attrs) {
            var ele = document.createElement(tagName);
            this._setAttributes(ele, attrs);
            return ele;
        },
        _setAttributes: function (ele, attrs) {
            for (var key in attrs) {
                ele.setAttribute(key, attrs[key]);
            }
        },
        _renderControl: function () {
            this._setCheckBoxState();
            this.maindiv = this._createElement("span", { "class": "e-chkbox-wrap e-widget " + this.model.cssClass, "role": "checkbox", tabindex: 0 });
            if (this._isValid(this.model.id)) {
                this.maindiv.setAttribute("id", this.model.idPrefix + this.model.id);
                this.element[0].setAttribute("id", this.model.id);
            }
            this.innerdiv = document.createElement("div");
            this._setSize(this.model.size);
            this.span = document.createElement("span");
            this.span = bbdesigner$(this.span);
            this.spanImg = this._createElement("span", { "class": "e-chk-image e-icon", "role": "presentation" });
            this.spanImg = bbdesigner$(this.spanImg);
            this.element.addClass("e-input");
            this.model.name = BoldBIDashboard.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
		    this.model.value = BoldBIDashboard.isNullOrUndefined(this.model.value) ? true : this.model.value;
            this._setAttributes(this.element[0], { "name": this.model.name, "value": this.model.value });
            var hiddenEl = bbdesigner$("#" + this._id + "_hidden")
            // hidden input element will be generated in MVC wrapper
            this._hiddenInput = hiddenEl.length ? hiddenEl[0] : this._createElement("input", { type: "checkbox", value: false, style: "display:none" });
            this._isValid(this.model.name) && this._hiddenInput.setAttribute("id", this.model.name + "_hidden");

            this._setRoundedCorner(this.model.showRoundedCorner);
            if (this.checked())
                this._setCheckedItem(this.checked());
            if (this._isChecked) {
                this.spanImg.addClass("e-checkmark");
                this.span.addClass("e-chk-act");
                this.maindiv.setAttribute("aria-checked", true);
                this.element.attr("checked", "checked")
            }
            else {
                this.span.addClass("e-chk-inact");
                this.maindiv.setAttribute("aria-checked", false);
                this._hiddenInput.setAttribute("name", this.model.name);
            }
            if (!(this.checked() instanceof Array))
                this.checked(this._isChecked);
            this.span[0].appendChild(this.spanImg[0]);
            this.innerdiv.appendChild(this.span[0]);
            this.element[0].parentNode && this.element[0].parentNode.insertBefore(this.maindiv, this.element[0]);
            this.maindiv.appendChild(this.element[0]);
            this.maindiv.appendChild(this._hiddenInput);
            this.maindiv.appendChild(this.innerdiv);
            this.wrapper = bbdesigner$(this.maindiv);
            this._setTextWrapper(this.model.text);
            this.chkbx = this.element;
            if (this.model.enableTriState == true && this._indeterminateState == true)
                this._setIndeterminate(this._indeterminateState);
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
        },
        _changeState: function (state) {
            if (state == "indeterminate") {
                this.spanImg.removeClass("e-checkmark").addClass("e-stop");
                this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
                this.wrapper[0].setAttribute("aria-checked", "mixed");
                this.wrapper.find('input').prop('enableTriState', true);
                if (!(this.checked() instanceof Array))
                    this.checked(null);
            }
            else if (state == "check") {
                this.spanImg.removeClass("e-stop").addClass("e-checkmark");
                this.span.removeClass("e-chk-act e-chk-inact e-chk-indeter").addClass("e-chk-act");
                this.wrapper[0].setAttribute("aria-checked", true);
            }
            else if (state == "uncheck") {
                this.spanImg.removeClass("e-checkmark e-stop");
                this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
                this.wrapper[0].setAttribute("aria-checked", false);
            }
        },

        _setIndeterminate: function (indeter) {
            if (indeter) {
                this.spanImg.removeClass("e-checkmark").addClass("e-stop");
                this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
                this.wrapper[0].setAttribute("aria-checked", "mixed");
                this.wrapper.find('input').prop('enableTriState', true);
                this.checkState("indeterminate");
                if (!(this.checked() instanceof Array))
                    this.checked(null);
                this._hiddenInput.setAttribute("name", this.model.name);
            }
            else {
                this.span.removeClass("e-chk-indeter");
                this.spanImg.removeClass("e-stop");
                this.wrapper.find('input').removeAttr('enableTriState');
                this.wrapper.find('input').prop('enableTriState', false);
                if (this.checked())
                    this._checked();
                else
                    this._unChecked();
            }
        },

        _setTextWrapper: function (val) {
            if (val != "") {
                this.txtSpan = BoldBIDashboard.buildTag("div.e-text", val);
                this.wrapper.append(this.txtSpan);
                this.model.enableRTL && this._setRTL();
            }
        },

        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },

        _setIdAttr: function (val) {
            bbdesigner$("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            this.element[0].setAttribute('id', val);
        },

        _isValid: function (value) {
            return (!BoldBIDashboard.isNullOrUndefined(value) && value != "") ? true : false;
        },

        _wireEvents: function () {
            this._on(this.wrapper, "click", this._checkedHandler);
            if (this._isIE8) {
                this._isValid(this.model.id) && this._on(bbdesigner$("label[for=" + this.model.id + "]"), "click", function () { this.wrapper.click(); });
            }
            this._on(this.wrapper, "focus", this._focusIn);
            this._on(this.wrapper, "focusout", this._focusOut);
        },


        _unWireEvents: function () {
            this._off(this.wrapper, (this._isDevice && bbdesigner$.isFunction(bbdesigner$.fn.tap)) ? "tap" : "click");
            if (this._isIE8) {
                this._isValid(this.model.id) && this._off(bbdesigner$("label[for=" + this.model.id + "]"), "click");
            }
            this._off(this.wrapper, "focus");
            this._off(this.wrapper, "focusout");
        },
        _focusIn: function (evt) {
            bbdesigner$(this.wrapper).addClass("e-focus");
            bbdesigner$(this.wrapper).on("keydown", bbdesigner$.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            bbdesigner$(this.wrapper).removeClass("e-focus");
            bbdesigner$(this.wrapper).off("keydown", bbdesigner$.proxy(this._checkUnCheck, this));
        },
        _checkUnCheck: function (evt) {
            //Space bar to check and uncheck
            if (evt.keyCode == 32) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },
        _checkedHandler: function (evt) {
            var data = { isChecked: this._isChecked, isInteraction: true, event: evt };
            if (true == this._trigger("beforeChange", data)) {
                return false;
            }
            if (this.span.hasClass("e-chk-inact")) {
                this._checked();
                if (!(this.checked() instanceof Array))
                    this.checked(true);
                if (this.model.enableTriState) {
                    this._indeterminateState = true;
                    this.checkState("check");
                }
            }
            else if (this.span.hasClass("e-chk-act")) {
                if ((this.model.enableTriState == true) && (this.model.checkState == "check") && (this.model.checked == true)){
                    this._setIndeterminate(true);
                    if (!(this.checked() instanceof Array)) {
                        this.checked(true);
                        this.checkState("indeterminate");
                    }
                } else {
                    this._unChecked();
                    if (!(this.checked() instanceof Array)) {
                        this.checked(false);
                        this.checkState("uncheck");
                    }
                }
            }
            else if (this.span.hasClass("e-chk-indeter")) {
                if (!(this.checked() instanceof Array))
                    this.checked(false);
                else
                    this._isChecked = false;
                this._setIndeterminate(false);
                this._indeterminateState = false;
            }
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
            else
                this._isChecked = this.checked();
            bbdesigner$(this.maindiv).addClass("e-material-animate");
            var data = { isChecked: this._isChecked, checkState: this.checkState(), isInteraction: true, event: evt };
            this._trigger("change", data);
            return true;
        },


        _checked: function () {
            this.span.removeClass("e-chk-inact").addClass("e-chk-act");
            this.spanImg.removeClass("e-stop").addClass("e-checkmark");
            this.wrapper[0].setAttribute("aria-checked", true);
            this.wrapper.find('input[type=checkbox]').prop('checked', true);
            this.checkState("check");
            this._hiddenInput.removeAttribute("name");
        },


        _unChecked: function () {
            this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
            this.wrapper[0].setAttribute("aria-checked", false);
            this.spanImg.removeClass("e-checkmark e-stop");
            this.wrapper.find('input[type=checkbox]').prop('checked', false);
            this.checkState("uncheck");
            this._hiddenInput.setAttribute("name", this.model.name);
        },

        _setCheckedItem: function (value) {
            if (typeof(value) == "boolean" && !(value instanceof Array))
                this._isChecked = true;
            else if (value instanceof Array && !BoldBIDashboard.isNullOrUndefined(this.model.value) && this.model.value != "") {
                for (var item = 0; item < value.length; item++) {
                    if (value[item] == this.model.value)
                        this._isChecked = true;
                }
            }
        },

        _updateCheckedItem: function () {
            var checkedValues = this.model.checked.splice === undefined ? this.model.checked() : this.model.checked;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.value) && this.model.value != "" && !this.wrapper.find("span:first").hasClass("e-chk-indeter")) {
                if ((bbdesigner$.inArray(this.model.value, this.checked()) < 0) && this.wrapper.find("span:first").hasClass("e-chk-act")) {
                    checkedValues.push(this.model.value);
                    this._isChecked = true;
                    this._hiddenInput.removeAttribute("name");
                }
                else if ((bbdesigner$.inArray(this.model.value, this.checked()) > -1) && this.wrapper.find("span:first").hasClass("e-chk-inact")) {
                    this._isChecked = false;
                    checkedValues.splice(bbdesigner$.inArray(this.model.value, this.model.checked()), 1);
                    this._hiddenInput.setAttribute("name", this.model.name);
                }
            }
        }, 
 

        disable: function () {
            if (!this.wrapper.hasClass("e-disable")) {
                this.wrapper.addClass("e-disable");
                this.wrapper[0].setAttribute("aria-disabled", true);
                this.element[0].setAttribute("disabled", "disabled");
                if (this._isIE8) this.span.addClass("e-disable");
                this._unWireEvents();
                this.model.enabled = false;
            }
        },

        enable: function () {
            if (this.wrapper.hasClass("e-disable")) {
                this.wrapper.removeClass("e-disable");
                this.wrapper[0].setAttribute("aria-disabled", false);
                this.element.prop("disabled", false);
                if (this._isIE8) this.span.removeClass("e-disable");
                this._wireEvents();
                this.model.enabled = true;
            }
        },

        isChecked: function () {
            if ((this._isChecked != null) && (this._isChecked != undefined))
                return this._isChecked;
        }
    });

    BoldBIDashboard.CheckboxSize = {
        /**  Creates checkbox with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates checkbox with inbuilt medium size height, width specified */
        Medium: "medium"
    };

    BoldBIDashboard.CheckState = {
        /**  Specifies the Check attribute of the Checkbox */
        Check: "check",
        /**  Specifies the Uncheck attribute of the Checkbox */
        Uncheck: "uncheck",
        /**  Specifies the Indeterminate state of the Checkbox */
        Indeterminate: "indeterminate"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the tab control.
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardTab", "BoldBIDashboard.Tab", {
        _rootCSS: "e-tab",

        element: null,

        model: null,
        validTags: ["div", "span"],
        _addToPersist: ["selectedItemIndex"],
        _setFirst: false,
        angular: {
            terminal: false
        },

        defaults: {

            collapsible: false,

            enableAnimation: true,

            ajaxSettings: {

                type: 'GET',

                cache: false,

                data: {},

                dataType: "html",

                contentType: "html",

                async: true
            },

            disabledItemIndex: [],

            enabledItemIndex: [],

            hiddenItemIndex: [],

            events: "click",

            idPrefix: "ej-tab-",

            heightAdjustMode: "content",

            selectedItemIndex: 0,

            cssClass: "",

            showCloseButton: false,

            htmlAttributes: {},

            enableTabScroll: false,

            showReloadIcon: false,

            headerPosition: "top",

            width: null,

            height: null,

            headerSize: null,

            enableRTL: false,

            allowKeyboardNavigation: true,

            showRoundedCorner: false,

            enablePersistence: false,

            enabled: true,

            ajaxLoad: null,

            ajaxBeforeLoad: null,

            ajaxSuccess: null,

            ajaxError: null,

            itemActive: null,

            beforeActive: null,

            itemAdd: null,

            itemRemove: null,

            beforeItemRemove: null,

            create: null,

            destroy: null

        },
        dataTypes: {
            cssClass: "string",
            collapsible: "boolean",
            events: "string",
            heightAdjustMode: "enum",
            enabled: "boolean",
            ajaxSettings: "data",
            disabledItemIndex: "data",
            enabledItemIndex: "data",
            enableAnimation: "boolean",
            htmlAttributes: "data"
        },
        observables: ["selectedItemIndex"],
        selectedItemIndex: BoldBIDashboard.util.valueFunction("selectedItemIndex"),


        _destroy: function () {
            this._unWireEvents();
            this._removeBaseClass();
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "events": {
                        this._off(this.items, this.model.events);
                        this._on(this.items, options[key], this._tabItemClick);
                        break;
                    }
                    case "disabledItemIndex": {
                        this._disableItems(options[key]);
                        options[key] = this.model.disabledItemIndex;
                        break;
                    }
                    case "enabledItemIndex": this._enableItems(options[key]); break;
                    case "enabled": this._enabledAction(options[key]); break;
                    case "selectedItemIndex": {
                        this._isInteraction = false;
                        this.showItem(BoldBIDashboard.util.getVal(options[key]));
                        options[key] = this.model.selectedItemIndex;
                        break;
                    }
                    case "heightAdjustMode": {
                        this.model.heightAdjustMode = options[key];
                        this._setTabsHeightStyle(options[key]);
                        this._resizeEvents(options[key]);
                        break;
                    }
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "showRoundedCorner": this._roundedCorner(options[key]); break;
                    case "height": {
                        this.model.height = options[key];
                        this._setTabsHeightStyle(this.model.heightAdjustMode);
                        break;
                    }
                    case "width": this.element.width(options[key]);
                        bbdesigner$(this.contentPanels).width(Number(options[key]));
                        this.refreshTabScroll();
                        break;
                    case "headerSize": this._setHeaderSize(options[key]); break;
                    case "allowKeyboardNavigation": {
                        if (options[key])
                            this._on(this.element, 'keydown', this._keyPress);
                        else
                            this._off(this.element, "keydown");
                        break;
                    }
                    case "headerPosition":
                        {
                            this.model.headerPosition = options[key];
                            if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Top) {
                                this._removeVerticalClass();
                                this._removeScroll();
                                this.itemsContainer.remove();
                                this.itemsContainer.insertBefore(this.element.find(">div").first());
                                this.element.find("div.e-active-content").removeClass("e-activebottom");
                                bbdesigner$(this.contentPanels).css("margin-top", "0")
                            }
                            else if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Bottom) {
                                this._removeVerticalClass();
                                this._removeScroll();
                                this.element.find("div.e-active-content").removeClass("e-activetop");
                                this.model.enableTabScroll ? bbdesigner$(this.contentPanels).css("margin-top", "0") : bbdesigner$(this.contentPanels).css("position", "relative")
                            }
                            else if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Left || this.model.headerPosition == BoldBIDashboard.Tab.Position.Right) {
                                this._removeHeaderClass();
                                bbdesigner$(this.items).css('display', '');
                                this._removeScroll();

                            }
                            this._refresh();
                            if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Right)
                                this.element.css("position", "")
                            if (this.model.headerPosition != BoldBIDashboard.Tab.Position.Right)
                                this.element.css("margin-left", "0px")
                            if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Left || this.model.headerPosition == BoldBIDashboard.Tab.Position.Right) {
                                this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                                if (this.model.height && this.model.enableTabScroll) {
                                    bbdesigner$(this.contentPanels).height(Number(this.model.height) - 2);
                                    this.element.find("div.e-active-content").height(Number(this.model.height) - 32)
                                }

                            }

                            this.scrollstep = 30
                            break;
                        }
                    case "showCloseButton":
                        {
                            if (options[key]) {
                                this._addDeleteIcon();
                                this._on(this.element.find("div.e-close"), "click", this._tabDeleteClick);
                            } else
                                this.element.find("div.e-close").remove();
                            break;
                        }
                    case "enableTabScroll":
                        {
                            this.model.enableTabScroll = options[key];
                            if (options[key]) {
                                this._removeScroll();
                                this._addScroll();
                                if (this.model.headerPosition == "left") {
                                    this._refresh();
                                    this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                                }
                            } else {
                                this._removeScroll();
                                this.itemsContainer.removeAttr("style");
                                bbdesigner$(this.contentPanels).css("margin-top", "0")
                            }
                            if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Left || this.model.headerPosition == BoldBIDashboard.Tab.Position.Right) {
                                this._refresh();
                                this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                                if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Right && !this.model.enableTabScroll)
                                    this.element.css("margin-left", "")
                            }
                            break;
                        }
                    case "showReloadIcon":
                        {
                            if (options[key]) {
                                this._addReloadIcon();
                            } else
                                this.element.find("div.e-reload").remove();
                            break;
                        }
                    case "enableRTL":
                        {
                            this.model.enableRTL = options[key];
                            this._removeScroll();
                            this.itemsContainer.removeAttr("style");
                            bbdesigner$(this.contentPanels).css("margin-top", "0")
                            this.element.find("ul").removeAttr("style")
                            options[key] ? this.element.addClass("e-rtl") : this.element.removeClass("e-rtl");
                            if (this.model.enableTabScroll)
                                this._addScroll();
                            this._refresh();
                            this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                            if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Right && this.model.enableRTL)
                                this.element.css("margin-left", '')

                            break;
                        }
                    case "htmlAttributes": this._addAttr(options[key]); break;
                    case "hiddenItemIndex": {
                        if (this.model.headerPosition == BoldBIDashboard.Tab.Position.Top || this.model.headerPosition == BoldBIDashboard.Tab.Position.Bottom)
                            bbdesigner$(this.items).css('display', 'inline-block');
                        else bbdesigner$(this.items).css('display', '');
                        this.model.hiddenItemIndex = options[key];
                        this.model.hiddenItemIndex.length > 0 && this._hiddenIndexItem(this.model.hiddenItemIndex);
                        break;
                    }
                }
            }
        },

        _removeScroll: function () {
            //this.itemsContainer.removeAttr("style");
            this.element.find("div.e-chevron-circle-right").remove();
            this.element.find("div.e-chevron-circle-left").remove();
        },

        _addScroll: function () {
            if ((this.model.headerPosition == "left" || this.model.headerPosition == "right" && this._tabContentsHeight() > (this.element.width() || Number(this.model.height))) || (this.model.headerPosition == "top" || this.model.headerPosition == "bottom"))
                this._checkScroll();
            this._addScrollIcon();
            this.refreshTabScroll();
        },

        _init: function () {
            this._addItemIndex = null;
            this.tabId = 0;
            this._hiddenIndex = this.model.hiddenItemIndex;
            this._initialize();
            this._prevSize = this._getDimension(bbdesigner$(this.element).parent(), "height");
        },


        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _tabContentsWidth: function () {
            var length = this.element.find("li").length;
            var tabLength = 0;
            for (var i = 0; i < length; i++) {
                tabLength = tabLength + bbdesigner$(this.element.find("li")[i]).width();
            }
            return tabLength
        },

        _tabContentsHeight: function () {
            var length = this.element.find("li").length;
            var tabHeight = 0;
            for (var i = 0; i < length; i++) {
                tabHeight = tabHeight + bbdesigner$(this.element.find("li")[i]).height();
            }
            return tabHeight
        },

        _initialize: function () {
            this.initialRender = true;
            this.element.attr("tabindex", 0).attr("role", "tablist");
            this._itemsRefreshing();
            bbdesigner$(this.anchors).addClass("e-link");
            this._preTabSelectedIndex = this._preTabIndex = -1;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.width))
                this.element.width(this.model.width);
            if (!BoldBIDashboard.isNullOrUndefined(this.model.height))
                this.element.height(this.model.height);
            this._setTabPosition(this.model.headerPosition);
            if (this.model.showCloseButton)
                this._addDeleteIcon();
            if (this.model.showReloadIcon)
                this._addReloadIcon();
            if (this.model.showRoundedCorner)
                this._roundedCorner(this.model.showRoundedCorner);
            this._enabledAction(this.model.enabled);
            this.contentPanels = [];
            this._addAttr(this.model.htmlAttributes);
            this._reinitialize();
            this._addBaseClass();
            if (!BoldBIDashboard.isNullOrUndefined(this.model.headerSize))
                this._setHeaderSize(this.model.headerSize);
            this._disableTabs();
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableTabScroll) {
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    if (this.itemsContainer.width() > (this.element.width()))
                        this._addScrollIcon();
                    //if (this.itemsContainer.find('.e-icon.e-chevron-circle-left').length > 0) {
                    //    this._addScrollBackIcon(); //for Viewer
                    //}

                }
                else {
                    if (this.element.height() < (this.items.height() * this.items.length))
                        this._addScrollIcon();
                }
            }
            this._wireEvents(this.model.events);
            // Added for rendering the Windows tab...
            this.showItem(this.selectedItemIndex());
            this._setTabsHeightStyle(this.model.heightAdjustMode);
            this._enabledAction(this.model.enabled);
            this._resizeEvents(this.model.heightAdjustMode);
            this.model.hiddenItemIndex.length > 0 && this._hiddenIndexItem(this.model.hiddenItemIndex);
        },

        _reinitialize: function ( addContentBaseClass ) {
            var hid, href, hrefbase;
            for (var i = (this._addItemIndex != null) ? this._addItemIndex : 0; i < this.anchors.length; i++) {
                hid = this.anchors[i];
                if (this.divId == undefined)
                    href = bbdesigner$(hid).attr("href");
                else
                    href = this.divId;
                this.divId = undefined;
                hrefBase = href.split("#")[0];
                if (hrefBase && (hrefBase === location.toString().split("#")[0])) {
                    href = a.hash;
                    hid.href = href;
                }
                if (href && href !== "#") {
                    this._addContentTag(href, i);
                    if(addContentBaseClass) this._addContentBaseClass(bbdesigner$(this.contentPanels[i]));
                }
                else if (!this.model.enablePersistence) {
                    this.model.disabledItemIndex.push(i);
                }
                if (this._addItemIndex != null) {
                    this._unWireEvents();
                    this._wireEvents(this.model.events);
				if (this.items.length == 1) {
					this.showItem(this.selectedItemIndex());
				}
                    break;
                }
            }

        },
        _itemsRefreshing: function () {
            this.itemsContainer = this.element.find("ol,ul").eq(0);
            this.items = this.itemsContainer.find(" > li:has(a[href])");
            this.anchors = this.items.find('a[href]');
        },
        _setHeaderSize: function (size) {
            this.element.find(">ul li.e-item").css("height", "auto");
            this.element.find(">ul li.e-item").children("a.e-link").css("margin-top", "0px");
            if (this.model.headerPosition == "left") {
                this.element.find(">ul.e-left").css({ "width": size, "text-align": "center" });
            }
            else if (this.model.headerPosition == "right") {
                this.element.find(">ul.e-right").css({ "width": size, "text-align": "center" });
            }
            else {
                this.element.find(">ul.e-header li.e-item").css("height", size);
                this.element.find(">ul.e-header li.e-item a.e-link").css("margin-top", ((this.element.find(">ul.e-header").outerHeight() / 2) - this.element.find(">.e-header li.e-item a.e-link").outerHeight()).toString() + "px")
            }
        },
        _enabledAction: function (flag) {
            if (flag) {
                this.element.removeClass("e-disable");
            }
            else {
                this.element.addClass("e-disable");
            }
        },
        _hiddenIndexItem: function (value) {
            var elementId;
            for (var i = 0; i < value.length; i++) {
                if (!bbdesigner$.inArray(parseInt(value[i]), this._hiddenIndex) > -1) {
                    elementId = bbdesigner$(this.items[parseInt(value[i])]).children('a').attr('href');
                    this._hidePanel(elementId);
                }
            }
            this._hideContentPanel(this.selectedItemIndex(), this.model.hiddenItemIndex);
            this._hiddenIndex = this.model.hiddenItemIndex;
        },
        _hidePanel: function (value) {
            for (var j = 0; j < this.contentPanels.length; j++) {
                if ("#" + bbdesigner$(this.contentPanels[j]).attr('id') == value) {
                    bbdesigner$(this.contentPanels[j]).css('display', 'none');
                    break;
                }
            }
            for (var i = 0; i < this.items.length; i++) {
                if (bbdesigner$(this.items.children('a')[i]).attr('href') == value) {
                    bbdesigner$(this.items[i]).css('display', 'none');
                    break;
                }
            }
        },
        _hideContentPanel: function (index, value) {
            if (bbdesigner$.inArray(index, value) > -1) {
                index += 1;
                if (index <= this.items.length - 1) {
                    this._hideContentPanel(index, value);
                }
                else if (index > this.items.length - 1 && value.length != this.items.length) {
                    this._hideContentPanel(0, value);
                }
            }
            else this.showItem(index);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") { proxy.model.enabled = false; proxy._enabledAction(false); }
                else proxy.element.attr(key, value)
            });
        },


        _setTabPosition: function (position) {
            if (position == BoldBIDashboard.Tab.Position.Bottom) {
                this.itemsContainer.appendTo(this.element);
                this.items.removeClass("e-bottom-line");
                this.items.addClass("e-top-line");
            }
            else if (position == BoldBIDashboard.Tab.Position.Top) {
                this.items.removeClass("e-top-line");
                if (this.model.enableRTL)
                    this.items.addClass("e-rtl-top-line e-top-hover");
                else
                    this.items.addClass("e-bottom-line");
            }
            else if (position == BoldBIDashboard.Tab.Position.Left || position == BoldBIDashboard.Tab.Position.Right) {
                if (this.items.length >= 0) {
                    if (this.model.height)
                        this.itemsContainer.css("height", this.model.height);
                    else {
                        if (!this.model.heightAdjustMode === "fill") bbdesigner$(this.itemsContainer).css("height", "");
                    }
                    this.element.addClass("e-vertical");
                }
            }
        },


        _addDeleteIcon: function () {
            if (this.element.find("div.e-close.e-tabdelete").length <= 0 && this.items.length > 0) {
                var deleteIcon = BoldBIDashboard.buildTag('div.e-icon e-close e-tabdelete', "", {}, { role: "presentation" }).css("visibility", "hidden");
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    var delIconPosition = this.items.find("a");
                    deleteIcon.insertBefore(delIconPosition);
                }
                else
                    this.items.append(deleteIcon);
            }
        },
        _addScrollIcon: function () {
            this.element.addClass("e-tabscroll");
            if (this.element.find("div.e-chevron-circle-right").length <= 0 && this.items.length > 0) {
                this._rightScrollIcon = BoldBIDashboard.buildTag('div.e-icon e-chevron-circle-right', "", {}, { role: "presentation" }).css("visibility", "visible");
                this.itemsContainer.append(this._rightScrollIcon);
                this.scrollstep = 30;
                this._rightScrollIcon.css("position", "relative");
                if (!this.model.enableRTL) {
                    if (this.model.headerPosition == "left")
                        this._rightScrollIcon.css("margin-right", this.itemsContainer.width() / 2 + "px");
                    else if (this.model.headerPosition == "right")
                        this._rightScrollIcon.css("margin-left", this.itemsContainer.width() / 2 - this.scrollstep + "px");
                    else {
                        if (this.model.enablePersistence == true && this._beforeWidth != 0 && (this._beforeWidth > this.scrollPanelWidth))
                            this._rightScrollIcon.css("margin-right", this.itemsContainer.width() - this.scrollPanelWidth + 20 - ((this.items[this.selectedItemIndex()].offsetLeft - this.scrollPanelWidth) * 2) + "px");
                        else
                            //this._rightScrollIcon.css("margin-right", this.itemsContainer.width() - this.scrollPanelWidth + 20 + "px");
                            this._rightScrollIcon.css("margin-right", this.itemsContainer.width() - this.scrollPanelWidth + 40 + "px");
                    }
                }
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    this._rightScrollIcon.css("transform", "rotate(270deg)");
                    if (BoldBIDashboard.browserInfo().name == "msie" && parseInt(BoldBIDashboard.browserInfo().version) < 11) {
                        if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")
                            this._rightScrollIcon.css("margin-top", "-" + ((this.itemsContainer.height() + this.scrollPanelWidth) - 3) + "px");
                        else {
                            if (!this.model.enableRTL)
                                this._rightScrollIcon.css("margin-top", "-" + ((this.items.height() * this.items.length) - 20) + "px");
                            else
                                this._rightScrollIcon.css("margin-top", "-" + ((this.items.height() * this.items.length)) + "px");
                        }
                    }
                    else {
                        if (this.model.enablePersistence == true && this._beforeWidth != 0 && (this._beforeWidth > this.scrollPanelHeight))
                            this._rightScrollIcon.css("margin-top", "-" + ((this.items[this.selectedItemIndex()].offsetTop * 3 - this.scrollPanelHeight * 2)) + "px");
                        else
                            if (!this.model.enableRTL)
                                this._rightScrollIcon.css("margin-top", "-" + ((this.items.height() * this.items.length) - 20) + "px");
                            else
                                this._rightScrollIcon.css("margin-top", "-" + ((this.items.height() * this.items.length)) + "px");
                    }
                }

                else {
                    if (this.model.enableRTL) {
                        this._rightScrollIcon.css("margin-top", "-" + (this.itemsContainer.height()) + "px");
                        this._rightScrollIcon.css("margin-left", (this.itemsContainer.width() - 14) + "px");
                    }
                    else
                        //this._rightScrollIcon.css("margin-top", "-" + ((this.itemsContainer.height() / 2) + 10) + "px");
                        this._rightScrollIcon.css("margin-top", "-" + ((this.itemsContainer.height() / 2) + 20) + "px");
                }
                if (BoldBIDashboard.browserInfo().name == "msie" && parseInt(BoldBIDashboard.browserInfo().version) < 11) {
                    if (this.model.headerPosition == "top") {
                        if (parseInt(this._rightScrollIcon.prev().offset().top) - parseInt(this._rightScrollIcon.offset().top) == (-parseInt(this._rightScrollIcon.css("margin-top"))))
                            this._rightScrollIcon.css("top", ((this.itemsContainer.height() / 2) + 27) + "px");
                    }
                    else if (this.model.headerPosition == "bottom") {
                        if (!this.model.enableRTL)
                            this._rightScrollIcon.css("top", ((this.itemsContainer.height() / 2) + 27) + "px");
                        else
                            this._rightScrollIcon.css("top", ((this.itemsContainer.height() / 2) + 20) + "px");
                    }
                }
                if (this.model.headerPosition == "left") {
                    this._rightScrollIcon.css("margin-right", this.itemsContainer.width() / 2 + "px");
                }
                else if (this.model.headerPosition == "right")
                    this._rightScrollIcon.css("margin-left", this.itemsContainer.width() / 2 - this.scrollstep + "px");
                this.element.attr('unselectable', 'on')
                this.element.css('user-select', 'none')
                this.element.on('selectstart', false);
                this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                this._addScrollBackIcon();
            }
        },
        _addScrollBackIcon: function () {
            if (this.element.find("div.e-chevron-circle-left").length <= 0) {
                this._leftScrollIcon = BoldBIDashboard.buildTag('div.e-icon e-chevron-circle-left', "", {}, { role: "presentation" }).css("visibility", "visible");
                this.itemsContainer.prepend(this._leftScrollIcon);
                this.rightscrollstep = 30;
                this.element.attr('unselectable', 'on')
                this.element.css('user-select', 'none')
                this.element.on('selectstart', false);
                this._leftScrollIcon.css("position", "absolute").css("z-index", "10");
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    if (!this.model.enableRTL) {
                        this._leftScrollIcon.css("margin-left", "20px");
                    }
                    else
                        this._leftScrollIcon.css("margin-right", (this.element.width() - 20) + "px");
                }
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    if (!this.model.enableRTL) {
                        if (this.model.headerPosition == "right")
                            this._leftScrollIcon.css("margin-left", ((this.itemsContainer.width() / 2) - 30) + "px");
                        else if (this.model.headerPosition == "left")
                            this._leftScrollIcon.css("margin-left", ((this.itemsContainer.width() / 2) - 15) + "px");
                        this._leftScrollIcon.css("margin-top", +this.scrollPanelHeight + 20 + "px");
                    }
                    else {
                        this._leftScrollIcon.css("margin-top", +(this.scrollPanelHeight - 4) + "px");
                        if (this.model.headerPosition == "right")
                            this._leftScrollIcon.css("margin-right", (this.itemsContainer.width() / 2 + 14) + "px");
                        else
                            this._leftScrollIcon.css("margin-right", (this.itemsContainer.width() / 2) + "px");
                    }
                    this._leftScrollIcon.css("transform", "rotate(270deg)");
                }
                else
                    if (BoldBIDashboard.browserInfo().name == "msie" && parseInt(BoldBIDashboard.browserInfo().version) < 11)
                        this._leftScrollIcon.css("margin-top", "0px");
                    else {
                        if (!this.model.enableRTL)
                            this._leftScrollIcon.css("margin-top", "-5px");
                        else
                            this._leftScrollIcon.css("margin-top", "0px");
                    }
                this._on(this._leftScrollIcon, "click", this._tabScrollBackClick);
            }
        },


        _addReloadIcon: function () {
            if (this.element.find("div.e-reload").length <= 0 && this.items.length > 0) {
                var reloadIcon = BoldBIDashboard.buildTag('div.e-icon e-reload', "", {}, { role: "presentation" }).css("visibility", "hidden");
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    var iconPosition = this.items.find("a");
                    reloadIcon.insertBefore(iconPosition);
                }
                else
                    this.items.append(reloadIcon);
            }
        },


        _addBaseClass: function () {
            this.element.addClass("e-widget " + this.model.cssClass);
            this.itemsContainer.addClass("e-box")
            if (this.model.enableRTL)
                this.element.addClass("e-rtl");
            // To avoid border blinking 
            if (this.model.headerPosition == "top") {
                bbdesigner$(this.contentPanels).addClass("e-hidebottom e-addborderbottom");
                bbdesigner$(this.itemsContainer).addClass("e-addborderbottom");
                bbdesigner$(this.contentPanels).removeClass("e-hidetop e-addbordertop e-hideright e-addborderright e-hideleft e-addborderleft");
                bbdesigner$(this.itemsContainer).removeClass("e-addbordertop e-addborderright e-addborderleft");
                this.items.length > 0 && this.itemsContainer.addClass("e-header");
                if (this.model.enableRTL) {
                    this.items.addClass("e-rtl-top-line");
                    this.items.removeClass("e-rtl-bottom-line");
                }
            }
            if (this.model.headerPosition == "bottom") {
                bbdesigner$(this.contentPanels).removeClass("e-hidebottom e-addborderbottom e-hideright e-addborderright e-hideleft e-addborderleft");
                bbdesigner$(this.itemsContainer).removeClass("e-addborderbottom e-addborderright e-addborderleft");
                bbdesigner$(this.contentPanels).addClass("e-hidetop e-addbordertop");
                bbdesigner$(this.itemsContainer).addClass("e-addbordertop");
                this.items.length > 0 && this.itemsContainer.addClass("e-header");
                if (this.model.enableRTL) {
                    this.items.addClass("e-rtl-bottom-line")
                    this.items.removeClass("e-rtl-top-line e-top-line");
                }
            }
            if (this.model.headerPosition == "left") {
                this.items.length > 0 && this.itemsContainer.addClass("e-left");
                bbdesigner$(this.contentPanels).removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideright e-addborderright");
                bbdesigner$(this.itemsContainer).removeClass("e-addbordertop e-addborderbottom e-addborderright");
                bbdesigner$(this.contentPanels).addClass("e-hideleft e-addborderleft");
                bbdesigner$(this.itemsContainer).addClass("e-addborderleft");
                bbdesigner$(this.items).removeClass("e-rtl-bottom-line e-rtl-top-line");
            }
            if (this.model.headerPosition == "right") {
                this.items.length > 0 && this.itemsContainer.addClass("e-right");
                bbdesigner$(this.contentPanels).removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideleft e-addborderleft");
                bbdesigner$(this.itemsContainer).removeClass("e-addbordertop e-addborderbottom e-addborderleft");
                bbdesigner$(this.contentPanels).addClass("e-hideright e-addborderright");
                bbdesigner$(this.itemsContainer).addClass("e-addborderright");
                if (this.model.enableTabScroll && this._tabContentsHeight() > (this.element.height || Number(this.model.height)))
                    bbdesigner$(this.itemsContainer).css("z-index", "12").css("margin-left", "-" + this.itemsContainer.find("li").width() + "px");
                bbdesigner$(this.items).removeClass("e-rtl-bottom-line e-rtl-top-line");
            }
            this.items.addClass("e-select e-item").attr("role", "tab").attr("tabindex", -1).attr("aria-expanded", true).attr("aria-selected", false);
            bbdesigner$(this.contentPanels).addClass("e-content  e-content-item e-box").attr("role", "tabpanel").attr("aria-hidden", true);
            if (((this.model.headerPosition == "left" || this.model.headerPosition == "right") && (this._tabContentsHeight() > (this.element.height() || Number(this.model.height)))) || ((this.model.headerPosition == "top" || this.model.headerPosition == "bottom") && this._tabContentsWidth() > ((BoldBIDashboard.getDimension(this.element, "width")) || this.model.width)))
                this._checkScroll();
        },
        _addContentBaseClass: function (panelElement) {
            if (this.model.headerPosition == "top") {
                panelElement.addClass("e-hidebottom e-addborderbottom");
                panelElement.removeClass("e-hidetop e-addbordertop e-hideright e-addborderright e-hideleft e-addborderleft");
            }
            if (this.model.headerPosition == "bottom") {
                panelElement.removeClass("e-hidebottom e-addborderbottom e-hideright e-addborderright e-hideleft e-addborderleft");
                panelElement.addClass("e-hidetop e-addbordertop");
            }
            if (this.model.headerPosition == "left") {
                panelElement.removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideright e-addborderright");
                panelElement.addClass("e-hideleft e-addborderleft");
            }
            if (this.model.headerPosition == "right") {
                panelElement.removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideleft e-addborderleft");
                panelElement.addClass("e-hideright e-addborderright");
            }
            panelElement.addClass("e-content  e-content-item e-box").attr("role", "tabpanel").attr("aria-hidden", true);
        },

        _checkScroll: function () {
            this.scrollPanelWidth = BoldBIDashboard.getDimension(this.element, "width");
            this.scrollPanelHeight = BoldBIDashboard.getDimension(this.element, "height");
            if (this.model.enableTabScroll == true && this._tabContentsHeight() > this.items.height()) {
                this.scrollstep = 0;
                this.model.enableTabScroll = true;
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    this.itemsContainer.css({ "width": ((BoldBIDashboard.getDimension(this.element, "width") + (parseInt(this.items.css("width")) * this.items.length))) + "px", "position": "absolute" });
                }
                this._beforeWidth = 0;
                if (this.model.enablePersistence == true) {
                    if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                        for (var val = 0; val < this.selectedItemIndex() ; val++) {
                            this._beforeWidth += this.items[val].offsetWidth;
                        }
                    }
                    else {
                        for (var val = 0; val < this.selectedItemIndex() ; val++) {
                            this._beforeWidth += this.items[val].offsetHeight;
                        }
                    }
                }
                var widthValue = parseInt(this.itemsContainer.css("width"));
                if (this.model.headerPosition == "top") {
                    var item = bbdesigner$(this.contentPanels);
                    item.css("padding-top", this.itemsContainer.outerHeight() + (item.hasClass("e-activetop") ? 0 : (this.model.enableRTL ? 4 : 3)) + "px");
                    bbdesigner$(this.contentPanels).css({"border-top": "none", "width": BoldBIDashboard.getDimension(this.element, "width") - 1 + "px" });
                    this.itemsContainer.css("border-bottom", "1px solid #bbbcbb");
                }
                if (this.model.headerPosition == "bottom") {
                    bbdesigner$(this.contentPanels).css({ "position": "relative", "width": BoldBIDashboard.getDimension(this.element, "width") - 1 + "px", "border-bottom": "none" });
                    this.itemsContainer.css("border-top", "1px solid #bbbcbb");
                    bbdesigner$(this.contentPanels).css({ "border-top": "" });
                }

                var rigtVaule = parseInt(widthValue - (this.scrollPanelWidth + this.scrollstep - 1));
                if (this.model.enableRTL && (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")) {
                    this.itemsContainer.css("clip", "rect(0px," + widthValue + "px,100px," + rigtVaule + "px)");
                }
                else if (this.model.headerPosition == "left") {
                    if (this._tabContentsHeight() > Number(this.model.height)) {
                        this.itemsContainer.css({ "height": ((parseInt(this.itemsContainer.css("height")) + (parseInt(this.items.css("height")) * this.items.length)) + 30) + "px", "position": "absolute", "border-right": "1px solid #bbbcbb", "background": "white" });
                        bbdesigner$(this.contentPanels).css("padding-left", this.itemsContainer.width() + 5 + "px");
                        if (this.model.enableRTL)
                            this.itemsContainer.css("margin-right", (BoldBIDashboard.getDimension(this.element, "width") - this.itemsContainer.width()));
                        if (this._beforeWidth == 0 || this._beforeWidth < this.scrollPanelHeight)
                            this.itemsContainer.css("clip", "rect(0px," + (this.itemsContainer.width() + 4) + "px," + this.scrollPanelHeight + "px," + (this.scrollstep) + "px)");
                        else {
                            if (this._beforeWidth > this.scrollPanelHeight) {
                                this.itemsContainer.css({
                                    "clip": "rect(" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px," + (this.itemsContainer.width() + 2) + "px," + (this.items[this.selectedItemIndex()].offsetTop * 2 - this.scrollPanelHeight) + "px,0px)",
                                    "margin-top": "-" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px"
                                });
                            }
                        }

                        this.element.removeClass("e-scrolltab");
                    }
                }
                else if (this.model.headerPosition == "right") {
                    if (this._tabContentsHeight() > Number(this.model.height)) {
                        this.itemsContainer.css({ "height": ((parseInt(this.itemsContainer.css("height")) + (parseInt(this.items.css("height")) * this.items.length)) + 30) + "px", "position": "absolute", "margin-left": "-1px" }).css("z-index", "12")
                        bbdesigner$(this.contentPanels).css({ "position": "absolute", "width": parseInt(this.element.width() - 1) + "px", "height": BoldBIDashboard.getDimension(this.element, "height") + "px", "margin-left": "-" + BoldBIDashboard.getDimension(this.element, "width") + "px", "border-right": "none" });
                        if (!this.model.enableRTL)
                            bbdesigner$(this.element).css("margin-left", BoldBIDashboard.getDimension(this.element, "width") + "px");
                        this.itemsContainer.css("border-left", "1px solid #bbbcbb");
                        if (this.model.enableRTL)
                            this.itemsContainer.css("margin-right", "-" + (this.itemsContainer.width() + 1) + "px");
                        if (this._beforeWidth == 0 || this._beforeWidth < this.scrollPanelHeight)
                            this.itemsContainer.css("clip", "rect(0px," + this.itemsContainer.width() + 2 + "px," + this.scrollPanelHeight + "px," + (this.scrollstep) + "px)");
                        else {
                            if (this._beforeWidth > this.scrollPanelHeight) {
                                this.itemsContainer.css({
                                    "clip": "rect(" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px," + (this.itemsContainer.width() + 2) + "px," + (this.items[this.selectedItemIndex()].offsetTop * 2 - this.scrollPanelHeight) + "px,0px)",
                                    "margin-top": "-" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px"
                                });
                            }
                        }
                        this.element.removeClass("e-scrolltab");
                    }
                }
                else {
                    if (this._beforeWidth == 0 || this._beforeWidth < this.scrollPanelWidth) {
                        this.itemsContainer.css({ "clip": "rect(0px," + (this.scrollPanelWidth + this.scrollstep) + "px,100px," + (this.scrollstep) + "px)", "margin-left": "-" + this.scrollstep + "px" });
                    }
                    else {
                        if (this._beforeWidth > this.scrollPanelWidth) {
                            this.itemsContainer.css({ "clip": "rect(0px," + (this.items[this.selectedItemIndex()].offsetLeft * 2 - this.scrollPanelWidth) + "px,100px," + ((this.items[this.selectedItemIndex()].offsetLeft - this.scrollPanelWidth) * 2) + "px)", "margin-left": "-" + ((this.items[this.selectedItemIndex()].offsetLeft - this.scrollPanelWidth) * 2) + "px" });
                        }
                    }
                }
                this.itemsContainer.find(".e-icon.e-chevron-circle-left").length && this.itemsContainer.find(".e-icon.e-chevron-circle-left").css("display", "none");
            }
        },
        _executeForwardScrolling: function (args) {
            var forwardBtn = this.itemsContainer.find(".e-chevron-circle-left");
            if (forwardBtn.hasClass("e-navi-disable"))
                forwardBtn.removeClass("e-navi-disable");
            if (!bbdesigner$(args.target).hasClass("e-navi-disable")) {
                this._rightScrollIcon.css("position", "relative");
                var tabScrollStep = (args.type == 'swiperight' || args.type == 'swipeleft') ? args.distance : 30;
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    if (!this.model.enableRTL) {
                        var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                        var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                        var scrollValue = Number(this._rightScrollIcon.css("margin-right").split("px")[0]);
                        this.itemsContainer.css({
                            "clip": "rect(0px," +
                                (ClipValue1 + tabScrollStep) +
                                "px,100px," +
                                (ClipValue2 + tabScrollStep) +
                                "px)",
                            "margin-left": "-" + (ClipValue2 + tabScrollStep) + "px"
                        });
                        this._rightScrollIcon.css("margin-right", (scrollValue - tabScrollStep) + "px");
                        //viewer changes
                        var lastItemPos = this.itemsContainer.children("li").last().offset().left +
                            this.itemsContainer.children("li").last().width();
                        var IconPos = this._rightScrollIcon.offset().left;
                        if (lastItemPos <= IconPos) {
                            //this._off(this.element.find(">ul").eq(0).find("div.e-chevron-circle-right"), "click");
                            //this._on(this.element.find(">ul").eq(0).find("div.e-chevron-circle-left"), "click");
                            this.element.find(">ul").eq(0).find("div.e-chevron-circle-right").addClass("e-navi-disable");
                        }
                        this._leftScrollIcon
                            ? this._leftScrollIcon.css("margin-left", (ClipValue2 + tabScrollStep) + "px")
                            : "";
                        //if ((this._leftScrollIcon && this._leftScrollIcon.css("margin-left")) && (Number(this._leftScrollIcon.css("margin-left").split("px")[0]) >= (this._tabContentsWidth() - BoldBIDashboard.getDimension(this.element, "width")))) {
                        //    this._rightScrollIcon.css("display", "none");
                        //}

                    } else {
                        var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                        var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                        var itemsMargin = this.itemsContainer.css("margin-right")
                            ? Number(this.itemsContainer.css("margin-right").split("px")[0].replace(",", ""))
                            : 0;
                        var scrollValue = Number(this._rightScrollIcon.css("margin-left").split("px")[0]);
                        var RightScroll = this._leftScrollIcon && this._leftScrollIcon.css("margin-right")
                            ? Number(this._leftScrollIcon.css("margin-right").split("px")[0])
                            : "";
                        this.itemsContainer.css({
                            "clip": "rect(0px," +
                                (ClipValue1 - tabScrollStep) +
                                "px,100px," +
                                (ClipValue2 - tabScrollStep) +
                                "px)",
                            "margin-right": "-" + (-itemsMargin + tabScrollStep) + "px"
                        });
                        this._rightScrollIcon.css("margin-left", (scrollValue - tabScrollStep) + "px");
                        this._leftScrollIcon
                            ? this._leftScrollIcon.css("margin-right", (RightScroll + tabScrollStep) + "px")
                            : "";
                        if (this._leftScrollIcon &&
                            this._leftScrollIcon.css("margin-right") &&
                            (Number(this._leftScrollIcon.css("margin-right").split("px")[0])) >=
                            (this._tabContentsWidth() - 40))
                            this._rightScrollIcon.css("display", "none")

                    }

                } else if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[0].replace(",", "")
                        .split("(")[1]);
                    var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[2].replace(",", ""));
                    var scrollValue = Number(this._rightScrollIcon.css("margin-top").split("px")[0].replace(",", ""));
                    var RightTop = this._leftScrollIcon && this._leftScrollIcon.css("margin-top")
                        ? Number(this._leftScrollIcon.css("margin-top").split("px")[0])
                        : 0;
                    var MarginTop = this.itemsContainer.css("margin-top")
                        ? Number(this.itemsContainer.css("margin-top").split("px")[0])
                        : 0;
                    this.itemsContainer.css({
                        "clip": "rect(" +
                            (ClipValue1 + tabScrollStep) +
                            "px, " +
                            (this.itemsContainer.width() + 4) +
                            "px," +
                            (ClipValue2 + tabScrollStep) +
                            "px, 0px)",
                        "margin-top": "-" + (-MarginTop + tabScrollStep) + "px"
                    });
                    this._rightScrollIcon.css("margin-top", (scrollValue + tabScrollStep) + "px");
                    this._leftScrollIcon
                        ? this._leftScrollIcon.css("margin-top", (RightTop + tabScrollStep) + "px")
                        : "";
                    if (ClipValue2 > (this._tabContentsHeight() - 20)) {
                        this.itemsContainer.css({
                            "clip": "rect(" +
                                (this._tabContentsHeight() - Number(this.model.height) + 2) +
                                "px, " +
                                (this.itemsContainer.width() + 4) +
                                "px, " +
                                (this._tabContentsHeight() + 2) +
                                "px, 0px",
                            "margin-top": "-" + (this._tabContentsHeight() - Number(this.model.height) + 2) + "px"
                        })
                        this._leftScrollIcon.css("margin-top", (this._tabContentsHeight() - 12) + "px")
                        this._rightScrollIcon.css("margin-top",
                            "-" +
                            (this._tabContentsHeight() - (this._tabContentsHeight() - Number(this.model.height)) - 22) +
                            "px");
                        this._rightScrollIcon.css("display", "none");
                    }
                }
            }
        },
        _executeBackwardScrolling: function (args) {
            var forwardBtn = this.itemsContainer.find(".e-chevron-circle-right");
            if (forwardBtn.hasClass("e-navi-disable"))
                forwardBtn.removeClass("e-navi-disable");
            if (!bbdesigner$(args.target).hasClass("e-navi-disable")) {
                if (this._rightScrollIcon != "") this._rightScrollIcon.css("display", "block");
                var tabScrollStep = (args.type == 'swiperight' || args.type == 'swipeleft') ? args.distance : 30;
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    if (!this.model.enableRTL) {
                        var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                        var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                        var scrollValue = Number(this._rightScrollIcon.css("margin-right").split("px")[0]);
                        this.itemsContainer.css({
                            "clip": "rect(0px," +
                                (ClipValue1 - tabScrollStep) +
                                "px,100px," +
                                (ClipValue2 - tabScrollStep) +
                                "px)",
                            "margin-left": "-" + (ClipValue2 - tabScrollStep) + "px"
                        });
                        this._rightScrollIcon.css("margin-right", (scrollValue + tabScrollStep) + "px");
                        var leftIconPos = this.itemsContainer.children().first().outerWidth();
                        var firstElePos = this.itemsContainer.children("li").first().offset().left;
                        //viewer changes
                        if (firstElePos === leftIconPos) {
                            //this._off(this.element.find(">ul").eq(0).find("div.e-chevron-circle-left"), "click");
                            this.element.find(">ul").eq(0).find("div.e-chevron-circle-left").addClass("e-navi-disable");
                            this._leftScrollIcon.css({ "margin-left": "0px" });
                            //this._on(this.element.find(">ul").eq(0).find("div.e-chevron-circle-right"), "click");
                        } else {
                            this._leftScrollIcon
                                ? this._leftScrollIcon.css("margin-left", (ClipValue2 - tabScrollStep) + "px")
                                : "";
                        }
                        if (ClipValue2 - tabScrollStep < 0) {
                            this.itemsContainer.css({
                                "clip": "rect(0px," + BoldBIDashboard.getDimension(this.element, "width") + "px,100px, 0px",
                                "margin-left": "0px"
                            });
                            this._rightScrollIcon.css("margin-right",
                                this.itemsContainer.width() - BoldBIDashboard.getDimension(this.element, "width") + 35 + "px");
                        }
                        //if (ClipValue2 <= tabScrollStep && this._leftScrollIcon)
                        //    this._leftScrollIcon.css("display", "none");
                    } else {
                        var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                        var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                        var itemsMargin = Number(this.itemsContainer.css("margin-right").split("px")[0])
                            ? Number(this.itemsContainer.css("margin-right").split("px")[0])
                            : 0;
                        var RightScroll = this._leftScrollIcon && this._leftScrollIcon.css("margin-right")
                            ? Number(this._leftScrollIcon.css("margin-right").split("px")[0])
                            : "";
                        var scrollValue = Number(this._rightScrollIcon.css("margin-left").split("px")[0]);
                        this.itemsContainer.css({
                            "clip": "rect(0px," +
                                (ClipValue1 + tabScrollStep) +
                                "px,100px," +
                                (ClipValue2 + tabScrollStep) +
                                "px)",
                            "margin-right": "-" + (-itemsMargin - tabScrollStep) + "px"
                        });
                        this._rightScrollIcon.css("margin-left", (scrollValue + tabScrollStep) + "px");
                        this._leftScrollIcon
                            ? this._leftScrollIcon.css("margin-right", (RightScroll - tabScrollStep) + "px")
                            : "";
                        if (itemsMargin >= -tabScrollStep && this._leftScrollIcon) {
                            //this._leftScrollIcon.css("display", "none");
                        }
                    }
                } else if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[0].replace(",", "")
                        .split("(")[1]);
                    var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[2].replace(",", ""));
                    var scrollValue = Number(this._rightScrollIcon.css("margin-top").split("px")[0]);
                    var RightTop = this._leftScrollIcon.css("margin-top")
                        ? Number(this._leftScrollIcon.css("margin-top").split("px")[0])
                        : 0;
                    var MarginTop = this.itemsContainer.css("margin-top")
                        ? Number(this.itemsContainer.css("margin-top").split("px")[0])
                        : 0;
                    this.itemsContainer.css({
                        "clip": "rect(" +
                            (ClipValue1 - tabScrollStep) +
                            "px, " +
                            this.itemsContainer.width() +
                            "px," +
                            (ClipValue2 - tabScrollStep) +
                            "px, 0px)",
                        "margin-top": "-" + (-MarginTop - tabScrollStep) + "px"
                    });
                    this._rightScrollIcon.css("margin-top", (scrollValue - tabScrollStep) + "px")
                        .css("display", "block");
                    this._leftScrollIcon.css("margin-top", (RightTop - tabScrollStep) + "px");
                    if (Number(this.itemsContainer.css("clip").split("px")[0].split("(")[1]) <= 0) {
                        this.itemsContainer.css({
                            "clip": "rect( 0px, " +
                                this.itemsContainer.width() +
                                "px," +
                                (Number(this.model.height)) +
                                "px, 0px)",
                            "margin-top": "0px"
                        });
                       // this._leftScrollIcon.css("display", "none");
                        this._rightScrollIcon.css("margin-top", "-" + (this._tabContentsHeight() - 22) + "px");
                    }
                }
            }
        },

        _removeHeaderClass: function () {
            this.itemsContainer.remove();
            this.itemsContainer.insertBefore(this.element.find(">div").first());
            this.items.removeClass("e-bottom-line e-top-line");
            bbdesigner$(this.contentPanels).removeClass("e-content-bottom e-activetop e-activebottom");
            this.itemsContainer.removeClass("e-header e-left e-right");
        },

        _removeVerticalClass: function () {
            this.element.removeClass("e-vertical");
            this.itemsContainer.removeClass("e-left e-right").removeAttr("style");
        },


        _removeBaseClass: function () {
            this.element.removeClass("e-tab e-widget e-corner");
            if ((this.model.headerPosition == "left" || this.model.headerPosition == "right"))
                this._removeVerticalClass();
            this.itemsContainer.removeClass("e-header e-box e-clearall e-select");
            this.anchors.removeClass("e-link");
            this.items.removeClass("e-select e-item e-active e-bottom-line e-top-line");
            bbdesigner$(this.contentPanels).removeClass("e-content  e-content-item e-box");
            bbdesigner$(this.contentPanels).removeClass("e-content  e-content-item e-box e-content-bottom e-activetop e-activebottom e-active-content");
            bbdesigner$(this.contentPanels).css("display", "");
        },


        _addContentTag: function (href, index) {
            var id = this._getTabId(href);
            var panel = this.element.find("#" + id);
            if (!panel.length) {
                panel = BoldBIDashboard.buildTag("div.e-content  e-content-item e-box e-content-bottom #" + id)
                    .insertAfter(this.contentPanels[index - 1] || this.itemsContainer);
            }
            this.contentPanels.splice(index, 0, panel[0]);
        },

        _roundedCorner: function (value) {
            if (value) {
                this.element.addClass('e-corner');
            }
            else if (this.element.hasClass('e-corner')) {
                this.element.removeClass('e-corner');
            }
        },


        _setTabsHeightStyle: function (heightFormat) {
            if (BoldBIDashboard.Tab.HeightAdjustMode.Content != heightFormat) bbdesigner$(this.contentPanels).height("");
            if (BoldBIDashboard.Tab.HeightAdjustMode.Fill == heightFormat) {
                if (BoldBIDashboard.Tab.Position.Left === this.model.headerPosition || BoldBIDashboard.Tab.Position.Right === this.model.headerPosition) {
                    bbdesigner$(this.contentPanels).css("height", "100vh");
                }
                this._contentPaneSize();
            }
            else if (BoldBIDashboard.Tab.HeightAdjustMode.Auto == heightFormat) {
                var maxHeight = 0;
                bbdesigner$(this.contentPanels).css({ "display": "none" }).addClass('e-active-content');
                for (var i = 0; i < this.contentPanels.length; i++) {
                    maxHeight = Math.max(maxHeight, this._getDimension(bbdesigner$(this.contentPanels[i]), "outerHeight"));
                }
                bbdesigner$(this.contentPanels).removeClass('e-active-content');
                bbdesigner$(this.contentPanels).height(maxHeight);
                this.maxAutoHeight = maxHeight;
                this.showItem(this.selectedItemIndex());
            }
            else if (BoldBIDashboard.Tab.HeightAdjustMode.None == heightFormat) {
                if (this.model.height != null) {
                    this._contentPaneSize();
                }
            }
            if (BoldBIDashboard.Tab.HeightAdjustMode.Fill !== heightFormat) bbdesigner$(this.itemsContainer).height("");
            if (BoldBIDashboard.Tab.HeightAdjustMode.Content == heightFormat)
                bbdesigner$(this.contentPanels).height("auto");

            if (this.model.enableTabScroll && (this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                bbdesigner$(this.contentPanels).css("height", this.model.height + "px");
            }

        },
        _getDimension: function (element, method) {
            var value;
            var bbdesigner$hidden = bbdesigner$(element).parents().addBack().filter(':hidden');
            var prop = { visibility: 'hidden', display: 'block' };
            var hiddenCollection = [];
            bbdesigner$hidden.each(function () {
                var hidden = {}, name;
                for (name in prop) {
                    hidden[name] = this.style[name];
                    this.style[name] = prop[name];
                }
                hiddenCollection.push(hidden);
            });
            value = /(outer)/g.test(method) ?
            bbdesigner$(element)[method](true) :
           bbdesigner$(element)[method]();

            bbdesigner$hidden.each(function (i) {
                var hidden = hiddenCollection[i], name;
                for (name in prop) {
                    this.style[name] = hidden[name];
                }
            });
            return value;
        },
        // Tab to active given index value
        showItem: function (index) {
            if (bbdesigner$.inArray(index, this.model.disabledItemIndex) < 0) {
                var proxy = this;
                if (this._isInteraction != false) this._isInteraction = true;
                this._preTabSelectedIndex = this.selectedItemIndex();
                this.selectedItemIndex(index);
                if (this.selectedItemIndex() >= this.contentPanels.length) {
                    this.selectedItemIndex(0);
                    index = this.selectedItemIndex();
                }
                if (index >= 0 && !this.initialRender && true === this._onBeforeActive(index)){
                    this.selectedItemIndex(this._preTabSelectedIndex);
                    return false;
                } 
                else this._preTabIndex = this._preTabSelectedIndex;
                bbdesigner$(this.items[this.selectedItemIndex()]).attr("aria-expanded", true).attr("aria-selected", true).attr("tabindex", 0);
                if (this.selectedItemIndex() != null && this.selectedItemIndex() < this.contentPanels.length) {
                    this._ajaxLoad();
                    this.hideItem(this._preTabIndex);
                    bbdesigner$(this.contentPanels[this.selectedItemIndex()]).fadeIn(this.model.enableAnimation ? 20 : 0, function () {
                        if (!proxy.initialRender && proxy._onActive())
                            return true;
                        proxy.initialRender = false;
                    });
                    if (!(this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                        var activeClass = this.model.headerPosition == BoldBIDashboard.Tab.Position.Top ? "e-activetop" : "e-activebottom";
                        bbdesigner$(this.contentPanels[this.selectedItemIndex()]).addClass(activeClass)
                    }
                    else
                        bbdesigner$(this.contentPanels[this.selectedItemIndex()]).addClass("e-active-content ");
                    bbdesigner$(this.items[this.selectedItemIndex()]).addClass("e-active").removeClass("e-select");
                    bbdesigner$(this.items[this.selectedItemIndex()]).removeClass("e-margine-top e-margine-bottom");

                    for (var i = 0; i <= bbdesigner$(this.items).length; i++) {
                        if (bbdesigner$(this.items[i]).hasClass("e-select")) {
                            if (this.model.headerPosition == "right") {
                                bbdesigner$(this.items[i]).removeClass("e-margine-top e-margine-bottom");
                            }
                            if (this.model.headerPosition == "left") {
                                bbdesigner$(this.items[i]).removeClass("e-margine-top e-margine-bottom");
                            }
                            if (this.model.headerPosition == "top") {
                                if (!this.element.hasClass("e-tab-collapsed"))
                                    bbdesigner$(this.items[i]).addClass("e-margine-top");
                                else
                                    bbdesigner$(this.items[i]).removeClass("e-margine-top");
                                bbdesigner$(this.items[i]).removeClass("e-margine-bottom");
                            }
                            if (this.model.headerPosition == "bottom") {
                                bbdesigner$(this.items[i]).removeClass("e-margine-top");
                                bbdesigner$(this.items[i]).addClass("e-margine-bottom");
                            }
                        }
                    }
                    bbdesigner$(this.contentPanels[this.selectedItemIndex()]).addClass("e-active-content").removeAttr("aria-hidden", false);
                }
            }
            if (this.model.enableTabScroll && this._tabContentsWidth() > (this.model.width || this.element.width()) && this.itemsContainer.find("li").length && (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")) {
                if (!this.model.enableRTL) {
                    var itemPosition = Number(this.itemsContainer.find("li.e-active").position().left.toFixed(0)) + this.itemsContainer.find("li.e-active").width() - BoldBIDashboard.getDimension(this.element, "width");
                    if ((itemPosition > 0) && (Number(this.itemsContainer.find("li.e-active").offset().left.toFixed(0)) + this.itemsContainer.find("li.e-active").width() > BoldBIDashboard.getDimension(this.element, "width") || (Number(this.itemsContainer.find("li.e-active").offset().left.toFixed(0)) - this.itemsContainer.find("li.e-active").width() < 0))) {
                        this.itemsContainer.css("clip", "rect(0 ," + (BoldBIDashboard.getDimension(this.element, "width") + (itemPosition + 10)) + "px, 100px," + (itemPosition + 10) + "px)").css("margin-left", "-" + (itemPosition + 10) + "px")
                        //this._rightScrollIcon ? this._rightScrollIcon.css("margin-right", (this.itemsContainer.width() - BoldBIDashboard.getDimension(this.element, "width") + 10 - itemPosition) + "px").css("display", "block") : "";
                        this._rightScrollIcon ? this._rightScrollIcon.css("margin-right", (this.itemsContainer.width() - BoldBIDashboard.getDimension(this.element, "width") + 30 - itemPosition) + "px").css("display", "block") : "";
                        //this._addScrollBackIcon();
                        this._leftScrollIcon ? this._leftScrollIcon.css("display", "block").css("margin-left", (itemPosition + 10) + "px") : "";
                    }
                    else if ((itemPosition < 0) && (Number(this.itemsContainer.find("li.e-active").offset().left.toFixed(0)) + this.itemsContainer.find("li.e-active").width() > BoldBIDashboard.getDimension(this.element, "width") || (Number(this.itemsContainer.find("li.e-active").offset().left.toFixed(0)) - this.itemsContainer.find("li.e-active").width() < 0))) {
                        this.itemsContainer.css("clip", "rect(0 ," + (BoldBIDashboard.getDimension(this.element, "width")) + "px, 100px, 0px)").css("margin-left", "0px")
                        //this._rightScrollIcon ? this._rightScrollIcon.css("margin-right", (this.itemsContainer.width() - BoldBIDashboard.getDimension(this.element, "width") + 20) + "px").css("display", "block") : "";
                        //this._leftScrollIcon ? this._leftScrollIcon.css('display', 'none') : "";
                        this._rightScrollIcon ? this._rightScrollIcon.css("margin-right", (this.itemsContainer.width() - BoldBIDashboard.getDimension(this.element, "width") + 40) + "px").css("display", "block") : "";
                        this._leftScrollIcon.css("margin-left", 0 + "px");

                    }
                }
            }
            else if (this.model.enableTabScroll && this.model.height && (this.model.headerPosition == "left" || this.model.headerPosition == "right") && !this.model.enableRTL) {
                var itemPosition = Number(this.itemsContainer.find("li.e-active").position().top.toFixed(0)) + this.itemsContainer.find("li.e-active").height() - Number(this.model.height);
                if ((itemPosition > 0) && (Number(this.itemsContainer.find("li.e-active").offset().top.toFixed(0)) + this.itemsContainer.find("li.e-active").height() > Number(this.model.height) || (Number(this.itemsContainer.find("li.e-active").offset().top.toFixed(0)) - this.itemsContainer.find("li.e-active").height() < 0))) {
                    this.itemsContainer.css("clip", "rect(" + itemPosition + "px," + (this.itemsContainer.outerWidth() + 2) + "px, " + (Number(this.model.height) + itemPosition) + "px, 0px").css("margin-top", "-" + itemPosition + "px");
                    this._rightScrollIcon ? this._rightScrollIcon.css("margin-top", "-" + (this._tabContentsHeight() - itemPosition - 22) + "px").css("display", "block") : "";
                    //this._addScrollBackIcon();
                    this._leftScrollIcon ? this._leftScrollIcon.css("margin-top", Number(this.model.height) + itemPosition - 10 + "px").css("display", "block") : "";
                }
                else if ((itemPosition < 0) && (Number(this.itemsContainer.find("li.e-active").offset().top.toFixed(0)) + this.itemsContainer.find("li.e-active").height() > Number(this.model.height) || (Number(this.itemsContainer.find("li.e-active").offset().top.toFixed(0)) - this.itemsContainer.find("li.e-active").height() < 0))) {
                    this.itemsContainer.css("clip", "rect(0px ," + (this.itemsContainer.outerWidth() + 2) + "px, " + Number(this.model.height) + "px, 0px").css("margin-top", "0px")
                    this._rightScrollIcon ? this._rightScrollIcon.css("margin-top", "-" + (this._tabContentsHeight() - 22) + "px").css("display", "block") : "";
                    //this._leftScrollIcon ? this._leftScrollIcon.css('display', 'none').css("margin-top", (Number(this.model.height) - 10) + "px") : "";
                }
            }

        },

        hideItem: function (index) {
            bbdesigner$(this.contentPanels[index]).fadeOut(0);
            if (!(this.model.headerPosition == "left" || this.model.headerPosition == "right"))
                var activeClass = this.model.headerPosition == BoldBIDashboard.Tab.Position.Top ? "e-activetop" : "e-activebottom";
            bbdesigner$(this.items[index]).removeClass("e-active").addClass("e-select");
            bbdesigner$(this.contentPanels[index]).removeClass("e-active-content " + activeClass).attr("aria-hidden", true);
        },


        _ajaxLoad: function () {
            var content = bbdesigner$(this.contentPanels[this.selectedItemIndex()]);
            var link = this.anchors[this.selectedItemIndex()];
            var href = bbdesigner$(link).attr("href");
            if (content.is(':empty') && href.indexOf("#") !== 0)
                this._sendAjaxOptions(content, link);
        },


        _getTabId: function (href) {
            return !href.indexOf("#") ? href.replace("#", "") : this.model.idPrefix + this._getNextTabId();
        },

        _getNextTabId: function () {
            return ++this.tabId;
        },


        _disableTabs: function () {
            for (var i = 0, li; (li = this.items[i]) ; i++) {
                if (bbdesigner$.inArray(i, this.model.disabledItemIndex) > -1) {
                    bbdesigner$(li).find("a").off(this.model.events);
                    bbdesigner$(li).find("div.e-close").off("click");
                }
                bbdesigner$(li)[bbdesigner$.inArray(i, this.model.disabledItemIndex) != -1 &&
                    !bbdesigner$(li).hasClass("e-tab-selected") ? "addClass" : "removeClass"]("e-disable");
                bbdesigner$(this.contentPanels[i])[bbdesigner$.inArray(i, this.model.disabledItemIndex) != -1 &&
                    !bbdesigner$(this.contentPanels[i]).hasClass("e-tab-selected") ? "addClass" : "removeClass"]("e-disable");
            }
        },


        _tabItemClick: function (args) {

            if (this.model.enabled) {
                args.preventDefault(); // Prevent the ancher tag url action
                var index;
                if (this.selectedItemIndex() == bbdesigner$(this.items).index(bbdesigner$(args.currentTarget)) && this.model.collapsible) {
                    index = -1; bbdesigner$(this.element).addClass("e-tab-collapsed");
                }
                else {
                    index = bbdesigner$(this.items).index(bbdesigner$(args.currentTarget));
                }
                if (index != this.selectedItemIndex())
                    this.showItem(index);
                bbdesigner$(this.element).removeClass("e-tab-collapsed");
            }
        },

        _tabDeleteClick: function (args) {
            if (this.model.enabled) {
                var currentTab = bbdesigner$(args.target);
                if (currentTab.hasClass("e-close"))
                    var index = bbdesigner$(this.items).index(bbdesigner$(args.target).parent());
                if (index == this.selectedItemIndex() && this.items.length > index)
                    this.selectedItemIndex(this.selectedItemIndex() + 1)
                this.removeItem(index);
            }
        },
        _tabScrollClick: function (args) {
            if (this.model.enabled) {
                if ((this._rightScrollIcon[0] == args.target)) {
                    this._executeForwardScrolling(args);
                    //this._addScrollBackIcon();
                    //this._leftScrollIcon.css("margin-top", "2px");
                    //this._leftScrollIcon.css("display", "block");
                }
            }
        },
		
		_tabSwipe: function(e){ 
			 if(e.type=='swipeleft')  
			this._executeForwardScrolling(e);
			else 
			this._executeBackwardScrolling(e);
		},
        _tabScrollBackClick: function (args) { 
            if (this.model.enabled) {
                if ((this._leftScrollIcon[0] == args.target)) {
                    this._executeBackwardScrolling(args);
                }
                else if (this._rightScrollIcon[0] == args.target) {
                    this._executeForwardScrolling(args);
                }
            }
        },

        _tabReloadClick: function (args) {
            if (this.model.enabled) {
                var currentTab = bbdesigner$(args.target);
                if (currentTab.hasClass("e-reload")) {
                    var link = this.anchors[this.selectedItemIndex()];
                    var href = bbdesigner$(link).attr("href");
                    var content = bbdesigner$(this.contentPanels[this.selectedItemIndex()]);
                    if (href.indexOf("#") !== 0)
                        this._sendAjaxOptions(content, link);
                    else
                        this.showItem(this.selectedItemIndex());
                }
            }
        },


        _sendAjaxOptions: function (content, link) {
            //load waiting popup
            if (this._onBeforeLoad(link))
                return true;
            content.addClass("e-load");
            var proxy = this;
            var curTabTitle = bbdesigner$(link).html();
            var hrefLink = link.href.replace("#", "");
            var ajaxOptions = {
                type: this.model.ajaxSettings.type, cache: this.model.ajaxSettings.cache, url: hrefLink, data: this.model.ajaxSettings.data,
                dataType: this.model.ajaxSettings.dataType, contentType: this.model.ajaxSettings.contentType, async: this.model.ajaxSettings.async,
                "success": function (data) {
                    try {
                        proxy._ajaxSuccessHandler(data, content, link, curTabTitle);
                    } catch (e) {

                    }
                }, "error": function () {
                    try {
                        proxy._ajaxErrorHandler(link, proxy.selectedItemIndex(), curTabTitle);
                    } catch (e) {

                    }
                }
            };
            this._sendAjaxRequest(ajaxOptions);
        },

        _sendAjaxRequest: function (ajaxOptions) {
            bbdesigner$.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
                beforeSend: ajaxOptions.beforeSend,
                complete: ajaxOptions.complete
            });
        },


        _ajaxSuccessHandler: function (data, content, link, curTabTitle) {
            if (curTabTitle != null)
                bbdesigner$(link).html(curTabTitle);
            content.removeClass("e-load");
            content.html(data).addClass("e-tab-loaded"); //to indicate the content is already loaded
            var eventData = { data: data, url: link, content: content };
            this._trigger("ajaxSuccess", eventData);
            if (this._onLoad(link))
                return true;
        },


        _ajaxErrorHandler: function (data, link, index, title) {
            this._trigger("ajaxError", { data: data, url: link });
            this._onLoad(link);
        },

        _createContentPanel: function (id) {
            return bbdesigner$('<div></div>')
				.attr("id", id)
				.addClass("e-content  e-content-item e-content-bottom e-box");
        },


        _refresh: function () {
            this._unWireEvents();
            this.itemsContainer.removeAttr("style class");
            bbdesigner$(this.contentPanels).removeAttr("style class");
            this.element.css("margin-left", "");
            this._removeVerticalClass();
            this._removeHeaderClass();
            this._initialize();
        },

        _keyPress: function (e) {
            if (this.model.enabled) {
                var index, currentEle, targetEle = bbdesigner$(e.target);
                if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
                else if (e.which) code = e.which; // ns4 and opera
                else code = e.charCode;
                if (targetEle.hasClass("e-link") || targetEle.hasClass("e-item")) {
                    switch (code) {
                        case 39:
                        case 40:
                            {
                                e.preventDefault();
                                this.showItem(this.selectedItemIndex() + 1);
                                break;
                            }
                        case 37:
                        case 38:
                            {
                                e.preventDefault();
                                if (this.selectedItemIndex() != 0)
                                    this.showItem(this.selectedItemIndex() - 1);
                                else if (this.selectedItemIndex() == 0)
                                    this.showItem(this.getItemsCount() - 1);
                                break;
                            }
                        case 35:
                            {
                                e.preventDefault();
                                this.showItem(this.getItemsCount() - 1);
                                break;
                            }
                        case 36:
                            {
                                e.preventDefault();
                                this.showItem(0);
                                break;
                            }
                        case 13:
                            {
                                e.preventDefault();
                                this.showItem(this.selectedItemIndex());
                                break;
                            }
                    }
                }
                else if (e.ctrlKey && !targetEle.hasClass("e-tab")) {
                    switch (code) {
                        case 38:
                            e.preventDefault();
                            index = bbdesigner$(this.contentPanels).index(targetEle.parent(".e-content"));
                            currentEle = bbdesigner$(this.items[index]);
                            break;
                        case 33:
                            e.preventDefault();
                            currentEle = bbdesigner$(this.items[0]);
                            this.showItem(0);
                            break;
                        case 34:
                            e.preventDefault();
                            currentEle = bbdesigner$(this._headers[this.getItemsCount() - 1]);
                            this.showItem(this.getItemsCount() - 1);
                            break;
                    }
                }
                if (!BoldBIDashboard.isNullOrUndefined(currentEle)) {
                    currentEle.addClass("e-focus");
                    currentEle.focus();
                }
            }
        },

        _hoverHandler: function (args) {
            args.preventDefault();
            if (this.model.enabled) {
                var index = bbdesigner$(this.items).index(bbdesigner$(args.target).parent());
                if (index == -1)
                    index = bbdesigner$(this.items).index(bbdesigner$(args.target));
				if(!bbdesigner$(this.items[index]).hasClass("e-disable")){
                args.type === "mouseout" ? bbdesigner$(this.element.find("div.e-tabdelete")[index]).css("visibility", "hidden") : bbdesigner$(this.element.find("div.e-tabdelete")[index]).css("visibility", "visible");
				args.type === "mouseout" ? bbdesigner$(this.element.find("div.e-reload")[index]).css("visibility", "hidden") : bbdesigner$(this.element.find("div.e-reload")[index]).css("visibility", "visible");
				}
                //args.type === "mouseout" ? bbdesigner$(this.element.find("div.e-chevron-circle-right")).css("visibility", "hidden") : bbdesigner$(this.element.find("div.e-chevron-circle-right")).css("visibility", "visible");
                //args.type === "mouseout" ? bbdesigner$(this.element.find("div.e-chevron-circle-left")).css("visibility", "hidden") : bbdesigner$(this.element.find("div.e-chevron-circle-left")).css("visibility", "visible");
            }
        },


        _wireEvents: function (event) {
            this._on(this.items, event, this._tabItemClick);
            this._on(this.itemsContainer, "mouseover", this._hoverHandler);
            this._on(this.itemsContainer, "mouseout", this._hoverHandler);
            this._on(this.element.find(">ul").eq(0).find(">li div.e-close"), "click", this._tabDeleteClick);
            this._on(this.element.find(">ul").eq(0).find("div.e-chevron-circle-left"), "click", this._tabScrollBackClick);
            this._on(this.element.find(">ul").eq(0).find("div.e-chevron-circle-right"), "click", this._tabScrollBackClick) //For viewer tabs
			if (this.model.enableTabScroll)this._on(this.items, "swipeleft swiperight", this._tabSwipe);
            this._on(this.itemsContainer, "focusin", this._focusIn);
            this._on(this.itemsContainer, "focusout", this._focusOut);
            bbdesigner$(window).on('resize', bbdesigner$.proxy(this._resize, this));
            this._on(this.element.find(">ul").eq(0).find(">li div.e-reload"), "click", this._tabReloadClick);
        },
        _resize: function() {
            if (this.model &&
                this.model.width == null &&
                this.model.enableTabScroll &&
                (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")) {
                this._removeScroll();
                this._addScroll();
                //for viewer tabs
                if (bbdesigner$(window).width() < 768) {
                     this.element.find(".e-content").css({ "padding-top": "0px" });
                }
                else this.element.find(".e-content").css({ "padding-top": "40px" });
            }
        },
        _unWireEvents: function () {
            this._off(this.items, this.model.events);
            this._off(this.element.find(">ul").eq(0).find(">li div.e-close"), "click");
           // this._off(this.element.find(">ul").eq(0).find("div.e-chevron-circle-right"), "click");
            //this._off(this.element.find(">ul").eq(0).find("div.e-chevron-circle-left"), "click");
			if (this.model.enableTabScroll)this._off(this.items, "swipeleft swiperight", this._tabSwipe);
            this._off(this.itemsContainer, "mouseover", this._hoverHandler);
            this._off(this.itemsContainer, "mouseout", this._hoverHandler);
            this._off(this.itemsContainer, "focusin", this._focusIn);
            this._off(this.itemsContainer, "focusout", this._focusOut);
            this._off(this.element.find(">ul").eq(0).find(">li div.e-reload"), "click");
            this._resizeEvents();
        },
        _resizeEvents: function (value) {
            if (value === "fill") bbdesigner$(window).on('resize', bbdesigner$.proxy(this._windowResized, this));
            else bbdesigner$(window).off('resize', bbdesigner$.proxy(this._windowResized, this));
        },


        _windowResized: function (e) {
            var maxHeight = this._getDimension(bbdesigner$(this.element).parent(), "height");
            if (this._prevSize == maxHeight) return;
            else this._contentPaneSize();
            this._prevSize = maxHeight;
            if (!this.model.width && this.model.enableTabScroll)
                this._addScroll();
        },
        _contentPaneSize: function () {
            if (this.model.height != null && this.model.heightAdjustMode == "none") {
                bbdesigner$(this.element).height(this.model.height);
                var maxHeight = this._getDimension(bbdesigner$(this.element), "height");
            }
            else var maxHeight = this._getDimension(bbdesigner$(this.element).parent(), "height");
            bbdesigner$(this.contentPanels).height("");
            bbdesigner$(this.element).parent().css({ "overflow": "auto" });
            if (this.model.headerPosition === "top" || this.model.headerPosition === "bottom")
                maxHeight -= this._getDimension(bbdesigner$(this.itemsContainer), "outerHeight");
            var maxPadding = 0;
            for (var i = 0; i < this.contentPanels.length; i++) {
                if (bbdesigner$(this.contentPanels[i]).hasClass("e-active-content")) {
                    padding = Math.max(maxPadding, this._getDimension(bbdesigner$(this.contentPanels[i]), "outerHeight") - this._getDimension(bbdesigner$(this.contentPanels[i]), "height"));
                    if (this.model.height != null && this.model.heightAdjustMode == "none") bbdesigner$(this.contentPanels[i]).outerHeight(maxHeight).css({ "overflow": "auto" })
                    else bbdesigner$(this.contentPanels[i]).height(maxHeight - padding).css({ "overflow": "auto" });
                } else {
                    maxPadding = Math.max(maxPadding, this._getDimension(bbdesigner$(this.contentPanels[i]), "outerHeight") - this._getDimension(bbdesigner$(this.contentPanels[i]), "height"));
                    if (this.model.height != null && this.model.heightAdjustMode == "none") bbdesigner$(this.contentPanels[i]).outerHeight(maxHeight).css({ "overflow": "auto" })
                    else bbdesigner$(this.contentPanels[i]).height(maxHeight - maxPadding).css({ "overflow": "auto" });
                }
            }
        },
        _disableItems: function (indexes) {
            if (!this.model.enabled) return false;
            if (indexes != null) {
                for (var i = 0; i < indexes.length; i++) {
                    if (bbdesigner$.inArray(indexes[i], this.model.disabledItemIndex) == -1)
                        this.model.disabledItemIndex.push(indexes[i]);
                }
                this.model.disabledItemIndex.sort();
                this._disableTabs();
            }
        },

        _enableItems: function (indexes) {
            if (!this.model.enabled) return false;
            for (var i = 0; i < indexes.length; i++) {
                var index = indexes[i];
                this.model.disabledItemIndex = bbdesigner$.grep(this.model.disabledItemIndex, function (n, i) {
                    return n != index;
                });
            }
            this._disableTabs();
        },


        disable: function () {
            var indexes = [];
            for (var index = 0; index < this.getItemsCount() ; index++) {
                indexes.push(index);
            }
            this._disableItems(indexes);
            this.model.enabledItemIndex = [];
            this._unWireEvents();
        },

        enable: function () {
            var indexes = [];
            for (var index = 0; index < this.getItemsCount() ; index++) {
                if (bbdesigner$.inArray(index, this.model.enabledItemIndex) < 0) {
                    this.model.enabledItemIndex.push(index);
                    indexes.push(index);
                }
                this._enableItems(index);
            }
            this.model.disabledItemIndex = [];
        },

        getItemsCount: function () {
            if (this.items) {
                return this.items.length;
            }
        },

        addItem: function (url, displayLabel, index, cssClass, id) {
            (index >= 0 && index < this.items.length) ? this._addItemIndex = index : this._addItemIndex = this.items.length;
            for (var disable_index = 0; disable_index < this.model.disabledItemIndex.length; disable_index++) {
                if (this.model.disabledItemIndex[disable_index] >= index)
                    this.model.disabledItemIndex[disable_index]++;
            }
            if (this.model.headerPosition == "left") {
                this.items.length >= 0 && this.itemsContainer.addClass("e-left");
            }
            else if (this.model.headerPosition == "right") {
                this.items.length >= 0 && this.itemsContainer.addClass("e-right");
            }
            else
                this.items.length == 0 && this.itemsContainer.addClass("e-header");
            var liTag = BoldBIDashboard.buildTag("li.e-select e-item");
            if ((this.model.headerPosition == "top"))
                if (this.model.enableRTL)
                    bbdesigner$(liTag).addClass("e-rtl-top-line e-top-hover");
                else
                    bbdesigner$(liTag).addClass("e-bottom-line");
            if (!BoldBIDashboard.isNullOrUndefined(cssClass)) {
                var span = BoldBIDashboard.buildTag('span').addClass(cssClass);
                liTag.append(span);
            }
            if (index === undefined && displayLabel === undefined && url != null)
                displayLabel = "Item";
            if (index === undefined && displayLabel === undefined && id === undefined) {
                url = "#Item" + this.items.length;
                displayLabel = "Item"
            }
            if (id != undefined) {
                if (id.indexOf("#") != 0)
                    id = "#" + id;
                this.divId = id;
            }
            else if (url != undefined)
                id = url;
            var aTag = BoldBIDashboard.buildTag("a", displayLabel, {}, { href: url });
            if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")
                aTag.appendTo(liTag);
            if (this.model.showCloseButton) {
                var deleteIcon = BoldBIDashboard.buildTag('div.e-icon e-close e-tabdelete', "", {}, {}).css("visibility", "hidden");
                liTag.append(deleteIcon);
                this._on(deleteIcon, "click", this._tabDeleteClick);
            }
            if (this.model.headerPosition == "left" || this.model.headerPosition == "right")
                aTag.appendTo(liTag);
            if (index === undefined) {
                index = this.anchors.length;
            }
            var insertIndex = index >= this.items.length;
            if (insertIndex) {
                liTag.appendTo(this.itemsContainer);
            } else {
                liTag.insertBefore(this.items[index]);
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.model.headerSize))
                this._setHeaderSize(this.model.headerSize);
            if (this.selectedItemIndex() == index) {
                this.hideItem[index];
                this.selectedItemIndex(this.selectedItemIndex() + 1);
            } else {
                this.hideItem[index];
                if (index < this.selectedItemIndex())
                    this.selectedItemIndex(this.selectedItemIndex() + 1);
            }
            this._itemsRefreshing();
            this._reinitialize(true);
            if (this.model.headerPosition == "top")
                bbdesigner$(this.contentPanels[index]).addClass("e-hidebottom");
            if (this.model.headerPosition == "bottom") {
                bbdesigner$(this.contentPanels[index]).addClass("e-hidetop");
                liTag.addClass("e-top-line e-item e-select e-margine-bottom")
            }
            if (this.model.headerPosition == "left")
                bbdesigner$(this.contentPanels[index]).addClass("e-hideleft");
            if (this.model.headerPosition == "right")
                bbdesigner$(this.contentPanels[index]).addClass("e-hideright");
            var data = {
                tabHeader: this.anchors[index],
                tabContent: this.contentPanels[index]
            };
            this.refreshTabScroll();
            this._addItemIndex = null;
            this._onAdd(data);
            if (this.model.showReloadIcon) {
                var reloadIcon = BoldBIDashboard.buildTag('div.e-icon e-reload', "", {}, { role: "presentation" }).css("visibility", "hidden");
                bbdesigner$(this.element.find("li")[index]).append(reloadIcon)
            }
            if (this.model.enableTabScroll && this.model.headerPosition == "right") {
                bbdesigner$(this.contentPanels).css("height", this.model.height + "px");
            }
            if (this.model.enableTabScroll)
                this.showItem(this.model.selectedItemIndex)

        },

        _isSizeExceeded: function () {
            var eleWidth = this.element.width(), itemsWidth = 0;
            var tabcount = this.items.length;
            for (var tabVal = 0; tabVal < tabcount; tabVal++) {
                var tabWidth = bbdesigner$(this.items[tabVal]).width();
                itemsWidth += tabWidth;
            }
            return (itemsWidth > eleWidth ? true : false);
        },

        refreshTabScroll: function () {
            if (this._isSizeExceeded()) {
                this.element.find("div.e-chevron-circle-right").length >= 1 && this.element.find("div.e-chevron-circle-right").remove();
                if (this.model.enableTabScroll) {
                    this._checkScroll();
                    this._addScrollIcon();
                    //if (thi.itemsContainer.find('.e-icon.e-chevron-circle-left').length > 0) {
                    //    this._addScrollBackIcon(); //for Viewer initial Rendering
                    //}
                    this._leftScrollIcon.css({ "display": "block","margin-left":"0px","margin-top":"0px" });// for Viewer view
                }
            }
            else {
                if ((this.model.headerPosition == "left" || this.model.headerPosition == "right" && this._tabContentsHeight() > (this.element.width() || Number(this.model.height))) || (this.model.headerPosition == "top" || this.model.headerPosition == "bottom"))
                    this._checkScroll();
            }
        },

        removeItem: function (index) {
            if (!this.model.enabled) return false;
            if (index != null && index > -1 && index < this.items.length) {
                if (this._onBrforeRemove({ index: index }) === true)
                    return false;
                var removedTab = bbdesigner$(this.items[index]).remove();
                this.model.disabledItemIndex = [];
                if (removedTab.hasClass("e-active")) {
                    index == 0 ? this.selectedItemIndex(index + 1) : this.selectedItemIndex(index - 1);
                    this.showItem(this.selectedItemIndex());
                }
                bbdesigner$(this.element.find(">div.e-content")[index]).remove();
                this.contentPanels.splice(index, 1);
                index < this.selectedItemIndex() ? this.selectedItemIndex(this.selectedItemIndex() - 1) : this.selectedItemIndex();

                if (index < 0 || index >= this.anchors.length) {
                    this.selectedItemIndex(0);
                }
                if ((this.model.headerPosition == "left" || this.model.headerPosition == "right") && this.items.length == 1)
                    this._removeVerticalClass();
                else
                    this.items.length == 1 && this.itemsContainer.removeClass("e-header");
                this._unWireEvents();
                this._itemsRefreshing();
                this._wireEvents(this.model.events);
                if (this.model.enableTabScroll)
                    this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                for (indx = 0; indx < this.items.length; indx++)
                    if (bbdesigner$(this.items[indx]).hasClass('e-disable'))
                        this.model.disabledItemIndex.push(indx);
                this._disableTabs();
                var data = {
                    removedTab: removedTab
                };
                this._onRemove(data);
            }
            if (this.getItemsCount() == 0) {
                this.itemsContainer.removeAttr("style")
                this.itemsContainer.find("div").remove()
            }
            if (this._tabContentsHeight() < Number(this.model.height) && this.itemsContainer.css("clip").split("px").length && this.model.enableTabScroll && (this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                this._refresh();
                this.itemsContainer.removeAttr("style");
                this._leftScrollIcon ? this._leftScrollIcon.remove() : "";
                this._rightScrollIcon ? this._rightScrollIcon.remove() : "";
            }
            else if (this.model.enableTabScroll && (this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                if (this._leftScrollIcon && Number(this.itemsContainer.css("clip").split("px")[0].replace(",", "").split("(")[1]) != -(Number(this._leftScrollIcon.css("margin-top").split("px")[0]))) {
                    this._removeScroll();
                    this._addScroll();
                } else
                    this.refreshTabScroll();
                this.showItem(this.selectedItemIndex())
            }

        },

        show: function () {
            if (!this.model.enabled) return false;
            this.element.css("visibility", "visible");
        },

        hide: function () {
            if (!this.model.enabled) return false;
            this.element.css("visibility", "hidden");
        },

        _onBeforeLoad: function (link) {
            var data;
            if (this.selectedItemIndex() == -1 && this.model.collapsible)
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: null, activeIndex: null, url: link, isInteraction: this._isInteraction };
            else
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: this.items[this.selectedItemIndex()], activeIndex: this.selectedItemIndex(), url: link, isInteraction: this._isInteraction };
            return this._trigger("ajaxBeforeLoad", data);
        },

        _focusIn: function () {
            if (!this.model.readOnly && this.model.allowKeyboardNavigation)
                bbdesigner$(this.element).on("keydown", bbdesigner$.proxy(this._keyPress, this));
        },

        _focusOut: function (e) {
            bbdesigner$(this.element).off("keydown", bbdesigner$.proxy(this._keyPress, this));
        },

        _onLoad: function (link) {
            var data;
            if (this.selectedItemIndex() == -1 && this.model.collapsible)
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: null, activeIndex: null, url: link, isInteraction: this._isInteraction };
            else
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: this.items[this.selectedItemIndex()], activeIndex: this.selectedItemIndex(), url: link, isInteraction: this._isInteraction };
            return this._trigger("ajaxLoad", data);
        },

        _onActive: function () {
            var data;
            if (this.selectedItemIndex() == -1 && this.model.collapsible)
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: null, activeIndex: null, isInteraction: this._isInteraction };
            else
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: this.items[this.selectedItemIndex()], activeIndex: this.selectedItemIndex(), isInteraction: this._isInteraction };
            this._isInteraction = true;
            return this._trigger("itemActive", data);

        },

        _onBeforeActive: function (index) {
            if (this.model.beforeActive != null) {
                var data;
                if (this.selectedItemIndex() == -1 && this.model.collapsible)
                    data = { prevActiveHeader: this.items[this._preTabSelectedIndex], prevActiveIndex: this._preTabSelectedIndex, activeHeader: null, activeIndex: null, isInteraction: this._isInteraction };
                else
                    data = { prevActiveHeader: this.items[this._preTabSelectedIndex], prevActiveIndex: this._preTabSelectedIndex, activeHeader: this.items[index], activeIndex: index, isInteraction: this._isInteraction };
                return this._trigger("beforeActive", data);
            }
        },

        _onAdd: function (data) {
            return this._trigger("itemAdd", data);
        },

        _onRemove: function (data) {
            return this._trigger("itemRemove", data);
        },

        _onBrforeRemove: function (data) {
            return this._trigger("beforeItemRemove", data);
        }
    });

    BoldBIDashboard.Tab.HeightAdjustMode = {
        /**  Panel height adjusts based on the content */
        Content: "content",
        /**  All panel height will be set the tallest panel height. */
        Auto: "auto",
        /**  Content panel take based on the parent height. */
        Fill: "fill",
        /**  Content panel take based on the height property. */
        None: "none"
    };

    BoldBIDashboard.Tab.Position = {
        /**  Tab headers display to top position. */
        Top: "top",
        /**  Tab headers display to bottom position. */
        Bottom: "bottom",
        /**  Tab headers display to left position. */
        Left: "left",
        /** Tab headers display to right position. */
        Right: "right"
    };

})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the Html Radiobutton elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardRadioButton", "BoldBIDashboard.RadioButton", {
        _rootCSS: "e-radiobtn",

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["checked"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },

        defaults: {

            id: null,

            name: null,

            value: null,

            checked: false,

            cssClass: "",

            text: "",

            enableRTL: false,

            htmlAttributes: {},

            enablePersistence: false,

            idPrefix: "BoldBIDashboard",

            size: "small",

            enabled: true,

            validationRules: null,

            validationMessage: null,

            beforeChange: null,

            change: null,

            create: null,

            destroy: null
        },


        dataTypes: {
            id: "string",
            name: "string",
            checked: "boolean",
            enablePersistence: "boolean",
            size: "enum",
            enabled: "boolean",
            idPrefix: "string",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },


        _init: function () {
            var browserInfo = BoldBIDashboard.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            this._setValue();
            this._renderControl();
            if (this.isChecked)
                this._checkedHandler();
            this._setEnabled(this.model.enabled);
            this._addAttr(this.model.htmlAttributes);
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._wireEvents();
            this.initialRender = false;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.div.addClass(value);
                else if(key == "name") proxy.radbtn.attr(key, value);
                else if (key == "required") proxy.radbtn.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "checked" && value == "checked") proxy._checkedChange(true, true);
                else proxy.div.attr(key, value);
            });
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            this.element.find("input").rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator? validator : this.element.closest("form").validate();
            name = this.element.find('input').attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                }
            }
        },


        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        if (this.model.text)
                            (options[prop]) ? this.textWrapDiv.addClass("e-rtl") : this.textWrapDiv.removeClass("e-rtl");
                        else 
	                    	(options[prop]) ? this.element.closest('.e-radiobtn-wrap').addClass('e-rtl') : this.element.closest('.e-radiobtn-wrap').removeClass('e-rtl');
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.find('input').rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[prop];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "checked": this.model.checked = options[prop]; this._checkedChange(this.model.checked); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.radbtn.attr('name', options[prop]); break;
                    case "value": this.radbtn.attr('value', options[prop]); break;
                    case "htmlAttributes": this._addAttr(options[prop]); break;
                }
            }
        },

        _destroy: function () {
            this.radbtn.removeClass("e-radiobtn e-input");
            this.radbtn.insertBefore(this.element);
            this.element.remove();
            this.element = this.radbtn;
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
                this.textWrapDiv.removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setValue: function () {
            if (!BoldBIDashboard.isNullOrUndefined(this.element.attr("id")))
                this.model.id = this.element.attr("id");
            if (!BoldBIDashboard.isNullOrUndefined(this.element.attr("name")))
                this.model.name = this.element.attr("name");
            if (!BoldBIDashboard.isNullOrUndefined(this.element.attr("value")))
                this.model.value = this.element.attr("value");
            this.element.attr({ "id": this.model.id, "name": this.model.name, "value": this.model.value });
            if (!this.model.checked && !BoldBIDashboard.isNullOrUndefined(this.element.attr('checked')))
                this.model.checked = this.isChecked = true;
            else
                this.isChecked = this.model.checked;
        },

        _setIdAttr: function (val) {
            bbdesigner$("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            bbdesigner$("#" + this.model.idPrefix + this.model.id).attr('id', this.model.idPrefix + val);
            this.radbtn.attr('id', val);
        },

        _setSize: function (val) {
            if (val == BoldBIDashboard.RadioButtonSize.Medium)
                this.span.removeClass('e-radsmaller').addClass('e-radmedium');
            else
                this.span.removeClass('e-radmedium').addClass('e-radsmaller');
        },

        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },

        _renderControl: function () {
            this.initialRender = true;
            var browserInfo = BoldBIDashboard.browserInfo();
            if (browserInfo.name == 'msie' && browserInfo.version == '8.0')
                this.div = bbdesigner$('<div class="e-radiobtn-wrap e-widget e-rad-outer" ></div>');
            else
                this.div = bbdesigner$('<div class="e-radiobtn-wrap e-widget" ></div>');
            this.div.attr({ 'id': this.model.idPrefix + this.model.id, "role": "radio", "tabindex": 0, "aria-checked": false });
            this.span = bbdesigner$('<span></span>');
            this.span.addClass("e-spanicon");
            this._setSize(this.model.size);
            this.spanImg = bbdesigner$('<span class="e-rad-icon e-icon e-rad-select"></span>', "", {}, { "role": "presentation" });
            this.element.addClass("e-input");
            this.model.name = BoldBIDashboard.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
            this.element.attr({ "id": this.model.id, "name": this.model.name, "value": this.model.value });
            this.div.addClass(this.model.cssClass);
            this.span.append(this.spanImg);
            this.div.insertBefore(this.element);
            this.div.append(this.element);
            this.div.append(this.span);
            this._setTextWrapper(this.model.text);
            this.radbtn = this.element;
            this.element = this.div;
            if (this.isChecked) {
                this.element.find(".e-input").attr('checked', true);
            }
        },

        _setTextWrapper: function (val) {
            if (val != "") {
                this.textWrapDiv = BoldBIDashboard.buildTag("div.e-radiobtn-wrap " + this.model.cssClass + "#" + this.model.idPrefix + this.model.id + "_wrapper");
                this.div.wrapAll(this.textWrapDiv);
                this.txtSpan = BoldBIDashboard.buildTag("div.e-text", val);
                this.textWrapDiv = bbdesigner$("#" + this.model.idPrefix + this.model.id + "_wrapper");
                this.textWrapDiv.append(this.txtSpan);
                if (this.model.enableRTL)
                    this.textWrapDiv.addClass("e-rtl");
            } else if (this.model.enableRTL)
                this.element.closest('.e-radiobtn-wrap').addClass('e-rtl');
        },

        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },

        _wireEvents: function () {
            this._on(this.element, "click", this._checkedHandler);
            this._on(this.element, "focus", this._focusIn);
            this._on(this.element, "focusout", this._focusOut);
        },
        _focusIn: function (evt) {
            bbdesigner$(this.element).addClass("e-focus");
            bbdesigner$(this.element).bind("keydown", bbdesigner$.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            bbdesigner$(this.element).removeClass("e-focus");
            bbdesigner$(this.element).unbind("keydown", bbdesigner$.proxy(this._checkUnCheck, this));
        },

        _checkUnCheck: function (evt) {
            //Space bar,and arrow keys to check and uncheck
            if (evt.keyCode == 32 || evt.keyCode == 37 || evt.keyCode == 38 || evt.keyCode == 39 || evt.keyCode == 40) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },
        _checkedHandler: function (evt) {
            if (!this.element.hasClass('e-disable')) {
                this.isChecked = this.element.find('input.e-radiobtn:radio').attr('checked') == 'checked' ? true : false;
                if (!bbdesigner$(this.element).find(".e-rad-icon").hasClass("e-rad-active")) this._changeEvent(true);
            }
        },

        _checkedChange: function (val, interaction) {
            this.isChecked = val;
            if ((this.isChecked) && (this.model.enabled))
                this._changeEvent(interaction);
        },

        _changeEvent: function (interaction) {
            var data = { isChecked: this.isChecked, isInteraction: !!interaction };
            if (!this.initialRender) {
                if (true == this._trigger("beforeChange", data))
                    return false;
            }
            if (!bbdesigner$(this.element).find(".e-rad-icon").hasClass("e-rad-active")) {
                var curname = this.element.find(".e-input").attr('name'),
                input = bbdesigner$('input.e-radiobtn[name="' + curname + '"]:radio'),
                proxy = this,
                currElement = this.element.find('.e-input'),
                currObj = bbdesigner$(currElement).data("BoldBIDashboardRadioButton");
                if (data.isChecked) {
                    this.spanImg.addClass("e-rad-active").removeClass('e-rad-select');
                    this.div.attr({ "tabindex": 0, "aria-checked": true });
                }
                bbdesigner$.each(input, function (i, obj) {
                    bbdesigner$(obj).closest(".e-radiobtn-wrap").find(".e-rad-icon").removeClass("e-rad-active").addClass("e-rad-select");
                    bbdesigner$(obj).closest(".e-radiobtn-wrap").attr({ "tabindex": 0, "aria-checked": false });
                    var prevObj = bbdesigner$(obj).data("BoldBIDashboardRadioButton");
                    if (prevObj != null) {
                        prevObj.model.checked = false;
                    }
                });
                if (currObj != null)
                    currObj.model.checked = true;
                this.element.find(".e-rad-icon").addClass("e-rad-active").removeClass("e-rad-select");
                this.div.attr({ "tabindex": 0, "aria-checked": true });
                this.element.find(".e-input").click();
                this.isChecked = true;
            }
            var data = { isChecked: this.isChecked, isInteraction: !!interaction };
            if (!this.initialRender)
                this._trigger("change", data);

        },

        disable: function () {
            if (!this.element.hasClass("e-disable")) {
                this.element.addClass("e-disable");
			this.radbtn.attr("disabled","disabled");
			}
            if (this._isIE8) this.span.addClass("e-disable");
            this.div.attr("aria-disabled", true);
            this.model.enabled = false;
        },

        enable: function () {
            if (this.element.hasClass("e-disable")) {
                this.element.removeClass("e-disable");
				this.radbtn.removeAttr("disabled");
			}
            if (this._isIE8) this.span.removeClass("e-disable");
            this.div.attr("aria-disabled", false);
            this.model.enabled = true;
        }
    });

    BoldBIDashboard.RadioButtonSize = {
        /**  Creates radio button with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates radio button with inbuilt medium size height, width specified */
        Medium: "medium"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the Dialog control
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardDialog", "BoldBIDashboard.Dialog", {
        _rootCSS: "e-dialog",

        element: null,
        _ignoreOnPersist: ["drag", "dragStart", "dragStop", "resizeStop", "resizeStart", "resize", "beforeClose", "beforeOpen", "collapse", "expand", "close", "open", "destroy", "create", "ajaxSuccess", "ajaxError", "contentLoad", "actionButtonClick", "enableResize"],

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        angular: {
            terminal: false
        },

        defaults: {

            showOnInit: true,

            closeOnEscape: true,

            //currently we have deprecated this API
            closeIconTooltip: "close",

            enableAnimation: true,

            allowDraggable: true,

            backgroundScroll: true,

            height: "auto",

            minHeight: 120,

            minWidth: 200,

            maxHeight: null,

            maxWidth: null,

            enableModal: false,

            position: { X: "", Y: "" },

            containment: null,

            enableResize: true,

            htmlAttributes: {},

            showHeader: true,

            showFooter: false,

            contentType: null,

            contentUrl: null,

            ajaxSettings: {

                type: 'GET',

                cache: false,

                data: {},

                dataType: "html",

                contentType: "html",

                async: true
            },

            title: "",

            width: 400,

            zIndex: 1000,

            cssClass: "",

            enableRTL: false,

            allowKeyboardNavigation: true,

            showRoundedCorner: false,

            actionButtons: ["close"],

            animation:{
                show:{
                    effect:"fade",
                    duration:400
                },
                hide:{
                    effect:"fade",
                    duration:400
                }
            },            

            tooltip:{
                close: "Close",
                collapse: "Collapse",
                restore: "Restore",
                maximize: "Maximize",
                minimize: "Minimize",
                expand: "Expand",
                unPin: "UnPin",
                pin: "Pin"
            },

            footerTemplateId: null,
            
            locale:"en-US",
            
            faviconCSS: null,

            content: null,

            target: null,

            enablePersistence: false,

            enabled: true,

            isResponsive: false,

            actionButtonClick: null,

            beforeClose: null,

            close: null,            

            expand: null,

            collapse: null,

            beforeOpen: null,

            open: null,

            drag: null,

            dragStart: null,

            dragStop: null,

            resize: null,

            resizeStart: null,

            resizeStop: null,

            contentLoad: null,

            ajaxSuccess: null,

            ajaxError: null,

            create: null,

            destroy: null,

            /*Deprecated*/            
            Close:null
        },

        dataTypes: {
            showOnInit: "boolean",
            closeOnEscape: "boolean",
            enableAnimation: "boolean",
            backgroundScroll: "boolean",
            position: "data",
            animation:"data",
            closeIconTooltip: "string",
            tooltip: "data",
            allowDraggable: "boolean",
            enableModal: "boolean",
            enableResize: "boolean",
            isResponsive: "boolean",
            showHeader: "boolean",
            showFooter: "boolean",
            title: "string",
            faviconCSS:"string",
            zIndex: "number",
            cssClass: "string",
            enablePersistence: "boolean",
            contentUrl: "string",
            contentType: "string",
            enableRTL: "boolean",
            enabled: "boolean",
            allowKeyboardNavigation: "boolean",
            showRoundedCorner: "boolean",
            locale: "string",
            htmlAttributes: "data",
            ajaxSettings: "data",
            actionButtons: "array",
			footerTemplateId: "string"
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "closeIconTooltip": this._dialogClose.attr("title", options[key]); break;
                    case "tooltip": this._tooltipText(options[key]); break;
                    case "title":
                        this.model.title = options[key];
                        if (this._BoldBIDashboardDialog.find("span.e-title").length <= 0) 
                            this._addTitleText();
                        else
                            this._BoldBIDashboardDialog.find("span.e-title").html(options[key]);
                        this._updateCaptionWidth();
                        break;
                    case "width": this.model.width = options[key]; this._changeSize(); this._updateCaptionWidth(); options[key] = this.model.width; break;
                    case "height": this.model.height = options[key]; this._changeSize(); options[key] = this.model.height; break;
                    case "position": this.model.position = options[key]; this._dialogPosition(); break;
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "showRoundedCorner": this.model.showRoundedCorner=options[key]; this._roundedCorner(options[key]); break;
                    case "contentType": { this.model.contentType = options[key]; this._appendContent(options[key]); break; }
                    case "enabled": { this.model.enabled = options[key]; this._enabledAction(options[key]); break; }
                    case "contentUrl": { this.model.contentUrl = options[key]; this._appendContent(this.model.contentType); break; }
					case "backgroundScroll":
						this.model.backgroundScroll = options[key]; 
						if (!this.model.backgroundScroll && this.model.enableModal) bbdesigner$("body").addClass("e-dialog-modal");
						else bbdesigner$("body").removeClass("e-dialog-modal");
						break;
                    case "content":
                    case "target": 
                        this._BoldBIDashboardDialog.appendTo(bbdesigner$(options[key]));
                        this.model.target = this.model.content = options[key];
                        this._dialogPosition();
                        break;
                    case "containment":
                        this._setDragArea(options[key]);
                        !BoldBIDashboard.isNullOrUndefined(this._target) ? this._BoldBIDashboardDialog.appendTo(this._target) : this._BoldBIDashboardDialog.appendTo(document.body);
                        this.model.position.X = this.model.position.Y = "";
                        this._dialogPosition();
                        this.model.containment = options[key] = this._target;
                        this.model.enableModal && this._createOverlay();
                        this._dialogTitlebar.BoldBIDashboardDraggable({ dragArea: this._target });
                        break;
                    case "locale":
					    this.model.locale = options[key];
                        this.localizedLabels = this._getLocalizedLabels(); 
                        this._setLocaleCulture(this.localizedLabels, true);
                        this._tooltipText(this.model.tooltip);
						if (this._BoldBIDashboardDialog.find("span.e-title").length <= 0) 
                            this._addTitleText();
                        else
                            this._BoldBIDashboardDialog.find("span.e-title").html(this.model.title);
                        this._updateCaptionWidth();                       				
                        break;
                    case "minHeight": { this.model.minHeight = options[key]; this._BoldBIDashboardDialog.css("minHeight", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "minWidth": { this.model.minWidth = options[key]; this._BoldBIDashboardDialog.css("minWidth", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxHeight": { this.model.maxHeight = options[key]; this._BoldBIDashboardDialog.css("maxHeight", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxWidth": { this.model.maxWidth = options[key]; this._BoldBIDashboardDialog.css("maxWidth", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "zIndex": { this._BoldBIDashboardDialog.css('z-index', options[key]); break; }
                    case "faviconCSS":
                        this.model.faviconCSS = options[key]; this._favIcon();this._updateCaptionWidth(); break;
                    case "isResponsive": {
                        this.model.isResponsive = options[key];
                        this.model.isResponsive ? this._BoldBIDashboardDialog.addClass("e-dialog-resize") : this._BoldBIDashboardDialog.removeClass("e-dialog-resize");
                        this._wireResizing();
                        break;
                    }
                    case "allowDraggable": {
                        this.model.allowDraggable = options[key];
                        if (options[key])
                            this._enableDrag();
                        else {
                            this._dialogTitlebar.removeClass("e-draggable");
                        }
                        break;
                    }
                    case "enableResize": {
                        this.model.enableResize = options[key];
                        if (options[key])
                            this._enableResize();
                        else {
                            this._BoldBIDashboardDialog.removeClass("e-resizable");
                            this._BoldBIDashboardDialog.find(".e-resize-handle").remove();
                        }
                        this._reRenderScroller();
                        break;
                    }
                    case "showHeader": {
                        this.model.showHeader = options[key];
                        if (options[key]) {
                            this._renderTitleBar();
                            this._iconsRender(this.model.actionButtons);
                            if (this.model.faviconCSS) { this._dialogFavIcon = false; this._favIcon(); }
                            this._enableDrag();
                            if (!this._maximize) this._updateScroller((!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? (this._BoldBIDashboardDialog.outerHeight(true) - (this._dialogTitlebar.outerHeight(true))) : this._BoldBIDashboardDialog.outerHeight(true) - 1 - (this._dialogTitlebar.outerHeight(true)), (!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._BoldBIDashboardDialog.width() : this._BoldBIDashboardDialog.width() - 2);
                        }
                        else {
                            this._BoldBIDashboardDialog.find(".e-titlebar").remove();
                            this._maximize ? this.refresh() : this._updateScroller((!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._BoldBIDashboardDialog.outerHeight(true) : this._BoldBIDashboardDialog.outerHeight(true) - 1, (!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._BoldBIDashboardDialog.width() : this._BoldBIDashboardDialog.width() - 2);
                        }
                        this._roundedCorner(this.model.showRoundedCorner);
                        if (this.model.showFooter) this._setContainerSize()._resetScroller();
                        break;
                    }
                    case "showFooter": {
                        this.model.showFooter = options[key];
                        if (options[key]) {
                            this._appendContent();
                            this._BoldBIDashboardDialog.find(".e-resizable").remove();
                        }
                        else 
                            this._BoldBIDashboardDialog.find(".e-footerbar").remove();
                        this._enableResize()._enableDrag()._sizeInPercent();
                        this._reRenderScroller();
                        this._setContainerSize()._resetScroller();
                        this._roundedCorner(this.model.showRoundedCorner);
                        break;
                    }
                    case "footerTemplateId": {
                        this.model.footerTemplateId = options[key];
                        if (this.model.showFooter) {
                            this._BoldBIDashboardDialog.find(".e-footerbar").empty();
                            var templateContent = bbdesigner$('body').find("#" + this.model.footerTemplateId).html();
                            this._dialogFooterbar.append(templateContent);
                            this._enableResize();
                        }
                        break;
                    }
                    case "enableRTL":
                        {
                            this.model.enableRTL = options[key];
                            if (this.model.faviconCSS) this._favIcon();
                            if (options[key]) {
                                this._BoldBIDashboardDialog.addClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "rtl");
                                if (this.scroller) 
                                    this._resetScroller();
                            } else {
                                this._BoldBIDashboardDialog.removeClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "ltr");
                                if (this.scroller) 
                                    this._resetScroller();
                            }
                            break;
                        }
                    case "actionButtons":
                        {
                            if (!BoldBIDashboard.isNullOrUndefined(this._dialogTitlebar) ){
                                this._removeAllIcons();
                                this._iconsRender(options[key]);
                            }
                            this.model.actionButtons = options[key];
                            this._updateCaptionWidth();
                            break;
                        }
                    case "enableModal": {
                        this._enableModal(options[key]);
                        break;
                    }
                    case "htmlAttributes": this._addAttr(options[key]); break;
                }
            }
        },


        _destroy: function () {
            if (this._overLay) this._overLay.remove();
            this._cloneElement.appendTo(this._BoldBIDashboardDialog.parent());
            this._BoldBIDashboardDialog.remove();
            this._cloneElement.removeClass("e-dialog");
            this.element = this._cloneElement;
            this._isOpen = false;
            bbdesigner$(window).off("resize", bbdesigner$.proxy(this._reSizeHandler, this));
        },

        keyConfigs: [37, 38, 39, 40],

        _init: function () {
			this._init=true;
            this._widthPercent = null;
            this._heightPercent = null;
            this._windowSize = { outerWidth: bbdesigner$(window).outerWidth(), outerHeight: bbdesigner$(window).outerHeight() };
            this._initSize = { width: this.model.width, height: this.model.height };
            this._sizeType = { width: isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g)[0] : null, height: isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g)[0] : null };
            this._isOpen = this._maximize = this._minimize = false;
            this.localizedLabels = this._getLocalizedLabels(); 
            this._setLocaleCulture(this.localizedLabels);
            this._setDimension();
            if (!this.model.close) this.model.close = this.model.Close;
            if (!this.model.target) this.model.target = this.model.content;
			this._responsive();
            this._renderControl();
            this._wireEvents();    
            this.scrObj= this._BoldBIDashboardDialog.closest(".e-dialog.e-js").data("BoldBIDashboardDialog")
            if(this.scrObj) this.scrObj._resetScroller(); 
			this.hidden=false;			
            this._init=false;
            this._keyNavigation=false;	
        },
		
		_responsive: function () {
            this.width = this.model.width;
            bbdesigner$(this.element).width(this.width);

            this.height = this.model.height;
            bbdesigner$(this.element).height(this.height);
            bbdesigner$(window).on("resize", bbdesigner$.proxy(this._resizeHandler, this));
        },
        
        _resizeHandler: function () {
            if (this._maximize) {
                this.width = bbdesigner$(this._dialogTitlebar).outerWidth();
                bbdesigner$(this.contentDiv).width(this.width);
                bbdesigner$(this.contentDiv).children().width(this.width);

                this.model.height = this.height = bbdesigner$(window).height();
                this._BoldBIDashboardDialog.css({ height: this.height });
                this.contentDiv.height(this._BoldBIDashboardDialog.height() - bbdesigner$(this._dialogTitlebar).outerHeight() - bbdesigner$(this._dialogFooterbar).outerHeight());
                this.element.height(this.contentDiv.height());
            }
			if(!BoldBIDashboard.isNullOrUndefined(this.element)) this._resetScroller();
        },
       
        _setLocaleCulture:function(localizedLabels, isSetModel){
            //Deprecated closeIconTooltip locale
            if(this.defaults.closeIconTooltip===this.model.closeIconTooltip)
                this.model.closeIconTooltip=localizedLabels.closeIconTooltip;
			
                if (isSetModel) {	
                 	 this.model.tooltip= this.localizedLabels.tooltip ;
                     this.model.title= this.localizedLabels.title;			 
				} 
				if(JSON.stringify(this.model.tooltip) === JSON.stringify(this.defaults.tooltip))
                this.model.tooltip=localizedLabels.tooltip;  				
				if(this.model.title === this.defaults.title)
				this.model.title=localizedLabels.title;  
        },

        _setDragArea: function (value) {
            if (!BoldBIDashboard.isNullOrUndefined(value))
            {
                if (typeof value == "string") {
                    if (value == "parent") this._target = bbdesigner$(this.element).parent();
                    if (value.toLowerCase() == "document") this._target = bbdesigner$(document);
                    if (value.toLowerCase() == "window") this._target = bbdesigner$(window);
                    else if (bbdesigner$(value).length > 0) this._target = bbdesigner$(value);
                } else if (typeof value == "object") {
                    if (value.length > 0) this._target = value;
                }
                else this._target = null;
            } else this._target = null;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy._BoldBIDashboardDialog.addClass(value);
                else if (key == "disabled" && value == "disabled") { proxy.model.enabled = false; proxy._enabledAction(false); }
                else{
					if(proxy._BoldBIDashboardDialog[0].hasAttribute("style")){
					 var newValue = proxy._BoldBIDashboardDialog[0].getAttribute("style") + value;
					 proxy._BoldBIDashboardDialog.attr(key, newValue);
					}					
				} 
            });
        },
        _tooltipText: function(data){
            bbdesigner$.extend(this.model.tooltip, data);
            if(!BoldBIDashboard.isNullOrUndefined(this._dialogClose) && this._dialogClose.hasClass('e-close'))
                this._dialogClose.attr("title", this.model.tooltip.close);
            if (!BoldBIDashboard.isNullOrUndefined(this._dialogCollapsible) && (data.collapse || data.expand)) {
                if (this._dialogCollapsible.hasClass('e-arrowhead-up'))
                    this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                if (this._dialogCollapsible.hasClass('e-arrowhead-down'))
                    this._dialogCollapsible.attr("title", this.model.tooltip.expand);
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._dialogMaximize) && (data.maximize || data.restore)) {
                if (this._dialogMaximize.hasClass('e-maximize'))
                    this._dialogMaximize.attr("title", this.model.tooltip.maximize);
                if (this._dialogMaximize.hasClass('e-restore'))
                    this._dialogMaximize.attr("title", this.model.tooltip.restore);
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._dialogMinimize) && (data.minimize || data.restore)) {
                if (this._dialogMinimize.hasClass('e-minus'))
                    this._dialogMinimize.attr("title", this.model.tooltip.minimize);
                if (this._dialogMinimize.hasClass('e-restore'))
                    this._dialogMinimize.attr("title", this.model.tooltip.restore);
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._dialogPin) && (data.pin || data.unPin)) {
                if (this._dialogPin.hasClass('e-unpin'))
                    this._dialogPin.attr("title", this.model.tooltip.pin);
                if (this._dialogPin.hasClass('e-pin'))
                    this._dialogPin.attr("title", this.model.tooltip.unPin);
            }
        },
        _renderControl: function () {
            this._cloneElement = this.element.clone();
            this.element.attr("tabindex", 0).attr({ "role": "dialog", "aria-labelledby": this.element.prop("id") + "_title" });
            this._BoldBIDashboardDialog = BoldBIDashboard.buildTag("div.e-dialog e-widget e-box " + this.model.cssClass + " e-dialog-wrap e-shadow#" + (this.element.prop("id") == "" ? "" : this.element.prop("id") + "_wrapper"), "", { display: "none", zIndex: this.model.zIndex }, { tabindex: 0 });
            if(this.model.isResponsive) this._BoldBIDashboardDialog.addClass("e-dialog-resize");
            this.wrapper = this._BoldBIDashboardDialog;
            this._addAttr(this.model.htmlAttributes);
            this._setDragArea(this.model.containment);
            if(!BoldBIDashboard.isNullOrUndefined(this.model.containment) && !BoldBIDashboard.isNullOrUndefined(this._target)) var target = this._target;                
            else if(!BoldBIDashboard.isNullOrUndefined(this.model.target)) var target = this.model.target;
            var wrapperTarget = !BoldBIDashboard.isNullOrUndefined(target) ? target : document.body;
            var oldWrapper = bbdesigner$(wrapperTarget).find("#" + this._id + "_wrapper").get(0);
            if (oldWrapper) bbdesigner$(oldWrapper).remove();
            this._BoldBIDashboardDialog.appendTo(wrapperTarget);
            if (this.model.enableRTL) this._BoldBIDashboardDialog.addClass("e-rtl");
            if (this.model.showHeader) {
                this._renderTitleBar();
                this._iconsRender(this.model.actionButtons);
                if (this.model.faviconCSS) this._favIcon();
            }
            this._appendContent(this.model.contentType);
            this._enableResize()._enableDrag()._setSize();
			if(this.model.height != "auto") this._sizeInPercent();
            if (this.model.contentType != "ajax"){                                                                  
                if (this.model.showOnInit && this.open()) {
                    this._setContainerSize()._resetScroller();
                }
                else this._setHiddenDialogSize();
            }
            this._roundedCorner(this.model.showRoundedCorner);
            this._enabledAction(this.model.enabled);
            if (this._sizeType.width == "auto") this._maxWidth = this.model.width;
            if (this._sizeType.height == "auto") this._maxHeight = this.model.height;
        },

        _setContainerSize: function () {
            if (this.model.height != "auto") {
                var cntHeight = this._BoldBIDashboardDialog.outerHeight() - ((this.model.showHeader)? bbdesigner$(this._BoldBIDashboardDialog.find("div.e-titlebar")).outerHeight(true) : 0)  + ((this.model.showFooter)? bbdesigner$(this._BoldBIDashboardDialog.find("div.e-footerbar")).outerHeight(true) : 0) - 1;
                this.contentDiv.height(cntHeight);
                this.element.outerHeight(cntHeight);
            }
            return this;
        },

        _changeSize: function () {
            this._initSize = { width: this.model.width, height: this.model.height };
            this._sizeType.width = isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g) : null;
            this._sizeType.height = isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g) : null;
            this._setSize()._sizeInPercent()._setContainerSize()._resetScroller();
        },

        _enableDrag: function () {
            if (this.model.allowDraggable && this.model.showHeader) {
                this._dialogTitlebar.addClass("e-draggable");
                this._dragDialog();
            }
            return this;
        },

        _enableResize: function () {
            if (this.model.enableResize) {
                this._BoldBIDashboardDialog.addClass("e-resizable");
                var resizeDiv = BoldBIDashboard.buildTag("div.e-icon e-resize-handle");
                if (this.model.showFooter) 
                    resizeDiv.appendTo(this._dialogFooterbar);
                else
                    resizeDiv.appendTo(this._BoldBIDashboardDialog);
                this._resizeDialog();
            }
            return this;
        },


        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this._BoldBIDashboardDialog.removeClass(this.model.cssClass).addClass(skin);
            }
        },
        _enableModal: function (value) {
            if (value) this._isOpen && this._createOverlay();
            else if (this._overLay) this._overLay.remove();
        },

        _enabledAction: function (flag) {
            if (flag) {
                this._BoldBIDashboardDialog.removeClass("e-disable");
                this.wrapper.children(".e-disable-overlay").remove();
                if (!BoldBIDashboard.isNullOrUndefined(this.scroller))
                    this.scroller.enable();
            }
            else {
                this._BoldBIDashboardDialog.addClass("e-disable");
                BoldBIDashboard.buildTag("div.e-disable-overlay").appendTo(this.wrapper);
                if (!BoldBIDashboard.isNullOrUndefined(this.scroller))
                    this.scroller.disable();
            }
        },

        _renderTitleBar: function () {
            this._elementTitle = this.element.attr("title");
            if (typeof this._elementTitle !== "string")
                this._elementTitle = "";
            this.model.title = this.model.title || this._elementTitle;
            this._dialogTitlebar = BoldBIDashboard.buildTag("div#" + this.element.prop("id") + "_title.e-titlebar e-header e-dialog").prependTo(this._BoldBIDashboardDialog);
            this._addTitleText();
        },

        _renderFooterBar: function () {
            this._dialogFooterbar = BoldBIDashboard.buildTag("div#" + this.element.prop("id") + "_foot.e-footerbar e-dialog e-js").appendTo(this._BoldBIDashboardDialog);
        },

        _addTitleText: function () {
            if (this.model.title) 
                this._titleText = BoldBIDashboard.buildTag("span.e-title", this.model.title).prependTo(this._dialogTitlebar);
            return this;
        },
        _updateCaptionWidth: function () {
            var addWidth=this.model.faviconCSS && !BoldBIDashboard.isNullOrUndefined(this._dialogFavIcon)?this._dialogFavIcon.outerWidth():0;
			if(this._titleText && !BoldBIDashboard.isNullOrUndefined(this._dialogTitlebar))
			    this._titleText.css("max-width", (this._dialogTitlebar.width() - 20 - (this._dialogTitlebar.find(".e-dialog-icon").width() * this._dialogTitlebar.find(".e-dialog-icon").length) - addWidth));
			return this;
        },
        _iconsRender: function (iconArray) {
            for (var icon = 0; icon < iconArray.length; icon++) {
                switch ((BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version <= 8) ? bbdesigner$.trim(iconArray[icon]) : iconArray[icon].trim()) {
                    case "close": {
                        this._closeIcon();
                        break;
                    }
                    case "collapse":
                    case "collapsible": {
                        this._collapsibleIcon();
                        break;
                    }
                    case "maximize": {
                        this._maximizeIcon();
                        break;
                    }
                    case "minimize": {
                        this._minimizeIcon();
                        break;
                    }
                    case "pin": {
                        this._pinIcon();
                        break;
                    }
                    default: {
                        this._customIconsRender(iconArray[icon]);
                        break;
                    }
                }
            }
        },

        _customIconsRender: function (icon) {
            this._customIcon = BoldBIDashboard.util.buildTag("div#" + this.element[0].id + "_" + icon + "button.e-dialog-icon e-icon e-" + icon, null, null).attr('tabIndex', '0').attr('title', icon);
            this._customIcon.appendTo(this._dialogTitlebar);
            this._on(this._customIcon, "touchstart click", this._iconClick);
        },

        _iconClick: function () {
            
            if (!this.element.hasClass("e-disable")) {
                var args = {
                    cancel: false,
                    buttonID: bbdesigner$(event.target).attr("id"),
                    event: event.type,
                    model: this.model,
                    currentTarget: event.currentTarget.title
                }
                this._trigger("actionButtonClick", args);
            }
        },

        _removeAllIcons: function () {
            this._dialogTitlebar.find("div.e-dialog-icon").remove();
        },

        _appendContent: function (contentType) {
            this.contentDiv = BoldBIDashboard.isNullOrUndefined(this.contentDiv) ? BoldBIDashboard.buildTag("div.e-dialog-scroller") : this.contentDiv;
            this.element.removeAttr("title").addClass("e-widget-content e-box");
            var proxy = this;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.contentUrl) && !BoldBIDashboard.isNullOrUndefined(contentType)) {
                if (contentType == "ajax") {
                    this.model.ajaxSettings.url = this.model.contentUrl;
                    this._sendAjaxOptions(this.element, this.model.ajaxSettings.url);
                }
                else if (contentType == "iframe") {
                    if (this.element.children('.e-iframe').length > 0) {
                        this.iframe = this.element.find('iframe.e-iframe');
                        this.iframe.attr('src', this.model.contentUrl);
                    }
                    else {
                        this.iframe = BoldBIDashboard.buildTag("iframe.e-iframe", "", { width: "100%", height:"100%" }, { scrolling: "auto", frameborder: 0, src: this.model.contentUrl });
                        this.element.appendTo(this.contentDiv).append(this.iframe).show();
                    }
                    if (this.model.enableRTL) {
                        bbdesigner$(this.iframe).load(function () {
                            proxy.iframe.contents().find("body").css("direction", "rtl");
                        });
                    }
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else if (contentType == "image") {
                    var img = BoldBIDashboard.buildTag("img.e-images", "", "", { src: this.model.contentUrl });
                    this.element.append(img).show().appendTo(this.contentDiv);
                    bbdesigner$(img).on("load", function () {
                        proxy._dialogPosition();
                    });
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else
                    this.element.show().appendTo(this.contentDiv);
            }
            else {
				this.dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!BoldBIDashboard.isNullOrUndefined(this.dialogIframeContent)) {
				   this.element.show().appendTo(this.contentDiv).find('iframe').append(this.dialogIframeContent.lastChild);
				}
				else
					this.element.show().appendTo(this.contentDiv);
			}
            if (this._BoldBIDashboardDialog.find("div.e-resize-handle").length > 0) {
                if (this._BoldBIDashboardDialog.find(".e-footerbar").length == 0)
				this.contentDiv.insertBefore(this._BoldBIDashboardDialog.find("div.e-resize-handle"));
			}
			else {
				var dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!BoldBIDashboard.isNullOrUndefined(dialogIframeContent)) {
                    this.contentDiv.appendTo(this._BoldBIDashboardDialog);
					var getid = bbdesigner$("#"+this.contentDiv.find('iframe').attr('id'));
					bbdesigner$(getid[0].contentDocument.lastChild).remove();
				    getid[0].contentDocument.appendChild(dialogIframeContent);
					if(BoldBIDashboard.browserInfo().name == "mozilla")
					setTimeout(function () {
						bbdesigner$(getid[0].contentDocument.lastChild).remove();
				        getid[0].contentDocument.appendChild(dialogIframeContent);
                    },500);
				}
				else {
					if(this._BoldBIDashboardDialog.find(".e-footerbar").length == 0)
					this.contentDiv.appendTo(this._BoldBIDashboardDialog);
				    else
                    this.contentDiv.insertBefore(this._dialogFooterbar);
				     }
				}
            if (this.model.showFooter && this._BoldBIDashboardDialog.find(".e-footerbar").length == 0) {
                this._renderFooterBar();
                if (this.model.footerTemplateId != null) {
                    var templateContent = bbdesigner$('body').find("#" + this.model.footerTemplateId).html();
                    this._dialogFooterbar.append(templateContent);
                }
            }
        },

        _roundedCorner: function (value) {
            this._BoldBIDashboardDialog[(value ? "addClass" : "removeClass")]('e-corner');
            this.contentDiv.removeClass('e-dialog-top e-dialog-bottom e-dialog-content');
            if (this.model.showRoundedCorner) {
                this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-bottom') : !this.model.showHeader && this.model.showFooter ? this.contentDiv.addClass('e-dialog-top') : !this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-content') : true;
            }
        },

        _reRenderScroller: function () {
            if (this.scroller != undefined) {
                    this.scroller.refresh(true);
                if (!this.model.enableRTL) {
                    if ((this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && this.model.enableResize) {
                        if (this.model.showFooter) 
                            var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(), padngSpace = 0, resizeHandleSize = 0;
                        else
                            var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(), padngSpace = 2, resizeHandleSize = this._BoldBIDashboardDialog.find('div.e-resize-handle').outerHeight();
	                    if (Math.floor(this.contentDiv.outerHeight()) === Math.floor(this.scroller._vScrollbar.model.height + 1)) {
                            this.scroller._vScrollbar.model.height -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._scrollData.handle -= resizeHandleSize;
                            this.scroller._vScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._updateLayout(this.scroller._vScrollbar._scrollData);
                            this.scroller._vScrollbar.element.find('> div.e-vscroll').height(height - resizeHandleSize - padngSpace);
                        }
                    }
                    if (!(this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && (this.scroller._hScrollbar && this.scroller._hScrollbar._scrollData) && this.model.enableResize) {
                        if (this.model.showFooter) 
                            var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(), padngSpace = 0, resizeHandleSize = 0;
                        else
                            var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(), padngSpace = 2, resizeHandleSize = this._BoldBIDashboardDialog.find('div.e-resize-handle').outerWidth();
                        this.scroller._hScrollbar.model.width -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handle -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._updateLayout(this.scroller._hScrollbar._scrollData);
                        this.scroller._hScrollbar.element.find('> div.e-hscroll').width(width - resizeHandleSize - padngSpace);
                    }
                }
            }
        },       

        _dialogMaxZindex: function () {
            var parents = this.element.parents(), bodyEle, contEle,index,cindex;
            bodyEle = bbdesigner$('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            bbdesigner$(bodyEle).each(function (i, ele) { parents.push(ele); });
            contEle = bbdesigner$(this.model.target).children(), cindex = contEle.index(this.popup);
            contEle.splice(cindex, 1);
            bbdesigner$(contEle).each(function (i, ele) { parents.push(ele); });
            var maxZ = Math.max.apply(maxZ, bbdesigner$.map(parents, function (e, n) {
                if (bbdesigner$(e).css('position') != 'static') return parseInt(bbdesigner$(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },

        _setZindex: function () {
            var zindex = this._dialogMaxZindex();
            if (this.model.zIndex <= zindex)
                this._BoldBIDashboardDialog.css({ zIndex: zindex + 1 });
        },

        _createOverlay: function () {
            var zindex = this._BoldBIDashboardDialog.css('zIndex'), target, element, position;
            !BoldBIDashboard.isNullOrUndefined(this._overLay) && this._overLay.remove();
            if (!this.model.backgroundScroll) bbdesigner$("body").addClass("e-dialog-modal");
            this._overLay = BoldBIDashboard.buildTag("div#" + this.element.attr("id") + "_overLay.e-overlay", "", { zIndex: zindex - 1 });
			bbdesigner$(this._overLay).addClass("e-widget");
            if (!BoldBIDashboard.isNullOrUndefined(this.model.containment) && !BoldBIDashboard.isNullOrUndefined(this._target)) target = this._target;
            else if (!BoldBIDashboard.isNullOrUndefined(this.model.target)) target = this.model.target;
            this._overLay.prependTo(!BoldBIDashboard.isNullOrUndefined(target) ? target : document.body);
            var position = !BoldBIDashboard.isNullOrUndefined(this.model.containment) && !BoldBIDashboard.isNullOrUndefined(this._target) ? "absolute" : "fixed";
            var left =(BoldBIDashboard.isNullOrUndefined(target) || position=="fixed") ? 0 : bbdesigner$(target).css('position').toLowerCase() != "static" ? 0 : bbdesigner$(target).offset().left;
            var top = (BoldBIDashboard.isNullOrUndefined(target) || position=="fixed") ? 0 : bbdesigner$(target).css('position').toLowerCase() != "static" ? 0 : bbdesigner$(target).offset().top;
            this._overLay.css({ top: top, left: left, position: position });
        },

        _sendAjaxOptions: function (content, link) {
            //load waiting popup
            content.addClass("e-load");
            var proxy = this;
            var curTitle = this.model.title;
            var hrefLink = link;
            var ajaxOptions = {
                "success": function (data) {
                    try { proxy._ajaxSuccessHandler(data, content, link, curTitle); }
                    catch (e) { }
                },
                "error": function (e) {
                    try { proxy._ajaxErrorHandler({ "status": e.status, "responseText": e.responseText, "statusText": e.statusText }, content, link, curTitle); }
                    catch (e) { }
                },
                "complete": function () {
                    try {
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        if (!proxy.model.showOnInit) proxy._setHiddenDialogSize();
                    } catch (e) {}
                }
            };
            bbdesigner$.extend(true, ajaxOptions, this.model.ajaxSettings);
            this._sendAjaxRequest(ajaxOptions);
        },

        _setHiddenDialogSize: function () {
            if (!this._isOpen) {
                this._BoldBIDashboardDialog.css({ "display": "block", "visibility": "hidden" });
                this._setContainerSize()._resetScroller();
                this._BoldBIDashboardDialog.css({ "display": "none", "visibility": "" });
            }
        },

        _sendAjaxRequest: function (ajaxOptions) {
            bbdesigner$.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
                beforeSend: ajaxOptions.beforeSend,
                complete: ajaxOptions.complete
            });
        },

        _ajaxSuccessHandler: function (data, content, link, curTitle) {
            content.removeClass("e-load");
            content.html(data).addClass("e-dialog-loaded").appendTo(this._BoldBIDashboardDialog);
            content.appendTo(this.contentDiv);
            this._dialogPosition();
            if (this.model.showOnInit)
                this.open();
            this._trigger("ajaxSuccess", { data: data, url: link });
        },

        _ajaxErrorHandler: function (data, content, link, curTitle) {
            content.addClass("e-dialog-loaded").appendTo(this.contentDiv);
            this._dialogPosition().open();
            this._trigger("ajaxError", { data: data, url: link });
        },
        _closeIcon: function () {
            this._dialogClose = BoldBIDashboard.util.buildTag("div#" + this.element[0].id + "_closebutton.e-dialog-icon e-icon e-close",null,null).attr('tabIndex','0');            
            if(this.model.closeIconTooltip == "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else if(this.model.closeIconTooltip != "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.closeIconTooltip);
            else if(this.model.closeIconTooltip == "close" && this.model.tooltip.close != "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else   this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            this._on(this._dialogClose, "touchstart click", this._closeClick);
        },
		
        _collapsibleIcon: function () {            
            this._dialogCollapsible = BoldBIDashboard.util.buildTag("div#" + this.element[0].id + "_collapsbutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0');             
            if (this._collapsible) {
                this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.expand).addClass("e-arrowhead-down").removeClass("e-arrowhead-up");
            }
            else {
                this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.collapse).addClass("e-arrowhead-up").removeClass("e-arrowhead-down");
            }
            this._on(this._dialogCollapsible, "touchstart click", this._collapsibleClick);
        },

        _maximizeIcon: function () {
            this._dialogMaximize = BoldBIDashboard.util.buildTag("div#" + this.element[0].id + "_maximizebutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0'); 
            if (this._maximize) {
                this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-maximize");
            }
            else {
                this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.maximize).addClass("e-maximize").removeClass("e-restore");
            }
            this._on(this._dialogMaximize, "touchstart click", this._maximizeClick);
        },

        _minimizeIcon: function () {
            this._dialogMinimize = BoldBIDashboard.util.buildTag("div#" + this.element[0].id + "_minimizebutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0');           
            if (this._minimize) {
                this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-minus");
            }
            else {
                this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.minimize).addClass("e-minus").removeClass("e-restore");
            }
            this._on(this._dialogMinimize, "touchstart click", this._minimizeClick);
        },

        _pinIcon: function () {
            this._dialogPin = BoldBIDashboard.util.buildTag("div#" + this.element[0].id + "_pinbutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0'); 
            this._dialogPin.appendTo(this._dialogTitlebar).attr("title", this.dialogPin ? this.model.tooltip.unPin : this.model.tooltip.pin).addClass(this.dialogPin ? "e-pin" : "e-unpin").removeClass(this.dialogPin ? "e-unpin" : "e-pin");
            this._on(this._dialogPin, "touchstart click", this._pinClick);
        },

        _favIcon: function () {
            if (!this._dialogFavIcon) {
                this._dialogFavIcon = BoldBIDashboard.util.buildTag("div.e-dialog-favicon", "", {}, { style: "float:"+ (this.model.enableRTL?"right":"left") });
                var span = BoldBIDashboard.util.buildTag("span.e-dialog-custom", "", {}, { role: "presentation" });
                span.appendTo(this._dialogFavIcon);
                this._dialogFavIcon.appendTo(this._dialogTitlebar);
            }
            else 
                span = this._dialogFavIcon.find("span").removeClass().addClass("e-dialog-custom");
            if (!this.model.faviconCSS) this._dialogFavIcon.remove();
            else span.addClass(this.model.faviconCSS); this._dialogFavIcon.css("float", (this.model.enableRTL ? "right" : "left"));
        },

        _minMaxValidation: function () {
            var _minWidth = parseInt(this.model.minWidth), _minHeight = parseInt(this.model.minHeight), _maxWidth = parseInt(this.model.maxWidth), _maxHeight = parseInt(this.model.maxHeight),_width = parseInt(this.model.width), _height = parseInt(this.model.height), parentObj = this._getParentObj();
            if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
                _minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
            if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
                _minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
            if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
                _maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
            if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
                _maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
			if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
                _width = this._convertPercentageToPixel(parentObj.innerWidth(), _width);
            if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
                _height = this._convertPercentageToPixel(parentObj.innerHeight(), _height);
            if (_maxWidth && _width > _maxWidth || _minWidth && _width < _minWidth) {
                if (_width > _maxWidth) this.model.width = _maxWidth;
                else this.model.width = _minWidth;
            }
            if (_maxHeight && _height >_maxHeight || _minHeight && _height< _minHeight) {
                if (_height > _maxHeight) this.model.height = _maxHeight;
                else this.model.height = _minHeight;
            }
            else if (this.model.height == "auto" && !BoldBIDashboard.isNullOrUndefined(this.model.maxHeight)) {
                this.model.height = _maxHeight;
            }
        },

        _setSize: function () {
            var mdl = this.model;
            this._minMaxValidation();
            this._BoldBIDashboardDialog.css({ width: mdl.width, minWidth: mdl.minWidth, maxWidth: mdl.maxWidth });
            this._BoldBIDashboardDialog.css({ height: mdl.height, minHeight: mdl.minHeight, maxHeight: mdl.maxHeight });
            this._dialogPosition();
            return this;
        },

        _resetScroller: function () {		
			this.element.css({ "height": "auto", "max-width": "", "max-height": "", "width": "" });
            var scrHeight = this._BoldBIDashboardDialog.outerHeight(true) - ((this.model.showHeader)? bbdesigner$(this._BoldBIDashboardDialog.find("div.e-titlebar")).outerHeight(true) : 0)-((this.model.showFooter)? bbdesigner$(this._BoldBIDashboardDialog.find("div.e-footerbar")).outerHeight(true) : 0), eleHeight;
            var scrModel = { width: (this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? Math.round(this._BoldBIDashboardDialog.width()) : Math.round(this._BoldBIDashboardDialog.width() - 2), enableRTL: this.model.enableRTL, height: (this.contentDiv.css('border-width') == "0px") ? scrHeight : scrHeight - 1, enableTouchScroll: false }; // 2px border width
            if ((this.model.height == "auto") && (this.element.height() < this.model.maxHeight || !this.model.maxHeight) && !this._maximize)
                scrModel.height = "auto";
            if (this.model.width == "auto" && !this._maximize)
                scrModel.width = this.model.width;
            this.contentDiv.BoldBIDashboardScroller(scrModel);
            this.scroller = this.contentDiv.data("BoldBIDashboardScroller");
            this._reRenderScroller();
            this._padding = parseInt(bbdesigner$(this.element).css("padding-top")) + parseInt(bbdesigner$(this.element).css("padding-bottom"));
            if((bbdesigner$(this._BoldBIDashboardDialog).css("display"))=="none"){
				  this.hidden=true;         
                  this._BoldBIDashboardDialog.css({"display":"block"}); 
			}		
			if (!BoldBIDashboard.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0) {
                if (!BoldBIDashboard.isNullOrUndefined(this.scroller))
                    if (!this.scroller._hScrollbar && this.scroller._vScrollbar)
                        eleHeight = this.contentDiv.outerHeight();
                    else if (this.scroller._hScrollbar)
                         eleHeight = this.contentDiv.outerHeight() - this.scroller.model.buttonSize;
                     else  eleHeight = this.contentDiv.outerHeight();
                 else
                    eleHeight = this.contentDiv.outerHeight() - this._padding;
                if ((this.model.height != "auto" && this.model.height != "100%"))
                    this.element.css({ "height": eleHeight-1 });
                else
                    this.element.css("height", this.model.height);
                if ((this.model.height == "auto" || this.model.height == "100%") && !this.scroller._vScrollbar)
                    this.element.css({ "min-height": this.model.minHeight -((this.model.showHeader)? bbdesigner$(this._BoldBIDashboardDialog.find("div.e-titlebar")).outerHeight(true) : 0)});
                if (!this.scroller._vScrollbar && (this.model.width != "auto" && this.model.width != "100%"))
                    this.element.outerWidth((this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? this._BoldBIDashboardDialog.width() : this._BoldBIDashboardDialog.width() - 2);
                else if (!this.scroller._vScrollbar)
                    this.element.css("width", this.model.width);
                this.element.css({"max-width": this.model.maxWidth, "max-height": this.model.maxHeight });
            }
			if(this.hidden) this._BoldBIDashboardDialog.css({"display":"none"});					
			this.hidden=false;
        },

        _updateScroller: function (height, width) {
            this.contentDiv.BoldBIDashboardScroller({ width: width, height: height, enableRTL: this.model.enableRTL, enableTouchScroll: false });
            this.scroller = this.contentDiv.data("BoldBIDashboardScroller");
            this._reRenderScroller();
			this._changeSize();
        },

        _dragDialog: function () {
            var proxy = this;
            var pos = this._BoldBIDashboardDialog.parents(".e-dialog-scroller");
            this._dialogTitlebar.BoldBIDashboardDraggable({
                handle: ".e-titlebar",
                cursorAt: { top: 0, left: 0 },
                dragArea: proxy._target,
                dragStart: function (event) {
					event.element.attr('aria-grabbed', true);
                    proxy._clickHandler();
                    if (proxy.dialogPin || !proxy.model.allowDraggable || !proxy.model.enabled) {
                        event.cancel = true;
                        return false;
                    }
                    if (proxy._trigger("dragStart", { event: event })) {
                        event.cancel = true;
                        return false;
                    }
                },
                drag: function (event) {
                    proxy._trigger("drag", { event: event });
                },
                dragStop: function (event) {
                    proxy._BoldBIDashboardDialog.focus();
					event.element.attr('aria-grabbed', false);
                    if (proxy.element.find("> .e-draggable.e-titlebar")) {
                       var dragobject = bbdesigner$("#" + proxy.element.find("> .e-draggable.e-titlebar").attr("id")).data("BoldBIDashboardDraggable");
                        if (dragobject)
                            dragobject.option("cursorAt", proxy.element.offset());
                    }
                    var pos = this.helper.offsetParent().offset();
                    proxy._trigger("dragStop", { event: event });
                    proxy.model.position.X = BoldBIDashboard.isNullOrUndefined(this.position.left) ? parseInt(this.helper.css('left')) : this.position.left - [pos.left + parseFloat(this.helper.offsetParent().css('border-left-width'))];
                    proxy.model.position.Y = BoldBIDashboard.isNullOrUndefined(this.position.top) ? parseInt(this.helper.css('top')) : this.position.top - [pos.top + parseFloat(this.helper.offsetParent().css('border-top-width'))];
                    proxy._positionChanged = true;
                    proxy.dlgresized = true;
                },
                helper: function (event) {
                    return bbdesigner$(proxy._BoldBIDashboardDialog).addClass("dragClone");
                }
            });
            return this;
        },

        _resizeDialog: function () {
            if (!this.model.enableResize)  return;
            var proxy = this, started = false, parentObj;
            var _minWidth = parseInt(this.model.minWidth), _minHeight = parseInt(this.model.minHeight);
            var _maxWidth = parseInt(this.model.maxWidth), _maxHeight = parseInt(this.model.maxHeight);
            parentObj = this._getParentObj();
            if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
                _minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
            if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
                _minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
            if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
                _maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
            if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
                _maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
            this._BoldBIDashboardDialog.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: _minHeight,
                    minWidth: _minWidth,
                    maxHeight: _maxHeight,
                    maxWidth: _maxWidth,
                    handle: "e-widget-content",
                    resizeStart: function (event) {
                        proxy.dlgresized=true;
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("resizeStart", { event: event });
                        started = true;
                        proxy.model.position = { X: proxy._BoldBIDashboardDialog.css("left"), Y: proxy._BoldBIDashboardDialog.css("top") };
                        proxy._dialogPosition();
                    },
                    resize: function (event) {
                        proxy.dlgresized=true;
                        var reElement = bbdesigner$(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = bbdesigner$(reElement).outerHeight();
                        proxy.model.width = bbdesigner$(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        proxy._updateCaptionWidth();
                        proxy._trigger("resize", { event: event });
                        proxy._sizeType = { width: "px", height: "px" };
                        if(this.scrObj) this.scrObj._resetScroller();                      
                    },
                    resizeStop: function (event) {
                        proxy.dlgresized=true;
                        proxy._BoldBIDashboardDialog.focus();
                        proxy._sizeInPercent();
                        var reElement = bbdesigner$(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = bbdesigner$(reElement).outerHeight();
                        proxy.model.width = bbdesigner$(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        started && proxy._trigger("resizeStop", { event: event });
                        started = false;
                        proxy._setDimension();
                    },
                    helper: function (event) {
                        return bbdesigner$(proxy._BoldBIDashboardDialog);
                    }
                });
            return this;
        },

        _dialogPosition: function () {
            if (this._BoldBIDashboardDialog.parents("form").length > 0 && BoldBIDashboard.isNullOrUndefined(this.model.containment) && BoldBIDashboard.isNullOrUndefined(this.model.target)) {
                this._BoldBIDashboardDialog.appendTo(this._BoldBIDashboardDialog.parents("form"));
            }
            if (this.model.position.X != "" || this.model.position.Y != "") {
                this._BoldBIDashboardDialog.css("position", "absolute");
                if(BoldBIDashboard.isNullOrUndefined(this.model.target) && BoldBIDashboard.isNullOrUndefined(this.model.containment)) {
                this._BoldBIDashboardDialog.css("left", this.model.position.X);
                this._BoldBIDashboardDialog.css("top", this.model.position.Y);
				}
				else {
					  var containerEle=BoldBIDashboard.isNullOrUndefined(this.model.containment)?this.model.target:this.model.containment;
					  if (this.dlgresized || this._keyNavigation){
                         this._BoldBIDashboardDialog.css("left", this.model.position.X);
                         this._BoldBIDashboardDialog.css("top", this.model.position.Y);                   
                                    }
                      else{
                      this._BoldBIDashboardDialog.css("left", bbdesigner$(containerEle).offset()["left"]+ parseInt(this.model.position.X));
					  this._BoldBIDashboardDialog.css("top", bbdesigner$(containerEle).offset()["top"]+ parseInt(this.model.position.Y));
				}
            }
            }
            else {
                this._centerPosition();
            }
            return this;
        },
        _centerPosition:function(){
            var x = 0, y = 0;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.target) ||!BoldBIDashboard.isNullOrUndefined(this._target) && !bbdesigner$(this._target).is(bbdesigner$(document)) && !(bbdesigner$(this._target).is(bbdesigner$(window)))) {
                var bbdesigner$content = !BoldBIDashboard.isNullOrUndefined(this._target) ? bbdesigner$(this._target) : bbdesigner$(this.model.target);
                if (bbdesigner$content.css("position") == 'static') {
                    var parentOffset = bbdesigner$content.offsetParent().offset();
                    var contentOffset = bbdesigner$content.offset();
                    x = contentOffset.left - parentOffset.left;
                    y = contentOffset.top - parentOffset.top;
                }
                if (bbdesigner$content.outerWidth() > this._BoldBIDashboardDialog.width()) x += (bbdesigner$content.outerWidth() - this._BoldBIDashboardDialog.width()) / 2;
                if (bbdesigner$content.outerHeight() > this._BoldBIDashboardDialog.height()) y += (bbdesigner$content.outerHeight() - this._BoldBIDashboardDialog.height()) / 2;
            }
            else {
                var doc = document.documentElement;
                x = ((bbdesigner$(window).outerWidth() > this._BoldBIDashboardDialog.width()) ? (bbdesigner$(window).outerWidth() - this._BoldBIDashboardDialog.outerWidth()) / 2 : 0) + (window.pageXOffset || doc.scrollLeft);
                y = ((bbdesigner$(window).outerHeight() > this._BoldBIDashboardDialog.height()) ? (bbdesigner$(window).outerHeight() - this._BoldBIDashboardDialog.outerHeight()) / 2 : 0) + (window.pageYOffset || doc.scrollTop);
            }
            this._BoldBIDashboardDialog.css({ top: y, left: x });
            this._BoldBIDashboardDialog.css("position", "absolute");
        },
        _closeClick: function (event) {
			if(event.type == "touchstart")
		    	event.preventDefault();
            if (this.model.enabled) {
                event.stopPropagation();
                this.close(event);
            }
        },

        _collapsibleClick: function (e) {
            if (this.model.enabled) {
                if (bbdesigner$(e.target).hasClass("e-arrowhead-up")) {
                    this._actionCollapse(e);
                }
                else if (bbdesigner$(e.target).hasClass("e-arrowhead-down")) {
                    this._actionExpand(e);
                }
            }
        },
        _actionCollapse: function (e) {
            if (!this._minimize) {
                this._dialogCollapsible&& this._dialogCollapsible.removeClass("e-arrowhead-up").addClass("e-arrowhead-down");
                this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.expand);
                this._BoldBIDashboardDialog.find("div.e-resize-handle").hide();
                this._BoldBIDashboardDialog.find(".e-widget-content").parent().slideUp("fast");
                if(this.model.showFooter)  this._dialogFooterbar.slideUp("fast");
                this._BoldBIDashboardDialog.removeClass("e-shadow");
                this._BoldBIDashboardDialog.css("minHeight", "0");
                this._BoldBIDashboardDialog.height("auto");
                this._trigger("collapse",{isInteraction :(e ? true : false )});
                this._collapsible = true;
            }
        },
        _actionExpand: function (e) {
            if (!this._minimize) {
                this._dialogCollapsible&& this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                this._BoldBIDashboardDialog.addClass("e-shadow");
                this._BoldBIDashboardDialog.find(".e-widget-content").parent().slideDown("fast");
                if (this.model.showFooter) this._dialogFooterbar.slideDown("fast");
                if (this._maximize) {
                    this._BoldBIDashboardDialog.css({ width: "100%", height: "100%" });
                    this.element.css({ width: "100%", height: "100%" });
                    this.contentDiv.css({ width: "100%", height: "100%" });
                }
                else this._BoldBIDashboardDialog.height(this.model.height);
                this._BoldBIDashboardDialog.find("div.e-resize-handle").show();
                this._trigger("expand",{isInteraction :(e ? true : false )});
                this._collapsible = false;
            }
        },

        _maximizeClick: function (e) {
            if (this.model.enabled) {
                var _target = bbdesigner$(e.target);
                var hideIcon = this._dialogMaximize;
                if (_target.hasClass("e-maximize")) {
                    this._actionMaximize();
                    if (this._dialogTitlebar){
                        this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-minus');
                        this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    }
                    _target.removeClass("e-maximize").addClass("e-restore");
                    this._dialogMaximize.attr('title', this.model.tooltip.restore);
                    this._hideIcon(true);
                }
                else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-maximize");
                    this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                    if (!BoldBIDashboard.isNullOrUndefined(hideIcon) && bbdesigner$(hideIcon).hasClass('e-arrowhead-down')){
                        bbdesigner$(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
                        this._dialogMaximize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
			this._resetScroller();
        },
        _actionMaximize: function () {
            this._BoldBIDashboardDialog.css("top", "0px").css("left", "0px").css("overflow", "hidden").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
            this._BoldBIDashboardDialog.css({ width: "100%", height: "100%" });
            this.element.css({ width: "100%", height: "100%" });
            this.contentDiv.css({ width: "100%", height: "100%" });
            this._maximize = true;
            this._minimize = false;
            var proxy=this;
            if (this._dialogCollapsible && !BoldBIDashboard.isNullOrUndefined(this._dialogCollapsible.hasClass("e-arrowhead-down"))) {
                this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                this._dialogCollapsible.attr('title', this.model.tooltip.collapse);
                this._collapseValue = true
            }
            if(this._collapseValue == true) {
                this._BoldBIDashboardDialog.find(".e-widget-content").parent().slideDown("fast",function(){
					proxy.refresh();
                    proxy._reRenderScroller();
                });
            }
            this._resetScroller();
        },
        _actionRestore: function () {
            this.element.height("").width("");
            this.contentDiv.height("").width("");
            this._restoreDialog();
            this._maximize = this._minimize = false;
        },

        _minimizeClick: function (e) {
            if (this.model.enabled) {
                var _target = bbdesigner$(e.target);
                var hideIcon = this._dialogMinimize.hasClass("e-icon")&& this._dialogMinimize;
                if (_target.hasClass("e-minus")) {
                    if (this._maximize)
                        this._setSize();
                    this._actionMinimize();
                } else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-minus");
                    this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    if (!BoldBIDashboard.isNullOrUndefined(hideIcon) && bbdesigner$(hideIcon).hasClass('e-arrowhead-down')){
                        bbdesigner$(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
                        this._dialogMinimize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
        },

        _actionMinimize: function () {
            var top = (bbdesigner$(window).height() - this._BoldBIDashboardDialog.height()) + this.element.height() + 14, _height;
            this._BoldBIDashboardDialog.css("top", "").css("bottom", "0").css("left", "0").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
            this._BoldBIDashboardDialog.css("minHeight", "0");
            if (this._dialogTitlebar) {
                this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-maximize');
                this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                this._dialogTitlebar.find(".e-minus").removeClass("e-minus").addClass("e-restore");
                this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.restore);
                if (this._isOpen)
                    _height = this._dialogTitlebar.outerHeight();
                else {
                    this._BoldBIDashboardDialog.css({ "display": "block", "visibility": "hidden" });
                    _height = this._dialogTitlebar.outerHeight();
                    this._BoldBIDashboardDialog.css({ "display": "none", "visibility": "" });
                }
                this._BoldBIDashboardDialog.css("height", _height + 2); // 1px bordertop + 1px borderbottom of the dialog wrapper is added
                this._hideIcon(false);
            } else this._BoldBIDashboardDialog.css("height", "");
            this.contentDiv.hide();
			if(this.model.showFooter) this._dialogFooterbar.hide();
            this._maximize = false;
            this._minimize = true;
        },

        _hideIcon: function (value) {
            var hideIcon = this._dialogCollapsible ? this._dialogCollapsible : null;
            if (value) {
                if (!BoldBIDashboard.isNullOrUndefined(hideIcon)) bbdesigner$(hideIcon).parent('.e-dialog-icon').show();
                this._BoldBIDashboardDialog.find("div.e-resize-handle").show();
            } else {
                if (!BoldBIDashboard.isNullOrUndefined(hideIcon)) bbdesigner$(hideIcon).parent('.e-dialog-icon').hide();
                this._BoldBIDashboardDialog.find("div.e-resize-handle").hide();
            }
        },

        _pinClick: function (e) {
            if (this.model.enabled) {
                var _target = bbdesigner$(e.target);
                if (_target.hasClass("e-unpin")) {
                    this.dialogPin = true;
                    _target.removeClass("e-unpin").addClass("e-pin");
                    this._dialogPin.attr('title', this.model.tooltip.unPin);
                }
                else if (_target.hasClass("e-pin")) {
                    this.dialogPin = false;
                    _target.removeClass("e-pin").addClass("e-unpin");
                    this._dialogPin.attr('title', this.model.tooltip.pin);
                }
            }
        },

        _restoreDialog: function () {
            this.contentDiv.show();
			if(this.model.showFooter) this._dialogFooterbar.show();
            this._BoldBIDashboardDialog.css({"position": "absolute", "bottom": ""}).addClass("e-shadow");
            this._setSize()._resetScroller();
            if (this._dialogTitlebar) {
                this._dialogTitlebar.find(".e-minus").parent().show();
                if (this._dialogCollapsible) {
                    this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                    this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                }
            }
        },

        _clickHandler: function (e) {
            var zindex = this._dialogMaxZindex();
            if (parseInt(this._BoldBIDashboardDialog.css("zIndex")) < zindex) 
                this._BoldBIDashboardDialog.css({ zIndex: zindex + 1 });            
        },

        _mouseClick: function (e) {
			if(e.currentTarget==this._id)
				if (bbdesigner$(e.target).hasClass("e-dialog") || bbdesigner$(e.target).hasClass("e-icon e-resize-handle")) {
					this._setZindex();
					bbdesigner$(e.target).closest(".e-dialog.e-widget").focus();
				}
        },

        _keyDown: function (e) {
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            if (this.model.allowKeyboardNavigation && this.model.enabled && bbdesigner$(e.target).hasClass("e-dialog"))
                if (bbdesigner$.inArray(code, this.keyConfigs) > -1 && this.model.allowDraggable && !this.dialogPin) {
                    this._keyPressed(code, e.ctrlKey);
                    e.preventDefault();
                }            
            if (this.model.closeOnEscape && code === 27 && this.model.enabled) 
                if (!this.element.find(".e-js.e-dialog").first().is(":visible")) {
                    this.close(e);
                    e.preventDefault();
                }
            if (code===13 && this.model.enabled){
                if(bbdesigner$(e.target).hasClass("e-close")) this.close(e);
                else if (bbdesigner$(e.target).hasClass("e-arrowhead-up") || bbdesigner$(e.target).hasClass("e-arrowhead-down")) this._collapsibleClick(e);                
                if (bbdesigner$(e.target).hasClass("e-maximize") || (bbdesigner$(e.target).hasClass("e-restore") && bbdesigner$(e.target).is(this._dialogMaximize)))
				    this._maximizeClick(e);
                else if (bbdesigner$(e.target).hasClass("e-minus") || (bbdesigner$(e.target).hasClass("e-restore") && bbdesigner$(e.target).is(this._dialogMinimize)))
				    this._minimizeClick(e);
				if (bbdesigner$(e.target).hasClass("e-pin") || bbdesigner$(e.target).hasClass("e-unpin")){
				    this._pinClick(e);
					}
            }
            if (code == 9 && this.model.enableModal)
                this._focusOnTab(e);
        },

        _focusOnTab: function (e) {
            var focusEle = this._BoldBIDashboardDialog.find("a, button, :input, select, [tabindex]:not('-1')");
            focusEle = bbdesigner$(focusEle).find("a, button, :input, select, [tabindex]:not('')");
            if (e.shiftKey) {
                if (!focusEle[focusEle.index(e.target) - 1]) {
                    e.preventDefault();
                    focusEle.last().focus();
                }
            }
            else if (!focusEle[focusEle.index(e.target) + 1]) {
                e.preventDefault();
                focusEle[0].focus();
            }
        },

        _keyPressed: function (code, ctrlKey) {
            this._keyNavigation=true;
            switch (code) {
                case 40:
                    ctrlKey ?  this._resizing("height", (this._BoldBIDashboardDialog.outerHeight() + 3)) : this.option("position", { X: this._BoldBIDashboardDialog.position().left, Y: (this._BoldBIDashboardDialog.position().top + 3) });
                    break;
                case 39:
                    ctrlKey ? this._resizing("width", (this._BoldBIDashboardDialog.outerWidth() + 3)) : this.option("position", { X: (this._BoldBIDashboardDialog.position().left + 3), Y: this._BoldBIDashboardDialog.position().top });
                    break;
                case 38:
                    ctrlKey ? this._resizing("height", (this._BoldBIDashboardDialog.outerHeight() - 3)) : this.option("position", { 
						X: (this._BoldBIDashboardDialog.position().left == 0 ? 0 : this._BoldBIDashboardDialog.position().left),
						Y: (this._BoldBIDashboardDialog.position().top > 3 ? this._BoldBIDashboardDialog.position().top - 3 : 0) 
					});
                    break;
                case 37:
                    ctrlKey ? this._resizing("width", (this._BoldBIDashboardDialog.outerWidth() - 3)) : this.option("position", { 
						X: (this._BoldBIDashboardDialog.position().left > 3 ? this._BoldBIDashboardDialog.position().left - 3 : 0), 
						Y: (this._BoldBIDashboardDialog.position().top == 0 ? 0 : this._BoldBIDashboardDialog.position().top)
					});
                    break;
            }
        },

        _resizing:function(key, value){
            if (this.model.enableResize) this.option(key, value);
        },

        _sizeInPercent: function () {
            if (!this._enableWindowResize()) return this;
            var parentObj = this._getParentObj();
            if (this._sizeType.width == "%") this._widthPercent = parseFloat(this.model.width);
            else this._widthPercent = this._convertPixelToPercentage(parentObj.outerWidth(), this._BoldBIDashboardDialog.outerWidth());
            if (this._sizeType.height == "%") this._heightPercent = parseFloat(this.model.height);
            else this._heightPercent = this._convertPixelToPercentage(parentObj.outerHeight(), this._BoldBIDashboardDialog.outerHeight());
            if (this._widthPercent >= 100) {
                this._widthPercent = 100;
                this._BoldBIDashboardDialog.outerWidth(parentObj.outerWidth());
                this.model.width = this._BoldBIDashboardDialog.width();
            }
            if (this._heightPercent >= 100) {
                this._heightPercent = 100;
                this._BoldBIDashboardDialog.outerHeight(parentObj.outerHeight());
                this.model.height = this._BoldBIDashboardDialog.height();
            }
            return this;
        },

        _getParentObj: function () {
            return (!BoldBIDashboard.isNullOrUndefined(this.model.containment) ? bbdesigner$(this.model.containment) : !BoldBIDashboard.isNullOrUndefined(this.model.target) ? bbdesigner$(this.model.target) : bbdesigner$(document));
        },

        _convertPercentageToPixel: function (parent, child) {
            return Math.round((child * parent) / 100);
        },

        _convertPixelToPercentage: function (parent, child) {
            return Math.round((child / parent) * 100);
        },

        _reSizeHandler: function () {
            var parentObj;
            if (this._maximize) { this._resetScroller(); return; }
            if (this.model.position.X == "" || this.model.position.Y == "" && !this._minimize) this._centerPosition();
            parentObj = this._getParentObj();
            this._change = false;
            if (this._windowSize.outerWidth != bbdesigner$(window).outerWidth()) {
                if (this._sizeType.width == "%") this._percentageWidthDimension(parentObj);
                else this._pixelsWidthDimension(parentObj);
            }
            else if (this._windowSize.outerHeight != bbdesigner$(window).outerHeight()) {
                if (this._sizeType.height == "%") this._percentageHeightDimension(parentObj);
                else this._pixelsHeightDimension(parentObj);
            }
            this._change && this._resizeContainer(parentObj);
            this._windowSize = { outerWidth: bbdesigner$(window).outerWidth(), outerHeight: bbdesigner$(window).outerHeight() };
			this._centerPosition();
        },
        _setDimension:function(){
            if (BoldBIDashboard.isNullOrUndefined(this.model.maxWidth)) {
                if (BoldBIDashboard.isNullOrUndefined(this._sizeType.width)) this._maxWidth = +this.model.width;
                else if (this._sizeType.width == "px" || this._sizeType.width == "auto") this._maxWidth = this.model.width;
            } else this._maxWidth = this.model.maxWidth;
            if (BoldBIDashboard.isNullOrUndefined(this.model.maxHeight)) {
                if (BoldBIDashboard.isNullOrUndefined(this._sizeType.height)) this._maxHeight = +this.model.height;
                else if (this._sizeType.height == "px" || this._sizeType.height == "auto") this._maxHeight = this.model.height;
            } else this._maxHeight = this.model.maxHeight;
        },
        _percentageWidthDimension: function (parentObj) {
            this._BoldBIDashboardDialog.outerWidth(this._convertPercentageToPixel(parentObj.outerWidth(), this._widthPercent));
            this._change = true;
        },
        _percentageHeightDimension: function (parentObj) {
            this._BoldBIDashboardDialog.outerHeight(this._convertPercentageToPixel(parentObj.outerHeight(), this._heightPercent));
            this._change = true;
        },
        _pixelsWidthDimension: function (parentObj) {
            if (bbdesigner$(parentObj).outerWidth() <= this._BoldBIDashboardDialog.outerWidth()) this._setWidth(parentObj);
            if ((bbdesigner$(parentObj).outerHeight() <= this._BoldBIDashboardDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
            if (parseInt(this._BoldBIDashboardDialog.css("width")) < parseInt(this._maxWidth)) {
                if (parseInt(this._maxWidth) < bbdesigner$(parentObj).outerWidth()) this._BoldBIDashboardDialog.outerWidth((parseInt(this._maxWidth)));
                else this._BoldBIDashboardDialog.outerWidth((parentObj.outerWidth()));
                this._change = true;
            }
        },
        _pixelsHeightDimension: function (parentObj) {
            if ((bbdesigner$(parentObj).outerHeight() <= this._BoldBIDashboardDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
            if (bbdesigner$(parentObj).outerWidth() <= this._BoldBIDashboardDialog.outerWidth()) this._setWidth(parentObj);
            if (parseInt(this._BoldBIDashboardDialog.css("height")) < parseInt(this._maxHeight)) {
                if (parseInt(this._maxHeight) < bbdesigner$(parentObj).outerHeight()) this._BoldBIDashboardDialog.outerWidth((parseInt(this._maxHeight)));
                else this._BoldBIDashboardDialog.outerHeight((parentObj.outerHeight()));
                this._change = true;
            }
        },
        _setWidth: function (parentObj) {
            this._BoldBIDashboardDialog.outerWidth((parentObj.outerWidth()));
            this._change = true;
        },
        _setHeight: function (parentObj) {
            this._BoldBIDashboardDialog.outerHeight((parentObj.outerHeight()));
            this._change = true;
        },
        _resizeContainer: function (parentObj) {
            this.contentDiv.width(this._BoldBIDashboardDialog.width());
            this.element.outerWidth(this.contentDiv.width());
            var contentDivheight = this._BoldBIDashboardDialog.height() - ((this.model.showHeader) ? bbdesigner$(this._BoldBIDashboardDialog.find("div.e-titlebar")).outerHeight(true) : 0);
            this.contentDiv.height((!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
            this.element.outerHeight((!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
            this.scroller = this.contentDiv.BoldBIDashboardScroller({ width: (!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._BoldBIDashboardDialog.width() : this._BoldBIDashboardDialog.width() - 2, height: (!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this.element.outerHeight() : this.element.outerHeight() - 2, rtl: this.model.rtl, enableTouchScroll: false });
            this.scroller = this.contentDiv.data("BoldBIDashboardScroller");
            this._reRenderScroller();
            if ((this.model.position.X == "" || this.model.position.Y == "" && !this._minimize)||(this._positionChanged)) this._centerPosition();
            else this._BoldBIDashboardDialog.css("height", this._dialogTitlebar.outerHeight());
            this._updateCaptionWidth();
            this._change = false;
        },
        _getLocalizedLabels:function(){
            return BoldBIDashboard.getLocalizedConstants(this.sfType, this.model.locale);
        }, 

        _enableWindowResize: function () {
            return (this.model.isResponsive || ((isNaN(this.model.width) && (this.model.width.indexOf("%") > 0)) && (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0) && (this.model.height != "auto")))) ? true : false;
        },

        _wireResizing: function () {             
            bbdesigner$(window)[(this._enableWindowResize() ? "on" : "off")]('resize', bbdesigner$.proxy(this._reSizeHandler, this));                        
        },

        _wireEvents: function () {
            this._on(this._BoldBIDashboardDialog, "keydown", this._keyDown);
            this._on(this._BoldBIDashboardDialog, "click", this._mouseClick);
            this._wireResizing();
        },

        refresh: function () {
            this._resetScroller();
        },

        open: function () {
            if (this._isOpen) return true;
            if (true == this._trigger("beforeOpen")) return false;
            this.element.css("display", "block");
            this._setZindex();
            if (!this._minimize && !this._maximize && !this._init) this._dialogPosition();
            var proxy = this, effect = {}, height;
            this._BoldBIDashboardDialog.show();
            if (this.model.enableAnimation) {
                this._BoldBIDashboardDialog.css({ "opacity": 0});
                if (this.model.animation.show.effect == "slide") {
                    var eLeft = this._BoldBIDashboardDialog.css("left");
                    this._BoldBIDashboardDialog.css({ "left": -this._BoldBIDashboardDialog.width() });
                    effect = { left: eLeft, opacity: 1 };
                }
                else {
                    effect = { opacity: 1 };
                }
            }
            this._BoldBIDashboardDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.show.duration) : 0), function () {
                if (proxy.model) {
					  if (proxy._BoldBIDashboardDialog.css("display") == "none") proxy._BoldBIDashboardDialog.show();
                    proxy._BoldBIDashboardDialog.eq(0).focus();
                    proxy._BoldBIDashboardDialog.css({ "opacity": "" });
                    proxy.contentDiv.find("a:visible:enabled, button:visible:enabled, :input:visible:enabled, select:visible:enabled, .e-input").first().focus();
                    proxy._trigger("open");
                    proxy._updateCaptionWidth();
					if(proxy.model.enableModal && !proxy.model.backgroundScroll)
					{
						if( proxy._BoldBIDashboardDialog.height() > bbdesigner$(window).height()) proxy._BoldBIDashboardDialog.css("height",bbdesigner$(window).height());
						proxy.model.height=bbdesigner$(window).height(); proxy._overLay.css("position","fixed");
						proxy.scroller.refresh(true); proxy.refresh();
					}
                    if (proxy.model.maxHeight || proxy.model.maxWidth)
                    {
                        height = proxy._BoldBIDashboardDialog.outerHeight(true) - ((proxy._dialogTitlebar ? proxy._dialogTitlebar.outerHeight(true) : 0));
                        if ((proxy.model.height == "auto" || proxy.model.height == "100%"))
                            height = proxy.model.height;
                        proxy._updateScroller((!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? height : height - 2, (!BoldBIDashboard.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? proxy._BoldBIDashboardDialog.width() : proxy._BoldBIDashboardDialog.width() - 2);
                    }
                }
            });
            if (this.model.enableModal == true) this._createOverlay();
            this._isOpen = true;
            if (this.element.find("> .e-draggable.e-titlebar")) {
               var dragobject = bbdesigner$("#" + this.element.find("> .e-draggable.e-titlebar").attr("id")).data("BoldBIDashboardDraggable");
                if (dragobject)
                    dragobject.option("cursorAt", this.element.offset());
            }
            return this;
        },

        close: function (event) {
            if (!this._isOpen || !this.model.enabled) return true;
            var isInteraction= event ? true : false;            
            if (true == this._trigger("beforeClose", { event: event,isInteraction:isInteraction })) return false;
            this._isOpen = false;
            var proxy = this, effect = {};
            if (this.model.enableAnimation) 
            effect = this.model.animation.hide.effect == "slide" ? { left: -this._BoldBIDashboardDialog.width(), opacity: 0 } : { opacity: 0 };
            this._BoldBIDashboardDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.hide.duration) : 0), function () {
                proxy._trigger("close", { event: event, isInteraction:isInteraction });
                proxy._BoldBIDashboardDialog.hide();
            });
            if (this.model.enableModal){
                if (this._overLay) this._overLay.remove();
                if (!this.model.backgroundScroll) bbdesigner$("body").removeClass("e-dialog-modal");
            }
            return this;
        },

        isOpened: function () { return this.isOpen() },
        isOpen: function () { return this._isOpen; },

        setTitle: function (titleText) {
            this.model.title = titleText;
            this._titleText.text(titleText);
            this._updateCaptionWidth();
            return this;
        },

        setContent: function (htmlContent) {
            if (!this.model.enabled) return false;
            this.element.html(htmlContent);
            this._resetScroller();
            return this;
        },      

        focus: function () {
            this._setZindex();
            this.element.focus();
            return this;
        },

        minimize: function () {
			if(this.model.showHeader){
            this._actionMinimize();
            bbdesigner$(this.wrapper.find(".e-minus")[0]).parent().hide();
            return this;
			}
        },

        maximize: function () {
			if(this.model.showHeader){
            this._actionMaximize();
            bbdesigner$(this.wrapper.find(".e-maximize")[0]).removeClass("e-maximize").addClass("e-restore");
            bbdesigner$(this.wrapper.find(".e-restore")[1]).removeClass("e-restore").addClass("e-minus");
            this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.restore);
            this.contentDiv.show();
            this._dialogTitlebar && this._dialogTitlebar.find(".e-minus").parent().show();
            this._hideIcon(true);
            return this;
			}
        },

        restore: function () {
			if(this.model.showHeader){
            var action = this._minimize;
            this._actionRestore();
            bbdesigner$(this.wrapper.find(".e-restore")[0]).removeClass("e-restore").addClass(action ? "e-minus" : "e-maximize");
            this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
            this._hideIcon(true);
            return this;
			}
        },

        pin: function () {
			if(this.model.showHeader){
            this.dialogPin = true;
            bbdesigner$(this.wrapper.find(".e-unpin")[0]).removeClass("e-unpin").addClass("e-pin");
            this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.unPin);
            return this;
			}
        },

        unpin: function () {
            if(this.model.showHeader){
			this.dialogPin = false;
            bbdesigner$(this.wrapper.find(".e-pin")[0]).removeClass("e-pin").addClass("e-unpin");
            this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.pin);
            return this;
			}
        },

        collapse: function () {
			if(this.model.showHeader){
            this._actionCollapse();
            this._collapseValue=true;
            return this;
			}
        },

        expand: function () {
			if(this.model.showHeader){
            this._actionExpand();
            return this;
			}
        }
    });
    
BoldBIDashboard.Dialog.Locale = BoldBIDashboard.Dialog.Locale || {} ;
    
BoldBIDashboard.Dialog.Locale["default"] = BoldBIDashboard.Dialog.Locale["en-US"] = {
    tooltip:{
                close: "Close",
                collapse: "Collapse",
                restore: "Restore",
                maximize: "Maximize",
                minimize: "Minimize",
                expand: "Expand",
                unPin: "UnPin",
                pin: "Pin"
            },
    title:"",
     //currently we have deprecated this API
    closeIconTooltip: "close"
};

})(bbdesigner$, SyncfusionBoldBIDashboard);;
;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardDropDownList", "BoldBIDashboard.DropDownList", {
        element: null,

        model: null,
        validTags: ["select", "input"],
        _addToPersist: ["value", "text", "selectedIndex", "selectedItemIndex", "selectedItems", "selectedIndices", "popupWidth", "popupHeight", "itemValue"],
        _setFirst: false,

        _rootCSS: "e-dropdownlist",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },
      


        defaults: {
            cssClass: "",

            value: null,

            htmlAttributes: {},

            text: null,

            itemValue: "",

            itemsCount: 0,

            dataSource: null,

            delimiterChar: ',',

            query: null,

            fields: {
                id: null,

                text: null,

                value: null,

                category: null,
                
                groupBy:null,

                imageUrl: null,

                imageAttributes: null,

                spriteCssClass: null,

                htmlAttributes: null,

                selected: null,

                tableName: null
            },

            watermarkText: null,

            height: "",

            width: "",

            popupHeight: "152px",

            popupWidth: "auto",
			
			popupTarget: "body",

            maxPopupHeight: null,

            minPopupHeight: 20,

            maxPopupWidth: null,

            minPopupWidth: 0,

            targetID: null,

            template: null,

            headerTemplate: null,

            selectedItemIndex: null,

            selectedIndex: null,

            disableItemsByIndex: null,

            enableItemsByIndex: null,

            selectedItems: [],

            selectedIndices: [],

            cascadeTo: null,

            enablePopupResize: false,

            allowVirtualScrolling: false,

            virtualScrollMode: "normal",

            showRoundedCorner: false,

            showPopupOnLoad: false,

            enableRTL: false,

            enabled: true,

            filterType: "contains",

            sortOrder: "ascending",

            caseSensitiveSearch: false,

            showCheckbox: false,

            checkAll: false,

            uncheckAll: false,

            enablePersistence: false,

            enableFilterSearch: false,

            enableIncrementalSearch: true,

            readOnly: false,

            enableAnimation: false,

            multiSelectMode: "none",

            allowGrouping: false,

            enableSorting: false,

            validationRules: null,

            validationMessage: null,

            actionBegin: null,

            actionComplete: null,

            actionFailure: null,

            actionSuccess: null,

            create: null,

            popupHide: null,

            popupShown: null,

            clearFilterText: null,

            beforePopupShown: null,

            beforePopupHide: null,

            popupResizeStart: null,

            popupResize: null,

            popupResizeStop: null,

            change: null,

            select: null,

            dataBound: null,

            search: null,

            checkChange: null,

            cascade: null,

            destroy: null

        },

        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            watermarkText: "string",
            template: "string",
            disableItemsByIndex: "string",
            enableItemsByIndex: "string",
            enableIncrementalSearch: "boolean",
            cascadeTo: "string",
            delimiterChar: "string",
            showRoundedCorner: "boolean",
            showPopupOnLoad: "boolean",
            enableRTL: "boolean",
            enablePersistence: "boolean",
            allowVirtualScrolling: "boolean",
            virtualScrollMode: "enum",
            enabled: "boolean",
            readOnly: "boolean",
            multiSelectMode: "enum",
            dataSource: "data",
            query: "data",
            fields: "data",
            selectedItems: "array",
            enableAnimation: "boolean",
            allowGrouping: "boolean",
            enableSorting: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },

        observables: ["value", "selectedItemIndex", "selectedIndex"],
        value: BoldBIDashboard.util.valueFunction("value"),
        selectedItemIndex: BoldBIDashboard.util.valueFunction("selectedItemIndex"),
        selectedIndex: BoldBIDashboard.util.valueFunction("selectedIndex"),
        

        enable: function () {
            if (this._visibleInput.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = true;
                this._visibleInput.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
                this.popupListWrapper.removeClass('e-disable');
                if (this._isIE8) this.drpbtnspan.removeClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.on("mousedown", bbdesigner$.proxy(this._OnDropdownClick, this));
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable");
                this.wrapper.attr('tabindex', '0');
            }
            this._wireEvents();
        },

        disable: function () {
            if (!this._visibleInput.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = false;
                this._visibleInput.addClass('e-disable');
                this.popupListWrapper.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
                if (this._isIE8) this.drpbtnspan.addClass("e-disable");
                if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.off("mousedown", bbdesigner$.proxy(this._OnDropdownClick, this));
                this._unwireEvents();
                this.wrapper.removeAttr('tabindex');
                if (this._isPopupShown()) this._hideResult();
            }
        },

        /* will deprecate with text property */
        getValue: function () {
            return this._visibleInput.val();
        },
        _setValue: function (value) {
            if (!BoldBIDashboard.isNullOrUndefined(value)) {
                this._raiseEvents = false;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.text)) this.unselectItemByText(this.model.text);
                this._raiseEvents = true;
                this.selectItemByValue(value);
            }
        },
        _setText: function (text) {
            if (text) {
                this._raiseEvents = false;
                this.unselectItemByText(this.model.text);
                this._raiseEvents = true;
                this.selectItemByText(text);
            }
        },
        _setItemValue: function (itemValue) {
            this.model.itemValue = itemValue;
        },
        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) this._visibleInput.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },

        hidePopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._hideResult();
        },

        showPopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._showResult();
        },

        clearText: function () {
            this._clearTextboxValue();
            if (!this._isWatermark)
                this._setWatermark();
        },

        addItem: function (itemTag) {
            if (!this.model.enabled || !itemTag) return false;
            this._mapFields();
            var list = bbdesigner$.isArray(itemTag) ? itemTag : [itemTag];
            if (list.length < 1) return false;
            var mapper = this.mapFld,
                mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null, _category: null };
            mapFld._id = list[0][mapper._id] ? mapper._id : "id";
            mapFld._imageUrl = list[0][mapper._imageUrl] ? mapper._imageUrl : "imageUrl";
            mapFld._imageAttributes = list[0][mapper._imageAttributes] ? mapper._imageAttributes : "imageAttributes";
            mapFld._spriteCSS = list[0][mapper._spriteCSS] ? mapper._spriteCSS : "spriteCssClass";
            mapFld._text = list[0][mapper._text] ? mapper._text : "text";
            mapFld._value = list[0][mapper._value] ? mapper._value : "value";
            mapFld._htmlAttributes = list[0][mapper._htmlAttributes] ? mapper._htmlAttributes : "htmlAttributes";
            mapFld._selected = list[0][mapper._selected] ? mapper._selected : "selected";
            mapFld._category = list[0][mapper._category] ? mapper._category : "groupBy";
            this._generateLi(list, mapFld);
            this._virtualUl.append(bbdesigner$(this.dummyUl).clone(true));
            this.ultag.append(this.dummyUl);
            var i, listItems = this.dummyUl;
            for (var i = 0; i < list.length; i++)
                this._listItem(list[i], "add");
            if (this.model.showCheckbox) {
                this._appendCheckbox(listItems, true);               
            }
            else if (!this._isSingleSelect()) this._multiItemSelection(listItems, true);


            if (this._isPopupShown()) {
                var scrollerPosition = this.scrollerObj ? this.scrollerObj.scrollTop() : 0;
                this._refreshScroller();
                if (this.scrollerObj) this.scrollerObj.option("scrollTop", scrollerPosition);
            }
        },

        _toArray: function (index, mode) {
            var items;
            if (typeof index == "function") index = BoldBIDashboard.util.getVal(index);
            if (bbdesigner$.isArray(index)) items = index;
            else if (typeof index == "string") {
                if ((mode && (this.model.multiSelectMode == "visualmode" || this.model.multiSelectMode == "delimiter" || this.model.showCheckbox))) {
                    items = this._getUpdatedListData(index);
                    if (items.length == 0) items = [index];
                }
                else if (!mode) {
                    items = this._getUpdatedListData(index);
                    if (items.length == 0) items = [index];
                }
                else items = [index];
            } else items = [index];
            return items;
        },
        _trim: function (val) {
            return typeof val == "string" ? bbdesigner$.trim(val) : val;
        },
        /*will deprecate with selectItemsByIndices */
        selectItemByIndex: function (index) {
            this._selectItemByIndex(index);
        },

        selectItemsByIndices: function (index) {
            this._selectItemByIndex(index);
        },

        _selectItemByIndex: function (val) {
            this.listitems = this._getLi();
            this._selectedIndices = bbdesigner$.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            var items = this._toArray(val, true), index;
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                if (index != null && index >= 0) {
                    if (bbdesigner$.inArray(index, this._selectedIndices) == -1)
                        for (var i = 0; i < this.listitems.length; i++) {
                            if (!bbdesigner$(this.listitems[i]).hasClass('e-disable')) {
                                if (i == index) {
                                    this.selectedIndexValue = i;
                                    this._activeItem = index;
                                    this._enterTextBoxValue();
                                }
                            }
                        }
                } else if (!this.model.showCheckbox && this.model.multiSelectMode == "none") this._clearTextboxValue();
            }
        },

        unselectItemsByIndices: function (val) { this._unselectItemByIndex(val); },

        /*will deprecate with unselectItemsByIndices method */
        unselectItemByIndex: function (val) { this._unselectItemByIndex(val); },

        _unselectItemByIndex: function (val) {
            this._selectedIndices = bbdesigner$.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            var i, items = this._toArray(val, true), index;
            this.listitems = this._getLi();
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                for (i = 0; i < this.listitems.length; i++) {
                    if (i == index) {
                        this.selectedIndexValue = i;
                        this._activeItem = index;
                        if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                        this._removeTextBoxValue();
                    }
                }
            }
        },

        /*Deprecated with selectedItemByValue */
        setSelectedValue: function (idvalue) { this.selectItemByValue(idvalue); },

        selectItemByValue: function (val) {
            var i, hidelement, items;
            this.listitems = this._getLi();
            if (BoldBIDashboard.isNullOrUndefined(val) || val === "") this._clearTextboxValue();
            else {
                items = this._toArray(val, true);
                for (var k = 0; k < items.length; k++) {
                    for (i = 0; i < this.listitems.length; i++) {
                        if (!bbdesigner$(this.listitems[i]).hasClass('e-disable')) {
                            var fieldValue = this._getAttributeValue(this.listitems[i]) || bbdesigner$(this.listitems[i]).text();
                            if (fieldValue) {
                                this._selectedValue = fieldValue;
                                if (this._selectedValue == items[k]) {
                                    this._activeItem = i;
                                    this._aselectedItem = this._activeItem;
                                    this._enterTextBoxValue();
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        },


        unselectItemByValue: function (val) {
            var i, hidelement, items = this._toArray(val, true);
            this.listitems = this._getLi();
            for (var k = 0; k < items.length; k++) {
                for (i = 0; i < this.listitems.length; i++) {
                    if (this._getAttributeValue(this.listitems[i])) {
                        this._selectedValue = this._getAttributeValue(this.listitems[i]);
                        if (this._selectedValue == items[k]) {
                            this._activeItem = i;
                            if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                            this._removeTextBoxValue();
                            break;
                        }
                    }
                }
            }
        },

        /* Deprecated with selectItemByText*/
        setSelectedText: function (value) { this.selectItemByText(value); },

        selectItemByText: function (val) {
            var i, hidelement, items;
            this.listitems = this._getLi();
            this._mapFields();
            if (BoldBIDashboard.isNullOrUndefined(val) || val === "") this._clearTextboxValue();
            else {
                items = this._toArray(val, true);
                for (var k = 0; k < items.length; k++) {
                    for (i = 0; i < this.listitems.length; i++) {
                        if (!bbdesigner$(this.listitems[i]).hasClass('e-disable')) {
                            this.selectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                            if (this.selectedTextValue == items[k]) {
                                this._activeItem = i;
                                this._aselectedItem = this._activeItem;
                                this._enterTextBoxValue();
                                break;
                            }
                        }
                    }
                }
            }
        },


        unselectItemByText: function (val) {
            var i, hidelement, items = this._toArray(val, true);
            this.listitems = this._getLi();
            this._mapFields();
            for (var k = 0; k < items.length; k++) {
                for (i = 0; i < this.listitems.length; i++) {
                    this.unselectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                    if (this.unselectedTextValue == items[k]) {
                        this._activeItem = i;
                        if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                        this._removeTextBoxValue();
                        break;
                    }
                }
            }
        },

        getSelectedValue: function () {
            return this.element.val();
        },

        getSelectedItem: function () {
            var k, selected = [];
            this.listitems = this._getLi();
            for (k = 0; k < this._selectedIndices.length; k++) {
                selected.push(this.listitems[this._selectedIndices[k]]);
            }
            return selected;
        },
        getItemDataByValue: function (value) {
           var listitems = this._toArray(value, false);
           var rawList  = (!BoldBIDashboard.isNullOrUndefined(this.resultList)) ? this._rawList.concat(this.resultList): this._rawList;
            var k, m, selected = [], field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
            if ( listitems.length > 0 && (rawList.indexOf(listitems[0]) > -1 || rawList.indexOf(Number(listitems[0])) > -1)) {
               for (k = 0; ((k < listitems.length) && ( rawList.indexOf(listitems[k]) > -1 || rawList.indexOf(Number(listitems[k])) > -1)); k++) {
                   selected.push({ text: listitems[k], value: listitems[k] });
                   }
            }
            else {
            if ( rawList.length > 0 && BoldBIDashboard.isNullOrUndefined(rawList[0][field]) ) {
                var textField = (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text";
                if (!BoldBIDashboard.isNullOrUndefined(rawList[0][textField])) {
                    field = textField;
                }
            }
            for (k = 0; k < listitems.length; k++) {
                for (m = 0; m < rawList.length; m++) {
                    if (rawList[m][field] == listitems[k] || rawList[m][field] == Number(listitems[k]))
                        selected.push(rawList[m]);
                }
            }
            }
            return selected;
        },

        getListData: function () { return this._rawList; },

        /* will be deprecate in upcoming releases*/
        getSelectedItemsID: function () {
            return this._selectedItemsID;
        },

        disableItemsByIndices: function (value) { this._disableItemByIndex(value) },

        /*Deprecated with disableItemsByIndices method */
        disableItemByIndex: function (value) { this._disableItemByIndex(value) },

        _disableItemByIndex: function (value) {
            if (!this.model.enabled) return false;
            var listitems = this._toArray(value, false);
            for (var i = 0; i < listitems.length; i++) {
                if (listitems[i] != null && !isNaN(parseInt(listitems[i]))) {
                    if (listitems.length > 0 && !(bbdesigner$.inArray(parseInt(listitems[i]), this._disabledItems) > -1)) {
                        index = bbdesigner$.inArray(listitems[i], this._disabledItems);
                        this._setClass(this._getLi()[parseInt(listitems[i])], "e-disable");
                        this._disabledItems.push(parseInt(listitems[i]));
                        this.model.disableItemsByIndex = String(this._disabledItems.join(","));
                    }
                }
            }
        },

        enableItemsByIndices: function (value) { this._enableItemByIndex(value) },

        /*Deprecated with enableItemsByIndices method */
        enableItemByIndex: function (value) { this._enableItemByIndex(value) },

        _enableItemByIndex: function (value) {
            var listitems = this._toArray(value, false), index;
            this.model.enableItemsByIndex = value;
            for (var i = 0; i < listitems.length; i++) {
                if (listitems.length > 0 && (bbdesigner$.inArray(parseInt(listitems[i]), this._disabledItems) > -1) &&  !isNaN(parseInt(listitems[i]))) {
                    index = bbdesigner$.inArray(parseInt(listitems[i]), this._disabledItems);
                    this._removeClass(this._getLi()[parseInt(listitems[i])], "e-disable");
                    this._disabledItems.splice(index, 1);
                }
            }
            this.model.enableItemsByIndex = null;
            this.model.disableItemsByIndex = this._disabledItems.join(this.model.delimiterChar);
        },
        _validateDelimiter: function (deli) {
            if (this._trim(deli).length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _removeText: function (currentValue) {
            this.removeVal = true;
            var eleVal = this._getUpdatedListData(this.element[0].value);
            var hidVal = this._getUpdatedListData(this._visibleInput[0].value);
            var listData = this.getItemDataByValue(currentValue)[0];
            var textField = (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text";
            if(bbdesigner$.inArray(currentValue, eleVal)>=0) eleVal.splice(bbdesigner$.inArray(currentValue, eleVal), 1);
            if(!BoldBIDashboard.isNullOrUndefined(listData) && !BoldBIDashboard.isNullOrUndefined(listData[textField]) && bbdesigner$.inArray(this._decode(listData[textField]).toString(), hidVal)>=0) hidVal.splice(bbdesigner$.inArray(this._decode(listData[textField]).toString(), hidVal), 1);
            if(bbdesigner$.inArray(currentValue, this._valueContainer)>=0) this._valueContainer.splice(bbdesigner$.inArray(currentValue, this._valueContainer), 1);
            if(!BoldBIDashboard.isNullOrUndefined(listData) && !BoldBIDashboard.isNullOrUndefined(listData[textField]) && bbdesigner$.inArray(listData[textField].toString(), this._textContainer)>=0) this._textContainer.splice(bbdesigner$.inArray(listData[textField].toString(), this._textContainer), 1);
            this.element[0].value = eleVal.join(this.model.delimiterChar);
            this._visibleInput[0].value = hidVal.join(this.model.delimiterChar);
            this.removeVal = false;
        },
        _getUpdatedListData: function (elementValue) {
            var listValues = elementValue;
            var dataSource = this.getListData();
            var count = 0, initialPosition = 0, dataPosition;
            var listData = [];
            var updatedData = [];
            var listText = '';
            var compareVal = this.model.fields.text;
            if (!this.removeVal) {
                compareVal = (this.model.fields.value) ? this.model.fields.value : compareVal;
            }
            while (count < dataSource.length) {
                listText = this._decode(dataSource[count][compareVal]);
                if (listValues.indexOf(listText) !== -1) {
                    listValues = listValues.replace(listText, initialPosition);
                    listData.push(listText);
                    initialPosition++;
                } else if (listValues === "") break;
                count++;
            }
            listValues = listValues.split(this.model.delimiterChar);
            count = 0;
            while (count < initialPosition) {
                dataPosition = listValues.indexOf("" + count);
                updatedData[dataPosition] = listData[count];
                count++;
            }
            return updatedData;
        },
        _addText: function (currentValue) {
            if (this._checkContains(this._hiddenValue)) return false;
            var ele = ["element", "_visibleInput"], val;
            for (var i = 0; i < ele.length; i++) {
                val = ele[i] == "element" ? this._hiddenValue : currentValue;
                if (this[ele[i]][0].value && this[ele[i]][0].value != "") {
                    var splitedText = this[ele[i]][0].value.split(this.model.delimiterChar);
                    splitedText.push(val);
                    this[ele[i]][0].value = splitedText.join(this.model.delimiterChar);
                } else this[ele[i]][0].value = val;
            }
        },
        _checkContains: function (chkValue) {
            var values = this._visibleInput[0].value.split(this.model.delimiterChar);
            this.contains = false;
            for (var i = 0; i < values.length; i++) {
                if (values[i] == chkValue) {
                    this.contains = true;
                    break;
                }
            }
            return this.contains;
        },
        _init: function () {
            var browserInfo = BoldBIDashboard.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0');
            this._textContent = this._isIE8 ? "innerText" : "textContent";
            if ((this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) || this.element.is("select")) {
                this._isWatermark = 'placeholder' in document.createElement('input');
                this._id = this.element[0].id;
                this._initialize();
                this._render();
                this._addAttr(this.model.htmlAttributes);
                this._enabled(this.model.enabled);
                this._initValue = false;
                this._checkboxValue = false;
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
            }
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            if (this.element.closest("form").length != 0) {
                this.element.rules("add", this.model.validationRules);
                var validator = this.element.closest("form").data("validator");
                if (!validator) validator = this.element.closest("form").validate();
                var name = this.element.attr("name");
                validator.settings.messages[name] = {};
                for (var ruleName in this.model.validationRules) {
                    var message = null;
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules[ruleName])) {
                        if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                            message = this.model.validationRules["messages"][ruleName];
                        else {
                            validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                            for (var msgName in this.model.validationMessage)
                                ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                        }
                        validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                    }
                }
            }
        },

        _setInitialPopup: function (value) {
            if (this.model.enabled && !this.model.readOnly)
                value == false ? this._hideResult() : this._showResult();
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.popupListWrapper.removeClass(this.model.cssClass).addClass(skin);
        },

        _setRTL: function (val) {
            if (this.model.enableRTL != val) {
                this.model.enableRTL = val;
                this._RightToLeft();
                this._dropbtnRTL();
            }
        },

        _changeHeight: function (height) {
            this.wrapper.height(height);
            this._setListHeight();
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": if (!this._isEqualDataSource(options[option])) this._checkModelDataBinding(options[option], this.model.query); break;
                    case "query": this._checkModelDataBinding(this.model.dataSource, options[option]); break;
                    case "fields": this.model.fields = bbdesigner$.extend(this.model.fields, options[option]); this._checkModelDataBinding(this.model.dataSource, this.model.query); break;
                    case "itemsCount": this.model.itemsCount = options[option]; this._checkModelDataBinding(this.model.dataSource, this.model.query);; break;
                    case "template": this.model.template = options[option]; this._checkModelDataBinding(this.model.dataSource, this.model.query); break;
                    case "value": if (BoldBIDashboard.isNullOrUndefined(options[option]) || options[option] === "") this._clearTextboxValue();
                    else { this._setValue(BoldBIDashboard.util.getVal(options[option])); options[option] = this.model.value; } break;
                    case "delimiterChar": 
						var delchar = this.model.delimiterChar; 
						options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option];
						if (this.model.text) {
							this.model.text = this.model.text.split(delchar).join(this.model.delimiterChar);
							this._visibleInput.val(this.model.text);							
						}
						if(this.model.value) {
							this.model.value = this.model.value.split(delchar).join(this.model.delimiterChar);
							this.element.val(this.model.value);	
						}
                        break;
                    case "text": if (BoldBIDashboard.isNullOrUndefined(options[option]) || options[option] === "") this._clearTextboxValue();
                    else { this._setText(options[option]); options[option] = this.model.text; } break;
                    case "itemValue": this._setItemValue(options[option]); break;
                    case "enableRTL": this._setRTL(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "minPopupHeight": this.model.minPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "minPopupWidth": this.model.minPopupWidth = options[option]; this._setListWidth(); break;
                    case "maxPopupHeight": this.model.maxPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "maxPopupWidth": this.model.maxPopupWidth = options[option]; this._setListWidth(); break;
					case "popupTarget": this.model.popupTarget = options[option]; this._renderPopupPanelWrapper(); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showCheckbox": this.model.showCheckbox = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        this._checkboxHideShow(options[option]);
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else if (_textes && _textes.length)
                            this._setText(_textes[0]);
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will depreciate with checkAll  Method*/
                    case "checkAll": this._setCheckAll(options[option]); return false; break;
                        /* will depreciate with uncheckAll  Method*/
                    case "uncheckAll": this._setUncheckAll(options[option]); return false; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "validationRules":
                        if (this.element.closest("form").length != 0) {
                            if (this.model.validationRules != null) {
                                this.element.rules('remove');
                                this.model.validationMessage = null;
                            }
                            this.model.validationRules = options[option];
                            if (this.model.validationRules != null) {
                                this._initValidator();
                                this._setValidation();
                            }
                        }
                        break;
                    case "validationMessage":
                        if (this.element.closest("form").length != 0) {
                            this.model.validationMessage = options[option];
                            if (this.model.validationRules != null && this.model.validationMessage != null) {
                                this._initValidator();
                                this._setValidation();
                            }
                        }
                        break;
                    case "showRoundedCorner": this._roundedCorner(options[option]); this.model.showRoundedCorner = options[option]; break;
                    case "showPopupOnLoad": this._setInitialPopup(options[option]); break;
                    case "targetID": this.model.targetID = options[option]; this._showFullList(); break;
                        /* will depreciate with selectedIndex  Method*/
                    case "selectedItemIndex":
                    case "selectedIndex":
                        this._selectItemByIndex(options[option]);
                        this.model.selectedItemIndex = this.model.selectedIndex = options[option];
                        break;
                        /* will depreciate with unselectItemByIndex API Method*/
                    case "unselectItemByIndex": this._unselectItemByIndex(options[option]); break;
                        /* will depreciate with disableItemsByIndex API Method*/
                    case "disableItemsByIndex": this._disableItemByIndex(options[option]); break;
                        /* will depreciate with enableItemsByIndex API Method*/
                    case "enableItemsByIndex": this._enableItemByIndex(options[option]); break;
                        /* will depreciate with selectedIndices  Method*/
                    case "selectedItems":
                    case "selectedIndices":
                        this._selectCheckedItem(options[option]);
                        options[option] = this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        break;
                    case "multiSelectMode":
                        if (this.model.multiSelectMode == "visualmode") {
                            this._swapUlandInput(false);
                            this._ulBox.remove();                         
                        }
                        this.model.multiSelectMode = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else {
                            this._setText(_textes[0]);
                            this.wrapper.find("input[name=" + this._name + "]").remove();
                        }
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will deprecate with fields.groupBy and e-category element in target element binding */
                    case "allowGrouping":
                        this._setGroupingAndSorting("allowGrouping", options[option]);
                        break;
                    case "enableSorting":
                        this._setGroupingAndSorting("enableSorting", options[option]);
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "enablePopupResize": this.model.enablePopupResize = options[option];
                        (options[option]) ? this._enablePopupResize() : this.popupListWrapper.find(".e-resizebar").remove();
                        break;
                    case "enableFilterSearch":
                        if (!options[option]) this._removeSearch();
                        else {
                            this.model.enableFilterSearch = true;
                            this._enableSearch();
                            break;
                        }

                }
            }
        },

        _clearTextboxValue: function () {
            this.element.val("");
            this._visibleInput.val("");
            this._updateValue("");
            this.selectedTextValue = this._selectedValue = this._hiddenValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = []; this._selectedIndices = [];
            this.model.selectedItems = [];
            this.model.selectedIndices = [];
            this.selectedIndex(null);
            this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
            if (this.model.showCheckbox) this._resetCheck();
            if (this.wrapper.find('ul.e-ul.e-boxes').length != 0) {
                this._ulBox.children("li").remove();
                if (this._name === "")
                    this.wrapper.find("input:hidden[id^='#']").remove();
                else
                    this.wrapper.find("input:hidden[id^='#'][name=" + this._name + "]").remove();
                bbdesigner$(this.element).attr("name", this._name);
            }
        },

        _destroy: function () {
            this._destroyDropdown();
            this._visibleInput.removeClass("e-input " + this.model.cssClass);
            this._setAttr( this.element[0], { 'accesskey': this.wrapper.attr('accesskey'), type:"text" });
            if (this._isWatermark) this._visibleInput.removeAttr("placeholder");
            this.element[0].value = "";
            if (!this.model.dataSource) {
                this.selectOptions ? this.docbdy && this.docbdy.append(this.selectOptions.show()).show() && this.element.remove() && this.selectOptions && this.selectOptions.removeClass("e-dropdownlist e-js") : this.docbdy && this.docbdy.append(this.ultag.html()).show();
            }
            this._hideResult();
            this.popupPanelWrapper.remove();
        },


        _finalize: function () {
            this.selectedIndex((this.selectedIndex() != null) ? this.selectedIndex() : this.selectedItemIndex());
            if (this.selectedIndex() != null) {
                this._selectItemByIndex(this.selectedIndex());
            } else if (this._selectedIndices.length > 0) {
                this._selectCheckedItem(this._selectedIndices);
            } if (this.model.disableItemsByIndex != null)
                this._disableItemByIndex(this.model.disableItemsByIndex);
            if (this.model.enableItemsByIndex != null)
                this._enableItemByIndex(this.model.enableItemsByIndex);
        },


        _initialize: function () {
            this._selectedIndices = this.model.selectedIndices.length > 0 ? this.model.selectedIndices : this.model.selectedItems;
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            this.model.selectedIndex = this.model.selectedIndex != null ? this.model.selectedIndex : this.model.selectedItemIndex;
            if (this.element.is("select")) {
                this.selectelement = true;
                this._renderSelectToDropdown();
            }
            this._selectedItemsID = [];
            this.target = this.element[0];
            this._disabledItems = new Array();
            this._queryString = null;
            this.suggLen = 0;
            this._itemId = null;
            this.checkedStatus = false;
            this._incqueryString = "";
            this._activeItem = null;
            this.ddWidth = 0;
            this._initValue = true;
            this._virtualCount = 0;
            this._raiseEvents = true;
        },
        _renderSelectToDropdown: function () {
            var i, optionLength, optionText, item;
            this.inputElement = BoldBIDashboard.buildTag("input.e-dropdownlist#" + this._id + "_input", "", {}, { "type": "text", "data-role": "none" });
            this.inputElement.insertAfter(this.element);
            this.optionDiv = BoldBIDashboard.buildTag("div#" + this._id + "_list");
            this.optionDiv.insertAfter(this.inputElement);
            this.optionUl = BoldBIDashboard.buildTag("ul");
            this.optionDiv.append(this.optionUl);
            if (this.element.attr("name")) {
                this.inputElement.attr("name", this.element.attr("name"));
                this.element.removeAttr("name");
            }
            this.selectOptions = this.element;
            this.selectOptions.attr('id', this._id);
            this.selectOptionItems = this.element.children("option");
            optionLength = this.selectOptionItems.length;
            this.optionDummyUl = bbdesigner$();

            for (i = 0; i < optionLength; i++) {
                item = this.selectOptionItems[i], optionText = bbdesigner$(item).attr('label') ? bbdesigner$(item).attr('label') : item.innerHTML;
                if (optionText != null) {
                    this.optionLi = BoldBIDashboard.buildTag("li", optionText, {}, { 'data-value': item.value, "unselectable": "on" });
                    this.optionDummyUl.push(this.optionLi[0]);
                    if (bbdesigner$(item).attr("selected")) {
                        if (this.model.showCheckbox)
                            if (bbdesigner$.inArray(i, this._selectedIndices) == -1) {
                                this._selectedIndices.push(i);
                                this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                            }
                            else if (BoldBIDashboard.isNullOrUndefined(this.selectedIndex())) this.selectedIndex(i);
                    }
                }
            }
            this.optionUl.append(this.optionDummyUl);

            this.element.css('display', 'none');
            this.element = this.inputElement;
        },


        _render: function () {
            this._renderDropdown();
            this._setWatermark();
            this._renderPopupPanelWrapper();
            this._showFullList();
            if (this.model.text != this._visibleInput.val())
                this._setText(this.model.text);
            if (this.value() == "" && this._visibleInput[0].value !== "")
                this._updateValue(this.element[0].value);
            if (this.value() !== this.element.val())
                this._setValue(this.value());
            this._roundedCorner(this.model.showRoundedCorner);
            if (!(BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager))
                this._finalize();
            this._setCheckAll(this.model.checkAll);
        },

        _isEqualDataSource: function (source) {
            if (!this.model.dataSource || !source || !(this.model.dataSource.length === source.length)) return false;
            var equal = true;
            for (var i = 0, len = this.model.dataSource.length; i < len; i++) {
                if (this.model.dataSource[i] !== source[i]) {
                    equal = false;
                    break;
                }
            }
            return equal;
        },

        _checkModelDataBinding: function (source, query) {
            this.element.val("");
            this._visibleInput.val("");
            this._updateValue("");
            this.selectedTextValue = this._selectedValue = this._hiddenValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = [];
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices = [];
            this.model.selectedIndex = this.model.selectedItemIndex = null;
            if (this.model.multiSelectMode == "visualmode") this._destroyBoxModel();
            this.model.dataSource = source;
            this.model.query = query;
            this.ultag.empty();
            this._showFullList();
        },
        _initDataSource: function (source) {
            var proxy = this;
            if (BoldBIDashboard.DataManager && source instanceof BoldBIDashboard.DataManager) {
                proxy._addLoadingClass();
                if (!proxy._trigger("actionBegin", { requestFrom: "default" })) {
                    var queryPromise = source.executeQuery(this._getQuery());
                    queryPromise.done(function (e) {
                        proxy._trigger("actionSuccess", { e: e, requestFrom: "default" });
                        proxy._totalCount = e.count;
                        proxy._listItem(e.result);
                        proxy._removeLoadingClass();
                        proxy._renderPopupList();
                        proxy._finalize();

                    }).fail(function (e) {
                        proxy.model.dataSource = null;
                        proxy._addLoadingClass();
                        proxy._trigger("actionFailure", { e: e, requestFrom: "default" });
                    }).always(function (e) {
                        proxy._trigger("actionComplete", { e: e, requestFrom: "default" });
                    });
                }
            }
        },
        _listItem: function (list, type) {
            if (type == "add") {
                this.popupListItems.push(list);
                this._rawList.push(list);
            } else if (bbdesigner$.isArray(list)) {
                this.popupListItems = list.slice(0);
                this._rawList = list.slice(0);
            }
        },
        _getQuery: function (isLocal) {
            var remoteUrl, mapper = this.model.fields, queryManager = BoldBIDashboard.Query();
            if (BoldBIDashboard.isNullOrUndefined(this.model.query) && !this.model.template && !isLocal) {
                var column = [];
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
            }
            else if (this.model.query) queryManager = this.model.query.clone();

            if (this.model.allowVirtualScrolling) queryManager.requiresCount();
            if (this.model.itemsCount > 0) queryManager.take(this.model.itemsCount);

            remoteUrl = this.model.dataSource.dataSource;
            if (mapper)
                if ((remoteUrl && remoteUrl.url && !remoteUrl.url.match(mapper.tableName + "$")) || (remoteUrl && !remoteUrl.url) || (!remoteUrl))
                    !BoldBIDashboard.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);

            return queryManager;
        },

        _addLoadingClass: function () {
            if (this._isPopupShown()) {
                this.popupListWrapper.addClass("e-load");
            } else {
                this.dropdownbutton.addClass("e-load");
                this.drpbtnspan.removeClass("e-icon e-down-arrow");
            }
            this.model.readOnly = true;
        },
        _removeLoadingClass: function () {
            this.dropdownbutton.removeClass("e-load");
            this.drpbtnspan.addClass("e-icon e-down-arrow");
            this.model.readOnly = false;
            this.popupListWrapper.removeClass("e-load");
        },

        _renderDropdown: function () {
            this.wrapper = BoldBIDashboard.buildTag("span.e-ddl e-widget " + this.model.cssClass + "#" + this._id + "_wrapper", "", {}, { "tabindex": "0", "accesskey": this.element.attr("accesskey") });
            this.container = BoldBIDashboard.buildTag("span.e-in-wrap e-box " + this.model.cssClass + "#" + this._id + "_container");
            this.element.removeAttr('accesskey');            
            this._setAttr(this.element[0], { "type":"hidden","role": "combobox", "aria-expanded": false, "aria-autocomplete": "list", "aria-haspopup": true, "aria-owns": this._id + "_popup" }).element.hide();
            this.drpbtnspan = BoldBIDashboard.buildTag("span.e-icon e-down-arrow", "", {}, { "aria-label": "select", "unselectable": "on" });
            this.dropdownbutton = BoldBIDashboard.buildTag("span.e-select#" + this._id + "_dropdown", "", {}, { "role": "button", "unselectable": "on" }).append(this.drpbtnspan);
            this.container.insertAfter(this.element);
            this.container.append(this.element);
            this.container.append(this.dropdownbutton);
            this.wrapper.insertBefore(this.container);
            this.wrapper.append(this.container);
            if (this.selectelement) {
                this.selectOptions.insertBefore(this.element);
            }
            this._visibleInput = BoldBIDashboard.buildTag("input#" + this._id + "_hidden", "", {}).insertAfter(this.element);
            this._visibleInput.addClass("e-input " + this.model.cssClass);
			this._setAttr(this._visibleInput[0],{ "readonly": true, "tabindex": -1,"data-role": "none" });        
            if (!this._isWatermark) {
                this._hiddenSpan = BoldBIDashboard.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._hiddenSpan.on("mousedown", bbdesigner$.proxy(this._OnDropdownClick, this));
            }
            this._checkNameAttr();
            this._setDimentions();
            this._RightToLeft();
            this.ddWidth = (this.dropdownbutton.outerWidth() > 0) ? this.dropdownbutton.outerWidth() : 24;
            //Element not Maintain in Multiselection
            this.container.on("mousedown", bbdesigner$.proxy(this._OnDropdownClick, this));
        },

        _checkNameAttr: function () {
            this._name = BoldBIDashboard.isNullOrUndefined(this.element.attr("name")) ? this._id : this.element.attr("name");
            this.element.attr("name", this._name);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy._visibleInput.attr(key, value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
                else proxy.wrapper.attr(key, value)
            });
        },
        _renderBoxModel: function () {
            if (this.model.multiSelectMode != "visualmode") return false;
            this._ulBox = BoldBIDashboard.buildTag("ul.e-ul e-boxes");
            this.container.prepend(this._ulBox);
            this._ulBox.css('min-height', '30px');
            this._ulBox.css('display', 'none');
            this._on(this.container, "click", function (e) {
                if (!this.model.enabled) return false;
                var bbdesigner$target = bbdesigner$(e.target);
                if (bbdesigner$target.hasClass("e-options")) {
                    if (!e.ctrlKey && bbdesigner$target.siblings().hasClass("e-active")) this._removeActive();
                    if (bbdesigner$target.hasClass("e-active")) bbdesigner$target.removeClass("e-active");
                    else bbdesigner$target.addClass("e-active");
                }
                if (!e.ctrlKey && (bbdesigner$target.hasClass("e-boxes"))) this._removeActive();
            });
        },

        _renderPopupPanelWrapper: function () {
            var oldWrapper = bbdesigner$("#" + this.element[0].id + "_popup_wrapper").get(0);
            if (oldWrapper)
                bbdesigner$(oldWrapper).remove();
            this.popupPanelWrapper = BoldBIDashboard.buildTag("div#" + this._id + "_popup_wrapper");
			bbdesigner$(this.model.popupTarget).append(this.popupPanelWrapper);
            this.popupListWrapper = BoldBIDashboard.buildTag("div.e-ddl-popup e-box e-widget  e-popup#" + this._id + "_popup_list_wrapper", "", { display: "none", overflow: "hidden" });
			this.popupListWrapper.width("auto");
			bbdesigner$(this.popupListWrapper).css({'border-width':'1px'});
            this.popupList = BoldBIDashboard.buildTag("div#" + this._id + "_popup", { "tabIndex": 0 });
            this.popupList.addClass(this.model.cssClass);
            this.popup = this.popupList;
            this.popupScroller = BoldBIDashboard.buildTag("div"); this.ultag = BoldBIDashboard.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
            this.popupScroller.append(this.ultag);
            this.popupList.append(this.popupScroller);
            if (this.model.headerTemplate) {
                this.headerTemplate = bbdesigner$("<div>").append(this.model.headerTemplate);
                this.popupListWrapper.append(this.headerTemplate);
            }
            this.popupListWrapper.append(this.popupList);
            this.popupPanelWrapper.append(this.popupListWrapper);
            this.ultag.on({ mouseenter: bbdesigner$.proxy(this._OnMouseEnter, this), mouseleave: bbdesigner$.proxy(this._OnMouseLeave, this), click: bbdesigner$.proxy(this._OnMouseClick, this) }, "li:not('.e-category')");
            bbdesigner$(window).on("resize", bbdesigner$.proxy(this._OnWindowResize, this));

        },

        _updateText: function () {
            this.model.text = this._visibleInput.val() == "" ? null : this._visibleInput.val();
        },
        _updateValue: function (val) {
            this.value(val == "" ? null : val);
        },
        _setGroupingAndSorting: function (prop, value) {
            this.model[prop] = value;
            var oldValue = this.model.text;
            this._updateValue("");
            this._selectedIndices = [];
            this.ultag.empty();
            this._showFullList();
            if (this.model.showCheckbox && oldValue) {
                var values = oldValue.split(this.model.delimiterChar);
                for (var i = 0; i < values.length; i++)
                    this.selectItemByText(values[i]);
            }
            else
                this.selectItemByText(oldValue);
        },
        _setSortingList: function () {
            var sortedlist = document.createElement("ul"), i, sortitems;
            bbdesigner$(sortedlist).append(this.itemsContainer.children());
            if (this.model.allowGrouping || bbdesigner$(sortedlist).find(">.e-category").length > 0) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (i = 0; i < bbdesigner$(sortedlist).find(">.e-category").length; i++) {
                    sortitems = bbdesigner$(sortedlist).find(">.e-category").eq(0).first().nextUntil(".e-category").get();
                    this._setSortList(sortedlist, sortitems);
                }
            }
            else {
                bbdesigner$(sortedlist).children('>.e-category').remove();
                sortitems = bbdesigner$(sortedlist).children('li').get();
                this._setSortList(sortedlist, sortitems);
            }
            this.itemsContainer = bbdesigner$(sortedlist);
        },
        _setSortList: function (sortedlist, sortitems) {
            sortitems.sort(function (objA, objB) {
                var sortA = bbdesigner$(objA).text().toUpperCase();
                var sortB = bbdesigner$(objB).text().toUpperCase();
                return (sortA < sortB) ? -1 : (sortA > sortB) ? 1 : 0;
            });
            if (this.model.sortOrder == "descending") sortitems.reverse();
            if (this.model.allowGrouping || bbdesigner$(sortedlist).find(">.e-category").length > 0) {
                bbdesigner$(sortedlist).append(bbdesigner$("<li>").text(bbdesigner$(sortedlist).find(">.e-category").eq(0).text()).addClass("e-category"));
                bbdesigner$(sortedlist).find(">.e-category").eq(0).remove();
            }
            bbdesigner$.each(sortitems, function (index, item) {
                bbdesigner$(sortedlist).append(item);
            });
        },

        _renderPopupList: function () {
            this._doDataBind();
            this._renderRemaining();
        },
        _renderRemaining: function () {
            var proxy = this;
            this._dropbtnRTL();
            if (this.model.enableFilterSearch) this._enableSearch();
            if (this.model.enablePopupResize) this._enablePopupResize();
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                if (this._totalCount && this._totalCount > 0) {
                    this._totalHeight = this._totalCount * 29;
                    this._totalPages = this._totalCount / (this.model.itemsCount * 29);
                    this._loadedItemHeight =  this._getLi().length * 29;
                    this._getLi().attr("page", 0);
                    this._virtualPages = [0];
                    this.ultag.append(bbdesigner$("<span>").addClass("e-virtual").css({ "height": this._totalHeight - this._loadedItemHeight, "display": "block" }));
                }
            }
            this._virtualUl = this.ultag.clone(true);
            this._setListWidth();
            this._setListHeight();
            this._setListPosition();
            this.popupScroller.css({ "height": "", "width": "" });
            this.popupList.BoldBIDashboardScroller({
                height: this._getPopupHeight(), width: 0, scrollerSize: 20, scroll: function (e) {
                    if (proxy.model.allowVirtualScrolling) proxy._onScroll(e);
                }
            });
            this.scrollerObj = this.popupList.BoldBIDashboardScroller("instance");
            this.popupList.find("div.e-scrollbar div").attr("unselectable", "on");
            this.popupListWrapper.css({ 'display': 'none', 'visibility': 'visible' });
            if (!this._isSingleSelect()) {
                if (this.model.showCheckbox) this._checkboxHideShow(this.model.showCheckbox);
                else this._multiItemSelection(this._getLi());
            }
            this._setUncheckAll(this.model.uncheckAll);
            this._changeSkin(this.model.cssClass);
            this.model.showPopupOnLoad && this._showResult();
           
        },

        _enableSearch: function () {
            if (this.model.enableFilterSearch)
                if (!this.inputSearch) {
                    this.inputSearch = BoldBIDashboard.buildTag("input#" + this._id + "_inputSearch.e-input", "", {}, { "type": "text", "data-role": "none" });
                    this.popupListWrapper.prepend(bbdesigner$("<span>").addClass("e-atc e-search").append(bbdesigner$("<span>").addClass("e-in-wrap ").append(this.inputSearch).append(bbdesigner$("<span>").addClass(" e-icon e-isearch"))));
                    this._on(this.inputSearch, "keyup", this._OnSearchEnter);
                    this._on(this.inputSearch, "focus", this._searchTextBoxFocus);
                    this._on(this.inputSearch, "blur", this. _searchTextBoxBlur);
                }
        },
        _removeSearch: function () {
            this.model.enableFilterSearch = false;
            this.popupListWrapper.find(".e-atc.e-search").remove();
            if (this._isPopupShown()) this.hidePopup();
            this.inputSearch = null;
        },

      _searchTextBoxFocus: function () {           
                this.popupListWrapper.find(".e-atc.e-search").addClass("e-focus");
                this._trigger("focusIn");
            
        },

        _seachTextBoxBlur: function () {
            if (this.popupListWrapper.find(".e-atc.e-search").hasClass("e-focus")) {
                this.popupListWrapper.find(".e-atc.e-search").removeClass("e-focus");
                this._trigger("focusOut");
            }
        },
        _OnSearchEnter: function (e) {
            var proxy = this;
            if (bbdesigner$.inArray(e.keyCode, [38, 40, 13]) != -1 && this.ultag.find("li.e-nosuggestion").length <= 0) {
                if (e.keyCode == 13) this._OnKeyUp(e);
                else this._OnKeyDown(e);
            }
            else {
                if (e.keyCode == 27 && !(this.inputSearch.val() == '')) {
                    this.inputSearch.val('');
                }
                this._activeItem = -1;
                this._queryString = this.inputSearch.val();
                if (this._queryString == "" && this._virtualUl) {
                    var args = { searchString: this._queryString, searchQuery: null, items: this._rawList };
                    this._trigger("search", args);
                    this._resetList();
                    this._updateSelectedIndexByValue(this.value());
                    this._refreshScroller();
                    this._setListPosition();
                } else {
                    this._mapFields();
                    var searchQuery = this._addSearchQuery(BoldBIDashboard.Query(), !this._isPlainType(this._rawList));
                    var args = { searchString: this._queryString, items: this._rawList, searchQuery: searchQuery };
                    this.popupListWrapper.find(".e-atc.e-search .e-isearch").addClass("e-iclose").removeClass("e-isearch");
                    this._on(this.popupListWrapper.find(".e-atc.e-search .e-iclose"), "mousedown", this._refreshSearch);
                    if (!this._trigger("search", args))
                        proxy._filterSearch(searchQuery, args);
                }
            }
        },

        _refreshSearch: function () {
            this._trigger("clearFilterText", {action: "clearFilter"});
            this._resetSearch();
            this._refreshPopup();
        },
        _filterSearch: function (searchQuery, args) {
            var flag = false, resultList = args.result ? args.result : BoldBIDashboard.DataManager(this._rawList).executeLocal(searchQuery);
            if (resultList.length == 0) {
                flag = true;
                resultList.push("No suggestions");
            }
            this.popupListItems = resultList;
            this.ultag.empty();
            this._isPlainType(this.popupListItems) ? this._plainArrayTypeBinding(resultList) :
            this._objectArrayTypeBinding(resultList, "search");
            if (flag && this.ultag.find("li").length == 1) {
                this.ultag.find("li").eq(0).addClass("e-nosuggestion");
            }
            if (this.model.showCheckbox && !flag) {
                this._appendCheckbox( this._getLi());
            }
            this._onSearch = true;
            this._setValue(this.value());
            this._onSearch = false;
            this._updateSelectedIndexByValue(this.value());
            this._refreshScroller();
            this._setListPosition();
        },
        _updateSelectedIndexByValue: function (value) {
            if (!value || !this.model.enableFilterSearch) return;
            this._selectedIndices = this.model.selectedItems = this.model.selectedIndices = [];
            this._virtualList = this._getLi();
            var item = this._toArray(value);
            for (var k = 0; k < item.length; k++) {
                for (var m = 0; m < this._virtualList.length; m++) {
                    if (item[k] == this._getIndexedValue(this._virtualList[m])) {
                        this._selectedIndices.push(m);
                        break;
                    }
                }
            }
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
        },
        _getIndexedValue: function (item) {
            return this._getAttributeValue(item) ? this._getAttributeValue(item) : item.innerText;
        },

        _resetSearch: function () {
            if (!this.inputSearch || !(this.model && this.model.enableFilterSearch)) return;
            if (this.inputSearch.val() != "" && this._virtualUl) {
                this.inputSearch.val("");
                this._resetList();
            }
        },
        _resetList: function () {
            if (this.popupListWrapper.find(".e-atc.e-search .e-iclose").length == 1) {
                this.popupListWrapper.find(".e-atc.e-search .e-iclose").addClass("e-isearch").removeClass("e-iclose");
                this._off(this.popupListWrapper.find(".e-atc.e-search .e-iclose"), "mousedown", this._refreshSearch);
            }
            this._listItem(this._rawList);
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                this._removeCheckbox(bbdesigner$("<span>").append(this._virtualUl));
                this._virtualUl.find('.e-chkbox-wrap').remove();
            }
            this.ultag.empty().append(this._virtualUl.children().clone(true));
            if (this.model.showCheckbox) {
                this._appendCheckbox( this._getLi());
            }
            // this_onSearch variable will restrict the change and select event on searching
            this._onSearch = true;
            this._setValue(this.value());
            this._onSearch = false;
        },

       
        _addSearchQuery: function (query, checkMapper) {
            var bindTo = "";
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
            if (this._queryString) query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
            if (this.model.itemsCount > 0) query.take(this.model.itemsCount);
            return query;
        },

        _targetElementBinding: function () {
            var predecessor = this.element.parents().last();
            this.docbdy = this.model.targetID ? predecessor.find("#" + this.model.targetID) : this.optionDiv ? this.optionDiv : null;
            if (!this.docbdy) return false;
            this.itemsContainer = this.docbdy[0].nodeName == "UL" ? this.docbdy : this.docbdy.children("ol,ul");
            if ((this.model.allowGrouping || this.itemsContainer.find(">.e-category").length > 0) && !this.model.enableSorting) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (var k = 0; k < this.itemsContainer.find(">.e-category").length; k++) {
                    var ele = this.itemsContainer.find(">.e-category").eq(k);
                    ele.replaceWith(bbdesigner$("<li>").text(ele.text()).addClass("e-category"));
                }
            }
            else if (this.model.enableSorting) this._setSortingList();
            this.itemsContainer.children("ol,ul").remove();
            this.items = this.itemsContainer.children('li');
            this.items.children("img,div").addClass("e-align");
            this._listItem([]);
            for (var i = 0; i < this.items.length; i++) {
                var fieldText = bbdesigner$(this.items[i]).text(), fieldValue = this._getAttributeValue(this.items[i]);
                this._listItem({ text: fieldText, value: fieldValue ? fieldValue : fieldText }, "add");
            }
            //This will append the list with the popup wrapper
            this.ultag.empty().append(this.itemsContainer.children());
			this.ultag.children('li').attr("role", "option").attr("unselectable", "on");		
            this.docbdy.css({ 'display': 'none' }).children("ol,ul").remove();
        },
        _plainArrayTypeBinding: function (list) {
            this.dummyUl = bbdesigner$();
            if (this.model.enableSorting) {
                list.sort();
                if (this.model.sortOrder == "descending") list.reverse();
            }
            if (list.length > 0) {
                for (var i = 0; i < list.length; i++) {
                    if (!BoldBIDashboard.isNullOrUndefined(list[i])) {
                        var litag = BoldBIDashboard.buildTag("li", list[i], {}, { 'data-value': list[i], "unselectable": "on" });
                        this.dummyUl.push(litag[0]);
                    }
                }
                this.ultag.append(this.dummyUl);
                this._trigger('dataBound', { data: list });
            }

        },
        _mapFields: function () {
            this.model.fields.groupBy = this.model.fields.groupBy ? this.model.fields.groupBy : this.model.fields.category;
            var mapper = this.model.fields;
            this.mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null };
            this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
            this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
            this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
            this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
            this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
            this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
            this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
            this.mapFld._selected = (mapper && mapper.selected) ? mapper["selected"] : "selected";
            this.mapFld._category = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy";
        },
        _doDataBind: function () {
            var source = this.model.dataSource, list = this.popupListItems;
            !source || !list || !list.length || list.length < 1 ? this._targetElementBinding()
            : this._isPlainType(list) ? this._plainArrayTypeBinding(list)
            : this._objectArrayTypeBinding(list);
        },
        _isPlainType: function (list) {
            return typeof list[0] != "object";
        },
        _objectArrayTypeBinding: function (list, from) {
            this.dummyUl = bbdesigner$();
            this._mapFields();
            if (this.model.enableSorting) {
                var sortQuery = BoldBIDashboard.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                list = BoldBIDashboard.DataManager(list).executeLocal(sortQuery);
            }
            if (this.model.allowGrouping || this.model.fields.groupBy) {
                this.popupListWrapper.addClass("e-atc-popup");
                var mapCateg = this.mapFld._category, groupedList, groupQuery;
                groupQuery = BoldBIDashboard.Query().group(mapCateg);
                if (!this.model.enableSorting) groupQuery.queries.splice(0, 1);
                groupedList = BoldBIDashboard.DataManager(list).executeLocal(groupQuery);
                this._swapUnCategorized(groupedList);
                (from == "search") ? this.popupListItems = [] : this._listItem([]);
                for (var i = 0; i < groupedList.length; i++) {
                    if (groupedList[i].key)
                        this.ultag.append(BoldBIDashboard.buildTag("li.e-category", groupedList[i].key).attr("role", "option")[0]);
                    this._generateLi(groupedList[i].items, this.mapFld);
                    this.ultag.append(this.dummyUl);
                    for (var j = 0; j < groupedList[i].items.length; j++) {
                        (from == "search") ? this.popupListItems.push(groupedList[i].items[j]) : this._listItem(groupedList[i].items[j], "add");
                    }
                }
            }
            else {
                this._generateLi(list, this.mapFld);
                this.ultag.append(this.dummyUl);//ko binding
            }
            this._trigger('dataBound', { data: list });
        },
        _onScroll: function (e) {
            if (!e.scrollTop) return;
            var scrollerPositon = e.scrollTop, proxy = this;
            if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "continuous") {
                var list, queryPromise, skipQuery = BoldBIDashboard.Query().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                if (scrollerPositon >= bbdesigner$(proxy.popupList).find("ul,ol").height() - bbdesigner$(proxy.popupList).height() && proxy._rawList.length < proxy._totalCount) {
                    proxy._addLoadingClass();
                    if (BoldBIDashboard.DataManager && proxy.model.dataSource instanceof BoldBIDashboard.DataManager) {
                        skipQuery = proxy._getQuery().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                        if (!proxy._trigger("actionBegin", { requestFrom: "scroll" })) {
                            queryPromise = proxy.model.dataSource.executeQuery(skipQuery);
                            queryPromise.done(function (e) {
                                proxy.addItem(e.result);
                                proxy._removeLoadingClass();
                                proxy._trigger("actionSuccess", { e: e, requestFrom: "scroll" });
                            }).fail(function () {
                                proxy.model.dataSource = null;
                                proxy._removeLoadingClass();
                                proxy._trigger("actionFailure", { e: e, requestFrom: "scroll" });
                            }).always(function (e) {
                                proxy._trigger("actionComplete", { e: e, requestFrom: "scroll" });
                            });
                        }
                    } else {
                        list = BoldBIDashboard.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
                        proxy.addItem(list);
                        proxy._removeLoadingClass();
                    }
                }
            } else if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "normal") {

                window.setTimeout(function () {
                    if (proxy._virtualCount == 0) {
                        proxy._loadList();
                    }
                }, 300);

            }

        },
        _loadList: function () {
            this._virtualCount++;
            var top = this.scrollerObj.scrollTop(), proxy = this, prevIndex = 0, prevPageLoad, nextIndex = null;
            this._currentPage = Math.round(top / (29 * this.model.itemsCount));
            if ((bbdesigner$.inArray(this._currentPage, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) {
                if (this._currentPage == 0) {
                    if ((bbdesigner$.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else if ((bbdesigner$.inArray(this._currentPage - 1, this._virtualPages)) != -1) {
                    if ((bbdesigner$.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else {
                    this._currentPage = this._currentPage - 1;
                }
            }
            prevPageLoad = !(bbdesigner$.inArray(this._currentPage - 1, this._virtualPages) != -1);
            this._addLoadingClass();
            for (var i = this._virtualPages.length - 1; i >= 0; i--) {
                if (this._virtualPages[i] < this._currentPage) {
                    prevIndex = this._virtualPages[i];
                    if (!(i + 1 == this._virtualPages.length))
                        nextIndex = this._virtualPages[i + 1];
                    break;
                }
            }

            var firstArg = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
            var skipQuery = BoldBIDashboard.Query().range(firstArg, this._currentPage * this.model.itemsCount + this.model.itemsCount), queryPromise, list;
            if (BoldBIDashboard.DataManager && proxy.model.dataSource instanceof BoldBIDashboard.DataManager) {
                var skipParam = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
                skipQuery = this._getQuery().skip(skipParam);
                if (prevPageLoad) {
                    for (i = 0; i < skipQuery.queries.length; i++) {
                        if (skipQuery.queries[i].fn == "onTake") {
                            skipQuery.queries.splice(i, 1);
                            break;
                        }
                    }
                    skipQuery.take(2 * this.model.itemsCount);
                }
                if (!proxy._trigger("actionBegin", { requestFrom: "scroll" })) {
                    queryPromise = proxy.model.dataSource.executeQuery(skipQuery);
                    queryPromise.done(function (e) {
                        proxy._appendVirtualList(e.result, prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                        proxy._removeLoadingClass();
                        proxy._trigger("actionSuccess", { e: e, requestFrom: "scroll" });
                    }).fail(function () {
                        proxy._virtualCount--;
                        proxy._removeLoadingClass();
                        proxy._trigger("actionFailure", { e: e, requestFrom: "scroll" });
                    }).always(function (e) {
                        proxy._trigger("actionComplete", { e: e, requestFrom: "scroll" });
                    });
                }
            } else {

                list = BoldBIDashboard.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
                this._appendVirtualList(list, prevIndex, this._currentPage, nextIndex, prevPageLoad);
                proxy._removeLoadingClass();
            }
        },
        _appendVirtualList: function (list, prevIndex, currentIndex, nextIndex, prevPageLoad) {
            this._virtualCount--;
            if ((bbdesigner$.inArray(currentIndex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) return false;
            if (prevPageLoad && (bbdesigner$.inArray(currentIndex - 1, this._virtualPages.sort()) != -1)) {
                list.splice(0, this.model.itemsCount);
                prevPageLoad = false;
            }
            var items = this.model.itemsCount, tempUl = bbdesigner$("<ul>"), firstVirtualHeight, secondVirtualHeight;
            firstVirtualHeight = prevPageLoad ? ((currentIndex - 1) * items * 29) - (prevIndex * items + items) * 29 : (currentIndex * items * 29) - (prevIndex * items + items) * 29;
            if (firstVirtualHeight != 0) tempUl.append(bbdesigner$("<span>").addClass("e-virtual").css({ display: "block", height: firstVirtualHeight }));
            this._mapFields();
            this._generateLi(list, this.mapFld);
            bbdesigner$(this.dummyUl).attr("page", currentIndex);
            if (prevPageLoad) {
                bbdesigner$(this.dummyUl).slice(0, items).attr("page", currentIndex - 1);
            }
            if (this.model.showCheckbox) {
                this._appendCheckbox(this.dummyUl);
            }
            tempUl.append(this.dummyUl);
            secondVirtualHeight = (currentIndex * items + items) * 29;
            if (nextIndex != null) secondVirtualHeight = (nextIndex * items * 29) - secondVirtualHeight;
            else secondVirtualHeight = this.ultag.height() - secondVirtualHeight;
            if (secondVirtualHeight != 0) tempUl.append(bbdesigner$("<span>").addClass("e-virtual").css({ display: "block", height: secondVirtualHeight }));
            var selector = this.ultag.find("li[page=" + prevIndex + "]").last();
            selector.next().remove();
            tempUl.children().insertAfter(selector);
            this._virtualPages.push(currentIndex);
            if (prevPageLoad) this._virtualPages.push(currentIndex - 1);
            for (var i = 0; i < list.length; i++) {
                this._listItem(list[i], "add");
            }
            this._virtualUl = this.ultag.clone(true);
            this._renderBoxModel();
        },

        _generateLi: function (list, mapFld) {
            this.mapFld = mapFld;
            this.dummyUl = [];
            if (!list || !list.length || list.length < 1) return false;
            for (var i = 0; i < list.length; i++) {
                var _did = this._getField(list[i], this.mapFld._id),
                    _dimageUrl = this._getField(list[i], this.mapFld._imageUrl),
                    _dimageAttributes = this._getField(list[i], this.mapFld._imageAttributes),
                    _dspriteCss = this._getField(list[i], this.mapFld._spriteCSS),
                    _dtext = this._getField(list[i], this.mapFld._text),
                    _dvalue = this._getField(list[i], this.mapFld._value),
                    _dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes),
                    _dselected = this._getField(list[i], this.mapFld._selected),
                    litag = document.createElement("li");

                if (!BoldBIDashboard.isNullOrUndefined(_dvalue) && _dvalue.toString().length > 0) {
                    litag.setAttribute('data-value', typeof _dvalue == "object" ? JSON.stringify(_dvalue) : _dvalue);
                }
                if (!BoldBIDashboard.isNullOrUndefined(_did) && (_did !== "" || _did != 0))
                    litag.setAttribute('id', _did);
                if (!BoldBIDashboard.isNullOrUndefined(_dhtmlAttributes) && (_dhtmlAttributes != "")) {
                    this._setAttr(litag, _dhtmlAttributes);
                }

                if (this.model.template) {
                    bbdesigner$(litag).append(this._getTemplatedString(list[i]));
                } else {
                    if (!BoldBIDashboard.isNullOrUndefined(_dimageUrl) && (_dimageUrl != "")) {
                        var imgtag = document.createElement("img");
                        this._setClass(imgtag, "e-align")._setAttr(imgtag, { 'src': _dimageUrl, 'alt': _dtext });
                        if ((_dimageAttributes) && (_dimageAttributes != "")) {
                            this._setAttr(imgtag, _dimageAttributes);
                        }
                        litag.appendChild(imgtag);
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(_dspriteCss) && (_dspriteCss != "")) {
                        var divtag = document.createElement("div");
                        this._setClass(divtag, 'div.e-align ' + _dspriteCss + ' sprite-image');
                        litag.appendChild(divtag);
                    }
                    if (_dselected) {
                        this._setClass(litag, "chkselect");
                    }
                    {
                        if (BoldBIDashboard.isNullOrUndefined(_dtext)) _dtext = String(_dtext);
                        var textEle = document.createElement("span");
                        textEle.innerHTML = _dtext;                      
                        this._setClass(textEle, "e-ddltxt");
                        litag.innerHTML += textEle.outerHTML;
                    }
                }
                this._setAttr(litag, { "role": "option", "unselectable": "on" });
                this.dummyUl.push(litag);
             
            }
        },

        _setAttr: function (element, attrs) {
            if (typeof attrs == "string") {
                var sAttr = attrs.replace(/['"]/g, "").split("=");
                if (sAttr.length == 2) element.setAttribute(sAttr[0], sAttr[1]);
            }
            else {
                for (var idx in attrs) {
                    if ((idx == 'styles' || idx == 'style') && typeof attrs[idx] == 'object') {
                        for (var prop in attrs[idx]) {
                            element.style[prop] = attrs[idx][prop];
                        }
                    }
                    else
                        element.setAttribute(idx, attrs[idx]);
                }
            }
            return this;
        },
        _setClass: function (element, classNme) {
            element.className += " " + classNme;
            return this;
        },
        _removeClass: function (element, classNme) {
            var index = element.className.indexOf(classNme);
            if (index >= 0) {
                if (index != 0 && element.className[index - 1] === " ")
                    element.className = element.className.replace(" " + classNme, "");
                else element.className = element.className.replace(classNme, "");
            }
            return this;
        },
        _hasClass: function (element, classNme) {
            return element.className.indexOf(classNme) >= 0;
        },
        _swapUnCategorized: function (list) {
            bbdesigner$(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },

        _getField: function (obj, fieldName) {
            return BoldBIDashboard.pvt.getObject(fieldName, obj);
        },

        _getTemplatedString: function (list) {

            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _setWatermark: function () {
            if ((this.model.watermarkText != null) && (this.element.val() == "") && this._trim(this._visibleInput.val()) == "") {
                if (this._isWatermark)
                    this._visibleInput.attr("placeholder", this.model.watermarkText);
                else
                    this._hiddenSpan.css("display", "block").text(this.model.watermarkText);
                //In visual mode, to show watermark text when no items selected.
                if (this.model.multiSelectMode == "visualmode" && this._ulBox && this._ulBox.find('li').length == 0) this._swapUlandInput(false);
            }
        },

        _checkboxHideShow: function (value) {
            if (value) {
                this.listitems = this._getLi();
                var chklist = this.listitems.find('input[type=checkbox]');
                if (chklist.length == 0) {
                    this._appendCheckbox(this.listitems);
                }
            }

            else
                this._removeCheck(this.popupList);
            this.model.showCheckbox = value;
        },
        
        _setCheckAll: function (value) {
            if (!this._isSingleSelect() && (value))
                this.checkAll();
            else this.model.checkAll = false;
        },
        _setUncheckAll: function (value) {
            if (!this._isSingleSelect() && (value))
                this.uncheckAll();
            else this.model.uncheckAll = false;
        },

        checkAll: function () {
            var _nodes = this._selectedIndices, isAlreadySelected = false;
            this._mapFields();
            this.listitems = this._getLi();
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            if (!this._isSingleSelect()) {
                for (var i = 0; i < this.listitems.length; i++) {
                    if (this.model.showCheckbox) {
                        var checkboxWrap = bbdesigner$(this.listitems[i]).children(".e-checkwrap")[0];
                        if (checkboxWrap && !this._isChecked(checkboxWrap)) {
                            this._setClass(checkboxWrap, "e-check-act");
							this._setAttr(checkboxWrap,{"aria-checked":true});
                            checkboxWrap.firstChild.checked = true;
                            isAlreadySelected = false;
                        }
                        else isAlreadySelected = true;
                    }
                    else {
                        bbdesigner$(this.listitems[i]).addClass("e-active");
                    }
                    if (this.model.multiSelectMode == "visualmode") {
                        this._ulBox.append(this._createBox(this._currentText));
                        if (this._isPopupShown())
                            this._setListPosition();
                    }
                    if (!isAlreadySelected) {
                        this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                        this._itemID = bbdesigner$(this.listitems[i]).attr("id");
                        if (!BoldBIDashboard.isNullOrUndefined(this._itemID) && (this._itemID != "" || this._itemID == 0))
                            this._selectedItemsID.push(this._itemID);
                        this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
                        this._createListHidden(this._hiddenValue);
                        this._addText(this._currentText);
                        if (bbdesigner$.inArray(i, _nodes) == -1) {
                            this._selectedIndices.push(i);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                        this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._activeItem = i;
                        this.activeItem = this._getActiveItem();
                        this._cascadeAction();
                    }
                }
                this._updateValue(this._visibleInput.val());
                this._updateText();
                this.model.itemValue = this._selectedValue;
                this.model.uncheckAll = false;
                this.model.checkAll = true;
                this._activeItem = -1;
                this._setWatermark();
            }
        },
        _createListHidden: function (value) {
            var arrayHidden = document.createElement("input");
            this._setAttr(arrayHidden, { type: "hidden", name: this._name, value: value, id: "#" + value });
            this.container.append(arrayHidden);
            bbdesigner$(this.element).attr("name", "hiddenEle");
        },
        _removeListHidden: function (value) {
            var arrayEle = document.getElementById("#" + value);
            bbdesigner$(arrayEle).remove();
        },
        _getAttributeValue: function (val) {
            return val ? val.getAttribute("data-value") || val.getAttribute("value") : null;
        },
       
        _selectCheckedItem: function (chkitems) {
            for (var i = 0; i < chkitems.length; i++) {
                this._activeItem = chkitems[i];
                this._enterTextBoxValue();
            }
        },

        /* will deprecate with uncheckAll method */
        unCheckAll: function () { this.uncheckAll(); },

        uncheckAll: function () {
            var isAlreadySelected = false;
            this.listitems = this._getLi();
            this._mapFields();
            if (!this._isSingleSelect()) {
                for (var i = 0; i < this.listitems.length; i++) {
                    if (this.model.showCheckbox) {
                        var checkboxWrap = bbdesigner$(this.listitems[i]).children(".e-checkwrap")[0];
                        if (checkboxWrap && this._isChecked(checkboxWrap)) {
                            this._removeClass(checkboxWrap, "e-check-act");
							this._setAttr(checkboxWrap,{"aria-checked":false});
                            checkboxWrap.firstChild.checked = false;
                            isAlreadySelected = false;
                        }
                        else isAlreadySelected = true;
                    }
                    else {
                        bbdesigner$(this.listitems[i]).removeClass("e-active");
                    }
                    if (this.model.multiSelectMode == "visualmode") {
                        this._deleteBoxCheck(this._currentText);
                        if (this._isPopupShown())
                            this._setListPosition();
                    }
                    if (!isAlreadySelected) {
                        this.checkedStatus = false;
                        this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                        this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
                        this._activeItem = i;
                        this.activeItem = this._getActiveItem();
                        this._removeText(this._hiddenValue);
                        this._removeListHidden(this._hiddenValue);
                        var _nodes = this._selectedIndices;
                        if (bbdesigner$.inArray(i, _nodes) > -1) {
                            this._selectedIndices.splice(bbdesigner$.inArray(i, _nodes), 1);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                        this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                        this._itemID = bbdesigner$(this.listitems[i]).attr("id");
                        if (!BoldBIDashboard.isNullOrUndefined(this._itemID) && (this._itemID != "" || this._itemID == 0))
                            this._removeSelectedItemsID();
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._cascadeAction();
                    }
                }
                this._updateValue(this.element.val());
                this._updateText();
                this.model.itemValue = this._selectedValue;
                this.model.checkAll = false;
                this.model.uncheckAll = true;
                this._setWatermark();
                this._activeItem = -1;
            }

        },
        _removeSelectedItemsID: function () {
            var itemToRemove;
            itemToRemove = this._selectedItemsID.indexOf(this._itemID);
            this._selectedItemsID.splice(itemToRemove, 1);
            this._itemID = "";
        },


        _refreshScroller: function () {
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.popupList.find(".e-content, .e-vhandle").removeAttr("style");
            this.popupList.find(".e-vhandle div").removeAttr("style");
            this.popupList.children(".e-content").removeClass("e-content");
            var flag = this._isPopupShown();
            this.popupListWrapper.css("display", "block");
            this.popupList.css({ "display": "block" });  // For get the height of the popup
            this.scrollerObj.model.height = this._getPopupHeight();
            this.scrollerObj.refresh();
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.scrollerObj.option("scrollTop", 0);
            if (!flag) this.popupListWrapper.css("display", "none");
        },
        _enablePopupResize: function () {
            if (this.model.enablePopupResize) {
                this.popupListWrapper.addClass("e-resizable").append(BoldBIDashboard.buildTag("div.e-resizebar").append(BoldBIDashboard.buildTag("div.e-icon e-resize-handle")))
                .find(".e-resize-handle").addClass((this.model.enableRTL) ? "e-rtl-resize" : "");
                this._resizePopup();
            }
        },


        _resizePopup: function () {
            var proxy = this, started = false;
            this.popupListWrapper.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: proxy.model.minPopupHeight,
                    minWidth: proxy.model.minPopupWidth,
                    maxHeight: proxy.model.maxPopupHeight,
                    maxWidth: proxy.model.maxPopupWidth,
                    handle: "e-ddl-popup",
                    resizeStart: function (event) {
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("popupResizeStart", { event: event });
                        started = true;
                    },
                    resize: function (event) {
                        var reElement = bbdesigner$(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize(bbdesigner$(reElement).outerHeight(), bbdesigner$(reElement).outerWidth());
                        proxy._trigger("popupResize", { event: event });
                    },
                    resizeStop: function (event) {
                        if (started) {
                            proxy._refreshPopupOnResize(proxy.model.popupHeight, proxy.model.popupWidth);
                            started && proxy._trigger("popupResizeStop", { event: event });
                            started = false;
                        }
                    },
                    helper: function (event) {
                        var reElement = bbdesigner$(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize(bbdesigner$(reElement).outerHeight(), bbdesigner$(reElement).outerWidth());
                        return bbdesigner$(proxy.popupListWrapper);
                    }
                });
        },

        _refreshPopupOnResize: function (currHeight, currWidth) {
            if (currHeight) this.model.popupHeight = currHeight;
            if (currWidth) this.model.popupWidth = currWidth;
            this.popupListWrapper.css({ "height": this.model.popupHeight, "min-height": this.model.minPopupHeight, "max-height": this.model.maxPopupHeight });
            this._setListWidth();
            this._refreshScroller();
        },

        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width != "auto") this.popupListWrapper.css({ "width": width });
            else this.popupListWrapper.css({ "min-width": this.model.minPopupWidth });
            this.popupListWrapper.css({ "max-width": this.model.maxPopupWidth });
        },

        _setListHeight: function () {
            if (this.model.enablePopupResize && this.model.enableFilterSearch && this.model.minPopupHeight == 20)
                this.model.minPopupHeight += 45; /* adding default height of search box*/
            this.model.enablePopupResize ? this.popupListWrapper.css({ "min-height": this.model.minPopupHeight, "max-height": this.model.maxPopupHeight, "height": this.model.popupHeight }) :
            this.popupListWrapper.css({ "max-height": this.model.popupHeight, "min-height": this.model.minPopupHeight });
        },

        _getPopupHeight: function () {
            var wrap = this.popupListWrapper.height();
            if (this.model.enablePopupResize) wrap -= this.popupListWrapper.find(">div.e-resizebar").height();
            if (this.model.headerTemplate && this.headerTemplate) wrap -= this.headerTemplate.height();
            if (this.model.enableFilterSearch && this.inputSearch) {
                var ele = this.inputSearch.parent(".e-in-wrap");
                wrap -= (parseInt(ele.css("height")) + parseInt(ele.css('margin-top')) + parseInt(ele.css('margin-bottom')));
            }
            return wrap;
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && !this.model.minPopupWidth) this.popupListWrapper.css({ "min-width": this.wrapper.width() });
			else if(this.model.minPopupWidth)this.popupListWrapper.css({ "min-width": this.model.minPopupWidth });
            this._refreshScroller();
            this._setListPosition();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = bbdesigner$(document).scrollTop() + bbdesigner$(window).height() - (pos.top + bbdesigner$(elementObj).outerHeight()),
            winTopHeight = pos.top - bbdesigner$(document).scrollTop(),
            popupHeight = this.popupListWrapper.outerHeight(),
            popupWidth = this.popupListWrapper.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = bbdesigner$(document).scrollLeft() + bbdesigner$(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupListWrapper.outerWidth() - elementObj.outerWidth();
            this.popupListWrapper.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });

        },

        _getOffset: function (ele) {
            return BoldBIDashboard.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return BoldBIDashboard.util.getZindexPartial(this.element, this.popupList);
        },


        _showResult: function () {
            var proxy = this;
            var args = { text: this._visibleInput[0].value, value: this._selectedValue, refreshPopup: true };
            if (this._trigger("beforePopupShown", args)) return;
            if (args.refreshPopup) this._refreshPopup();
            bbdesigner$(this.popupListWrapper).slideDown(this.model.enableAnimation ? 200 : 1, "easeOutQuad", function () {
                bbdesigner$(document).on("mousedown", bbdesigner$.proxy(proxy._OnDocumentClick, proxy));
                if(!(BoldBIDashboard.isDevice()))
                proxy._on(BoldBIDashboard.getScrollableParents(proxy.wrapper), "scroll", proxy._hideResult);
            });
            this.element[0].setAttribute("aria-expanded", true);
            this._listSize =  this._getLi().length;
            this._trigger("popupShown", { text: this._visibleInput[0].value, value: this._selectedValue });
            this.scrollerObj.setModel({ scrollTop: this._calcScrollTop('active') });
        },

        _OnWindowResize: function (e) {
            if (!BoldBIDashboard.isNullOrUndefined(this.model) && this._isPopupShown()) {
                this._refreshPopup();
            }
        },
        _hideResult: function () {
            if (this.model && this._isPopupShown()) {
                var proxy = this;
                if (this._trigger("beforePopupHide", { text: this._visibleInput[0].value, value: this._selectedValue })) return;
                bbdesigner$(this.popupListWrapper).slideUp(this.model.enableAnimation ? 100 : 0, "easeOutQuad", function () {
                    if(!(BoldBIDashboard.isDevice()))
                    bbdesigner$(document).off("mousedown", bbdesigner$.proxy(proxy._OnDocumentClick, proxy));
                });
                if (this.element != null)
                    this.element.attr( "aria-expanded", false );
                this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                if (this._visibleInput != null)
                    this._trigger("popupHide", { text: this._visibleInput[0].value, value: this._selectedValue });
                this._targetBlur();
                setTimeout(function () {
                    proxy._resetSearch();                 
                }, 100);

            }
        },

        _isPopupShown: function () {
            return (this.popupListWrapper.css("display") == "block");
        },

        _enterTextBoxValue: function () {
            var args;
            this.removeID = false;
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this._chooseSelectionType();
            args = { text: this._currentText, selectedText: this._currentText, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus, isInteraction: !!this._uiInteract };
            if (!this._initValue && !this._onSearch && this._raiseEvents) this._trigger("select", args);
            if (this._activeItem >=0 || this._activeItem != null) {
                if (!this._isSingleSelect()) {
                    if (!this._checkContains(this._selectedValue)) {
                        if (this.model.showCheckbox) {
                            var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                            if (!this._isChecked(checkboxEle)) {
                                this._setClass(checkboxEle, "e-check-act");
								this._setAttr(checkboxEle,{"aria-checked":true});
                                bbdesigner$(checkboxEle).find(".e-check-input")[0].checked = true;
                                this.checkedStatus = true;
                            }
                        }
                        else {
                            this.activeItem.addClass('e-active');
                        }
                        if (this.model.multiSelectMode == "visualmode") {
                            this._ulBox.append(this._createBox(this._currentText));
                            if (this._isPopupShown())
                                this._setListPosition();
                        }

                        this._maintainHiddenValue();
                        this._addText(this._currentText);
                        this._createListHidden(this._hiddenValue);
                        if (bbdesigner$.inArray(this.selectedIndexValue, this._selectedIndices) == -1) {
                            this._selectedIndices.push(this.selectedIndexValue);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                    }
                } else {
                    this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
                    this.activeItem.addClass('e-active');                    
                    this._maintainHiddenValue();
                    this._visibleInput.val(this._currentText);
                    this.element.val(this._hiddenValue);
                    this.selectedItemIndex(this.selectedIndexValue);
                    this.selectedIndex(this.selectedIndexValue);
                    this._selectedIndices[0] = this.selectedIndexValue;
                }
                this._onValueChange();
                this._cascadeAction();
                if (this.selectelement) {
                    if (bbdesigner$("#" + this._id).children().length > this.selectedIndexValue) bbdesigner$("#" + this._id).children()[this.selectedIndexValue].selected = true;
                }
            }
            this.model.uncheckAll = false;
            this._setWatermark();
        },
        _onValueChange: function () {
            this.model.itemValue = this._selectedValue;
            this._updateText();
            if (this.value() != this.element.val()) {
                this._updateSelectedIndexByValue(this.element.val());
                this._updateValue(this.element.val());
                args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: this.selectedIndexValue, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus, isInteraction: !!this._uiInteract };

                if (!this._initValue && !this._onSearch && this._raiseEvents) {
                    this._trigger("change", args);
                    if (this.model.showCheckbox)
                        this._trigger('checkChange', { isChecked: this.checkedStatus, text: this._visibleInput.val(), itemId: this.selectedIndexValue, selectedText: this._currentText, selectedValue: this._selectedValue, value: this._selectedValue, data: this.model });
                }
                this._uiInteract = false;
            }
        },
        _decode: function (val) {
            return bbdesigner$("<span>").html(val).text();
        },
        _chooseSelectionType: function () {
            this.activeItem = this._getActiveItem();
            this.selectedIndexValue = this._activeItem;
            this._mapFields();
            if (this.model.dataSource != null && !this._isPlainType(this.model.dataSource)) {
                this._currentText = this._decode(this._getField(this.popupListItems[this._activeItem], this.mapFld._text));
                this._currentText = (this._currentText === "" || this._currentText == null) ? this.activeItem.text() : this._currentText;
                this._selectedValue = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
                this._itemID = this._getField(this.popupListItems[this._activeItem], this.mapFld._id);
            } else {
                this._currentText = this.activeItem.text();
                if (this._getAttributeValue(this.activeItem[0]))
                    this._selectedValue = this._getAttributeValue(this.activeItem[0]);
                else {
                    if (this._currentText != null) {
                        this.activeItem[0].setAttribute("value", this._currentText);
                        this._selectedValue = this._currentText;
                    }
                    else
                        this._selectedValue = "";
                }
                this._itemID = bbdesigner$(this.activeItem).attr("id");
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._itemID) && (this._itemID != "" || this._itemID == 0)) {
                if (!this.model.showCheckbox) {
                    this._selectedItemsID = [];
                    !this.removeID && this._selectedItemsID.push(this._itemID);
                }
                else
                    !this.removeID ? this._selectedItemsID.push(this._itemID) : this._removeSelectedItemsID();
            }
            this.selectedTextValue = this._currentText;
        },
        _maintainHiddenValue: function () {
            this._hiddenValue = this._getAttributeValue(this.activeItem[0]) || this._currentText;
        },
        _removeTextBoxValue: function () {
            this._uiInteract = true;
            this.removeID = true;
            this._chooseSelectionType();
            this._maintainHiddenValue();
            this._removeText(this._hiddenValue);
            this._removeListHidden(this._hiddenValue);
            this.activeItem.removeClass('e-active');
            if (!this._isSingleSelect()) {
                if (this.model.showCheckbox) {
                    var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                    if (this._isChecked(checkboxEle)) {
                        this._removeClass(checkboxEle, "e-check-act");
						this._setAttr(checkboxEle,{"aria-checked":false});
                        bbdesigner$(checkboxEle).find(".e-check-input")[0].checked = true;
                        this.checkedStatus = false;
                    }
                }
                else this.activeItem.removeClass('e-active');

                if (bbdesigner$.inArray(this.selectedIndexValue, this._selectedIndices) > -1) {
                    this._selectedIndices.splice(bbdesigner$.inArray(this.selectedIndexValue, this._selectedIndices), 1);
                    this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                }
                if (this.model.multiSelectMode == "visualmode") {
                    this._deleteBoxCheck(this._currentText);
                    if (this._isPopupShown())
                        this._setListPosition();
                }
            }
            var args = { text: this._currentText, selectedText: this._currentText, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue && !this._onSearch && this._raiseEvents)
                this._trigger("select", args);
            this._onValueChange();
            if ((this.model.cascadeTo != null) && this.model.showCheckbox) this._cascadeAction();
            this.model.checkAll = false;
            this._setWatermark();
        },


        _createBox: function (value) {
            if (!this._checkContains(value)) {

                if (this._ulBox.css('display') == "none" && this._visibleInput.css('display') != "none") this._swapUlandInput(true);
                var span = BoldBIDashboard.buildTag("span.e-icon e-close", "", {}, { "unselectable": "on" });
                var li = BoldBIDashboard.buildTag("li.e-options").text(value).append(span);
                this._on(span, "click", function (e) {
                    if (!this.model.enabled) return false;
                    this._deleteBox(bbdesigner$(e.target).parent());                   
                });
                return li;
            }
        },
        _deleteBoxCheck: function (val) {
            var items = this._ulBox.children('li');
            for (var i = 0; i < items.length; i++) {
                if (bbdesigner$(items[i]).text() == val) {
                    bbdesigner$(items[i]).remove();
                }
            }
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children("li:not(.e-search-box)");
            var item = items.last();
            if (item.hasClass("e-active")) this._deleteBox(item);
            else {
                this._removeActive();
                item.addClass("e-active");
            }
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {
                var cobj = bbdesigner$(items[i]);
                var deltext = cobj.text();
                var listItems = this._getLi();
                for (var j = 0; j < listItems.length; j++) {
                    if (bbdesigner$(listItems[j]).text() == deltext) {
                        this._activeItem = j;
                        this._removeTextBoxValue();
                        break;
                    }
                }
            }
            if (!this._isFocused && !this._isPopupShown())
                this._setWatermark();
        },

        _swapUlandInput: function (inputHide) {
            if (inputHide) {
                this._visibleInput.css('display', 'none');
                this._ulBox.css('display', 'block');
                this.wrapper.css({ 'height': 'auto' });
            }
            else {
                this._visibleInput.css('display', 'block');
                this._ulBox.css('display', 'none');
                this.wrapper.css({ 'height': this.model.height });
            }
        },
        _removeActive: function () {
            this._ulBox.children("li").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = BoldBIDashboard.buildTag("span", this._visibleInput.val());
            this.container.append(tempSpan);
            this._visibleInput.width(tempSpan.width() + 30);
            tempSpan.remove();
        },
        _destroyBoxModel: function () {
            this.container.prepend(this._visibleInput);
            this._visibleInput.css('display', 'block');
            this.wrapper.height(this.model.height);
            this._ulBox.remove();
            this._off(this.container, "click");
        },

        _removeListHover: function () {
            this.ultag.children("li").removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop('hover') });
            activeItem.focus();
        },
        _getLi: function () {
            return this.ultag.children("li:not('.e-category'):not('.e-nosuggestion')");
        },
        _calcScrollTop: function (val) {
            var ulH = this.ultag.outerHeight(), li = this.ultag.find("li"), liH = 0, index, top, i;
            if (this._selectedIndices && this._selectedIndices.length > 0 && val == "active") {
                var getLi = this._getLi();
                index = this._selectedIndices.length == getLi.length ? 0
                : this._selectedIndices[this._selectedIndices.length - 1];
                if (this.model.fields.groupBy != null || this.ultag.find("li.e-category").length > 0) {
                    index = bbdesigner$.inArray(getLi.eq(index)[0], li);
                }
            }
            else index = this.ultag.find("li.e-" + val).index();

            for (i = 0; i < index; i++) { liH += li.eq(i).outerHeight(true); }
            top = liH - ((this.popupList.outerHeight() - li.eq(index).outerHeight(true)) / 2);
            return top < 0 ? 0 : top;
        },
        _getActiveItem: function () {
            return this._getLi().eq(this._activeItem);
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },


        _roundedCorner: function (val) {
            if (val) {
                this.container.addClass("e-corner");
                this.popupListWrapper.addClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                this.popupListWrapper.removeClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').removeClass("e-corner");
            }

        },

        _enabled: function (boolean) {
            if (boolean) this.enable();
            else this.disable();
        },

        _destroyDropdown: function () {
            this.element.insertAfter(this.wrapper);
            this.element.width(this.element.width() + this.dropdownbutton.outerWidth());
            this.wrapper.remove();
            this.container.remove();

            this.container.off("mousedown", bbdesigner$.proxy(this._OnDropdownClick, this));
        },


        _RightToLeft: function () {
            if (this.model.enableRTL) {
                this.wrapper.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
            }

        },
        _dropbtnRTL: function () {
            if (this.model.enableRTL) {
                this.popupListWrapper.addClass("e-rtl");
                this.popupList.addClass("e-rtl");
            }
            else {
                this.popupListWrapper.removeClass("e-rtl");
                this.popupList.removeClass("e-rtl");
            }
        },
        _OnDropdownClick: function (e) {
            this._preventDefaultAction(e);
            if ((bbdesigner$(e.target).is("li") && bbdesigner$(e.target).parent().hasClass("e-boxes")) || (bbdesigner$(e.target).parents("ul").hasClass("e-boxes") && bbdesigner$(e.target).hasClass("e-icon e-close")))
                return false;
            if (this.model.readOnly) return false;
            if (this.ultag.find('li').length > 0 && ((e.which && e.which == 1 ) ||(e.button && e.button == 0) )) {
                this._OnPopupHideShow();
            }
        },
        _OnPopupHideShow: function () {
            if (this._isPopupShown()) {
                this._hideResult();
                this._targetBlur();
            }
            else {
                this._showResult();
                this.wrapper.focus();
                if (!BoldBIDashboard.isNullOrUndefined(this.inputSearch)) {
                    this.inputSearch.focus();
                }
            }
        },

        _showFullList: function () {
            var source = this.model.dataSource;
            if (BoldBIDashboard.DataManager && source instanceof BoldBIDashboard.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    var proxy = this;
                    proxy._initDataSource(source);
                }
                else this._getFilteredList(source.dataSource.json);
            }
            else this._getFilteredList(source);
        },
        _getFilteredList: function (list) {
            if (!list || !list.length || list.length < 1) {
                this._targetElementBinding();
                this._renderRemaining();
            }
            else {
                var listItem = BoldBIDashboard.DataManager(list).executeLocal(this._isPlainType(list) ? BoldBIDashboard.Query() : this._getQuery(true));
                this._totalCount = listItem.count;
                this._listItem(listItem.result ? listItem.result : listItem);
                this._renderPopupList();
            }
        },

        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                var citem = this.model.cascadeTo.split(","), i;
                for (i = 0; i < citem.length; i++) {
                    if (bbdesigner$('#' + citem[i]).hasClass("e-dropdownlist")) {
                        this._doCascadeAction(citem[i], this, this.checkedStatus);
                    }
                    else {
                        bbdesigner$('#' + citem[i]).on("ejDropDownListcreate", { Obj: this, status: this.checkedStatus }, function (e) {
                            if (!BoldBIDashboard.isNullOrUndefined(e.data.Obj.getValue()) && e.data.Obj.getValue() != "") {
                                e.data.Obj._doCascadeAction(this.id, e.data.Obj, e.data.status);
                            }
                        });
                    }
                }
            }
        },
        _doCascadeAction: function (id, parentObj, status) {
            parentObj._currentValue = parentObj._getField(parentObj.popupListItems[parentObj._activeItem], parentObj.mapFld._value);
            parentObj.selectDropObj = bbdesigner$('#' + id).BoldBIDashboardDropDownList('instance');
            var beforeCascade = JSON.stringify(parentObj.selectDropObj.model);
            var args = { cascadeModel: parentObj.selectDropObj.model, cascadeValue: parentObj._currentValue, requiresDefaultFilter: true };
            this._trigger("cascade", args);
            var afterCascade = JSON.stringify(args.cascadeModel);
            var modified = !(beforeCascade === afterCascade);
            if (BoldBIDashboard.isNullOrUndefined(parentObj[id])) {
                parentObj[id] = parentObj.selectDropObj.model.dataSource;
            }
            (BoldBIDashboard.DataManager && parentObj[id] instanceof BoldBIDashboard.DataManager) ?
                parentObj._cascadeOdataInit(parentObj[id], args.requiresDefaultFilter, status, modified, args.cascadeQuery) :
            parentObj._cascadeJsonInit(parentObj.selectDropObj, parentObj[id], parentObj.mapFld._value, args.requiresDefaultFilter, status, modified, args.cascadeQuery);
        },
        _cascadeOdataInit: function (_dSource, requiresFilter, status, modified, cascadeQuery) {
            var proxy = this, queryPromise, tempQuery;
            proxy._dQuery = this.selectDropObj._getQuery().clone();
            tempQuery = proxy._dQuery.clone();
            requiresFilter ? tempQuery.where(proxy.mapFld._value, "equal", proxy._currentValue) : tempQuery = cascadeQuery;
            proxy.selectDropObj._addLoadingClass();
            if (!proxy._trigger("actionBegin", { requestFrom: "cascade" })) {
                queryPromise = _dSource.executeQuery(tempQuery);
                queryPromise.fail(function (e) {
                    proxy._changedSource = null;
                    proxy.selectDropObj.setModel({ dataSource: proxy._changedSource, enabled: false });
                    proxy._trigger("actionFailure", { e: e, requestFrom: "cascade" });
                }).done(function (e) {
                    proxy._trigger("actionSuccess", { e: e, requestFrom: "cascade" });
                    proxy._cascadeDataBind(proxy.selectDropObj, e.result, status, modified);
                    proxy.selectDropObj._removeLoadingClass();
                }).always(function (e) {
                    proxy._trigger("actionComplete", { e: e, requestFrom: "cascade" });
                });
            }
        },

        _cascadeJsonInit: function (cascadeDropDownObj, _dSource, mapFld, requiresFilter, status, modified, cascadeQuery) {           
            var tempQuery = requiresFilter ? BoldBIDashboard.Query().where(mapFld, "==", this._currentValue) : cascadeQuery
            var changedSource = BoldBIDashboard.DataManager(_dSource).executeLocal(tempQuery);
            this._cascadeDataBind(cascadeDropDownObj, changedSource, status, modified);
        },

        _cascadeDataBind: function (cascadeDropDownObj, changedSource, status, modified) {
            if ((this.model.showCheckbox && status) || (this.model.multiSelectMode != "none" && this.activeItem.hasClass("e-active"))) {
                this._changedSource = (!BoldBIDashboard.isNullOrUndefined(this._changedSource)) ? this._changedSource.concat(changedSource) : changedSource;
            }
            else if (!this.model.showCheckbox && this.model.multiSelectMode == "none") this._changedSource = changedSource;
            else {
                for (var i = 0; i < changedSource.length; i++) {
                    if (this._isPlainType(changedSource) && this._isPlainType(this._changedSource)) this._changedSource.splice(this._changedSource.indexOf(changedSource[i]), 1);
                    else {
                        for (var j = 0; j < this._changedSource.length; j++) {
                            if (JSON.stringify(this._changedSource[j]) == JSON.stringify(changedSource[i]))
                                this._changedSource.splice(j, 1);
                        }

                    }
                }
                cascadeDropDownObj.setModel({ dataSource: null });
            }
            var cascadeModel = JSON.parse(JSON.stringify(cascadeDropDownObj.model)),enable;
            cascadeDropDownObj.setModel({ dataSource: this._changedSource, enabled: this._changedSource.length > 0 });
            if (cascadeDropDownObj.model.showCheckbox || cascadeDropDownObj.model.multiSelectMode != "none") {
                bbdesigner$("input:hidden[id^='#'][name=" + cascadeDropDownObj._id + "]").remove();
                cascadeDropDownObj._visibleInput.attr('name', cascadeDropDownObj._name);
            }
            if (modified) {
                var delProp = ["dataSource", "query", "fields", "itemsCount", "template"];
                for (var k = 0; k < delProp.length; k++) delete cascadeModel[delProp[k]];
                cascadeModel.enabled = true;
                cascadeDropDownObj.setModel(cascadeModel);
            }
            else if (!cascadeDropDownObj._setSelectedItem) {
                var selectItem = cascadeModel.selectedIndex != null ? cascadeModel.selectedIndex : cascadeModel.selectItemByIndex;
                cascadeDropDownObj.setModel({ selectedIndex: selectItem });
                cascadeDropDownObj._setSelectedItem = true;
            }
        },

        _OnMouseEnter: function (e) {
            if (!this.model.enabled || this.model.readOnly) return false;
            var targetEle;
            this.ultag.children("li").removeClass("e-hover");
            if (bbdesigner$(e.target).is("li:not('.e-category')")) { bbdesigner$(e.target).addClass("e-hover"); }
            if (bbdesigner$(e.target).hasClass("e-disable"))
                bbdesigner$(e.target).removeClass('e-hover');
            else if (e.target.tagName != "li") {
                targetEle = bbdesigner$(e.target).parents("li:not('.e-category')");
                bbdesigner$(targetEle).addClass("e-hover");
            }
            var activeItem;
            this.ultag.children("li:not('.e-category')").each(function (index) {
                if (bbdesigner$(this).hasClass("e-hover")) {
                    activeItem = index;
                    return false;
                }
            });
            this._activeItem = activeItem;
        },
        _OnMouseLeave: function (e) {
            if (!this.model.enabled || this.model.readOnly) return false;
            this.ultag.children("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            this._uiInteract = true;
            if (!this.model.enabled || this.model.readOnly) return false;
            if (this.model.enableFilterSearch && bbdesigner$(e.target).is("li") && bbdesigner$(e.target).hasClass('e-nosuggestion')) return false;
            else if ((bbdesigner$(e.target).is("li") && !bbdesigner$(e.target).hasClass('e-disable')) || (!bbdesigner$(e.target).is("li") && !bbdesigner$(e.target).closest("li").hasClass('e-disable'))) {
                if (this._isSingleSelect()) {
                    this._enterTextBoxValue();
                    this._hideResult();
                } else {
                    if (this.model.showCheckbox) {
                        var liEle = e.target.nodeName === "LI" ? e.target : bbdesigner$(e.target).parents("li.e-hover"),
                        checkboxEle = bbdesigner$(liEle).find('.e-checkwrap')[0];
                        this._onCheckChange({ target: checkboxEle });
                    }
                    else {
                        var ele = bbdesigner$(e.target).is("li") ? e.target : bbdesigner$(e.target).closest("li")[0];
                        this._activeItem = bbdesigner$.inArray(ele, this._getLi());
                        if (bbdesigner$(ele).hasClass("e-active")) this._removeTextBoxValue();
                        else this._enterTextBoxValue();
                    }
                   
                }
            }
        },        

        _OnDocumentClick: function (e) {
            if (this.model && (!this.model.enabled || this.model.readOnly)) return false;
            if (!bbdesigner$(e.target).is(this.popupList) && !bbdesigner$(e.target).parents(".e-ddl-popup").is(this.popupListWrapper) &&
                !bbdesigner$(e.target).is(this._visibleInput) && !bbdesigner$(e.target).parents(".e-ddl").is(this.wrapper)) {
                this._hideResult();
            }
            else if (bbdesigner$(e.target).is(this.inputSearch)) {
                this.inputSearch.focus();
            }
            else if (bbdesigner$(e.target).is(this.popupList) || bbdesigner$(e.target).parents(".e-ddl-popup").is(this.popupListWrapper))
                this._preventDefaultAction(e);
        },

        _OnKeyPress: function (e) {
            if (this.model.enableIncrementalSearch && e.keyCode != 13) {
                this._OnTextEnter((BoldBIDashboard.browserInfo().name == "mozilla") ? e.charCode : e.keyCode);
            }
            if (e.keyCode == 32) this._preventDefaultAction(e);
        },
        _OnTextEnter: function (from) {
            var proxy = this;
            this._incqueryString += String.fromCharCode(from);
            if (this._incqueryString.length > 0) {
                setTimeout(function () { proxy._incqueryString = ""; }, 1000);
            }
            var list = this._getLi(), i, strlen,
            caseSence = this.model.caseSensitiveSearch, mapper = this.model.fields,
            tempSuggestion = [],
            str, queryStr = this._incqueryString,
            querylength = this._incqueryString.length, searchflag = false;

            if (!caseSence) queryStr = queryStr.toLowerCase();

            for (i = 0; i < list.length; i++) {
                str = bbdesigner$(list[i]).text();
                str = caseSence ? str : str.toLowerCase();
                if (str.substr(0, querylength) == queryStr) {
                    if (this._isPopupShown()) {
                        this._removeListHover();
                        this._activeItem = i;
                        if (!this.model.showCheckbox && this.model.multiSelectMode == "none")
                            this._enterTextBoxValue();
                        this._addListHover();
                    } else {
                        this._activeItem = i;
                        if (!this.model.showCheckbox && this.model.multiSelectMode == "none")
                            this._enterTextBoxValue();
                    }
                    searchflag = true;
                } else if ((i == list.length - 1) && (searchflag == false)) {
                    if (this.model.itemValue == "") {
                        this._activeItem = null;
                        if (!this.model.showCheckbox && this.model.multiSelectMode == "none")
                            this._visibleInput.val("");
                    }
                    searchflag = true;
                }
                if (searchflag) break;
            }

        },

        _selectItem: function (current) {
            if (!this._isSingle) this._clearTextboxValue();
            this._activeItem = current;
            this._addListHover();
            this._enterTextBoxValue();
        },
        _focusItem: function (current) {
            this._removeListHover();
            this._activeItem = current;
            this._addListHover();
        },
        _selectFocusedItem: function (current) {
            this._focusItem(current);
            this._enterTextBoxValue();
        },
        
        _selectShiftDown: function (start, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            for (var n = start; n <= stop; n++) {
                if (bbdesigner$.inArray(n, this._disabledItems) < 0 && bbdesigner$.inArray(n, this.model.selectedIndices) < 0) {
                    this._selectFocusedItem(n);
                }
            }
        },
        _selectShiftUp: function (start, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            for (var n = stop; n >= start ; n--) {
                if (bbdesigner$.inArray(n, this._disabledItems) < 0 && bbdesigner$.inArray(n, this.model.selectedIndices) < 0) {
                    this._selectFocusedItem(n);
                }
            }
        },
        _selectShiftHome: function (current, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            if (current >= 0 && current <= this._listSize - 1) {
                if (current == 0) this._clearTextboxValue();
                else {
                    for (var n = current; n >= stop ; n--) {
                        if (bbdesigner$.inArray(n, this._disabledItems) < 0 && bbdesigner$.inArray(n, this.model.selectedIndices) < 0) {
                            this._activeItem = n;
                            this._enterTextBoxValue();
                        }
                    }
                }
                this._activeItem = current;
                if (current == 0) this._enterTextBoxValue();
                this.scrollerObj.setModel({ "scrollTop": 0 });
            }
        },
        _selectShiftEnd: function (current, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            if (current <= this._listSize - 1) {
                if (current == stop) this._clearTextboxValue();
                else 
                for (var n = current; n <= stop; n++) {
                    if (bbdesigner$.inArray(n, this._disabledItems) < 0 && bbdesigner$.inArray(n, this.model.selectedIndices) < 0) {
                        this._activeItem = n;
                        this._enterTextBoxValue();
                    }
                }
                this._activeItem = current;
                if (current == stop) this._enterTextBoxValue();
                this.scrollerObj.setModel({ "scrollTop": this.ultag.outerHeight() });
            }
        },


        _getLastFocusedLi: function () {
            return this._selectedIndices && this._selectedIndices.length > 0 ? this._selectedIndices[this._selectedIndices.length - 1] : null;
        },

        _getLastShiftFocusedLi: function (index, isDown) {
            var step = isDown ? index - 1 : index + 1;
            if (bbdesigner$.inArray(step, this._selectedIndices) < 0) {
                return index;
            }
            else {
                return this._getLastShiftFocusedLi(step, isDown);
            }
        },

        _shiftUp: function (current, step, isCtrl) {
            if (current == null || current < 0) {
                this._checkDisableStep(0, step, false, false, true);
            }
            else if (current > 0 && current <= this._listSize - 1) {

                var select = this._disableItemSelectUp(current - step)
                if (select != null) {
                    if (this._getLastFocusedLi() != null) {
                        if (this._selectedIndices.length > 1 && current - 1 == this._selectedIndices[this._selectedIndices.length - 2])
                            for (var s = 1; s <= step; s++) {
                                if (current - s == this._selectedIndices[this._selectedIndices.length - 2]) {
                                    this._activeItem = current + 1 -s;
                                    this._removeTextBoxValue();
                                    this._focusItem(current - s);
                                }
                                else break;
                            }
                        else {
                            var next = this._getLastShiftFocusedLi(this._getLastFocusedLi(), false);
                            this._selectShiftUp(select, next, isCtrl);
                        }
                    }
                    else {
                        this._moveUp(current, step, false);
                    }

                }

            }
        },

        _shiftDown: function (current, step, isCtrl) {
            if (current == null || current < 0) {
                this._checkDisableStep(-1, step, true, false, true);
            }
            else if (current < this._listSize - 1) {
                var select = this._disableItemSelectDown(current + step)
                if (select != null) {
                    if (this._getLastFocusedLi() != null) {
                        if (this._selectedIndices.length > 1 && current + 1 == this._selectedIndices[this._selectedIndices.length - 2]) {
                           for (var s = 1; s <= step; s++) {
                                if (current + s == this._selectedIndices[this._selectedIndices.length - 2]) {
                                    this._activeItem = current - 1 +s;
                                    this._removeTextBoxValue();
                                    this._focusItem(current + s);
                                }
                                else break;
                            }
                        }
                        else {
                            var start = this._getLastShiftFocusedLi(this._getLastFocusedLi(), true);
                            this._selectShiftDown(start, select, isCtrl);
                        }
                    }
                    else {
                        this._moveDown(current, step, false);
                    }
                }

            }
        },
        _moveUp: function (current, step, isMulti) {
            if (current == null || current <= 0) {
                this._checkDisableStep(0, step, false, isMulti);
            }
            else if (current > this._listSize - 1) {
                this._checkDisableStep(this._listSize - 1, step, false, isMulti);
            }
            else if (current > 0 && current <= this._listSize - 1) {
                this._checkDisableStep(current, step, false, isMulti);
            }
        },
        _moveDown: function (current, step, isMulti) {
            if (current == null || current < 0) {
                this._checkDisableStep(-1, step, true, isMulti);
            }
            else if (current == 0) {
                this._checkDisableStep(0, step, true, isMulti);
            }
            else if (current >= this._listSize - 1) {
                this._checkDisableStep(this._listSize - 1, step, true, isMulti);
            }
            else if (current < this._listSize - 1) {
                this._checkDisableStep(current, step, true, isMulti);
            }
        },
        _checkDisableStep: function (current, step, isdown, isMulti, shift) {
            var command = isdown ? "_disableItemSelectDown" : "_disableItemSelectUp";
            var index = isdown ? current + step : current - step;
            var select = this[command](index);
            if (select == null) {
                for (var i = step; i >= 0; i--) {
                    index = isdown ? current + i : current - i;
                    select = this[command](index);
                    if (select != null) break;
                }
            }
            if (select != null) {
                isMulti ? this._focusItem(select) : this._selectItem(select);
                if (shift && isMulti) this._enterTextBoxValue();
            }

        },
        _disableItemSelectDown: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if (bbdesigner$.inArray(current, this._disabledItems) < 0) {
                    return current;
                }
                else {
                    return this._disableItemSelectDown(current + 1);
                }
            }
            else return this._listSize - 1;
        },

        _disableItemSelectUp: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if (bbdesigner$.inArray(current, this._disabledItems) < 0) {
                    return current;
                }
                else {
                    if (current > 0) {
                        return this._disableItemSelectUp(current - 1);
                    }
                }
            }
        },

        _preventDefaultAction: function (e, stopBubble) {
            e.preventDefault ? e.preventDefault() : (e.returnValue = false);
            if (stopBubble) {
                e.stopPropagation ? e.stopPropagation() : (e.cancelBubble = true);
            }
        },

        _OnKeyDown: function (e) {
            this._uiInteract = true;
            if (this.model.enabled) {
                this._itemId = null;
                var _popupListItems = this._getLi(), liH, popupH, activeitem, flag;
                this._listSize = _popupListItems.length;                
                popupH = this.popupList.height();
                liH = this.ultag.children("li").outerHeight();
                activeitem = Math.round(popupH / liH) != 0 ? Math.round(popupH / liH) : 5;
                this._isSingle = this._isSingleSelect();
                if (this._isSingle) {
                    switch (e.keyCode) {
                        case 38: /* up arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._hideResult();
                                break;
                            }
                        case 33: /* page up */
                            var step = e.keyCode == 33 ? activeitem : 1;
                            this._moveUp(this._activeItem, step);
                            this._preventDefaultAction(e);
                            break;
                        case 40: /* down arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._showResult();
                                break;
                            }
                        case 34: /* page down */
                            var step = e.keyCode == 34 ? activeitem : 1;
                            this._moveDown(this._activeItem, step);
                            this._preventDefaultAction(e);
                            break;
                        case 37 /* left arrow*/:
                            if (this.model.enableRTL) this._moveDown(this._activeItem, 1);
                            else this._moveUp(this._activeItem, 1);
                            this._preventDefaultAction(e);
                            break;
                        case 39 /* right arrow */:
                            if (this.model.enableRTL) this._moveUp(this._activeItem, 1);
                            else this._moveDown(this._activeItem, 1);
                            this._preventDefaultAction(e);
                            break;
                        case 9 /* Tab */:
                        case 27 /*ESC*/:
                            if (this._isPopupShown()) this._hideResult();
                            break;
                        case 35 /*End*/:
                            this._moveDown(this._listSize - 1, 0);
                            this._preventDefaultAction(e);
                            break;
                        case 36 /*Home*/:
                            var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
                            this._moveUp(step, step);
                            this._preventDefaultAction(e);
                            break;
                    }
                }
                else {
                    switch (e.keyCode) {
                        
                        case 38: /* up arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._hideResult();
                            }
                            else if (e.shiftKey) {
                                this._shiftUp(this._activeItem, 1, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, 1, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 33: /* page up */
                            if (e.shiftKey) {
                                this._shiftUp(this._activeItem, activeitem, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, activeitem, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 40: /* down arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._showResult();
                            }
                            else if (e.shiftKey) {
                                this._shiftDown(this._activeItem, 1, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, 1, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;

                        case 34: /* page down */

                            if (e.shiftKey) {
                                this._shiftDown(this._activeItem, activeitem, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, activeitem, e.ctrlKey);
                            this._preventDefaultAction(e);
                            break;
                        case 37 /* left arrow*/:
                            if (this.model.enableRTL) this._moveDown(this._activeItem, 1, false);
                            else this._moveUp(this._activeItem, 1, false);
                            this._preventDefaultAction(e);
                            break;
                        case 39 /* right arrow */:
                            if (this.model.enableRTL) this._moveUp(this._activeItem, 1, false);
                            else this._moveDown(this._activeItem, 1, false);
                            this._preventDefaultAction(e);
                            break;
                        case 9 /* Tab */:
                        case 27 /*ESC*/:
                            if (this._isPopupShown()) this._hideResult();
                            break;
                        case 35 /*End*/:
                            if (e.shiftKey) {
                                this._selectShiftEnd(this._activeItem, this._listSize - 1, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, this._listSize, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 36 /*Home*/:
                            var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
                            if (e.shiftKey) {
                                this._selectShiftHome(this._activeItem, 0, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, step, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                    }
                }
            }
        },

        _OnKeyUp: function (e) {
            if (this.model.enabled) {
                this._preventDefaultAction(e);
                var target = e.target;
                if (this._activeItem == null) {
                    this._activeItem = this._getLi().index(this.popupList.find("ol,ul").children("li.e-hover"));
                }
                if (this._trim(this._visibleInput.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                    this._hideResult();
                    return false;
                }

                switch (e.keyCode) {
                    case 38: break;
                    case 40: break;
                    case 37: break;
                    case 39: break;

                    case 20: break;
                    case 16: break;
                    case 17: break;
                    case 18: break;
                    case 35: break;
                    case 36: break;
                    case 144: break;
                    case 27: break;
                    case 9: break;

                    case 13 /*Enter*/:
                        if (!this._isSingle && this._isPopupShown() && (e.ctrlKey || e.shiftKey) && this._activeItem >= 0){
                            this._selectAndUnselect();
                        }
						else if (this._isPopupShown()) this._hideResult();
                        this._preventDefaultAction(e);
                        break;

                    case 32 /*spacebar*/:
                        if (this._isPopupShown() && this._isSingle) this._hideResult();
                        if (!this._isSingle && this._isPopupShown() && this._activeItem >= 0) {
                            this._selectAndUnselect();
                        }
                        this._preventDefaultAction(e);
                        break;
                    case 8 /*backspace*/:

                        if (this._isPopupShown()) this._hideResult();
                        this._preventDefaultAction(e);
                        break;
                    case 46 /*Del*/:
                        if (this.model.multiSelectMode == "visualmode" || this.model.showCheckbox) {
                            this._deleteBox(this._ulBox.children("li.e-active"));
                            break;
                        }
                }
            }
        },

        _isSingleSelect: function () {
            return !this.model.showCheckbox && this.model.multiSelectMode == "none";
        },

        _selectAndUnselect: function () {
            if (this.model.showCheckbox) {
                this._isChecked(this._getActiveItem().find(".e-checkwrap")[0]) ?
                        this._removeTextBoxValue() : this._enterTextBoxValue();
            }
            else if (this.model.MultiSelectMode != "none") {
                this._getActiveItem().hasClass("e-active") ? this._removeTextBoxValue() : this._enterTextBoxValue();
            }
        },

        _targetFocus: function () {
            if (this.model.enabled && !this._isFocused) {
                if (!this._isWatermark)
                    this._hiddenSpan.css("display", "none");
                this.wrapper.addClass("e-focus");
                this._isFocused = true;
                this._trigger("focusIn");
            }
        },

        _targetBlur: function () {
            if (this.model.enabled && !this._isPopupShown()) {
                this._isFocused = false;
                this.wrapper.removeClass("e-focus");
                this._setWatermark();
                this._trigger("focusOut");
            }
        },


        _wireEvents: function () {
            this._on(this.wrapper, "focus", this._targetFocus);
            this._on(this.wrapper, "blur", this._targetBlur);
            this._on(this.wrapper, "keydown", this._OnKeyDown);
            this._on(this.popupList, "keydown", this._OnKeyDown);
            this._on(this.popupList, "keyup", this._OnKeyUp);
            this._on(this.wrapper, "keyup", this._OnKeyUp);
            this._on(this.popupList, "keypress", this._OnKeyPress);
            this._on(this.wrapper, "keypress", this._OnKeyPress);
        },

        _unwireEvents: function () {
            this._off(this.wrapper, "focus", this._targetFocus);
            this._off(this.wrapper, "blur", this._targetBlur);
            this._off(this.wrapper, "keydown", this._OnKeyDown);
            this._off(this.popupList, "keydown", this._OnKeyDown);
            this._off(this.popupList, "keyup", this._OnKeyUp);
            this._off(this.wrapper, "keyup", this._OnKeyUp);
            this._off(this.popupList, "keypress", this._OnKeyPress);
            this._off(this.wrapper, "keypress", this._OnKeyPress);
        },

        _multiItemSelection: function (listItems, isAddItem) {
            if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            for (var i = 0; i < listItems.length; i++) {
                var index = isAddItem ? this._rawList.length - (listItems.length - i) : i;
                if (this._hasClass(listItems[i], "chkselect")) {
                    this._activeItem = index;
                    this._enterTextBoxValue();
                    this._removeClass(listItems[i], "chkselect");
                }
            }
            this._setWatermark();
        },
        _appendCheckbox: function (listItems, isAddItem) {
            if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            for (var i = 0; i < listItems.length; i++) {
                var index = isAddItem ? this._rawList.length - (listItems.length - i) : i,
                bbdesigner$checkbox = document.createElement("input"),
                bbdesigner$spanCheck = document.createElement("span");
                this._setAttr(bbdesigner$checkbox, { type: "checkbox", name: "list" + index, "data-role": "none", id: this._id + "_" + "check" + index })
                    ._setClass(bbdesigner$checkbox, "e-check-input")
                    ._setAttr(bbdesigner$spanCheck, { name: "list" + index + "_wrap", "data-role": "none", id: this._id + "_" + "check" + index + "wrap", unselectable: "on", "aria-checked": false})
                    ._setClass(bbdesigner$spanCheck, "e-checkwrap e-icon " + this.model.cssClass);
                bbdesigner$spanCheck.appendChild(bbdesigner$checkbox);
                listItems[i].insertBefore(bbdesigner$spanCheck, listItems[i].childNodes[0]);
                if (this._hasClass(listItems[i], "chkselect")) {
                    this._activeItem = index;
                    this._enterTextBoxValue();
                    this._removeClass(listItems[i], "chkselect");
                }
            }
            this._setWatermark();
        },

        _onCheckChange: function (e) {
            var curEle = e.target.nodeName === "INPUT" ? e.target.parentElement : e.target;
            this._activeItem = bbdesigner$.inArray(bbdesigner$(curEle).parents("li")[0], this._getLi());
            if (!this._hasClass(curEle, "e-check-act")) {
                this._enterTextBoxValue();
            }
            else {
                this._removeTextBoxValue();
            }
        },
        _isChecked: function (checkEle) {
            return (this._hasClass(checkEle, "e-check-act") && bbdesigner$(checkEle).children(".e-check-input")[0].checked == true);
        },
        _removeCheck: function () {
            this._getLi().find(".e-checkwrap").remove();
        },
        _resetCheck: function () {
            var getLi = this._getLi(), checkEle;
            getLi.find(".e-check-act").removeClass("e-check-act").attr("aria-checked",false);
            checkEle = getLi.find(".e-check-input:checked");
            for (var e = 0; e < checkEle.length; e++) {
                checkEle[e].checked = false;
            }
        }

    });

    BoldBIDashboard.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
    BoldBIDashboard.VirtualScrollMode = {      
        /** Make virtual scrollbar in normal mode */
        Normal: "normal",
        /** Make virtual scrollbar in continuous mode*/
        Continuous: "continuous"
    };
    
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the Html UL elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardListBox", "BoldBIDashboard.ListBox", {

        element: null,
        ignoreOnPersist: ["dataSource", "query", "itemRequestCount", "fields", "create", "change", "select", "unselect", "itemDragStart", "itemDrag", "itemDragStop", "itemDrop", "checkChange", "destroy", "actionComplete", "actionFailure", "actionSuccess", "actionBegin", "itemDropped", "selected"],
        model: null,
        validTags: ["ul"],
        _setFirst: false,
        _rootCSS: "e-listbox",
        defaults: {
            itemsCount: null,
            totalItemsCount: null,
            dataSource: null,
            query: BoldBIDashboard.Query(),
            itemRequestCount: 5,
            fields: {
                id: null,
                text: null,
                imageUrl: null,
                imageAttributes: null,
                spriteCssClass: null,
                htmlAttributes: null,
                tooltipText: null,
                selectBy: null,
                checkBy: null,
                groupBy: null,
                tableName: null,

                //deprecated field properties
                selected: null,
                category: null,
                toolTipText: null
            },
            height: "auto",
            width: "200",
            template: null,
            text: "",
            selectedIndex: null,
            checkedIndices: [],
            selectedIndices: [],
            cascadeTo: null,
            value: "",
            cssClass: "",
            targetID: null,
            htmlAttributes: {},
            showRoundedCorner: false,
            enableRTL: false,
            enabled: true,
            showCheckbox: false,
            allowVirtualScrolling: false,
            virtualScrollMode: "normal",
            enablePersistence: false,
            allowMultiSelection: false,
            allowDrag: false,
            allowDrop: false,
            enableIncrementalSearch: false,
            enableWordWrap:true,
            caseSensitiveSearch: false,
            loadDataOnInit: true,
            create: null,
            change: null,
            select: null,
            unselect: null,
            itemDragStart: null,
            itemDrag: null,
            itemDragStop: null,
            itemDrop: null,
            checkChange: null,
            destroy: null,
            actionComplete: null,
            actionSuccess: null,
            actionBeforeSuccess:null,
            focusIn:null,
            focusOut:null,
            actionFailure: null,
            actionBegin: null,
            //Deprecated Members
            enableVirtualScrolling: false,
            checkAll: false,
            uncheckAll: false,
            enableLoadOnDemand: false,
            itemRequest: null,
            allowDragAndDrop: undefined,
            selectedItemIndex: null,
            enableItemsByIndex: null,
            checkItemsByIndex: null,
            disableItemsByIndex: null,
            uncheckItemsByIndex: null,
            itemDropped: null,
            selected: null,
            selectIndexChanged: null,
            selectedItems: [],
            checkedItems: [],
            checkedItemlist: [],
            selectedItemlist: [],
        },
        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            itemRequestCount: "number",
            allowDrag: "boolean",
            allowDrop: "boolean",
            enableWordWrap:"boolean",
            enableIncrementalSearch: "boolean",
            caseSensitiveSearch: "boolean",
            height: "string",
            width: "string",
            template: "string",
            targetID: "string",
            selectedIndex: "number",
            cascadeTo: "string",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            enablePersistence: "boolean",
            enabled: "boolean",
            allowMultiSelection: "boolean",
            dataSource: "data",
            query: "data",
            checkedIndices: "data",
            selectedIndices: "data",
            htmlAttributes: "data",
            loadDataOnInit: "boolean",
            showCheckbox: "boolean"
        },
        observables: ["value"],
        value: BoldBIDashboard.util.valueFunction("value"),
        enable: function () {
            if (this.listContainer.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = this.model.enabled = true;
                this.element.removeAttr("disabled");
                this.listContainer.removeClass('e-disable');
                if (this.model.allowMultiSelection) this.listContainer.removeClass("e-disable");
                var scroller = this.listContainer.find(".e-vscrollbar,.e-hscrollbar");
                if (this.model.showCheckbox) this.element.find(".listcheckbox").BoldBIDashboardCheckBox("enable");
                if (scroller.length > 0)
                    this.scrollerObj.enable();
            }
        },
        disable: function () {
            if (!this.listContainer.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = this.model.enabled = false;
                this.element.attr("disabled", "disabled");
                this.listContainer.addClass('e-disable');
                if (this.model.allowMultiSelection) this.listContainer.addClass("e-disable");
                var scroller = this.listContainer.find(".e-vscrollbar,.e-hscrollbar");
                if (this.model.showCheckbox) this.element.find(".listcheckbox").BoldBIDashboardCheckBox("disable");
                if (scroller.length > 0)
                    this.scrollerObj.disable();
            }
        },
        selectItemByIndex: function (index) {            
            index = parseInt(index);            
            if (index != null && !this.model.showCheckbox) {
                this._activeItem = index;                
                if (this._activeItem == this._listSize - 1) {
                    this._activeItem = this._listSize - 1;
                }
                var activeitem = bbdesigner$(this.element.children("li")[this._activeItem]);
                if (!activeitem.hasClass("e-select") && !activeitem.hasClass("e-disable")) {
                    this.element.children("li").removeClass("e-select");
                    this._selectedItems = [];
                    this.model.selectedIndices = [];
                    activeitem.addClass("e-select");
                    this._selectedItems.push(activeitem);
                    this.model.selectedIndices.push(index);
                    var selectData = this._getItemObject(activeitem, null);
                    selectData["isInteraction"] = false;
                    if (this.model.select)
                        this._trigger('select', selectData);
                }
            }
            if (this.model.cascadeTo) {
                this._activeItem = index;
                this._cascadeAction();
            }
            this._setSelectionValues();
        },
        checkItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.checkItemsByIndices(index.toString());
        },
        uncheckItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.uncheckItemsByIndices(index.toString());
        },
        checkItemsByIndices: function (index) {
            if ((BoldBIDashboard.isNullOrUndefined(index))) return false;
            var checkitems = index.toString().split(',');
            if (checkitems.length > 0) {
                for (var i = 0; i < checkitems.length; i++) {
                    if (checkitems[i] != null) {
                        this._activeItem = parseInt(checkitems[i]);
                        if (this._activeItem < 0) this._activeItem = 0;
                        var activeitem = bbdesigner$(this.element.children("li")[this._activeItem]);
                        if (this.model.showCheckbox) {
                            if (!(bbdesigner$(activeitem).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked')) && (!(bbdesigner$(activeitem).hasClass('e-disable')))) {
                                bbdesigner$(activeitem).find('.listcheckbox').BoldBIDashboardCheckBox('option', 'checked', true);
                                this.checkedStatus = true;
                                if (!(bbdesigner$.inArray(this._activeItem, this._checkedItems) > -1)) this._checkedItems.push(this._activeItem);
                                if (!(bbdesigner$.inArray(activeitem[0], this.model.checkedIndices) > -1)) this.model.checkedIndices.push(activeitem[0]);
                                var checkData = this._getItemObject(activeitem, null);
                                checkData["isInteraction"] = false;
                                 if (this.model.checkChange)
                                    this._trigger('checkChange', checkData);
                            }
                        }
                    }
                }
            }
            this._setSelectionValues();
        },
        uncheckItemsByIndices: function (value) {
            if ((BoldBIDashboard.isNullOrUndefined(value))) return false;
            var checkitems = value.toString().split(',');
            if (checkitems.length > 0) {
                for (var i = 0; i < checkitems.length; i++) {
                    if (checkitems[i] != null) {
                        var index = parseInt(checkitems[i]);
                        var unselectitem = bbdesigner$(this.element.children("li")[parseInt(index)]);
                        if (this.model.showCheckbox) {
                            if ((bbdesigner$(unselectitem).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked')) && (!(bbdesigner$(unselectitem).hasClass('e-disable')))) {
                                bbdesigner$(unselectitem).find('.listcheckbox').BoldBIDashboardCheckBox('option', 'checked', false);
                                this.checkedStatus = false;
                                var itemIndex = this.model.checkedIndices.indexOf(unselectitem[0]);
                                if (bbdesigner$.inArray(index, this._checkedItems) > -1) this._checkedItems.splice(itemIndex, 1);
                                if (bbdesigner$.inArray(unselectitem[0], this.model.checkedIndices) > -1) this.model.checkedIndices.splice(itemIndex, 1);
                                var unselectData = this._getItemObject(unselectitem, null);
                                unselectData["isInteraction"] = false;
                                if (this.model.checkChange)
                                    this._trigger('checkChange', unselectData);
                            }
                        }
                    }
                }
            }
            this._setSelectionValues();
        },
        selectAll: function () {
            if (!this.model.showCheckbox && this.model.allowMultiSelection) {
                var activeItem = this.element.children("li");
                for (var i = 0; i < activeItem.length; i++) {
                    if (!bbdesigner$(activeItem[i]).hasClass("e-select") && !bbdesigner$(activeItem[i]).hasClass("e-disable")) {
                        bbdesigner$(activeItem[i]).addClass("e-select");
                        this._selectedItems.push(bbdesigner$(activeItem[i]));
                        this.model.selectedIndices.push(i);
                        var selectData = this._getItemObject(activeItem, null);
                        selectData["isInteraction"] = false;
                        if (this.model.select)
                            this._trigger('select', selectData);
                    }
                }
            }
            this._setSelectionValues();
        },
        //Deprecated Method
        unSelectAll: function () { this.unselectAll(); },
        unselectAll: function () {
            if (!this.model.showCheckbox)
                this._removeListHover();
            this._setSelectionValues();
            this._enableToolTips();
            return this;
        },
        //deprecated function
        selectItemsByIndex: function (value) {
            this.selectItemsByIndices(value);
        },
        selectItemsByIndices: function (value) {
            var selectitems = value.toString().split(',');
            if (!this.model.showCheckbox && this.model.allowMultiSelection) {
                for (var i = 0; i < selectitems.length; i++) {
                    if (selectitems[i] != null) {
                        var index = parseInt(selectitems[i]);
                        this._activeItem = index;
                        if (this._activeItem < 0) {
                            this._activeItem = 0;
                        } else if (this._activeItem == this._listSize - 1) {
                            this._activeItem = this._listSize - 1;
                        }
                        var activeitem = bbdesigner$(this.element.children("li")[this._activeItem]);
                        if (!activeitem.hasClass("e-select") && !activeitem.hasClass("e-disable")) {
                            activeitem.addClass("e-select");
                            this._selectedItems.push(activeitem);
                            this.model.selectedIndices.push(index);
                            var selectData = this._getItemObject(activeitem, null);
                            selectData["isInteraction"] = false;
                            if (this.model.select)
                                this._trigger('select', selectData);
                        }
                    }
                }
            }
            this._setSelectionValues();
        },
        //deprecated property
        unselectItemsByIndex: function (value) {
            this.unselectItemsByIndices(value);
        },
        unselectItemsByIndices: function (value) {
            if (this.model.showCheckbox) return false;
            var selectitems = value.toString().split(',');
            for (var i = 0; i < selectitems.length; i++) {
                if (selectitems[i] != null) {
                    var index = parseInt(selectitems[i]);
                    var activeitem = bbdesigner$(this.element.children("li")[index]);
                    this._activeItem = index;
                    activeitem.removeClass('e-active e-select');
                    var itemIndex = this._selectedItems.indexOf(activeitem[0]);
                    this._selectedItems.splice(this.model.selectedIndices.indexOf(itemIndex), 1);
                    this.model.selectedIndices.splice(this.model.selectedIndices.indexOf(itemIndex), 1);
                    var unselectData = this._getItemObject(activeitem, null);
                    unselectData["isInteraction"] = false;
                    if (this.model.unselect)
                        this._trigger('unselect', unselectData);
                }
            }
            this._setSelectionValues();
        },
        unselectItemByIndex: function (index) {
            if (this.model.showCheckbox) return false;
            index = parseInt(index);
            var unselectitem = bbdesigner$(this.element.children("li")[index]);
            if (unselectitem.hasClass('e-select')) {
                unselectitem.removeClass('e-active e-select');
                var itemIndex = this._selectedItems.indexOf(unselectitem[0]);
                this._selectedItems.splice(this.model.selectedIndices.indexOf(itemIndex), 1);
                this.model.selectedIndices.splice(this.model.selectedIndices.indexOf(itemIndex), 1);
                var unselectData = this._getItemObject(unselectitem, null);
                unselectData["isInteraction"] = false;
                if (this.model.unselect)
                    this._trigger('unselect', unselectData);
            }
            this._setSelectionValues();
        },
        selectItemByText: function (text) {
            this[(this.model.allowMultiSelection ? "selectItemsByIndices" : "selectItemByIndex")](this.getIndexByText(text));
        },
        selectItemByValue: function (value) {
            this[(this.model.allowMultiSelection ? "selectItemsByIndices" : "selectItemByIndex")](this.getIndexByValue(value));
        },
        unselectItemByText: function (text) {
            this[(this.model.allowMultiSelection ? "unselectItemsByIndices" : "unselectItemByIndex")](this.getIndexByText(text));
        },
        unselectItemByValue: function (value) {
            this[(this.model.allowMultiSelection ? "unselectItemsByIndices" : "unselectItemByIndex")](this.getIndexByValue(value));
        },
        getSelectedItems: function () {
            var items = [], proxy = this;
            bbdesigner$(proxy.model.selectedIndices).each(function (index, elementIndex) {
                items.push(proxy.getItemByIndex(elementIndex));
            });
            return items;
        },
        getCheckedItems: function () {
            var items = [], proxy = this;
            bbdesigner$(proxy.model.checkedIndices).each(function (index, elementIndex) {
                items.push(proxy.getItemByIndex(elementIndex));
            });
            return items;
        },
        removeItem: function () {
            return this.removeSelectedItems();
        },
        removeItemByText: function (text) {
            return this.removeItemByIndex(this.getItemByText(text).index);
        },
        hideSelectedItems: function () {
            var items = this.getSelectedItems();
            this._hideOrShowItemsByIndex(items, "hide");
        },
        hideCheckedItems: function () {
            var items = this.getCheckedItems();
            this._hideOrShowItemsByIndex(items, "hide");
        },
        _hideOrShowItemsByIndex: function (items, hideOrShow) {
            if (bbdesigner$.type(items) == "number") {
                if (hideOrShow == "hide")
                    bbdesigner$(this.element.find("li")[items]).hide();
                else
                    bbdesigner$(this.element.find("li")[items]).show();
            }
            else {
                for (var litem = 0; litem < items.length; litem++) {
                    if (hideOrShow == "hide")
                        items[litem].item ? items[litem].item.hide() : bbdesigner$(this.element.find("li")[items[litem]]).hide();
                    else
                        items[litem].item ? items[litem].item.show() : bbdesigner$(this.element.find("li")[items[litem]]).show();
                }
            }
            this._refreshScroller();
        },
        showItemsByIndices: function (items) {
            this._hideOrShowItemsByIndex(items, "show");
        },
        hideItemsByIndices: function (items) {
            this._hideOrShowItemsByIndex(items, "hide");
        },
        _hideOrShowItemsByValue: function (values, hideOrShow) {
            if (bbdesigner$.type(values) == "array") {
                this.element.find("li").each(function () {
                    for (var length = 0; length <= values.length; length++) {
                        if (bbdesigner$(this).text() == values[length])
                            (hideOrShow == "hide") ? bbdesigner$(this).hide() : bbdesigner$(this).show();
                    }
                });
            }
            else {
                this.element.find("li").each(function () {
                    if (bbdesigner$(this).text() == values)
                        (hideOrShow == "hide") ? bbdesigner$(this).hide() : bbdesigner$(this).show();
                });
            }
            this._refreshScroller();
        },
        showItemsByValues: function (value) {
            this._hideOrShowItemsByValue(value, "show");
        },
        hideItemsByValues: function (value) {
            this._hideOrShowItemsByValue(value, "hide");
        },
        showItemByValue: function (value) {
            this._hideOrShowItemsByValue(value, "show");
        },
        hideItemByValue: function (value) {
            this._hideOrShowItemsByValue(value, "hide");
        },
        showItemByIndex: function (item) {
            this._hideOrShowItemsByIndex(item, "show");
        },
        hideItemByIndex: function (item) {
            this._hideOrShowItemsByIndex(item, "hide");
        },
        hide: function () {
            this.listContainer.hide();
        },
        show: function () {
            this.listContainer.show()
        },
        hideAllItems: function () {
            this.element.find("li:visible").hide()
            this._refreshScroller();
        },
        showAllItems: function () {
            this.element.find("li:hidden").show()
            this._refreshScroller();
        },
        _stateMaintained: function (index) {
            var lenth, len, value, j;
            this.model.disableItemsByIndex = [];
            this.model.selectedIndices = [];
            this.model.checkedIndices = [];
            if (this.model.selectedIndex >= index && this.model.selectedIndex != null) {
                if (this.model.selectedIndex == index || bbdesigner$(this.element.children()[index - 1]).hasClass('e-disable'))
                    this.model.selectedIndex = null;
                else if (this.model.selectedIndex != index)
                    this.model.selectedIndex -= 1;
            }
            len = bbdesigner$(index).length;
            if (len > 1) {
                for (i = len; i >= 0; i--)
                    bbdesigner$(this.element.children()[index[i]]).remove();
                lenth = this.element.children().length;
                for (j = 0; j < lenth; j++)
                    if (bbdesigner$(this.element.children()[j]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(j);
            }
            else {
                value = index - 1;
                for (value; value >= 0; value--) {
                    if (bbdesigner$(this.element.children()[value]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(value);
                    if (bbdesigner$(this.element.children()[value]).hasClass('e-select'))
                        this.model.selectedIndices.push(value);
                    if (bbdesigner$(this.element.children()[value]).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked'))
                        this.model.checkedIndices.push(value);
                }
                index = parseInt(index) + 1;
                for (index; index < this._listSize; index++) {
                    if (bbdesigner$(this.element.children()[index]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(index - 1);
                    if (bbdesigner$(this.element.children()[index]).hasClass('e-select'))
                        this.model.selectedIndices.push(index - 1);
                    if (bbdesigner$(this.element.children()[index]).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked'))
                        this.model.checkedIndices.push(index - 1);
                }
            }
        },
        removeAll: function () {
            if (BoldBIDashboard.isNullOrUndefined(this.model.dataSource)) {
                var text = [];
                bbdesigner$(this.element.find("li")).each(function (i, e) {
                    text.push(bbdesigner$(this).text());
                    e.remove();
                });
                this._refreshItems();
                return text;
            }
            else if (!(this.model.dataSource instanceof BoldBIDashboard.DataManager)) {
                var elements = [], count = bbdesigner$(this.element.find("li")).length;
                for (var i = 0; i < count; i++) {
                    elements.push(this._getRemovedItems([parseInt(0)]));
                }
                return elements;
            }
        },
        removeItemByIndex: function (index) {
            if (BoldBIDashboard.isNullOrUndefined(this.model.dataSource)) {
                var text = bbdesigner$(this.element.find("li")[index]).remove().text();
                this._refreshItems();
                return text;
            }
            else if (!(this.model.dataSource instanceof BoldBIDashboard.DataManager))
                return this._getRemovedItems([parseInt(index)]);
        },
        removeSelectedItems: function () {
            if (this.model.showCheckbox) return false;
            if (BoldBIDashboard.isNullOrUndefined(this.model.dataSource)) {
                var text = this.value();
                bbdesigner$(this.getSelectedItems()).each(function (i, e) {
                    e.item.remove()
                });
                this._refreshItems();
                return text;
            }
            else if (!(this.model.dataSource instanceof BoldBIDashboard.DataManager))
                return this._getRemovedItems(this.model.selectedIndices);
        },
        _getRemovedItems: function (index) {
            var removedItems = [];
            this._stateMaintained(index);
            this.model.dataSource = this.model.dataSource.filter(function (e, i) {
                if (index.indexOf(i) != -1)
                    removedItems.push(e);
                else
                    return true;
            });
            this.refresh(true);
            return removedItems;
        },
        getIndexByValue: function (value) {
            var index;
            this.element.find("li").each(function () {
                if (bbdesigner$(this).attr("value") == value) {
                    index = bbdesigner$(this).index();
                    return false;
                }
            });
            return index;
        },
        getIndexByText: function (text) {
            var index;
            this.element.find("li").each(function () {
                if (bbdesigner$(this).text() == text) {
                    index = bbdesigner$(this).index();
                    return false;
                }
            });
            return index;
        },
        getTextByIndex: function (index) {
            return bbdesigner$(this.element.find("li")[index]).text();
        },
        getItemByText: function (text) {
            var proxy = this, obj;
            this.element.find("li").each(function () {
                if (bbdesigner$(this).text() == text) {
                    obj = proxy._getItemObject(bbdesigner$(this));
                    return false;
                }
            });
            return obj;
        },
        getItemByIndex: function (index) {
            return this._getItemObject(bbdesigner$(this.element.find("li")[index]));
        },
        getListData: function () {
            if (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager)
                return this.listitems;
            else if (this.model.dataSource)
                return this.model.dataSource;
            else
                return;
        },
        enableItem: function (text) {
            this.element.find("li").each(function () {
                if (bbdesigner$(this).text() == text) {
                    bbdesigner$(this).removeClass("e-disable");
                    return false;
                }
            });
        },
        disableItem: function (text) {
            this.element.find("li").each(function () {
                if (bbdesigner$(this).text() == text) {
                    bbdesigner$(this).addClass("e-disable").removeClass("e-select");
                    return false;
                }
            });
        },
        moveUp: function () {
            var PreviousItem = this._getItem(this._selectedIndices()).prev();
            var selectedItem = this._getItem(this._selectedIndices());
            this._addListHover();
            this._getItem(this._selectedItem).removeClass("e-hover");
            PreviousItem.insertAfter(selectedItem);
        },
        moveDown: function () {
            var nextItem = this._getItem(this._selectedIndices()).next();
            var selectedItem = this._getItem(this._selectedIndices());
            this._addListHover();
            this._getItem(this._selectedItem).removeClass("e-hover");
            nextItem.insertBefore(selectedItem);
        },
        checkAll: function () {
            if (!this.model.showCheckbox) return false;
            var items = this.element.find("li");
            for (i = 0; i < items.length; i++) {
                if (!(bbdesigner$(items[i].firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked')) && !(bbdesigner$(items[i].firstChild).hasClass("e-disable"))) {
                    bbdesigner$(items[i].firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('option', 'checked', true);
                    this._checkedItems.push(items[i]);
                    this.model.checkedIndices.push(i);
                }
            }
            this._enableToolTips();
            this.model.uncheckAll = false;
        },
        //Deprecated Method
        unCheckAll: function () { this.uncheckAll(); },
        uncheckAll: function () {
            if (!this.model.showCheckbox) return false;
            var items = this.element.find("li");
            for (i = 0; i < items.length; i++)
                if (bbdesigner$(items[i].firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked'))
                    bbdesigner$(items[i].firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('option', 'checked', false);
            this._checkedItems = [];
            this.model.checkedIndices = [];
            this.model.checkAll = false;
        },
        addItem: function (val, index) {
            var index = (!BoldBIDashboard.isNullOrUndefined(index) && index <= this.element.find('li').length) ? index : this.element.find('li').length;
            var proxy = this, num = index;
            if (BoldBIDashboard.isNullOrUndefined(this.model.dataSource)) {
                if (!(val instanceof Array)) {
                    this.listitem = (this.element.find('li').length ?
                                        ((index - 1 < 0) ? bbdesigner$(this.element.find('li')[0]).before('<li role="option">' + val + '</li>') : bbdesigner$(this.element.find('li')[index - 1]).after('<li role="option">' + val + '</li>'))
                                         : bbdesigner$(this.element).html('<li role="option">' + val + '</li>'));
                    this.listitems = this.element.find('li');
                    this._addItemIndex = index;
                    if (this.model.showCheckbox) {
                        bbdesigner$checkbox = BoldBIDashboard.buildTag("input.listcheckbox e-align#popuplist" + (this.listitems.length - 1) + "_" + this._id, "", {}, {
                            type: "checkbox",
                            name: "list" + (this.listitems.length - 1)
                        });
                        bbdesigner$(this.listitems[index]).prepend(bbdesigner$checkbox);
                        bbdesigner$(bbdesigner$(this.listitems[index]).find(".listcheckbox")).BoldBIDashboardCheckBox({
                            change: bbdesigner$.proxy(this._onClickCheckList, this)
                        });
                    }
                    if (this.model.allowDrag || this.model.allowDrop) this._enableDragDrop();
                    this._addItemIndex = null;
                    this._refreshItems();
                }
                else {
                    bbdesigner$(val).each(function (i, e) {
                        proxy.addItem(e, index);
                        index = index + 1;
                    })
                }
            }
            else if (!(this.model.dataSource instanceof BoldBIDashboard.DataManager)) {
                if (!(val instanceof Array)) val = [val];
                bbdesigner$(val).each(function (i, e) {
                    proxy.model.dataSource.splice(index, 0, e);
                    index = index + 1;
                })
                this.model.disableItemsByIndex = [];
                this.model.selectedIndices = [];
                this.model.checkedIndices = [];
                if (this.model.selectedIndex >= num)
                    this.model.selectedIndex += 1;
                var value = num - 1;
                for (value; value >= 0; value--) {
                    if (bbdesigner$(this.element.children()[value]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(value);
                    if (bbdesigner$(this.element.children()[value]).hasClass('e-select'))
                        this.model.selectedIndices.push(value);
                    if (bbdesigner$(this.element.children()[value]).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked'))
                        this.model.checkedIndices.push(value);
                }
                for (num; num < this._listSize; num++) {
                    if (bbdesigner$(this.element.children()[num]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(num + 1);
                    if (bbdesigner$(this.element.children()[num]).hasClass('e-select'))
                        this.model.selectedIndices.push(num + 1);
                    if (bbdesigner$(this.element.children()[num]).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked'))
                        this.model.checkedIndices.push(num + 1);
                }
                this.refresh(true);
            }
        },
        enableItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.enableItemsByIndices(index.toString());
        },
        disableItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.disableItemsByIndices(index.toString());
        },
        disableItemsByIndices: function (value) {
            if (BoldBIDashboard.isNullOrUndefined(value)) return false;
            var selectitems = value.toString().split(',');
            for (var i = 0; i < selectitems.length; i++) {
                if (selectitems.length > 0 && !(bbdesigner$.inArray(selectitems[i], this._disabledItems) > -1)) {
                    if (bbdesigner$(this.element.children("li")[parseInt(selectitems[i])]).hasClass('e-select')) bbdesigner$(this.element.children("li")[parseInt(selectitems[i])]).removeClass('e-select');
                    var disable = bbdesigner$(this.element.children("li")[parseInt(selectitems[i])]).addClass('e-disable');
                    disable.find(".listcheckbox").BoldBIDashboardCheckBox("disable");
                    this._disabledItems.push(selectitems[i]);
                }
            }
        },
        enableItemsByIndices: function (value) {
            var selectitems = value.toString().split(','), index;
            for (var i = 0; i < selectitems.length; i++) {
                if (selectitems.length > 0 && (bbdesigner$.inArray(selectitems[i], this._disabledItems) > -1)) {
                    index = bbdesigner$.inArray(selectitems[i], this._disabledItems);
                    var enable = bbdesigner$(this.element.children("li")[parseInt(selectitems[i])]).removeClass('e-disable');
                    enable.find(".listcheckbox").BoldBIDashboardCheckBox("enable");
                    this._disabledItems.splice(index, 1);
                }
            }
        },
        _init: function () {
            this._id = this.element[0].id;
            this._isMozilla = BoldBIDashboard.browserInfo().name == "mozilla" ? true : false;
            this._cloneElement = this.element.clone();
            this._deprecatedValue()._initialize()._render()._wireEvents();
            this._initValue = this.focused = false;
            this._typeInterval = null;
            this._typingThreshold = 2000;
            //deprecatedFunction
            if (this.model.checkAll)
                this.checkAll();
            if (this.model.uncheckAll)
                this.uncheckAll();
            if (this.model.disableItemsByIndex)
                this.disableItemsByIndices(this.model.disableItemsByIndex.toString());
            if (this.model.enableItemsByIndex)
                this.enableItemsByIndices(this.model.enableItemsByIndex.toString());
            if (this.model.uncheckItemsByIndex)
                this.uncheckItemsByIndices(this.model.uncheckItemsByIndex.toString());
            this._deprecatedValue()._enabled(this.model.enabled);

        },
        _deprecatedValue: function () {
            this.model.itemDrop = (this.model.itemDrop || this.model.itemDropped);
            this.model.change = (this.model.change || this.model.selectIndexChanged);
            this.model.fields.checkBy = this.model.fields.selected || this.model.fields.checkBy;
            this.model.fields.tooltipText = this.model.fields.toolTipText || this.model.fields.tooltipText;
            this.model.fields.groupBy = this.model.fields.category || this.model.fields.groupBy;
            this.model.select = (this.model.select || this.model.selected);
            if (this.model.allowDragAndDrop != undefined)
                this.model.allowDrag = this.model.allowDrop = true;
            this.model.selectedIndex = this.model.selectedIndex != null ? this.model.selectedIndex : this.model.selectedItemIndex;
            this.model.checkedIndices = ((this.model.checkedIndices.length ? this.model.checkedIndices : null) || (this.model.checkItemsByIndex ? this.model.checkItemsByIndex : null) || (this.model.checkedItems.length ? this.model.checkedItems : null) || (this.model.checkedItemlist.length ? this.model.checkedItemlist : []));
            this.model.selectedIndices = ((this.model.selectedIndices.length ? this.model.selectedIndices : null) || (this.model.selectedItems.length ? this.model.selectedItems : null) || (this.model.selectedItemlist.length ? this.model.selectedItemlist : []));
            return this;
        },
        _setModel: function (options) {
            var option, refresh = false;
            for (option in options) {
                switch (option) {
                    case "value":
                        this._setText(BoldBIDashboard.util.getVal(options[option]));
                        break;
                    case "dataSource":
                        this.model.selectedIndex = null;
                        this._checkModelDataBinding(options[option]);
                        break;
                    case "query":
                        this._queryCheck(options[option]);
                        break;
                    case "fields":
                        this.model.fields = options[option];
                        this._checkModelDataBinding(this.model.dataSource);
                        break;
                    case "template":
                        this.model.template = options[option];
                        this.refresh(true);
                        break;
                    case "loadDataOnInit":
                        this._loadContent = options[option];
                        this._checkModelDataBinding(this.model.dataSource);
                        break;
                    case "enableRTL":
                        this.model.enableRTL = options[option];
                        (this.model.enableRTL) ? this.listContainer.addClass("e-rtl") : this.listContainer.removeClass("e-rtl");
                        break;
                    case "enabled":
                        this.model.enabled = options[option];
                        this._enabled(options[option]);
                        break;
				    case "enableWordWrap":
					      this.model.enableWordWrap=options[option];
					      this._wordWrapItems(options[option]);
						  break;
                    case "height":
                    case "width":
                        this.model[option] = options[option];
                        this._setDimensions();
                        break;
                    case "cssClass":
                        this.model.cssClass = options[option];
                        this.listContainer.addClass(this.model.cssClass);
                        break;
                    case "showCheckbox":
                        this._removeListHover()._checkboxHideShow(options[option]).uncheckAll();
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "selectedItemIndex":
                    case "selectedIndex":
                        if (!bbdesigner$(this.listitem[this.model.selectedIndex]).hasClass('e-disable')) {
                            this.selectItemByIndex(options[option]);
                            this.model.selectedIndex = this.model.selectedItemIndex = options[option];
                        }
                        break;
                    case "checkItemsByIndex":
                    case "checkedItemlist":
                    case "checkedItems":
                    case "checkedIndices":
                        this.uncheckAll();
                        this.checkItemsByIndices(options[option].toString());
                        this.model.checkedIndices = this.model[option] = options[option];
                        break;
                    case "uncheckItemsByIndex":
                        this.uncheckItemsByIndices(options[option].toString());
                        this.model[option] = options[option];
                        break;
                    case "selectedItemlist":
                    case "selectedItems":
                    case "selectedIndices":
                        this.unselectAll();
                        this.selectItemsByIndices(options[option].toString());
                        this.model.selectedIndices = options[option];
                        break;
                    case "enableItemsByIndex":
                        this.model[option] = options[option];
                        this.enableItemsByIndices(options[option].toString());
                        break;
                    case "disableItemsByIndex":
                        this.model[option] = options[option];
                        this.disableItemsByIndices(options[option].toString());
                        break;
                    case "enableVirtualScrolling":
                        this.model.allowVirtualScrolling = options[option]; refresh = true;
                        break;
                    case "allowDrag":
                    case "allowDrop":
                    case "allowDragAndDrop":
                    case "allowVirtualScrolling":
                    case "virtualScrollMode":
                        this.model[option] = options[option]; refresh = true;
                        break;
                    case "checkAll":
                        this.model[option] = options[option]; if (options[option]) this.checkAll(); else this.uncheckAll();
                        break;
                    case "uncheckAll":
                        this.model[option] = options[option]; if (options[option]) this.uncheckAll(); else this.checkAll();
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "itemsCount":
                        this.model.itemsCount = options[option];
                        this._setItemsCount()._setDimensions();
                        break;
                    case "allowMultiSelection":
                        this.model.allowMultiSelection = options[option];
                        this._removeListHover();
                        break;
                    case "totalItemsCount":
                        if (!BoldBIDashboard.isNullOrUndefined(this.model.dataSource)) {
                            this.model.totalItemsCount = options[option];
                            if (this.model.query)
                                this._queryCheck(this.model.query);
                        }
                        break;
                }
            }
            if (refresh) this._refresh();
        },
        _destroy: function () {
            this.element.insertAfter(this.listContainer);
            this.listContainer.remove();
            if (!this._isList) this.element.empty();
            bbdesigner$(window).unbind("resize", bbdesigner$.proxy(this._OnWindowResize, this));
            return this;
        },
        _refresh: function () {
            this._destroy()._init();
        },
        _finalize: function () {
            if (this.model.selectedIndex != null)
                this.selectItemByIndex(this.model.selectedIndex);
            else if ((this.model.showCheckbox == true) && (this._selectedItems.length > 0))
                this._selectCheckedItem(this._selectedItems);
            if (this.model.checkedIndices != null) this.checkItemsByIndices(this.model.checkedIndices.toString());
            return this;
        },
        _initialize: function () {
            this._isList = this.element.children().length ? true : false;
            this.target = this.element[0];
            this._queryString = null;
            this._disabledItems = [];
            this._itemId = null;
            this._up = this._down = this._ctrlClick = false;
            this.checkedStatus = this._isScrollComplete = false;
            this._incqueryString = "";
            this._activeItem = null;
            this._initValue = true;
            this.model.allowVirtualScrolling = (this.model.allowVirtualScrolling) ? this.model.allowVirtualScrolling : this.model.enableLoadOnDemand;
            this.model.virtualScrollMode = (this.model.enableVirtualScrolling) ? "continuous" : this.model.virtualScrollMode;
            this._selectedItems = [];
            this._checkedItems = [];
            this._loadContent = this.model.loadDataOnInit;
            this._loadInitialRemoteData = true;
            this._skipInitialRemoteData = false;
            if (this.model.enableVirtualScrolling) this.model.allowVirtualScrolling = true;
            this._setItemsCount();
            return this;
        },
        _render: function () {
            this._savedQueries = this.model.query.clone();
            if (this.model.totalItemsCount)
                this._savedQueries.take(this.model.totalItemsCount);
            this._renderContainer()._addAttr(this.model.htmlAttributes);
            if (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) {
                if (this._loadInitialRemoteData)
                    this._initDataSource(this.model.dataSource);
            }
            else
                this._showFullList();
            if (!this.model.dataSource) this._finalize();
            if (this.model.showRoundedCorner)
                this._roundedCorner(true);
            return this;
        },
        _queryCheck: function (value) {
            this._savedQueries = value.clone();
            this.element.empty();
            if (this.model.dataSource)
                this._checkModelDataBinding(this.model.dataSource);
        },
        _checkModelDataBinding: function (source) {
            this.mergeValue = null;
            this.model.dataSource = source;
            if (source != null) {
                if (source.length != 0) {
                    if (BoldBIDashboard.DataManager && source instanceof BoldBIDashboard.DataManager) this._initDataSource(source);
                    else this._showFullList();
                } else this.element.empty();
            } else this.element.empty();
        },
        _initDataSource: function (source) {
            var proxy = this;
			if (proxy.model.actionBegin)
            proxy._trigger("actionBegin", {});
            proxy.listitems = proxy.model.dataSource;
            proxy._updateLoadingClass(true);
            var queryPromise = source.executeQuery(this._getQuery());
            queryPromise.done(function (e) {
                proxy.listitems = e.result;
                proxy._updateLoadingClass()._showFullList()._trigger("actionSuccess", e);
                proxy._finalize();
            }).fail(function (e) {
                proxy.model.dataSource = null;
                proxy._updateLoadingClass(true)._trigger("actionFailure", e);
            }).always(function (e) {
                if (proxy.model.checkAll)
                    proxy.checkAll();
                if (proxy.model.uncheckAll)
                    proxy.uncheckAll();
                proxy._trigger("actionComplete", e);
            });
        },
        _getQuery: function () {
            var queryManager;
            if (BoldBIDashboard.isNullOrUndefined(this.model.query)) {
                var column = [],
                    mapper = this.model.fields;
                queryManager = BoldBIDashboard.Query();
                for (var col in mapper)
                    if (col !== "tableName") column.push(mapper[col]);
                if (column.length > 0) queryManager.select(column);
                if (!this.model.dataSource.dataSource.url.match(mapper.tableName + "bbdesigner$")) !BoldBIDashboard.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            } else queryManager = this._savedQueries;
            return queryManager;
        },
        _addDragableClass: function () {
            if (this.model.allowDrag || this.model.allowDrop) {
                this.element.css("cursor", "pointer");
                if (this.model.allowDrop) {
                    this.listContainer.addClass("e-droppable");
                    this.listBoxScroller.addClass("e-droppable");
                }
                var proxy = this;
                this.element.children("li").each(function (index) {
                    if (proxy.model.allowDrag) (bbdesigner$(this).addClass("e-draggable"));
                    if (proxy.model.allowDrop) (bbdesigner$(this).addClass("e-droppable"));
                });
            }
            return this;
        },
        _enableDragDrop: function () {
            if (this.model.allowDrag || this.model.allowDrop) this._drag();
        },
        _updateLoadingClass: function (value) {
            this.listContainer[(value ? "addClass" : "removeClass")]("e-load"); return this;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.listContainer.addClass(value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._enabled(false);
                else proxy.listContainer.attr(key, value);
            });
        },
        _renderContainer: function () {
            this.listContainer = BoldBIDashboard.buildTag("div.e-ddl-popup e-box e-popup e-widget " + this.model.cssClass, "", {
                "visibility": "hidden"
            }, {
                "tabIndex": 0,
                "id": this._id + "_container"
            });
            this.listBoxScroller = BoldBIDashboard.buildTag("div");
            this.ultag = BoldBIDashboard.buildTag("ul.e-ul", "", {}, {
                "role": "listbox"
            });
            this.element = this.element.addClass("e-ul");
            this.listContainer.append(this.listBoxScroller).insertAfter(this.element);
            this.listBoxScroller.append(this.element);
            this.element.attr('unselectable', 'on').css('user-select', 'none');
            this._hiddenInput = BoldBIDashboard.buildTag("input#" + this._id + "_hidden", "", {}, {
                type: "hidden"
            }).insertBefore(this.element);
            this._hiddenInput.attr('name', this._id);
            return this;
        },
        _setMapFields: function () {
            mapper = this.model.fields,
            this.mapFld = {
                _id: null,
                _imageUrl: null,
                _imageAttributes: null,
                _tooltipText: null,
                _spriteCSS: null,
                _text: null,
                _value: null,
                _htmlAttributes: null,
                _selectBy: null,
                _checkBy: null
            };
            this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
            this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
            this.mapFld._tooltipText = (mapper && mapper.tooltipText) ? mapper["tooltipText"] : "tooltipText";
            this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
            this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
            this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : this.listitems[0].text ? "text" : Object.keys(this.listitems[0])[0];
            this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
            this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
            this.mapFld._checkBy = (mapper && mapper.checkBy) ? mapper["checkBy"] : "checkBy";
            this.mapFld._selectBy = (mapper && mapper.selectBy) ? mapper["selectBy"] : "selectBy";
            this.mapCateg = (mapper && mapper.groupBy) ? mapper["groupBy"] : ""
        },
        _renderlistContainer: function () {
            this.hold = this.touchhold = false;
            this.item = "";
            this.startime = 0;
            this.listitemheight = 24;
            var list = this.listitems,
                i, ulempty, ulno, litag, _id, _txt, mapper = this.model.fields,
                predecessor;
            this.lastScrollTop = -1;
            this.dummyUl = bbdesigner$();
            if (this.model.enableRTL) this.listContainer.addClass("e-rtl");
            this._wordWrapItems();
            if (this.model.dataSource == null || this.model.dataSource.length < 1) {
                predecessor = this.element.parents().last();
                if (this.model.targetID) this.docbdy = predecessor.find("#" + this.model.targetID);
                else this.docbdy = predecessor.find("#" + this._id);
                this.itemsContainer = this.docbdy;
                this.itemsContainer.children("ol,ul").remove();
                this.items = this.itemsContainer.children('li');
                this.items.children("img").addClass("e-align");
                this.items.children("div").addClass("e-align");
                this.itemsContainer.children("span").addClass("e-ghead");
                this.element.append(this.itemsContainer.children());
            }
            else if (this.model.dataSource != null && typeof list[0] != "object") {
                if (this._loadInitialRemoteData && this.mergeValue && this.model.virtualScrollMode == "continuous" && this.model.totalItemsCount)
                    this._loadlist(this.mergeValue);
                else if (this._loadInitialRemoteData && this.mergeValue && this.model.virtualScrollMode == "normal" && this.model.totalItemsCount) {
                    this.realUllength = 0;
                    this.mergeUl = [];
                    for (i = 0; i < this.mergeValue.length; i++)
                        this.mergeUl.push(BoldBIDashboard.buildTag('li', this.mergeValue[i][this.model.fields.text], null, { style: "min-height:20px;" })[0]);
                    this.element.append(this.mergeUl);
                    for (i = 0; i < this.model.totalItemsCount - this.mergeValue.length; i++)
                        this.dummyUl.push(BoldBIDashboard.buildTag('li', null, null, { style: "min-height:20px;" })[0]);
                    this.element.append(this.dummyUl);
                    this._refreshScroller();
                }
                else if (this._loadInitialRemoteData && this.mergeValue && !this.model.totalItemsCount)
                    this._initDataSource(this.model.dataSource);
            }
            else {
                this._setMapFields();
                var groupedList, _query;
                _query = this._savedQueries;
                this.listContainer.height(this.model.height);
                this.listitemheight = 24;
                if (this.model.allowVirtualScrolling) {
                    if (this.model.virtualScrollMode == "normal") {
                        this.realUllength = 0;
                        if (this.model.dataSource.length < 0) {
                            query = this._savedQueries.take(parseInt(this.listContainer.height() / this.listitemheight));
                            var proxy = this;
                            if (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) {
                                proxy.listitems = proxy.model.dataSource;
                                var queryPromise = this.model.dataSource.executeQuery(query);
                                queryPromise.done(function (e) {
								    proxy._trigger("actionBeforeSuccess", e);
                                    proxy.listitems = e.result;
                                    proxy._trigger("actionSuccess", e);
                                }).fail(function (e) { proxy._trigger("actionFailure", e); })
                                  .always(function (e) { proxy._trigger("actionComplete", e); });
                            }
                        }
                        if (this.mergeValue && this.mergeValue != groupedList && this.mergeValue != undefined) {
                            this.mergeUl = [];
                            for (i = 0; i < this.mergeValue.length; i++)
                                this.mergeUl.push(BoldBIDashboard.buildTag('li', this.mergeValue[i][this.model.fields.text], null, { style: "min-height:20px;" })[0]);
                            this.element.append(this.mergeUl);
                        }
                        if (!this.model.totalItemsCount)
                            var originalliLength = this.listitems.length;
                        else
                            var originalliLength = (this.mergeValue) ? this.model.totalItemsCount - this.mergeValue.length : this.model.totalItemsCount;
                        for (i = 0; i < originalliLength; i++)
                            this.dummyUl.push(BoldBIDashboard.buildTag('li', null, null, { style: "min-height:20px;" })[0]);
                        this.element.append(this.dummyUl);
                    }
                    this._loadInitialData(_query, list);
                } else {
                    if (this.mapCateg && this.mapCateg != "") {
                        _query = BoldBIDashboard.Query().group(this.mapCateg);
                        groupedList = BoldBIDashboard.DataManager(list).executeLocal(_query);
                        this.model.dataSource = [];
                        for (i = 0; i < groupedList.length; i++) {
                            this.dummyUl.push(BoldBIDashboard.buildTag('span.e-ghead', groupedList[i].key)[0]);
                            this._loadlist(groupedList[i].items);
                            this.model.dataSource = this.model.dataSource.concat(groupedList[i].items);
                        }
                    }
                    else {
                        groupedList = BoldBIDashboard.DataManager(list).executeLocal(_query);
                        if (groupedList.length > 0) {
                            if (this.mergeValue && this.mergeValue != groupedList && this.mergeValue != undefined) {
                                this.mergeUl = [];
                                for (i = 0; i < this.mergeValue.length; i++) {
                                    this.mergeUl.push(BoldBIDashboard.buildTag('li', this.mergeValue[i][this.model.fields.text], null, { style: "min-height:20px;" })[0]);
                                    groupedList.push(this.mergeValue[i]);
                                }
                            }
                            if (this.model.template != null) {
                                for (i = 0; i < list.length; i++) {
                                    var _dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes);
                                    var _did = this._getField(list[i], this.mapFld._id);
                                    litag = BoldBIDashboard.buildTag('li');
                                    if ((_dhtmlAttributes) && (_dhtmlAttributes != "")) litag.attr(_dhtmlAttributes);
                                    if (_did) litag.attr('id', _did);
                                    if (this.model.template) litag.append(this._getTemplatedString(list[i]));
                                    this.dummyUl.push(litag[0]);
                                }
                                this.element.append(this.dummyUl);
                            }
                            else {
                                this.realUllength = 0;
                                this._loadlist(groupedList);
                            }
                        }
                    }
                }
            }
            var proxy = this;
            this._setDimensions();
            this.listContainer.css({ "position": "relative", "height": "" });
            this.listBoxScroller.css({ "height": "", "width": "" });
            this.listContainer.BoldBIDashboardScroller({
                height: this.listContainer.height(),
                width: 0,
                scrollerSize: 20,
                scroll: function (e) {
                    if ((e.source == "button" || e.source == "key" || e.source == "wheel" || (e.source != "thumb" && e.source != "custom")) && proxy.model != null) proxy._onScroll(e);
                },
                thumbEnd: function (e) {
                    //Please use the first code for debugging purpose
                    //if (proxy.model != null && e.originalEvent.target.tagName.toUpperCase() != "LI" && e.originalEvent.target.tagName.toUpperCase() != "HTML")
					// Removed this code "e.originalEvent.target.tagName.toUpperCase() != "LI"" for the touch scrolling purpose.
                    if (proxy.model != null)
                        proxy._onScroll(e);
                }
            });
            this.scrollerObj = this.listContainer.BoldBIDashboardScroller("instance");
            this._setDimensions();
            this.listContainer.css({ 'display': 'none', 'visibility': 'visible' });
            this._checkboxHideShow(this.model.showCheckbox)._checkitems()._showResult();
            if (this.model.totalItemsCount)
                this._setTotalItemsCount();
        },
		  _wordWrapItems:function(){
			   this.model.enableWordWrap?this.listContainer.addClass("e-wrap").removeClass("e-nowrap"):this.listContainer.addClass("e-nowrap").removeClass("e-wrap");
        },
        _enableToolTips: function () {
            if (!BoldBIDashboard.isNullOrUndefined(this.element)) {
                var liElements = bbdesigner$(this.element[0]).find('.e-tooltip');
                if (liElements.length > 0) {
                    liElements.each(function () {
                        if (!(this.offsetWidth < this.scrollWidth)) {
                            bbdesigner$(this).removeClass('e-tooltip-show');
                        } else if (!bbdesigner$(this).hasClass('e-tooltip-show')) {
                            bbdesigner$(this).addClass('e-tooltip-show');
                        }
                    });
                }
            }
        },
        _loadInitialData: function (query, list) {
            var _query = query.clone();
            this.realUllength = 0;
            if ((BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager))
                _query = _query.range(0, parseInt(this.listContainer.height() / this.listitemheight));
            else
                _query = _query.range(0, this.listitems.length);
            groupedList = BoldBIDashboard.DataManager(list).executeLocal(_query);
            if (this.mergeValue && this.mergeValue != groupedList && this.mergeValue != undefined && this.model.virtualScrollMode == "continuous") {
                this.mergeUl = [];
                for (i = 0; i < this.mergeValue.length; i++)
                    this.mergeUl.push(BoldBIDashboard.buildTag('li', this.mergeValue[i][this.model.fields.text], null, { style: "min-height:20px;" })[0]);
                this.element.append(this.mergeUl);
            }
            if (!this.mergeValue || (this.mergeValue && this._loadInitialRemoteData))
                this._loadlist(groupedList);
        },
        _loadlist: function (sublist) {
            if (this.element != null) {
                var selectionArray = [];
                for (var j = 0; j < sublist.length; j++) {
                    var _did = this._getField(sublist[j], this.mapFld._id);
                    var _dimageUrl = this._getField(sublist[j], this.mapFld._imageUrl);
                    var _dimageAttributes = this._getField(sublist[j], this.mapFld._imageAttributes);
                    var _dspriteCss = this._getField(sublist[j], this.mapFld._spriteCSS);
                    var _dtext = this._getField(sublist[j], this.mapFld._text);
                    var _dvalue = this._getField(sublist[j], this.mapFld._value);
                    var _dhtmlAttributes = this._getField(sublist[j], this.mapFld._htmlAttributes);
                    var _dselectBy = this._getField(sublist[j], this.mapFld._selectBy);
                    var _dcheckBy = this._getField(sublist[j], this.mapFld._checkBy);
                    var _dtooltipText = this._getField(sublist[j], this.mapFld._tooltipText);
                    var k = (this.model.virtualScrollMode == "continuous" && this.mergeValue) ? this.realUllength + this.mergeValue.length : this.realUllength;
                    if (!BoldBIDashboard.isNullOrUndefined(_dvalue) && (_dvalue != "" || _dvalue == 0 )) litag = BoldBIDashboard.buildTag('li', "", "", {
                        value: _dvalue, style: "min-height:20px;"
                    });
                    else litag = BoldBIDashboard.buildTag('li', null, null, { style: "min-height:20px;" }); if (_did) litag.attr('id', _did);
                    if ((_dimageUrl) && (_dimageUrl != "")) {
                        imgtag = BoldBIDashboard.buildTag('img.e-align', '', {}, {
                            'src': _dimageUrl,
                            'alt': _dtext
                        });
                        if ((_dimageAttributes) && (_dimageAttributes != "")) imgtag.attr(_dimageAttributes);
                        litag.append(imgtag);
                    }
                    if ((_dspriteCss) && (_dspriteCss != "")) {
                        divtag = BoldBIDashboard.buildTag('div.e-align ' + _dspriteCss + ' sprite-image');
                        litag.append(divtag);
                    }
                    if ((!BoldBIDashboard.isNullOrUndefined(_dtext)) && (_dtext !== "")) litag.append(_dtext);
                    if ((_dhtmlAttributes) && (_dhtmlAttributes != "")) litag.attr(_dhtmlAttributes);
                    if ((_dtooltipText) && (_dtooltipText != "")) litag.attr('data-content', _dtooltipText).addClass("e-tooltip");
                    if (_dcheckBy || this.model.checkAll) litag.addClass("checkItem");
                    if (_dselectBy || this.model.selectAll) litag.addClass("selectItem");
                    if (this.element.children()[k] != null && this.model.allowVirtualScrolling && bbdesigner$(this.element.children()[k]).text() == "") {
                        bbdesigner$(this.element.children()[k]).replaceWith(litag[0]);
                    } else if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal")
                        (bbdesigner$(this.dummyUl[k])).text(bbdesigner$(litag[0]).text());
                    else
                        this.dummyUl.push(litag[0]);
                    this.realUllength += 1;
                }
                if (!this.model.allowVirtualScrolling) this.element.children().remove();
                if (this.element.children()[k] == null && (!this.model.allowVirtualScrolling || this.model.virtualScrollMode == BoldBIDashboard.VirtualScrollMode.Continuous) && this._loadContent)
                    this.element.append(this.dummyUl);
                var listItems = this.element.find("li");
                if (this.model.showCheckbox && this.model.checkedIndices) {
                    for (var i = 0; i < listItems.length; i++)
                        if (this.model.checkedIndices.indexOf(i) != -1)
                            bbdesigner$(listItems[i]).addClass("checkItem");
                }
                else if (!this.model.showCheckbox) {
                    for (var i = 0; i < listItems.length; i++)
                        if (this.model.selectedIndices.indexOf(i) != -1 || this.model.selectedIndex == i)
                            bbdesigner$(listItems[i]).addClass("selectItem");
                }
                this.element.find('.selectItem').each(function (i, e) {
                    selectionArray.push(bbdesigner$(e).index());
                });
                var proxy = this;
                if (!proxy.model.showCheckbox)
                    proxy._selectListItems();
                this.element.find('.checkItem').each(function (i, e) {
                    proxy.model.checkedIndices.push(bbdesigner$(e).index());
                });
                if (selectionArray.length)
                    this.model.allowMultiSelection ? this.model.selectedIndices = selectionArray : this.model.selectedIndex = selectionArray[0];
                if (this.model.checkedIndices)
                    this.model.checkedIndices = bbdesigner$.grep(proxy.model.checkedIndices, function (el, index) { return index == bbdesigner$.inArray(el, proxy.model.checkedIndices); });
                else if (this.model.selectedIndices)
                    this.model.selectedIndices = bbdesigner$.grep(proxy.model.selectedIndices, function (el, index) { return index == bbdesigner$.inArray(el, proxy.model.selectedIndices); });
                this._loadContent = true;
            }
            return this;
        },
        _applySelection: function () {
            if (!(this.model.fields.checkBy || this.model.fields.selectBy)) return false;
            if (this.model.showCheckbox) {
                this.uncheckAll();
                this.checkItemsByIndices(this.model.checkedIndices);
            }
            else {
                if (this.model.allowMultiSelection)
                    this.selectItemsByIndices(this.model.selectedIndices);
                else {
                    this.unselectAll();
                    this.selectItemByIndex(this.model.selectedIndex);
                }
            }
        },
        _getField: function (obj, fieldName) {
            return BoldBIDashboard.pvt.getObject(fieldName, obj);
        },
        _getTemplatedString: function (list) {
            var str = this.model.template,
                start = str.indexOf("${"),
                end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },
        _checkboxHideShow: function (value) {
            (value) ? this._createCheckbox() : this._removeCheckbox();
            this.model.showCheckbox = value;
            return this;
        },
        _createCheckbox: function () {
            var i, _extchk, chklist, me = this;
            this._listitems = this.listContainer.find("ol,ul").children("li");
            chklist = this._listitems.find('input[type=checkbox]');
            for (i = 0; i < this._listitems.length; i++) {
                if (bbdesigner$(this._listitems[i]).text() != "") {
                    bbdesigner$checkbox = BoldBIDashboard.buildTag("input.listcheckbox e-align#popuplist" + i + "_" + this._id, "", {}, {
                        type: "checkbox",
                        name: "list" + i
                    });
                    if (!bbdesigner$(this._listitems[i]).find('input[type=checkbox]').length)
                        bbdesigner$(this._listitems[i]).prepend(bbdesigner$checkbox);
                }
            }
            this.listContainer.find(".listcheckbox").BoldBIDashboardCheckBox({
                cssClass: this.model.cssClass,
                change: bbdesigner$.proxy(this._onClickCheckList, this)
            });
            for (i = 0; i < this._listitems.length; i++) {
                var checkbox = bbdesigner$(this._listitems[i]).find(".listcheckbox");
                if (bbdesigner$(this._listitems[i]).hasClass('e-disable')) checkbox.BoldBIDashboardCheckBox('disable');
                else if ( bbdesigner$(this._listitems[i]).hasClass('checkItem') && !checkbox.BoldBIDashboardCheckBox('isChecked')) {                    
                    checkbox.BoldBIDashboardCheckBox({
                        "checked": true
                    });
                    this._activeItem = i;
                    this.checkedStatus = true;
                    var checkData = this._getItemObject(bbdesigner$(this._listitems[i]), null);
                    checkData["isInteraction"] = true;
                    if (!this._initValue) this._trigger('checkChange', checkData);
                    bbdesigner$(this._listitems[i]).removeClass('checkItem');
                }
            }
        },
        _removeCheckbox: function () {
            var i, checkbox;
            this.listitem = this.listContainer.find("ol,ul").children("li");
            checkbox = this.listitem.find('.listcheckbox');
            if (checkbox.length > 0) {
                this.listitem.find('.listcheckbox').BoldBIDashboardCheckBox('destroy');
                this.listitem.find('input[type=checkbox]').remove();
                this._checkedItems = [];
            }
        },
        _selectCheckedItem: function (chkitems) {
            if (chkitems.length > 0)
                for (i = 0; i < chkitems.length; i++)
                    this._selectedItems.push(chkitems[i]);
        },
        _refreshScroller: function () {
            if (this.model.virtualScrollMode == "continuous") {
                this.listContainer.find(".e-content, .e-vhandle,.e-vhandle div").removeAttr("style");
                this.listContainer.css({ "display": "block" });
                if (this.scrollerObj) {
                    this.scrollerObj.model.height = this.listContainer.height();
                    this.scrollerObj.refresh();
                    this.scrollerObj.option("scrollTop", 0);
                }
            } else {
                this.listContainer.find(".e-vhandle div").removeAttr("style");
                var listboxcontent = this.listBoxScroller.height();
                this.listContainer.css({ "display": "block" });
                if (this.scrollerObj) {
                    this.scrollerObj.model.height = this.listContainer.height();
                    this.scrollerObj.refresh();
                }
                this.listBoxScroller.css("height", "100%");
            }
            if (!this.model.enabled) {
                if (this.scrollerObj) this.scrollerObj.disable();
            }
            this.listContainer.css("height", this.model.height);
        },
        _setDimensions: function () {
            this.listContainer.css({ "width": this.model.width, "height": this.model.height });
            this._refreshScroller();
            return this;
        },
        _setItemsCount: function () {
            if (this.model.itemsCount && this.model.itemsCount != 0 && this.model.height == "auto")
                this.model.height = this.model.itemsCount * 30;
            else
                this.model.height = (this.model.height == "auto") ? "220" : this.model.height;
            return this;
        },
        _setTotalItemsCount: function () {
            if (this.model.virtualScrollMode != "continuous") {
                this.element.height(this.element.find("li").outerHeight() * this.model.totalItemsCount);
                this.scrollerObj.refresh();
            }
        },

        _refreshContainer: function () {
            this.listContainer.css({ "position": "relative" });
            this._setDimensions()._roundedCorner()._refreshScroller();
            this._enableToolTips();
        },
        _drag: function () {
            var proxy = this,
                pre = false,
                _clonedElement = null,
                dragContainment = null;
            this._listitem = this.element.parent();
            lilist = this._addItemIndex ? bbdesigner$(bbdesigner$(this._listitem).find("li")[this._addItemIndex]) : bbdesigner$(this._listitem).find("li");
            lilist.not(".e-js").BoldBIDashboardDraggable({
                dragArea: dragContainment,
                clone: true,
                dragStart: function (args) {
                    if (!bbdesigner$(args.element.closest('.e-ddl-popup.e-js')).hasClass('e-disable') && !args.element.hasClass('e-disable')) {
                        var draggedobj = bbdesigner$("#" + this.element.parent()[0].id).data("BoldBIDashboardListBox");
                        draggedobj._refreshItems();
                        var dragEle = proxy.getSelectedItems();
                        if (dragEle.length > 1 ? proxy._onDragStarts(dragEle, args.target) : proxy._onDragStarts([proxy._getItemObject(args.element, args)], args.target)) {
                            args.cancel = true;
                            _clonedElement && _clonedElement.remove();
                            return false;
                        }
                    } else {
                        _clonedElement && _clonedElement.remove();
                        return false;
                    }
                },
                drag: function (args) {
                    var target = args.target;
                    var dragEle = proxy.getSelectedItems();
                    if (dragEle.length > 1 ? proxy._onDrag(dragEle, target) : proxy._onDrag([proxy._getItemObject(args.element, args)], target)) return false;
                    if (bbdesigner$(target).hasClass('e-droppable') || bbdesigner$(target).parent().hasClass('e-droppable'))
                        bbdesigner$(target).addClass("allowDrop");
                },
                dragStop: function (args) {
                    if (!args.element.dropped)
                        _clonedElement && _clonedElement.remove();
                    var target = args.target, targetObj = proxy;
                    var position = pre ? "Before" : "After";
                    var dragEle = proxy.getSelectedItems();
                    if (dragEle.length > 1 ? proxy._onDragStop(dragEle, target) : proxy._onDragStop([proxy._getItemObject(args.element, args)], target)) return false;
                    bbdesigner$(args.element).removeClass("e-active");
                    if (target.nodeName == 'UL') target = bbdesigner$(target).children()[0];
                    if (bbdesigner$(target).closest('li').length) target = bbdesigner$(args.target).closest('li')[0];
                    else if (target.nodeName != 'LI') target = bbdesigner$(target).closest('.e-ddl-popup.e-droppable')[0];
                    if (target && target.nodeName == 'LI' && bbdesigner$(target).hasClass('e-droppable') && bbdesigner$(target).closest('.e-ddl-popup.e-droppable').length) proxy._dropItem(target, args.element, pre, args.event);
                    else if (bbdesigner$(target).hasClass('e-droppable') && bbdesigner$(target).closest('.e-ddl-popup.e-droppable').length) proxy._dropItemContainer(target, args.element, args.event);
                    bbdesigner$(".allowDrop").removeClass("allowDrop");
                    if (args.target != proxy.element[0] && (args.element.parent().length && bbdesigner$(args.element.parent()[0]).data().ejWidgets[0] == "BoldBIDashboardListBox")) {
                        proxy = bbdesigner$("#" + args.element.parent()[0].id).data(bbdesigner$(args.element.parent()[0]).data().ejWidgets[0]);
                        if (dragEle.length > 1 ? proxy._onDropped(dragEle, target) : proxy._onDropped([proxy._getItemObject(args.element), args], args.target)) return false;
                    }
                },
                helper: function (event, ui) {
                    if (!BoldBIDashboard.isNullOrUndefined(event.element) && !bbdesigner$(event.element.closest('.e-ddl-popup.e-js')).hasClass('e-disable') && bbdesigner$(event.element).hasClass('e-draggable')) {
                        proxy = bbdesigner$(event.element).closest('.e-listbox.e-js').data('BoldBIDashboardListBox');
                        proxy._tempTarget = bbdesigner$(event.element).text();
                        if (proxy) {
                            _clonedElement = bbdesigner$(event.sender.target).clone().addClass("dragClone dragClonelist");
                            _clonedElement.css({ "width": proxy.element.width(), "padding": "5px 5px 5px 0.857em", "list-style": "none", "text-align": "left", "opacity": "1" });
                            return _clonedElement.appendTo(bbdesigner$("body"));
                        }
                    }
                }
            });
        },
        _dropItem: function (target, element, pre, event) {
            element.addClass("e-droppable");
            var targetid = bbdesigner$(target).closest('.e-ddl-popup.e-droppable')[0].id.replace('_container', '');
            var dataIndex = [], dataObj = [];
            var droppedobj = bbdesigner$("#" + targetid).data("BoldBIDashboardListBox");
            var preventDrop = (droppedobj.model.showCheckbox ? !this.model.showCheckbox : this.model.showCheckbox);
            if (preventDrop) return;
            var data = this._getDropObject(target, element, event);
            dataIndex = data.dataIndex;
            dataObj = data.dataObj;
            pre ? bbdesigner$(li).insertBefore(target) : bbdesigner$(li).insertAfter(target);
            this._refreshItems();
            if (dataObj && this.model.dataSource)
                this._dropDataSource(droppedobj, dataIndex, dataObj, li.index());
            droppedobj._refreshItems();
        },
        _dropItemContainer: function (target, element, event) {
            element.addClass("e-droppable");
            var targetid = bbdesigner$(target)[0].id.replace('_container', '');
            var droppedobj = bbdesigner$("#" + targetid).data("BoldBIDashboardListBox");
            var preventDrop = (droppedobj.model.showCheckbox ? !this.model.showCheckbox : this.model.showCheckbox);
            if (preventDrop) return;
            var dataIndex = [], dataObj = [];
            var data = this._getDropObject(target, element, event);
            dataIndex = data.dataIndex;
            dataObj = data.dataObj;
            li.insertAfter(bbdesigner$(bbdesigner$(target).find('li')).last());
            bbdesigner$(target).find('ul').append(li);
            this._refreshItems();
            if (dataObj && this.model.dataSource)
                this._dropDataSource(droppedobj, dataIndex, dataObj, droppedobj.model.dataSource ? droppedobj.model.dataSource.length : 0);
            if (!droppedobj.model.allowDrag)
                bbdesigner$(li).BoldBIDashboardDraggable("instance")._destroy();
            droppedobj._refreshItems();
        },
        _dropDataSource: function (droppedobj, dataIndex, dataObj, droppedIndex) {
            var preventDropData = BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager;
            if (preventDropData) return;
            if (dataIndex instanceof Array) {
                var proxy = this;
                bbdesigner$.each(dataObj, function (index) {
                    indx = proxy.model.dataSource.indexOf(dataObj[index]);
                    proxy.model.dataSource.splice(indx, 1);
                });
            }
            else
                this.model.dataSource.splice(dataIndex, 1);
            if (droppedobj.model.dataSource instanceof Array) {
                droppedobj.model.dataSource.splice.apply(droppedobj.model.dataSource, [droppedIndex, 0].concat(dataObj));
            }
            else {
                droppedobj.model.dataSource = dataObj;
            }
        },
        _getDropObject: function (target, element, event) {
            var dataIndex = [], dataObj = [];
            if (this.model.allowMultiSelection) {
                li = bbdesigner$(element).parent().find(".e-select").removeClass("e-select e-hover");
                if (!li.length)
                    li = element.removeClass("e-select e-hover");
            }
            else
                li = element.removeClass("e-select e-hover");

            if (li.length) {
                proxy = this;
                bbdesigner$.each(li, function (ele) {
                    dataIndex.push(bbdesigner$(this).index());
                    dataObj.push((proxy.model.dataSource) ? proxy.model.dataSource[bbdesigner$(this).index()] : null);
                });
            }
            else {
                dataIndex = li.index();
                dataObj = (this.model.dataSource) ? this.model.dataSource[dataIndex] : null;
            }
            return { "dataIndex": dataIndex, "dataObj": dataObj };
        },
        _showResult: function () {
            var proxy = this;
            this._refreshContainer();
            this.element.attr({
                "aria-expanded": true
            });
            var _ListItemsContainer = this.element.children("li");
			this._listSize = _ListItemsContainer.length;
            _ListItemsContainer.unbind("contextmenu", bbdesigner$.proxy(this._OnMouseContext, this));
            _ListItemsContainer.unbind("click", bbdesigner$.proxy(this._OnMouseClick, this));
            _ListItemsContainer.unbind("touchstart mouseenter", bbdesigner$.proxy(this._OnMouseEnter, this));
            _ListItemsContainer.unbind("touchend mouseleave", bbdesigner$.proxy(this._OnMouseLeave, this));
            _ListItemsContainer.bind("touchstart mouseenter", bbdesigner$.proxy(this._OnMouseEnter, this));
            _ListItemsContainer.bind("touchend mouseleave", bbdesigner$.proxy(this._OnMouseLeave, this));
            _ListItemsContainer.bind("click", bbdesigner$.proxy(this._OnMouseClick, this));
            _ListItemsContainer.bind("contextmenu", bbdesigner$.proxy(this._OnMouseContext, this));
            if (proxy.model.showCheckbox) proxy.element.find(".listcheckbox").BoldBIDashboardCheckBox({ enabled: proxy.model.enabled });
            return this;
        },
        _OnWindowResize: function (e) {
            this._refreshContainer();
            this.listContainer.css("display", "block");
        },
        refresh: function (value) {
		    if (!BoldBIDashboard.isNullOrUndefined(this.model.query)) this._savedQueries = this.model.query; 
            if (value || BoldBIDashboard.isNullOrUndefined(value)) {
                if (this.model.template)
                    this.element.empty();
                this._checkModelDataBinding(this.model.dataSource);
            }
            else {
                this.listContainer.css({ "height": this.model.height, "width": this.model.width });
                this._refreshScroller();
            }
        },
        _removeListHover: function () {
            this._selectedItems = [];
            this.model.selectedIndices = [];
            this.model.selectedIndex = null;
            this.element.children("li").removeClass("e-hover e-select");
            return this;
        },
        _addListHover: function () {
            this._activeItem = this._selectedItem;
            var activeItem = this._getItem(this._selectedItem);
            activeItem.addClass("e-select e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
            this._OnListSelect(this.prevselectedItem, this._selectedItem);
        },
        _calcScrollTop: function (value) {
            var ulH = this.element.outerHeight(),
                li = this.element.find("li"),
                liH = 0,
                index, top, i;
            index = value ? value : this.element.find("li.e-select").index();
            for (i = 0; i < index; i++)
                liH += li.eq(i).outerHeight();
            top = liH - ((this.listContainer.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top;
        },
        _refreshItems: function () {
            this.listBoxScroller.append(this.element);
            this.listContainer.append(this.listBoxScroller);
            this._refreshContainer();
            this._showResult();
            this._setSelectionValues();
            this._setDisableValues();
        },
        _selectedIndices: function () {
            var selectItem;
            this.element.children("li").each(function (index) {
                if (bbdesigner$(this).hasClass("e-select")) {
                    selectItem = index;
                    return false
                }
            });
            this._selectedItem = selectItem;
            return selectItem;
        },
        _addSelectedItem: function (e) {
            if ((!bbdesigner$.isArray(this.model.disableItemsByIndex) && this.model.disableItemsByIndex != null) || (bbdesigner$.isArray(this.model.disableItemsByIndex) && this.model.disableItemsByIndex.length > 0)) {
                if (e.keyCode == 40 || e.keyCode == 39) this._disableItemSelectDown();
                else this._disableItemSelectUp();
                this._selectedItem = this._activeItem
            }
            var activeItem = this._getItem(this._selectedItem);
            this._selectedItems.push(activeItem)
        },
        _getItem: function (val) {
            return bbdesigner$(this.element.children("li")[val])
        },
        _getItemObject: function (item, evt) {
            return {
                item: item,
                index: item.index(),
                text: item.text(),
                value: item.attr("value") ? item.attr("value") : item.text(),
                isEnabled: !item.hasClass("e-disable"),
                isSelected: item.hasClass("e-select"),
                isChecked: item.find('.e-chk-image').hasClass('e-chk-activeicon'),
                data: this.model.dataSource ? this.getListData()[item.index()] : null,
                event: evt ? evt : null
            };
        },
        _roundedCorner: function (val) {
            this.listContainer[(val ? "addClass" : "removeClass")]("e-corner-all");
            return this;
        },
        _enabled: function (boolean) {
            boolean ? this.enable() : this.disable();
            return this;
        },
        _showFullList: function () {
            if (this.model.dataSource != null) {
                if (!(BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager))
                    this.listitems = this.model.dataSource;
                if (this._savedQueries.queries.length && !(BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager))
                    this.listitems = BoldBIDashboard.DataManager(this.model.dataSource).executeLocal(this._savedQueries);
            }
            this._renderlistContainer();
            if (!(this.model.dataSource instanceof BoldBIDashboard.DataManager)) this._trigger("actionComplete");
            this._addDragableClass()._enableDragDrop();
            this._disabledItems = [];
            this.disableItemsByIndices(this.model.disableItemsByIndex);
            this.model.selectedIndex && this.selectItemByIndex(this.model.selectedIndex);
            this.selectItemsByIndices(this.model.selectedIndices);
            this.checkItemsByIndices(this.model.checkedIndices);
			this._tooltipList();
            return this;
        },
		_tooltipList: function(){
             if (this.listContainer.find('li').hasClass('e-tooltip')){
				if(bbdesigner$(this.listContainer).data("BoldBIDashboardTooltip")) bbdesigner$(this.listContainer).BoldBIDashboardTooltip("destroy");
                bbdesigner$(this.listContainer).BoldBIDashboardTooltip({
                    target: ".e-tooltip.e-tooltip-show",
                    isBalloon: false,
                    position: {
                        target: { horizontal: "center", vertical: "bottom" },
                        stem: { horizontal: "left", vertical: "top" }
                    },
                    cssClass: "e-listbox-tooltip"
                });
            }
		},
        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                this._currentValue = this._getField(this.listitems[this._activeItem], this.mapFld._value);
                this.selectDropObj = bbdesigner$('#' + this.model.cascadeTo).BoldBIDashboardListBox('instance');
                if (BoldBIDashboard.isNullOrUndefined(this._dSource))
                    this._dSource = this.selectDropObj.model.dataSource;
                this._performJsonDataInit();
            }
        },
        _performJsonDataInit: function () {
            this._changedSource = BoldBIDashboard.DataManager(this._dSource).executeLocal(BoldBIDashboard.Query().where(this.mapFld._value, "==", this._currentValue));
            this.selectDropObj.setModel({
                dataSource: this._changedSource,
                enable: true,
                value: "",
                selectedIndex: -1                
            })
        },
        _OnMouseContext: function (e) {
            e.preventDefault();
            return false
        },
        _OnMouseEnter: function (e) {
            this.startime = 0;
            this.item = "";
            if (e.type == "touchstart") {
                this.item = bbdesigner$(e.target).text();
                this.startime = new Date().getTime()
            }
            if (this.model.enabled) {
                var targetEle;
                this.element.children("li").removeClass("e-hover");
                if (bbdesigner$(e.target).is("li")) bbdesigner$(e.target).addClass("e-hover");
                if (bbdesigner$(e.target).hasClass("e-disable")) bbdesigner$(e.target).removeClass('e-hover e-select');
                else if (e.target.tagName != "li") {
                    targetEle = bbdesigner$(e.target).parents("li");
                    bbdesigner$(targetEle).addClass("e-hover")
                }
                var activeItem, selectItem = 0;
                this.element.children("li").each(function (index) {
                    if (bbdesigner$(this).hasClass("e-hover")) {
                        activeItem = index;
                        return false
                    }
                });
                this._activeItem = activeItem
            }
        },
        _OnMouseLeave: function (e) {
            this.element.children("li").removeClass("e-hover");
            this.endtime = new Date().getTime();
            if ((((this.endtime - this.startime) / 200) > 2))
                if ((this.item == bbdesigner$(e.target).text())) this.hold = (((this.endtime - this.startime) / 200) > 2) ? !this.hold : false;
        },
        _OnMouseClick: function (e) {
            if (e.which == 3)
                this.hold = true;
            this.endtime = new Date().getTime();
            if ((((this.endtime - this.startime) / 200) > 2))
                if ((!this.model.template && this.item == bbdesigner$(e.target).text()) && (!this.hold))
                    this.hold = (((this.endtime - this.startime) / 200) > 2);
            if (this.model.enabled && this._activeItem != undefined) {
                if (!this.model.showCheckbox) {
                    this.prevselectedItem = this._lastEleSelect ? this._lastEleSelect : this._selectedIndices();
                    var activeitem = bbdesigner$(this.element.children("li")[this._activeItem]);
                    if (!this.model.allowMultiSelection || (!(e.ctrlKey || this.touchhold || this.hold) && !e.shiftKey))
                        this._removeListHover();
                    this.element.children("li").removeClass('e-hover');
                    if (!activeitem.hasClass('e-select')) {
                        activeitem.addClass('e-select');
                        this._selectedItems.push(activeitem);
                        this.model.selectedIndices.push(this._activeItem);
                        if (e.shiftKey && (this.model.allowMultiSelection)) {
                            if (!e.ctrlKey) this._removeListHover();
                            var initial, last;
                            if (this.prevselectedItem < this._activeItem)
                                initial = this.prevselectedItem, last = this._activeItem;
                            else
                                initial = this._activeItem, last = this.prevselectedItem;
                            for (var i = initial; i <= last; i++) {
                                activeitem = bbdesigner$(this.element.children("li")[i]);
                                if (!activeitem.hasClass('e-disable')) {
                                    if (!activeitem.hasClass('e-select'))
                                        activeitem.addClass('e-select');
                                    this._selectedItems.push(activeitem);
                                    this.model.selectedIndices.push(this._activeItem);
                                }
                            }
                        }
                    } else {
                        activeitem.removeClass('e-select');
                        this._selectedItems.splice(this.model.selectedIndices.indexOf(this._activeItem), 1);
                        this.model.selectedIndices.splice(this.model.selectedIndices.indexOf(this._activeItem), 1);
                    }
                    this._selectedItem = this._selectedIndices();
                    this._cascadeAction();
                    var selecteditem = bbdesigner$(this.element.children("li")[this._selectedItem]);
                    if (bbdesigner$(selecteditem).text() != "") {
                        this.element.val(bbdesigner$(selecteditem).text());
                        this.element.attr({
                            "value": this.element.val()
                        });
                    }
                    this.model.selectedText = activeitem.text();
                    this._selectedData = this._getItemObject(bbdesigner$(selecteditem), e);
                    this._selectedData["isInteraction"] = true;
                    if (this._prevSelectedData && (this._selectedData.text != this._prevSelectedData.text))
                        this._trigger("unselect", this._prevSelectedData)
                    this._trigger("select", this._selectedData);
                    this._prevSelectedData = this._selectedData;
                    this._lastEleSelect = this._activeItem;
                    if (this._selectedItems && this._selectedItems.length != 1)
                        this._ctrlClick = true;
                } else {
                    if ((bbdesigner$(e.currentTarget).is("li")) && (bbdesigner$(e.target).is("li"))) {
                        if (bbdesigner$(e.currentTarget.firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked')) {
                            bbdesigner$(e.currentTarget.firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('option', 'checked', false);
                            var index = this.model.checkedIndices.indexOf(bbdesigner$(e.currentTarget).index());
                            this._checkedItems.splice(index, 1);
                            this.model.checkedIndices.splice(index, 1);
                            this.checkedStatus = false;
                        } else {
                            bbdesigner$(e.currentTarget.firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('option', 'checked', true);
                            this._checkedItems.push(this._activeItem);
                            this.model.checkedIndices.push(bbdesigner$(e.currentTarget).index());
                            this.checkedStatus = true;
                        }
                    }
                    else if ((bbdesigner$(e.currentTarget).is("li")) && (bbdesigner$(e.target).is("span"))) {
                        if (bbdesigner$(e.currentTarget.firstChild).find('.listcheckbox').BoldBIDashboardCheckBox('isChecked')) {
                            this._checkedItems.push(this._activeItem);
                            this.model.checkedIndices.push(bbdesigner$(e.currentTarget).index());
                            this.checkedStatus = true;
                        }
                        else {
                            var index = this.model.checkedIndices.indexOf(bbdesigner$(e.currentTarget).index());
                            this._checkedItems.splice(index, 1);
                            this.model.checkedIndices.splice(index, 1);
                            this.checkedStatus = false;
                        }
                    }
                    else
                        return false;
                    this.selectedTextValue = bbdesigner$(e.currentTarget).text();
                    if (!this.element.hasClass("e-disable") && bbdesigner$(e.target).is("li")) {
                        var args = {
                            status: this.model.enabled,
                            isChecked: this.checkedStatus,
                            selectedTextValue: this.selectedTextValue
                        };
                        var checkData = this._getItemObject(bbdesigner$(e.target), e);
                        checkData["isInteraction"] = true;
                        this._trigger("checkChange", checkData);
                    }
                    this._lastEleSelect = bbdesigner$(e.currentTarget).index();
                }
                this._setSelectionValues()._OnListSelect(this.prevselectedItem, this._activeItem);
            }
            if (e.target.nodeName != "INPUT")
                this.listContainer.focus();
        },
        _setSelectionValues: function () {
            var selectionArray = [];
            var oldSelectedIndices = this.model.selectedIndices;
            var oldCheckedIndices = this.model.checkedIndices;
            this.model.selectedIndices = [];
            this.model.checkedIndices = [];
            var proxy = this;
            if (!this.model.showCheckbox) {
                var liItem = this.element.children("li");
                this.element.children("li.e-select").each(function (index, ele) {
                    selectionArray.push(bbdesigner$(ele).attr("value") ? bbdesigner$(ele).attr("value") : bbdesigner$(ele).text());
                    proxy.model.selectedIndices.push(liItem.index(ele));
                    proxy.model.selectedIndex = liItem.index(ele);
                });
            }
            else {
                this.element.find("li .listcheckbox:checked").closest('li').each(function (index, ele) {
                    selectionArray.push(bbdesigner$(ele).attr("value") ? bbdesigner$(ele).attr("value") : bbdesigner$(ele).text());
                    proxy.model.checkedIndices.push(bbdesigner$(ele).index());
                });
            }
            if (BoldBIDashboard.DataManager && BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager && this.model.allowVirtualScrolling) {
                if (this.model.showCheckbox) {
                    for (var i = 0; i < oldCheckedIndices.length; i++) {
                        if (this.model.checkedIndices.indexOf(oldCheckedIndices[i]) == -1)
                            this.model.checkedIndices.push(oldCheckedIndices[i]);
                    }
                }
                else {
                    for (var i = 0; i < oldSelectedIndices.length; i++) {
                        if (this.model.selectedIndices.indexOf(oldSelectedIndices[i]) == -1)
                            this.model.selectedIndices.push(oldSelectedIndices[i]);
                    }
                }
            }
            this.model.selectedItemIndex = this.model.selectedIndex;
            this.model.selectedItems = this.model.selectedItemlist = this.model.selectedIndices;
            this.model.checkedItems = this.model.checkedItemlist = this.model.checkItemsByIndex = this.model.checkedIndices;
            this.value(selectionArray.toString());
            this._hiddenInput.val(this.value());
            return this;
        },
        _setDisableValues: function () {
            this._disabledItems = [];
            this.model.disableItemsByIndex = [];
            var lenth = this.element.children().length, indx;
            for (indx = 0; indx < lenth; indx++)
                if (bbdesigner$(this.element.children()[indx]).hasClass('e-disable'))
                    this.model.disableItemsByIndex.push(indx);
            this.disableItemsByIndices(this.model.disableItemsByIndex);
        },
        _onClickCheckList: function (e) {
           	if(!e.isChecked) bbdesigner$("#"+ e.model.id).closest('li').removeClass("checkItem");
            if (e.isInteraction) {
                this.checkedStatus = e.isChecked ? true : false;
                if (!this._initValue) {
                    this.checkedStatus ? this.model.checkedIndices.push(bbdesigner$(e.event.target).closest('li:not(".e-ghead")').index()) : this.model.checkedIndices.splice(bbdesigner$.inArray(bbdesigner$(e.event.target).closest('li:not(".e-ghead")').index(), this.model.checkedIndices), 1);
                    var checkData = this._getItemObject(bbdesigner$(e.event.target).closest('li'), e);
                    checkData["isInteraction"] = true;
                    this._trigger('checkChange', checkData);
                }
            }
        },
        _disableItemSelectCommon: function () {
            this.listitems = this.element.find('li');
            this._activeItem = this.listitems.index(this.element.find(".e-select"));
        },

        _disableItemSelectUp: function () {
            this._disableItemSelectCommon();
            var disableList = (typeof (this.model.disableItemsByIndex) != "object") ? this.model.disableItemsByIndex.split(",").sort().reverse() : this.model.disableItemsByIndex;
            if (this._activeItem == 0) this._activeItem = this.listitems.length - 1;
            else this._activeItem--;
            for (var lists = 0;
                (bbdesigner$.inArray(this._activeItem.toString(), disableList.toString())) > -1; lists++) {
                this._activeItem--;
                if (this._activeItem < 0) this._activeItem = this.listitems.length - 1
            }
            bbdesigner$(this.element.children("li")[this._activeItem]).addClass('e-select')
        },
        _disableItemSelectDown: function () {
            this._disableItemSelectCommon();
            var disableList = (typeof (this.model.disableItemsByIndex) != "object") ? this.model.disableItemsByIndex.split(",").sort() : this.model.disableItemsByIndex;
            ((this.listitems.length - 1) == this._activeItem) ? this._activeItem = 0 : this._activeItem++;
            for (var lists = 0;
                (bbdesigner$.inArray(this._activeItem.toString(), disableList.toString())) > -1; lists++) {
                this._activeItem++;
                if ((this.listitems.length) == this._activeItem) this._activeItem = 0
            }
            bbdesigner$(this.element.children("li")[this._activeItem]).addClass('e-select')
        },
        _checkitems: function () {
            if (this.model.showCheckbox) {
                var listitems = this.element.find('li');
                for (i = 0; i < this.model.checkedIndices.length; i++) {
                    var item = this.model.checkedIndices[i];
                    bbdesigner$(listitems[item]).find('.listcheckbox').BoldBIDashboardCheckBox('option', 'checked', true);
                    this._checkedItems.push(listitems[item])
                }
            } else {
                if (this.model.allowMultiSelection) {
                    for (i = 0; i < this.model.selectedIndices.length; i++) {
                        var item = this.model.selectedIndices[i];
                        if (!(bbdesigner$(this.listitem[item]).hasClass("e-select"))) {
                            bbdesigner$(this.listitem[item]).addClass("e-select");
                            this._selectedItems.push(bbdesigner$(this.listitem[item]));
                        }
                    }
                } else {
                    if (!(bbdesigner$(this.listitem[this.model.selectedIndex]).hasClass("e-select")))
                        bbdesigner$(this.listitem[this.model.selectedIndex]).addClass("e-select");
                    this._selectedItems.push(bbdesigner$(this.listitem[this.model.selectedIndex]))
                }
            }
            this._setSelectionValues();
            return this;
        },
        _OnListSelect: function (previtem, selecteditem, e) {
            if (!BoldBIDashboard.isNullOrUndefined(previtem) && previtem != selecteditem && !this.model.showCheckbox) {
                var selectData = this._getItemObject(bbdesigner$(this.element.find("li")[selecteditem]), e);
                selectData["isInteraction"] = true;
                this._trigger('change', selectData);
            }
        },
        _OnKeyDown: function (e) {
            if (this.model.enabled) {
                if (this._selectedItems && this._selectedItems.length == 1 && !this.model.showCheckbox)
                    this._lastEleSelect = bbdesigner$(this.element.children("li.e-select")).index();
                this._itemId = null;
                var _ListItemsContainer = this.element.children("li"), proxy = this;
                this._listSize = this.element.children("li").size();
                this.prevselectedItem = this._selectedIndices
                if (!e.shiftKey) this._up = this._down;
                switch (e.keyCode) {
                    case 37:
                    case 38:
                        var liItems = this.element.find("li");
                        var selectedIndex = (this.model.showCheckbox) ? (this._lastEleSelect || 0) : liItems.index(this.element.find("li.e-select"));
                        if (e.shiftKey && this.model.allowMultiSelection && !this.model.showCheckbox) {
                            if (this._lastEleSelect == 0) return false;
                            this._lastEleSelect = (this._ctrlClick) ? this._lastEleSelect - 1 : this._lastEleSelect;
                            selectedIndex = this._lastEleSelect;
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == 0 ? this._listSize - 1 : (this._down ? selectedIndex : selectedIndex - 1)) : 0;
                            for (var i = this._selectedItem; bbdesigner$(_ListItemsContainer[i]).hasClass("e-disable") ; i--)
                                this._selectedItem -= 1;
                            var activeItem = bbdesigner$(_ListItemsContainer[this._selectedItem]);
                            if (activeItem.hasClass("e-select")) {
                                if (this._selectedItem == 0) return;
                                activeItem.removeClass("e-select");
                                this._selectedItems.pop();
                            }
                            else {
                                activeItem.addClass("e-select");
                                this._selectedItems.push(activeItem);
                            }
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
                            this._up = true;
                            this._down = false;
                            this._ctrlClick = false;
                        }
                        else {
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == 0 ? this._listSize - 1 : selectedIndex - 1) : 0;
                            for (var i = this._selectedItem; bbdesigner$(_ListItemsContainer[i]).hasClass("e-disable") ; i--)
                                this._selectedItem -= 1;
                            if (this._selectedItem == -1) this._selectedItem = this._listSize - 1;
                            this._addSelectedItem(e);
                            bbdesigner$(_ListItemsContainer).removeClass("e-hover e-select");
                            var addClass = (this.model.showCheckbox) ? "e-hover" : "e-select";
                            bbdesigner$(_ListItemsContainer[this._selectedItem]).addClass(addClass);
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
                        }
                        this._OnListSelect(this._selectedItem + 1, this._selectedItem, e);
                        this._lastEleSelect = this._selectedItem;
                        this._keyCascade(_ListItemsContainer[this._selectedItem]);
                        this._setSelectionValues();
                        e.preventDefault();
                        return false;
                        break;
                    case 39:
                    case 40:
                        var liItems = this.element.find("li");
                        var selectedIndex = (this.model.showCheckbox) ? (this._lastEleSelect || 0) : liItems.index(this.element.find("li.e-select"));
                        if (e.shiftKey && this.model.allowMultiSelection && !this.model.showCheckbox) {
                            if (this._lastEleSelect == this._listSize - 1) return false;
                            this._lastEleSelect = (this._ctrlClick) ? this._lastEleSelect + 1 : this._lastEleSelect;
                            selectedIndex = this._lastEleSelect;
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == this._listSize - 1 ? 0 : ((this._up || this._ctrlClick) ? selectedIndex : selectedIndex + 1)) : 0;
                            for (var i = this._selectedItem; bbdesigner$(_ListItemsContainer[i]).hasClass("e-disable") ; i++)
                                this._selectedItem += 1;
                            var activeItem = bbdesigner$(_ListItemsContainer[this._selectedItem]);
                            if (activeItem.hasClass("e-select")) {
                                activeItem.removeClass("e-select");
                                this._selectedItems.pop();
                            }
                            else {
                                activeItem.addClass("e-select");
                                this._selectedItems.push(activeItem);
                            }
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
                            this._up = false;
                            this._down = true;
                            this._ctrlClick = false;
                        }
                        else {
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == this._listSize - 1 ? 0 : selectedIndex + 1) : 0;
                            for (var i = this._selectedItem; bbdesigner$(_ListItemsContainer[i]).hasClass("e-disable") ; i++)
                                this._selectedItem += 1;
                            if (this._selectedItem == this._listSize) this._selectedItem = 0;
                            this._addSelectedItem(e);
                            bbdesigner$(_ListItemsContainer).removeClass("e-hover e-select");
                            var addClass = (this.model.showCheckbox) ? "e-hover" : "e-select";
                            bbdesigner$(_ListItemsContainer[this._selectedItem]).addClass(addClass);
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
                        }
                        this._OnListSelect(this._selectedItem - 1, this._selectedItem);
                        this._lastEleSelect = this._selectedItem;
                        this._keyCascade(_ListItemsContainer[this._selectedItem]);
                        this._setSelectionValues();
                        return false;
                        break;
                    case 8:
                    case 9:
                    case 13:
                        if (this.model.showCheckbox) {
                            if (this.model.checkedIndices.indexOf(this._selectedItem) < 0)
                                this.checkItemByIndex(this._selectedItem);
                            else
                                this.uncheckItemByIndex(this._selectedItem);
                        }
                        break;
                    case 18:
                    case 33:
                    case 34:
                        break;
                    case 35:
                        if (bbdesigner$(':focus').length && bbdesigner$(':focus')[0].nodeName != "INPUT") {
                            this._OnListSelect(this._selectedItem, this._listSize - 1);
                            this.selectItemByIndex(this._listSize - 1);
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._listSize - 1) });
                            if (this.model.showCheckbox) {
                                this._removeListHover();
                                bbdesigner$(_ListItemsContainer[this._listSize - 1]).addClass("e-hover");
                                this._lastEleSelect = this._selectedItem = this._listSize - 1;
                            }
                            this._keyCascade(_ListItemsContainer[this._listSize - 1]);
                            e.preventDefault();
                            if (this.model.allowVirtualScrolling == true) proxy._onScroll(e);
                            return false;
                        }
                        break;
                    case 36:
                        if (bbdesigner$(':focus').length && bbdesigner$(':focus')[0].nodeName != "INPUT") {
                            this._OnListSelect(this._selectedItem, 0);
                            this.selectItemByIndex(0);
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(0) });
                            if (this.model.showCheckbox) {
                                this._removeListHover();
                                bbdesigner$(_ListItemsContainer[0]).addClass("e-hover");
                                this._lastEleSelect = this._selectedItem = 0;
                            }
                            this._keyCascade(_ListItemsContainer[0], e);
                            e.preventDefault();
                            return false;
                        }
                        break;
                }
            }
        },
        _keyCascade: function (obj, evt) {
            var selectData = this._getItemObject(bbdesigner$(obj), evt);
            this.model.selectedText = selectData.text;
            selectData["isInteraction"] = true;
            this._trigger("select", selectData);
            if (this.model.cascadeTo) {
                this._activeItem = this._selectedItem;
                this._cascadeAction();
            }
        },

        mergeData: function (data,skipInitial) {
            this.mergeUl = bbdesigner$();
            this._setMapFields();
            var proxy = this;
            this._skipInitialRemoteData = skipInitial ? skipInitial : false;
            if (BoldBIDashboard.DataManager && data instanceof BoldBIDashboard.DataManager) {
                var queryPromise = data.executeQuery(this._getQuery());
                queryPromise.done(function (e) {
                    proxy.mergeValue = e.result;
                    proxy._renderlistContainer();
                });
            }
            else {
                this.mergeValue = data;
                this.listitems = this.listitems ? this.listitems : this.model.dataSource;
                this._renderlistContainer();
            }
            this._loadInitialRemoteData = false;
        },

        _onScroll: function (e) {
            this._temp = this.model.dataSource;
            if (this.model.actionBegin)
                this._trigger("actionBegin", {});
            if (this._temp != this.model.dataSource)
                (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) ? this._initDataSource(this.model.dataSource) : this._showFullList();
            var proxy = this, liEle = this.element.find('li')[0];
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                this.itemIndex = parseInt(this.scrollerObj.scrollTop() / bbdesigner$(liEle).outerHeight());
                this.realUllength = this.itemIndex;
                var start = this.itemIndex, end;
                if (this.itemIndex > this.listContainer.outerHeight() / bbdesigner$(liEle).outerHeight()) {
                    start = (this.mergeValue && start >= this.mergeValue.length) ? start - this.mergeValue.length : start;
                    end = this.itemIndex + this._getLiCount();
                }
                if (this.mergeValue && this.itemIndex <= this.mergeValue.length || start <= 0)
                    start = 0;
                if (this.model.dataSource.length == undefined && (this._temp == this.model.dataSource)) {
                    if (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager)
                        this._queryPromise(start, proxy, start + Math.round(this.model.height / this.listitemheight), e);
                }
                else if (this._temp != this.model.dataSource) {
                    this._queryPromise(start, proxy, this._listitems.length, e);
                }
                else if (this.model.dataSource.length > 0)
                    this._loadQueryData(start, end, proxy);
            } else if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "continuous") {
                if (this.element.find("li").length - 2 <= (this.scrollerObj.scrollTop() + this.listContainer.height()) / this.element.find('li').outerHeight()) {
                    this.lastScrollPosition = this.scrollerObj.scrollTop();
                    var start = this.mergeValue && !this._skipInitialRemoteData ? this.element.children().length - this.mergeValue.length : this.element.children().length;
                    if (start <= 0)
                        start = 0;
					if(this._oldStartValue)
						start = this._oldStartValue;
                    var totalLength = this.model.totalItemsCount ? this.model.totalItemsCount : this.listitems.length
                    if (this.element.find("li").length < totalLength) {
                        if (this.model.dataSource.length == undefined) {
                            if (this.mergeValue && !this._skipInitialRemoteData)
                                var end = (this.model.totalItemsCount && start + this.model.itemRequestCount + this.mergeValue.length > this.model.totalItemsCount) ? this.model.totalItemsCount - this.mergeValue.length : start + this.model.itemRequestCount;
                            else
                                var end = (this.model.totalItemsCount && start + this.model.itemRequestCount > this.model.totalItemsCount) ? this.model.totalItemsCount : start + this.model.itemRequestCount;
                            if (BoldBIDashboard.DataManager && this.model.dataSource instanceof BoldBIDashboard.DataManager) {
								if(start<=end)
                                	this._queryPromise(start, proxy, end, e);
								else
									return false;
							}
							this._oldStartValue = start + this.model.itemRequestCount;
                        }
                        else if (this.model.dataSource.length > 0) {
                            if (this._isScrollComplete) return;
                            this._loadQueryData(proxy.realUllength, proxy.realUllength + this.model.itemRequestCount, proxy);
                        }
                    }
                }
            }
        },
        _queryPromise: function (start, proxy, end, e) {
            this._trigger('itemRequest', { event: e, isInteraction: true });
            this._setMapFields();
            var mQuery = this._savedQueries.clone();
            var queryPromise = this.model.dataSource.executeQuery(mQuery.range(start, end));
            this._updateLoadingClass(true);
            queryPromise.done(function (d) {
			    proxy._trigger("actionBeforeSuccess", d);
                proxy.realUllength = (e.source != "wheel") ? proxy.mergeValue ? proxy.mergeValue.length + start : start : start;
                proxy._loadlist(d.result)._checkboxHideShow(proxy.model.showCheckbox)._showResult()._updateLoadingClass();
                proxy._applySelection();
				proxy._tooltipList();
                if (proxy.model.virtualScrollMode == "continuous") {
                    proxy.scrollerObj.refresh();
                    proxy.scrollerObj.option("scrollTop", proxy.lastScrollPosition);
                }
                proxy._trigger("actionSuccess", d);
            }).fail(function (e) {
                proxy._trigger("actionFailure", e);
            }).always(function (e) {
                proxy._trigger("actionComplete", e);
            });
        },
        _selectListItems: function () {
            var listItems = this.element.find("li");
            for (i = 0; i < listItems.length; i++) {
                if (bbdesigner$(listItems[i]).hasClass('selectItem') && !bbdesigner$(listItems[i]).hasClass('e-select'))
                    bbdesigner$(listItems[i]).addClass("e-select").removeClass('selectItem');
            }
        },
        _loadQueryData: function (start, end, proxy) {
            this._isScrollComplete = (end >= this.listitems.length) ? true : false;
            this._updateLoadingClass(true);
            var tempSrc = this.model.dataSource;
            this._loadlist(tempSrc.slice(start, end))._showResult()._updateLoadingClass();
            proxy._applySelection();
            if (proxy.model.virtualScrollMode == "continuous") {
                proxy.scrollerObj.option("scrollTop", proxy.lastScrollPosition);
                proxy.scrollerObj.refresh();
            }
        },
        _setText: function (text) {
            for (i = 0; i < this.listitems.length; i++)
                if (bbdesigner$(this.element.children("li")[i]).text() == text) this.unselectAll().selectItemByIndex(i);
        },
        _getLiCount: function () {
            return parseInt(this.listContainer.height() / this.element.find("li").height());
        },
        _onDragStarts: function (data, target) {
            return this._trigger("itemDragStart", { items: data, target: target });
        },
        _onDrag: function (data, target) {
            return this._trigger("itemDrag", { items: data, target: target });
        },
        _onDragStop: function (data, target) {
            return this._trigger("itemDragStop", { items: data, target: target });
        },
        _onDropped: function (data, target) {
            return this._trigger("itemDrop", { items: data, target: target });
        },
        _OnKeyPress: function (e) {
            if (this.model.enableIncrementalSearch && this.model.enabled) {
                this._incrementalSearch(this._isMozilla ? e.charCode : e.keyCode)
            }
        },
        _incrementalSearch: function (from) {
            _proxy = this;
            var typedCharacter = String.fromCharCode(from);
            if (this._incqueryString != typedCharacter) this._incqueryString += typedCharacter;
            else this._incqueryString = typedCharacter; if ((this._incqueryString.length > 0) && (this._typeInterval == null)) {
                this._typeInterval = setTimeout(function () {
                    _proxy._incqueryString = "";
                    _proxy._typeInterval = null
                }, _proxy._typingThreshold)
            }
            var list = this.listContainer.find("ol,ul").children("li:not('.e-category')"),
                i, strlen;
            var caseSence = this.model.caseSensitiveSearch,
                str, queryStr = this._incqueryString;
            var querylength = this._incqueryString.length,
                searchflag = false;
            if (!caseSence) queryStr = queryStr.toLowerCase();
            var initialSelection = this._activeItem;
            --initialSelection;
            var startIndex = this._activeItem != list.length - 1 ? (this._activeItem + 1) : 0;
            if (this._incqueryString.length > 1) startIndex = this._activeItem;
            for (var i = startIndex;
                (i < list.length && initialSelection != i) ; i++) {
                str = bbdesigner$.trim(bbdesigner$(list[i]).text());
                str = caseSence ? str : str.toLowerCase();
                if (str.substr(0, querylength) === queryStr) {
                    this._removeListHover();
                    this.element.children("li").removeClass('e-active');
                    this._selectedItem = i;
                    this._addListHover();
                    searchflag = true;
                } else if ((i == list.length - 1) && (searchflag == false)) {
                    if (startIndex != 0) {
                        i = -1;
                        ++initialSelection;
                    } else searchflag = true;
                }
                if (searchflag) break;
            }
        },
        _wireEvents: function () {
            this._on(this.listContainer, "focus", this._OnFocusIn);
            this._on(this.listContainer, "blur", this._OnFocusOut);
            bbdesigner$(window).bind("resize", bbdesigner$.proxy(this._OnWindowResize, this));
        },
        _OnFocusIn: function () {
            if (!this._focused) {
                this._trigger("focusIn");
                this._on(this.listContainer, "keydown", this._OnKeyDown);
                this._on(this.listContainer, "keypress", this._OnKeyPress);
                this._focused = true;
            }
        },
        _OnFocusOut: function () {
            if (this._focused) {
                this._trigger("focusOut");
                this._off(this.listContainer, "keydown", this._OnKeyDown);
                this._off(this.listContainer, "keypress", this._OnKeyPress);
                this._focused = false;
            }
        }
    });
    BoldBIDashboard.VirtualScrollMode = {
        /** Supports to Virtual Scrolling mode with normal only */
        Normal: "normal",
        /** Supports to Virtual Scrolling mode with continuous only */
        Continuous: "continuous"
    }
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (bbdesigner$) {
    var BoldBIDashboardTooltip = (function (_super) {
        __extends(BoldBIDashboardTooltip, _super);
        function BoldBIDashboardTooltip(element, options) {
            _super.call(this);
            this._rootCSS = "e-tooltip";
            this._setFirst = false;
            this.PluginName = "BoldBIDashboardTooltip";
            this.id = "null";
            this.model = null;
            this.defaults = {
                height: "auto",
                width: "auto",
                enabled: true,
                content: null,
                containment: "body",
                target: null,
                title: null,
                closeMode: "none",
                autoCloseTimeout: 4000,
                position: {
                    stem: { horizontal: "center", vertical: "bottom" },
                    target: { horizontal: "center", vertical: "top" }
                },
                associate: "target",
                collision: "flipfit",
                showShadow: false,
                cssClass: null,
                animation: {
                    effect: "none",
                    speed: 0
                },
                isBalloon: true,
                showRoundedCorner: false,
                enableRTL: false,
                allowKeyboardNavigation: true,
                tip: {
                    size: {
                        width: 20,
                        height: 10
                    },
                    adjust: {
                        xValue: 0,
                        yValue: 0
                    }
                },
                trigger: "hover",
                create: null,
                click: null,
                destroy: null,
                hover: null,
                tracking: null,
                beforeOpen: null,
                beforeClose: null,
                open: null,
                close: null,
            };
            this.dataTypes = {
                enabled: "boolean",
                closeMode: "enum",
                autoCloseTimeout: "number",
                trigger: "enum",
                position: {
                    stem: "data",
                    target: "data"
                },
                associate: "enum",
                collision: "enum",
                showShadow: "boolean",
                animation: {
                    effect: "enum",
                    speed: "number"
                },
                isBalloon: "boolean",
                showRoundedCorner: "boolean",
                enableRTL: "boolean",
                allowKeyboardNavigation: "boolean",
                tip: {
                    size: {
                        width: "number",
                        height: "number"
                    },
                    adjust: {
                        xValue: "number",
                        yValue: "number"
                    }
                }
            };
            this.isTrack = true;
            this._isCancel = false;
            this._isHidden = true;
            this.arrowValue = { left: 0, top: 0, width: 0, height: 0, display: null };
            this.tooltipPos = { width: 0, height: 0, left: 0, top: 0, bottom: 0, right: 0, position: "absolute" };
            this.targetPos = { width: 0, height: 0, left: 0, top: 0, bottom: 0, right: 0, position: "absolute" };
            this.mouseTimer = null;
            this.positionTarget = null;
            this.positionTooltip = null;
            this.containerSize = null;
            this._createTitle = function () {
                this.tooltipTitle = BoldBIDashboard.buildTag('div.e-def e-header', " ", {}, {});
                this.tooltipHeader = BoldBIDashboard.buildTag('div', " ", {}, {});
                bbdesigner$(this.tooltipTitle).html(this.model.title).appendTo(this.tooltipHeader);
            };
            if (element) {
                if (!element["jquery"]) {
                    element = bbdesigner$("#" + element);
                }
                if (element.length) {
                    return bbdesigner$(element).BoldBIDashboardTooltip(options).data(this.PluginName);
                }
            }
        }
        BoldBIDashboardTooltip.prototype.setModel = function (opt, forceSet) {
            this.setModel(opt, forceSet);
        };
        BoldBIDashboardTooltip.prototype.option = function (opt, forceSet) {
            this.option(opt, forceSet);
        };
        BoldBIDashboardTooltip.prototype.triggerEvents = function (eventName, eventProp) {
            var temp;
            switch (eventName) {
                case "click":
                    var clickArg = eventProp;
                    temp = this._trigger(eventName, clickArg);
                    break;
                case "hover":
                    var hoverArg = eventProp;
                    temp = this._trigger(eventName, hoverArg);
                    break;
                case "tracking":
                    var trackArg = eventProp;
                    temp = this._trigger(eventName, trackArg);
                    break;
                case "beforeOpen":
                    var beforeOpenArg = eventProp;
                    temp = this._trigger(eventName, beforeOpenArg);
                    break;
                case "open":
                    var openArg = eventProp;
                    temp = this._trigger(eventName, openArg);
                    break;
                case "beforeClose":
                case "close":
                    var closeArg = eventProp;
                    temp = this._trigger(eventName, closeArg);
                    break;
            }
            return temp;
        };
        BoldBIDashboardTooltip.prototype.enable = function (val) {
            if (this.tooltip.hasClass("e-disable")) {
                this.model.enabled = true;
                this.tooltip.removeClass("e-disable");
            }
        };
        BoldBIDashboardTooltip.prototype.disable = function (val) {
            if (!this.tooltip.hasClass("e-disable")) {
                this.model.enabled = false;
                this.tooltip.addClass("e-disable");
            }
        };
        BoldBIDashboardTooltip.prototype.show = function (targetElement, func) {
            if (this.model.enabled) {
                if (BoldBIDashboard.isNullOrUndefined(targetElement)) {
                    var target = (this.model.target == null) ? this.element : bbdesigner$(this.element).find(this.model.target + ":first");
                    this._positionElement(target);
                }
                else {
                    this._positionElement(targetElement);
                }
                if (!BoldBIDashboard.isNullOrUndefined(func)) {
                    if (typeof func === "string") {
                        bbdesigner$(this.tooltip).show(func);
                    }
                    else {
                        if (typeof func === "function") {
                            func.call.apply(this.tooltip);
                        }
                    }
                }
                else {
                    this._showTooltip();
                }
            }
        };
        BoldBIDashboardTooltip.prototype.hide = function (func) {
            if (this.model.enabled) {
                if (!BoldBIDashboard.isNullOrUndefined(func)) {
                    if (typeof func === "string") {
                        bbdesigner$(this.tooltip).hide(func);
                    }
                    else if (typeof func === "function") {
                        func.call.apply(this.tooltip);
                    }
                }
                else {
                    this._hideTooltip();
                }
            }
        };
        BoldBIDashboardTooltip.prototype._destroy = function () {
            this.mouseTimer && clearTimeout(this.mouseTimer);
            this.timer && clearTimeout(this.timer);
            bbdesigner$(this.tooltip).remove();
            this.tooltip = null;
        };
        BoldBIDashboardTooltip.prototype._setModel = function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "enabled":
                        this._enabled(options[option]);
                        break;
                    case "content":
                        this._setContent(options[option]);
                        break;
                    case "title":
                        this.model.title = options[option];
                        if (this.model.title == null) {
                            bbdesigner$(this.tooltipHeader).remove();
                            this.tooltipHeader = null;
                            this.tooltipTitle = null;
                            if (this.model.closeMode === BoldBIDashboard.Tooltip.CloseMode.Sticky)
                                this._iconRender();
                        }
                        else
                            (BoldBIDashboard.isNullOrUndefined(this.tooltipHeader)) ? this._createHeader() : bbdesigner$(this.tooltipTitle).html(this.model.title);
                        this.tooltipPos.height = bbdesigner$(this.tooltip).outerHeight();
                        break;
                    case "associate":
                        this.model.associate = options[option];
                        this._wireMouseEvents(false);
                        this._wireMouseEvents(true);
                        break;
                    case "position":
                        this._setPosition(options[option]);
                        break;
                    case "collision":
                        this.model.collision = options[option];
                        break;
                    case "closeMode":
                        if (typeof options[option] !== "undefined") {
                            this.model.closeMode = options[option];
                            if (this.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.Sticky)
                                this._iconRender();
                            else {
                                bbdesigner$(this.tooltipClose).remove();
                                this.tooltipClose = null;
                            }
                            this.tooltipPos.height = bbdesigner$(this.tooltip).outerHeight();
                        }
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "showShadow":
                        this._shadowEffect(options[option], this.model.position);
                        break;
                    case "isBalloon":
                        if (!BoldBIDashboard.isNullOrUndefined(options[option])) {
                            this.model.isBalloon = options[option];
                            if (!this.model.isBalloon) {
                                bbdesigner$(this.tip).remove();
                                this.tip = null;
                            }
                            else
                                this._renderArrow();
                        }
                        break;
                    case "animation":
                        var val = options[option];
                        this.model.animation = bbdesigner$.extend(true, this.model.animation, val);
                        if (this.model.animation.effect != BoldBIDashboard.Tooltip.Effect.None) {
                            this._off(bbdesigner$(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
                            this._off(bbdesigner$(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
                        }
                        else if (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.None) {
                            this._on(bbdesigner$(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
                            this._on(bbdesigner$(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
                        }
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "target":
                        this._wireTriggerEvents(false);
                        this.model.target = options[option];
                        this._wireTriggerEvents(true);
                        this._renderTarget();
                        break;
                    case "trigger":
                        this._setTrigger(options[option]);
                        break;
                    case "showRoundedCorner":
                        this.model.showRoundedCorner = options[option];
                        this._roundedCorner(options[option]);
                        break;
                    case "allowKeyboardNavigation":
                        this.model.allowKeyboardNavigation = options[option];
                        if (!this.model.allowKeyboardNavigation) {
                            this._off(bbdesigner$(window), "keydown", this._keyDown);
                        }
                        else {
                            this._on(bbdesigner$(window), "keydown", this._keyDown);
                        }
                        break;
                }
            }
        };
        BoldBIDashboardTooltip.prototype._enabled = function (val) {
            (val) ? this.enable(val) : this.disable(val);
            this.model.enabled = val;
        };
        BoldBIDashboardTooltip.prototype._shadowEffect = function (val, position) {
            this.model.showShadow = val;
            var shadowEffect = null;
            bbdesigner$(this.tooltip).removeClass("e-tooltipShadowLeft e-tooltipShadowRight");
            if (this.model.showShadow) {
                if (this.model.isBalloon) {
                    switch (position.stem.horizontal) {
                        case "center":
                            shadowEffect = (position.stem.vertical == "top") ? "e-tooltipShadowLeft" : (position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
                            break;
                        case "right":
                            shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "top") ? "e-tooltipShadowLeft" : "e-tooltipShadowRight";
                            break;
                        case "left":
                            shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
                            break;
                    }
                }
                else
                    shadowEffect = "e-tooltipShadowLeft";
                bbdesigner$(this.tooltip).addClass(shadowEffect);
            }
        };
        BoldBIDashboardTooltip.prototype._setContent = function (val) {
            this.model.content = val;
            bbdesigner$(this.tooltipContent).html(this.model.content);
            this.tooltipPos.height = bbdesigner$(this.tooltip).outerHeight();
            this.tooltipPos.width = bbdesigner$(this.tooltip).outerWidth();
        };
        BoldBIDashboardTooltip.prototype._setPosition = function (val) {
            this.model.position.stem = bbdesigner$.extend(true, this.model.position.stem, val.stem);
            this.model.position.target = bbdesigner$.extend(true, this.model.position.target, val.target);
        };
        BoldBIDashboardTooltip.prototype._setTrigger = function (val) {
            this._wireTriggerEvents(false);
            this.model.trigger = val;
            this._wireTriggerEvents(true);
        };
        BoldBIDashboardTooltip.prototype._init = function () {
            this.id = this.element[0].id;
            this.positionTarget = bbdesigner$.extend(true, {}, this.model.position.target);
            this.positionTooltip = bbdesigner$.extend(true, {}, this.model.position.stem);
            this.tipSize = bbdesigner$.extend(true, {}, this.model.tip.size);
            this._initialize();
            this._render();
            this.enable(this.model.enabled);
            this._wireEvents(true);
        };
        BoldBIDashboardTooltip.prototype._initialize = function () {
            if (BoldBIDashboard.isNullOrUndefined(this.model.target)) {
                if (BoldBIDashboard.isNullOrUndefined(this.model.content) && (!BoldBIDashboard.isNullOrUndefined(this.element.attr("title")))) {
                    this.model.content = this.element.attr("title");
                    this.element.attr("data-content", this.model.content);
                    this.element.removeAttr("title");
                }
            }
            else
                this._renderTarget();
        };
        BoldBIDashboardTooltip.prototype._wireEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            this._wireTriggerEvents(val);
            if (this.model.allowKeyboardNavigation)
                this[wire](bbdesigner$(window), "keydown", this._keyDown);
            (this.model.target != null) ? this[wire](this.element, "scroll", this.model.target, this._hideTooltip) : this[wire](this.element, "scroll", this._hideTooltip);
            this[wire](bbdesigner$(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
            this[wire](bbdesigner$(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
            this[wire](bbdesigner$(window), "resize", this._hideTooltip);
            this[wire](bbdesigner$(window), "touchend", this._docTouchEndHandler);
        };
        BoldBIDashboardTooltip.prototype._wireTriggerEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            if (this.model.trigger == BoldBIDashboard.Tooltip.Trigger.Focus)
                (this.model.target != null) ? this[wire](this.element, "blur", this.model.target, this._hideTooltip) : this[wire](this.element, "blur", this._hideTooltip);
            else
                (this.model.target != null) ? this[wire](this.element, BoldBIDashboard.isDevice() ? "touchstart" : "mouseleave", this.model.target, this._onMouseOut) : this[wire](this.element, BoldBIDashboard.isDevice() ? "touchstart" : "mouseleave", this._onMouseOut);
            this._wireMouseEvents(val);
            var triggerEvent = (this.model.trigger == BoldBIDashboard.Tooltip.Trigger.Click) ? (BoldBIDashboard.isDevice() ? "touchstart" : "click") : (this.model.trigger == BoldBIDashboard.Tooltip.Trigger.Focus) ? (BoldBIDashboard.isDevice() ? "touchstart" : "focus") : (BoldBIDashboard.isDevice() ? "touchstart" : "mouseenter");
            (this.model.target != null) ? this[wire](this.element, triggerEvent, this.model.target, this._targetHover) : this[wire](this.element, triggerEvent, this._targetHover);
        };
        BoldBIDashboardTooltip.prototype._wireMouseEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            if (this.model.associate == BoldBIDashboard.Tooltip.Associate.MouseEnter || this.model.associate == BoldBIDashboard.Tooltip.Associate.MouseFollow)
                (this.model.target != null) ? this[wire](this.element, BoldBIDashboard.isDevice() ? "touchstart" : "mousemove", this.model.target, this._tooltipMove) : this[wire](this.element, BoldBIDashboard.isDevice() ? "touchstart" : "mousemove", this._tooltipMove);
        };
        BoldBIDashboardTooltip.prototype._render = function () {
            this.tooltip = BoldBIDashboard.buildTag("div.e-tooltip-wrap e-widget", "", {}, { role: "tooltip", 'aria-readonly': 'true', 'aria-hidden': 'true', 'aria-describedby': this.id + '_content', 'id': this.id + '_Main' });
            this.tooltipInter = BoldBIDashboard.buildTag("div.e-tipContainer", "", {}, {});
            this.tooltip.append(this.tooltipInter);
            if (this.model.isBalloon)
                this._renderArrow();
            bbdesigner$(this.model.containment).append(this.tooltip);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._createHeader();
            this._tooltipContent();
            if (this.model.cssClass)
                this.tooltip.addClass(this.model.cssClass);
            if (this.model.showRoundedCorner)
                this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL)
                this._setRTL(this.model.enableRTL);
            bbdesigner$(this.tooltip).css({ "top": "auto", "left": "auto" });
            this.tooltipPos = { width: bbdesigner$(this.tooltip).outerWidth(), height: bbdesigner$(this.tooltip).outerHeight(), left: bbdesigner$(this.tooltip).offset().left, top: bbdesigner$(this.tooltip).offset().top, position: "absolute" };
            if (BoldBIDashboard.isNullOrUndefined(this.model.target)) {
                this._containerCalc(this.element);
                this._positionElement(this.element);
            }
        };
        BoldBIDashboardTooltip.prototype._containerCalc = function (target) {
            if (BoldBIDashboard.isNullOrUndefined(target))
                target = this.element;
            var containerElement = { left: 0, top: 0 };
            var childElement = bbdesigner$(target).offset();
            this.containerSize = {
                height: (this.model.containment == "body") ? bbdesigner$(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight : bbdesigner$(this.model.containment).innerHeight(),
                width: (this.model.containment == "body") ? bbdesigner$(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth : bbdesigner$(this.model.containment).innerWidth()
            };
            this.containerSize.left = (this.model.containment != "body") ? (bbdesigner$(this.model.containment).css("position") == "static") ? (bbdesigner$(this.model.containment).offset().left - bbdesigner$(this.model.containment).offsetParent().offset().left) : 0 : 0;
            this.containerSize.top = (this.model.containment != "body") ? (bbdesigner$(this.model.containment).css("position") == "static") ? (bbdesigner$(this.model.containment).offset().top - bbdesigner$(this.model.containment).offsetParent().offset().top) : 0 : 0;
            childElement.left -= (this.model.containment != "body") ? ((bbdesigner$(this.model.containment).css("position") == "static") ? bbdesigner$(this.model.containment).offsetParent().offset().left : bbdesigner$(this.model.containment).offset().left) : 0;
            childElement.top -= (this.model.containment != "body") ? ((bbdesigner$(this.model.containment).css("position") == "static") ? bbdesigner$(this.model.containment).offsetParent().offset().top : bbdesigner$(this.model.containment).offset().top) : 0;
            this.targetPos.left = childElement.left;
            this.targetPos.top = childElement.top;
        };
        BoldBIDashboardTooltip.prototype._setHeight = function (val) {
            this.model.height = val;
            (!isNaN(+val) && isFinite(val)) ? bbdesigner$(this.tooltip).css("height", val + "px") : bbdesigner$(this.tooltip).css("height", val);
            this.tooltipPos.height = bbdesigner$(this.tooltip).outerHeight();
        };
        BoldBIDashboardTooltip.prototype._setWidth = function (val) {
            this.model.width = val;
            if (this.model.width != "auto") {
                val = (!isNaN(+val) && isFinite(val)) ? val + "px" : val;
                bbdesigner$(this.tooltip).css("max-width", val);
                bbdesigner$(this.tooltip).css("min-width", "0px");
            }
            bbdesigner$(this.tooltip).css("width", val);
            this.tooltipPos.height = bbdesigner$(this.tooltip).outerHeight();
        };
        BoldBIDashboardTooltip.prototype._setRTL = function (val) {
            this.model.enableRTL = val;
            val ? this.tooltip.addClass("e-rtl") : this.tooltip.removeClass("e-rtl");
        };
        BoldBIDashboardTooltip.prototype._setSkin = function (skin) {
            if (this.model.cssClass != skin) {
                this.tooltip.removeClass(this.model.cssClass).addClass(skin);
                this.model.cssClass = skin;
            }
        };
        BoldBIDashboardTooltip.prototype._roundedCorner = function (val) {
            (this.model.showRoundedCorner) ? this.tooltip.addClass("e-corner") : this.tooltip.removeClass("e-corner");
        };
        BoldBIDashboardTooltip.prototype._renderArrow = function () {
            if (BoldBIDashboard.isNullOrUndefined(this.tip)) {
                this.tip = BoldBIDashboard.buildTag('div.e-arrowTip', " ", { 'id': this.id + "_eTip" }, {});
                bbdesigner$(this.tip).append("<div class='e-arrowTipOuter'></div>").append("<div class='e-arrowTipInner'></div>");
                bbdesigner$(this.tip).insertBefore(this.tooltipInter);
            }
        };
        BoldBIDashboardTooltip.prototype._adjustArrow = function (position) {
            var leftValue, topValue, tooltipWidth = bbdesigner$(this.tooltip).width(), tooltipHeight = bbdesigner$(this.tooltip).height();
            var positionTooltip = position.stem, positionTarget = position.target;
            var arrow = { "tipHeight": 0, "tipWidth": 0 };
            if (positionTarget.horizontal == "right" || positionTarget.horizontal == "left") {
                leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : (positionTooltip.horizontal == "right") ? tooltipWidth : ((tooltipWidth) / 2 - (this.tipSize.width / 2));
                if (positionTooltip.horizontal != "center")
                    topValue = (positionTooltip.vertical == "top") ? 5 : (positionTooltip.vertical == "center") ? ((tooltipHeight / 2) - (this.tipSize.width / 2)) : ((tooltipHeight - 5) - this.tipSize.width);
                else
                    topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((this.tooltipPos.height / 2) - (this.tipSize.width / 2));
                arrow = this._arrowBinding(position, "horizontal");
            }
            else {
                topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((tooltipHeight / 2) - (this.tipSize.width / 2));
                if (positionTooltip.vertical == "center")
                    leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : tooltipWidth;
                else
                    leftValue = (positionTooltip.horizontal == "left") ? 10 : (positionTooltip.horizontal == "center") ? ((this.tooltipPos.width) / 2 - (this.tipSize.width / 2)) : ((tooltipWidth - 10) - this.tipSize.width);
                arrow = this._arrowBinding(position, "vertical");
            }
            this.arrowValue.left = leftValue;
            this.arrowValue.top = topValue;
            bbdesigner$(this.tip).css({ height: arrow.tipHeight + "px", width: arrow.tipWidth + "px", left: leftValue + "px", top: topValue + "px", display: (positionTooltip.horizontal == "center" && positionTooltip.vertical == "center") ? "none" : "block" });
        };
        BoldBIDashboardTooltip.prototype._arrowBinding = function (position, arrowType) {
            var positionTooltip = position.stem, condition = (arrowType == "horizontal") ? (positionTooltip.horizontal != "center") : (positionTooltip.vertical == "center");
            var tipWidth, tipHeight, borderColor = bbdesigner$(this.tooltip).css("border-top-color"), backgroudColor = bbdesigner$(this.tooltip).css("background-color"), arrowOuterSize = this.model.tip.size.height, arrowInterSize = this.model.tip.size.height - 1, arrowCalculation = { "border-top": "none", "border-bottom": "none", "border-right": "none", "border-left": "none" };
            if (condition) {
                tipWidth = this.model.tip.size.height;
                tipHeight = this.model.tip.size.width;
                bbdesigner$(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "horizontal"));
                bbdesigner$(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "horizontal"));
            }
            else {
                tipWidth = this.model.tip.size.width;
                tipHeight = this.model.tip.size.height;
                bbdesigner$(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "vertical"));
                bbdesigner$(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "vertical"));
            }
            return { tipHeight: tipHeight, tipWidth: tipWidth };
        };
        BoldBIDashboardTooltip.prototype._arrow = function (position, size, color, arrowCalculation, arrowType) {
            var positionTooltip = position.stem, innerLeft = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? "0px" : "1px" : "1px", innerTop = (arrowType == "horizontal") ? "1px" : (positionTooltip.vertical == "bottom") ? "0px" : "1px";
            arrowCalculation["border-top"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "bottom") ? (size + "px solid " + color) : "none";
            arrowCalculation["border-bottom"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "top") ? (size + "px solid " + color) : "none";
            arrowCalculation["border-right"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "left") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
            arrowCalculation["border-left"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
            if (size == this.model.tip.size.height - 1) {
                arrowCalculation["left"] = innerLeft;
                arrowCalculation["top"] = innerTop;
            }
            return arrowCalculation;
        };
        BoldBIDashboardTooltip.prototype._iconRender = function () {
            if (this.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.Sticky) {
                if (!BoldBIDashboard.isNullOrUndefined(this.tooltipClose))
                    bbdesigner$(this.tooltipClose).remove();
                this.tooltipClose = BoldBIDashboard.buildTag("div .e-icon", " ", {}, { 'id': "_closeIcon" });
                (this.model.title != null) ? bbdesigner$(this.tooltipClose).insertAfter(this.tooltipTitle).addClass("e-close") : bbdesigner$(this.tooltipClose).insertBefore(this.tooltipInter).addClass("e-cross-circle");
                this._on(bbdesigner$(this.tooltipClose), "click", this._hideTooltip);
            }
        };
        BoldBIDashboardTooltip.prototype._renderTarget = function () {
            this.targetElement = bbdesigner$(this.element).find(this.model.target);
            for (var i = 0; i < this.targetElement.length; i++) {
                if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$(this.targetElement[i]).attr("title"))) {
                    this.targetElement[i].setAttribute("data-content", this.targetElement[i].title);
                    this.targetElement[i].removeAttribute("title");
                }
            }
        };
        BoldBIDashboardTooltip.prototype._tooltipContent = function () {
            this.tooltipContent = BoldBIDashboard.buildTag('div.e-tipcontent e-def', "", {}, { 'id': this.id + '_content' });
            bbdesigner$(this.tooltipContent).html(this.model.content).addClass("e-def");
            (this.model.title != null) ? bbdesigner$(this.tooltipContent).insertAfter(this.tooltipHeader) : bbdesigner$(this.tooltipContent).appendTo(this.tooltipInter);
        };
        BoldBIDashboardTooltip.prototype._positionElement = function (target) {
            this.tooltipPos.width = bbdesigner$(this.tooltip).outerWidth();
            this.tooltipPos.height = bbdesigner$(this.tooltip).outerHeight();
            this.targetPos.width = bbdesigner$(target).outerWidth();
            this.targetPos.height = bbdesigner$(target).outerHeight();
            this._containerCalc(target);
            if (this.model.associate == BoldBIDashboard.Tooltip.Associate.Window)
                this._browserPosition();
            else if (this.model.associate == BoldBIDashboard.Tooltip.Associate.Axis)
                this._axisPosition();
            else if (this.model.associate == BoldBIDashboard.Tooltip.Associate.Target)
                this._tooltipPosition(this.model.position);
            if (this.model.collision != BoldBIDashboard.Tooltip.Collision.None && this.model.associate == BoldBIDashboard.Tooltip.Associate.Target)
                this._calcCollision(this.model.position, target);
        };
        BoldBIDashboardTooltip.prototype._browserPosition = function () {
            if (this.model.containment == "body") {
                this.containerSize = {
                    height: bbdesigner$(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight,
                    width: bbdesigner$(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth
                };
                var position = bbdesigner$.extend(true, {}, this.model.position);
                var calPosition = { position: "absolute", left: "auto", top: "auto", bottom: "auto", right: "auto" }, offsetTop, offsetLeft;
                if (!BoldBIDashboard.isNullOrUndefined(this.tip))
                    bbdesigner$(this.tip).css({ "display": "none" });
                (this.model.position.target.horizontal == "right") ? calPosition.right = 0 : (this.model.position.target.horizontal == "left") ? calPosition.left = 0 : (calPosition.left = (this.containerSize.width / 2) - (this.tooltipPos.width / 2));
                (this.model.position.target.vertical == "top") ? (calPosition.top = 0) : (this.model.position.target.vertical == "center") ? (calPosition.top = ((this.containerSize.height / 2) - (this.tooltipPos.height / 2))) : calPosition.bottom = 0;
                if (this.model.showShadow)
                    this._shadowEffect(this.model.showShadow, position);
                bbdesigner$(this.tooltip).css(calPosition);
            }
        };
        BoldBIDashboardTooltip.prototype._tooltipMove = function (event) {
            if (this.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.None && this.model.enabled) {
                var proxy = this;
                if (this._isCancel)
                    return;
                if (this.model.associate == BoldBIDashboard.Tooltip.Associate.MouseFollow)
                    this._mousePosition(event);
                else if (this.model.associate == BoldBIDashboard.Tooltip.Associate.MouseEnter) {
                    clearTimeout(this.mouseTimer);
                    this.mouseTimer = setTimeout(function () {
                        if (proxy.isTrack)
                            proxy._mousePosition(event);
                    }, 300);
                }
            }
        };
        BoldBIDashboardTooltip.prototype._mousePosition = function (event) {
            var eventPageX, eventPageY;
            if (event.type == "touchstart") {
                event.preventDefault();
                eventPageX = event.touches[0].pageX;
                eventPageY = event.touches[0].pageY;
            }
            else if (event.type == "mousemove") {
                eventPageX = event.pageX;
                eventPageY = event.pageY;
            }
            this.isCollision = true;
            this._containerCalc(event.currentTarget);
            var tipGapX = 0, tipGapY = 0, tipSize = 0, positionTooltip = bbdesigner$.extend(true, {}, this.model.position.stem), position = bbdesigner$.extend(true, {}, this.model.position), containerElement = { left: 0, top: 0 }, calcPosition = { left: eventPageX, top: eventPageY }, childElement = { left: eventPageX, top: eventPageY }, containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            var targetLeft = (this.model.containment != "body") ? (eventPageX - bbdesigner$(this.model.containment).offset().left) : eventPageX, targetTop = (this.model.containment != "body") ? (eventPageY - bbdesigner$(this.model.containment).offset().top) : eventPageY;
            position.target.horizontal = position.target.vertical = "center";
            if (this.model.containment != "body")
                containerElement = (bbdesigner$(this.model.containment).css("position") == "static") ? bbdesigner$(this.model.containment).offsetParent().offset() : bbdesigner$(this.model.containment).offset();
            childElement.left -= containerElement.left;
            childElement.top -= containerElement.top;
            while (this.isCollision) {
                calcPosition = bbdesigner$.extend(true, {}, childElement);
                var tipY = (this.model.isBalloon) ? (positionTooltip.vertical == "top" || positionTooltip.vertical == "bottom") ? (5 + (this.tipSize.height / 2)) : 0 : 0, tipX = (this.model.isBalloon) ? (positionTooltip.horizontal == "right" || positionTooltip.horizontal == "left") ? (10 + (this.tipSize.width / 2)) : 0 : 0;
                tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : 7;
                tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : 10;
                tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal != "center") ? this.model.tip.size.height : (positionTooltip.vertical != "center") ? this.model.tip.size.height : 0 : 2;
                calcPosition.left += (positionTooltip.horizontal == "right") ? -this.tooltipPos.width : (positionTooltip.horizontal == "left") ? 0 : -(this.tooltipPos.width / 2);
                calcPosition.top += (positionTooltip.vertical == "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical == "top") ? 0 : -(this.tooltipPos.height / 2);
                calcPosition.left += (positionTooltip.vertical != "center") ? ((positionTooltip.horizontal == "right") ? tipX : (positionTooltip.horizontal == "left") ? -tipX : 0) : 0;
                calcPosition.left += (positionTooltip.vertical == "center") ? (positionTooltip.horizontal == "right") ? -(tipSize) : (positionTooltip.horizontal == "left") ? +(tipSize + tipGapX) : 0 : 0;
                calcPosition.top += (positionTooltip.vertical == "top") ? +(tipSize + tipGapY) : (positionTooltip.vertical == "bottom") ? -(tipSize) : 0;
                if (this.targetElement != event.currentTarget) {
                    this.targetElement = event.currentTarget;
                    if (calcPosition.left < containerLeft || (calcPosition.left + this.tooltipPos.width > (containerLeft + this.containerSize.width)))
                        this.positionTooltip.horizontal = (targetLeft >= this.tooltipPos.width) ? "right" : ((this.containerSize.width - targetLeft) >= this.tooltipPos.width) ? "left" : "center";
                    if (calcPosition.top < containerTop || ((calcPosition.top + this.tooltipPos.height) > (this.containerSize.height + containerTop)))
                        this.positionTooltip.vertical = (targetTop >= this.tooltipPos.height) ? "bottom" : ((this.containerSize.height - targetTop) >= this.tooltipPos.height) ? "top" : "center";
                }
                if (this.positionTooltip.horizontal != positionTooltip.horizontal || this.positionTooltip.vertical != positionTooltip.vertical) {
                    this.isCollision = true;
                    positionTooltip = bbdesigner$.extend(true, {}, this.positionTooltip);
                }
                else {
                    this.isCollision = false;
                    bbdesigner$(this.tooltip).css({ top: calcPosition.top + "px", left: calcPosition.left + "px", position: "absolute", right: "auto", bottom: "auto" });
                    position.stem = bbdesigner$.extend(true, {}, this.positionTooltip);
                    if (this.model.showShadow)
                        this._shadowEffect(this.model.showShadow, position);
                    if (this.model.isBalloon)
                        this._adjustArrow(position);
                    this._showTooltip();
                    if (this.model.associate == BoldBIDashboard.Tooltip.Associate.MouseEnter)
                        this.isTrack = false;
                    if (this.model.associate == BoldBIDashboard.Tooltip.Associate.MouseFollow) {
                        if (this.triggerEvents("tracking", { position: this.model.position, event: event }))
                            return;
                    }
                }
            }
        };
        BoldBIDashboardTooltip.prototype._axisPosition = function () {
            var position = bbdesigner$.extend(true, {}, this.model.position);
            if (typeof this.model.position.target.horizontal == 'number')
                var leftValue = (this.model.position.target.horizontal).toString();
            if (typeof this.model.position.target.vertical == 'number')
                var topValue = (this.model.position.target.vertical).toString();
            var offsetLeft = parseInt(leftValue), offsetTop = parseInt(topValue);
            if (!BoldBIDashboard.isNullOrUndefined(this.tip))
                bbdesigner$(this.tip).css({ "display": "none" });
            if (this.model.showShadow)
                this._shadowEffect(this.model.showShadow, position);
            if (this.model.isBalloon)
                this._adjustArrow(position);
            if (isFinite(offsetLeft) && isFinite(offsetTop))
                bbdesigner$(this.tooltip).css({ top: offsetTop, left: offsetLeft, position: "absolute" });
        };
        BoldBIDashboardTooltip.prototype._tooltipPosition = function (position) {
            var tipSize = 0, tipGap = 0, tipAdjustment = 0, positionTooltip = bbdesigner$.extend(true, {}, position.stem), positionTarget = bbdesigner$.extend(true, {}, position.target);
            var calcPosition = bbdesigner$.extend(true, {}, this.targetPos);
            var tipY = (positionTooltip.vertical === "top" || positionTooltip.vertical === "bottom") ? (5 + (this.tipSize.width / 2)) : 0, tipX = (positionTooltip.horizontal === "right" || positionTooltip.horizontal === "left") ? (10 + (this.tipSize.width / 2)) : 0, tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal !== "center") ? this.model.tip.size.height : (positionTooltip.vertical !== "center") ? this.model.tip.size.height : 0 : 0;
            var tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : (this.model.isBalloon) ? 0 : 2, tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : (this.model.isBalloon) ? 0 : 2;
            calcPosition.left += (positionTarget.horizontal === "right") ? this.targetPos.width : (positionTarget.horizontal === "left") ? 0 : (this.targetPos.width / 2);
            calcPosition.top += (positionTarget.vertical === "bottom") ? this.targetPos.height : (positionTarget.vertical === "top") ? 0 : (this.targetPos.height / 2);
            calcPosition.left += (positionTooltip.horizontal === "right") ? -this.tooltipPos.width : (positionTooltip.horizontal === "left") ? 0 : -(this.tooltipPos.width / 2);
            calcPosition.top += (positionTooltip.vertical === "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical === "top") ? 0 : -(this.tooltipPos.height / 2);
            calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : 0;
            calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0 : 0;
            calcPosition.left += (positionTarget.horizontal === "center" && positionTooltip.vertical !== "center") ? ((positionTooltip.horizontal === "right") ? tipX : (positionTooltip.horizontal === "left") ? -tipX : 0) : 0;
            calcPosition.top += (positionTarget.horizontal !== "center" && positionTooltip.horizontal !== "center") ? ((positionTooltip.vertical === "top") ? -tipY : (positionTooltip.vertical === "bottom") ? tipY : 0) : 0;
            calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : 0;
            calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0 : 0;
            this.tooltipPos.left = calcPosition.left;
            this.tooltipPos.top = calcPosition.top;
            if (this.model.collision === BoldBIDashboard.Tooltip.Collision.None) {
                if (this.model.isBalloon)
                    this._adjustArrow(position);
                this._shadowEffect(this.model.showShadow, position);
                bbdesigner$(this.tooltip).css({ "top": calcPosition.top + "px", "left": calcPosition.left + "px", position: "absolute" });
            }
        };
        BoldBIDashboardTooltip.prototype._calcCollision = function (position, target) {
            var position = bbdesigner$.extend(true, {}, position), newPosition = bbdesigner$.extend(true, {}, position), arrowSize = this.model.tip.size.height, isCollision = true;
            var targetLeft = (this.model.containment != "body") ? (bbdesigner$(target).offset().left - bbdesigner$(this.model.containment).offset().left) : bbdesigner$(target).offset().left, targetTop = (this.model.containment != "body") ? (bbdesigner$(target).offset().top - bbdesigner$(this.model.containment).offset().top) : bbdesigner$(target).offset().top;
            var availSpace = {
                topSpace: targetTop,
                rightSpace: this.containerSize.width - (targetLeft + this.targetPos.width),
                bottomSpace: this.containerSize.height - (targetTop + this.targetPos.height),
                leftSpace: targetLeft,
                centerRight: this.containerSize.width - (targetLeft + (this.targetPos.width / 2)),
                centerLeft: (targetLeft + (this.targetPos.width / 2)),
                centerTop: targetTop + (this.targetPos.height / 2),
                centerBottom: this.containerSize.height - (targetTop + (this.targetPos.height / 2)),
                tooltipWidth: this.tooltipPos.width + arrowSize,
                tooltipHeight: this.tooltipPos.height + arrowSize
            };
            if (this.model.collision === BoldBIDashboard.Tooltip.Collision.Fit)
                this._collisionFit(position, availSpace);
            else {
                while (isCollision) {
                    newPosition = this._collisionFlip(newPosition, availSpace);
                    if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical || newPosition.stem.horizontal != position.stem.horizontal || newPosition.stem.vertical != position.stem.vertical) {
                        this._tooltipPosition(newPosition);
                        position = bbdesigner$.extend(true, {}, newPosition);
                    }
                    else
                        isCollision = false;
                }
                if (!isCollision) {
                    if (this.model.collision == BoldBIDashboard.Tooltip.Collision.FlipFit)
                        this._collisionFit(newPosition, availSpace);
                    else {
                        this._adjustArrow(newPosition);
                        this._shadowEffect(this.model.showShadow, newPosition);
                        bbdesigner$(this.tooltip).css({ "top": this.tooltipPos.top + "px", "left": this.tooltipPos.left + "px", position: "absolute" });
                    }
                }
            }
        };
        BoldBIDashboardTooltip.prototype._collisionFlip = function (position, availSpace) {
            var tooltipPos = bbdesigner$.extend(true, {}, this.tooltipPos), newPosition = bbdesigner$.extend(true, {}, position);
            var scrollLeft = bbdesigner$(this.model.containment).scrollLeft(), scrollTop = bbdesigner$(this.model.containment).scrollTop();
            var containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            if ((tooltipPos.left + tooltipPos.width) > (containerLeft + this.containerSize.width + scrollLeft) || (tooltipPos.left < containerLeft)) {
                if (position.target.horizontal != "center")
                    newPosition.target.horizontal = (availSpace.leftSpace >= availSpace.tooltipWidth) ? "left" : (availSpace.rightSpace >= availSpace.tooltipWidth) ? "right" : "center";
                else
                    newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
            }
            if (tooltipPos.top < containerTop)
                newPosition.target.vertical = (availSpace.bottomSpace >= availSpace.tooltipHeight) ? "bottom" : "center";
            if ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))
                newPosition.target.vertical = (availSpace.topSpace >= availSpace.tooltipHeight) ? "top" : "center";
            if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical) {
                if (newPosition.target.horizontal == "center")
                    newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
                else
                    newPosition.stem.horizontal = (newPosition.target.horizontal == "right") ? "left" : "right";
            }
            if (newPosition.target.vertical != position.target.vertical || newPosition.target.horizontal != position.target.horizontal) {
                if (newPosition.target.vertical == "center")
                    newPosition.stem.vertical = (availSpace.centerTop >= availSpace.tooltipHeight) ? "bottom" : (availSpace.centerBottom >= availSpace.tooltipHeight) ? "top" : (availSpace.centerTop > availSpace.centerBottom) ? "bottom" : "top";
                else
                    newPosition.stem.vertical = (newPosition.target.vertical == "top") ? "bottom" : "top";
            }
            return newPosition;
        };
        BoldBIDashboardTooltip.prototype._collisionFit = function (position, availSpace) {
            var tooltipPos = bbdesigner$.extend(true, {}, this.tooltipPos), isHorizontalCollision = false, isVerticalCollision = false;
            var leftValue = 1, topValue = 1, arrowValue = null;
            var scrollLeft = bbdesigner$(this.model.containment).scrollLeft();
            var scrollTop;
            if (this.model.containment == "body") {
                scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
            }
            else {
                scrollTop = bbdesigner$(this.model.containment).scrollTop();
            }
            var containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            if (tooltipPos.left < containerLeft || ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft))) {
                leftValue = (tooltipPos.left < containerLeft) ? containerLeft : ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft)) ? (tooltipPos.left - ((tooltipPos.left + tooltipPos.width) - (this.containerSize.width + containerLeft))) : 1;
                isHorizontalCollision = true;
            }
            if (tooltipPos.top < containerTop || ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))) {
                topValue = (tooltipPos.top < containerTop) ? containerTop : ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop)) ? (tooltipPos.top - ((tooltipPos.top + tooltipPos.height) - (this.containerSize.height + containerTop))) : 1;
                isVerticalCollision = true;
            }
            bbdesigner$(this.tooltip).css({
                top: (topValue != 1) ? topValue + "px" : tooltipPos.top + "px",
                left: (leftValue != 1) ? leftValue + "px" : tooltipPos.left + "px",
                position: "absolute"
            });
            this._adjustArrow(position);
            arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top, height: this.model.tip.size.height, width: this.model.tip.size.width, display: bbdesigner$(this.tip).css("display") };
            this.tooltipPos.top = topValue = (topValue != 1) ? topValue : tooltipPos.top;
            this.tooltipPos.left = leftValue = (leftValue != 1) ? leftValue : tooltipPos.left;
            var tooltipWidth = bbdesigner$(this.tooltip).width(), tooltipHeight = bbdesigner$(this.tooltip).height();
            if (isHorizontalCollision || isVerticalCollision && (arrowValue.display != "none")) {
                if (this.model.isBalloon) {
                    if (isHorizontalCollision)
                        this.arrowValue.left = this._horizontalAdjustment(position, availSpace);
                    if (isVerticalCollision)
                        this.arrowValue.top = this._verticalAdjustment(position, availSpace);
                }
                if (this.arrowValue.left == -this.model.tip.size.height || this.arrowValue.left == tooltipWidth) {
                    bbdesigner$(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "block" });
                }
                else if (this.arrowValue.top == -this.model.tip.size.height || this.arrowValue.top == tooltipHeight) {
                    bbdesigner$(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "block" });
                }
                else {
                    bbdesigner$(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "none" });
                }
            }
            this._shadowEffect(this.model.showShadow, position);
        };
        BoldBIDashboardTooltip.prototype._horizontalAdjustment = function (position, availSpace) {
            var arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top };
            bbdesigner$(this.tooltip).css({ "display": "block" });
            var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
            var arrowLeft = (position.target.horizontal != "center" && position.stem.horizontal == "left") ? bbdesigner$(this.tip).offset().left : (position.target.horizontal != "center" && position.stem.horizontal == "right") ? bbdesigner$(this.tip).offset().left + arrowSize : bbdesigner$(this.tip).offset().left;
            bbdesigner$(this.tooltip).css({ "display": "none" });
            if ((arrowLeft > availSpace.leftSpace) && ((arrowLeft + arrowSize) < (availSpace.leftSpace + this.targetPos.width)))
                return arrowValue.left;
            else {
                if ((arrowLeft > (availSpace.leftSpace + this.targetPos.width)) || (arrowLeft < availSpace.leftSpace))
                    arrowValue.left = (availSpace.leftSpace + this.targetPos.width / 2) - parseInt(this.tooltipPos.left.toString());
                return arrowValue.left;
            }
        };
        BoldBIDashboardTooltip.prototype._verticalAdjustment = function (position, availSpace) {
            var arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top, height: this.model.tip.size.height, width: this.model.tip.size.width, display: this.arrowValue.display };
            bbdesigner$(this.tooltip).css({ "display": "block" });
            var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
            var arrowTop = (position.target.horizontal == "center" && position.stem.vertical == "top") ? bbdesigner$(this.tip).offset().top : bbdesigner$(this.tip).offset().top + arrowSize;
            bbdesigner$(this.tooltip).css({ "display": "none" });
            if ((arrowTop > availSpace.topSpace) && (arrowTop < (availSpace.topSpace + this.targetPos.height)))
                return arrowValue.top;
            else {
                if ((arrowTop < availSpace.topSpace) || ((arrowTop + arrowSize) > (availSpace.topSpace + this.targetPos.height)))
                    arrowValue.top = (availSpace.topSpace + this.targetPos.height / 2) - parseInt(this.tooltipPos.top.toString());
                return arrowValue.top;
            }
        };
        BoldBIDashboardTooltip.prototype._createHeader = function () {
            if (this.model.title != null) {
                if (BoldBIDashboard.isNullOrUndefined(this.tooltipTitle))
                    this._createTitle();
                if (BoldBIDashboard.isNullOrUndefined(this.tooltipContent))
                    bbdesigner$(this.tooltipHeader).appendTo(this.tooltipInter).addClass("e-tooltipHeader");
                else
                    bbdesigner$(this.tooltipHeader).insertBefore(this.tooltipContent).addClass("e-tooltipHeader");
            }
            if (this.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.Sticky)
                this._iconRender();
        };
        BoldBIDashboardTooltip.prototype._hideTooltip = function () {
            var speed;
            this._isHidden = true;
            speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Fade) ? 800 : 0;
            if (this.model.enabled == true && bbdesigner$(this.tooltip).css("display") == 'block') {
                if (this.triggerEvents("beforeClose", {}))
                    return;
                (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Fade) ? bbdesigner$(this.tooltip).fadeOut(speed) : (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Slide) ? bbdesigner$(this.tooltip).slideUp(speed) : bbdesigner$(this.tooltip).css({ display: "none" });
                if (bbdesigner$(this.tooltip).css("display") == 'none')
                    bbdesigner$(this.tooltip).attr('aria-hidden', 'true').removeClass("e-customAnimation");
                if (this.triggerEvents("close", {}))
                    return;
            }
        };
        BoldBIDashboardTooltip.prototype._showTooltip = function () {
            if (this._isHidden) {
                var speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Fade) ? 800 : 0;
                this._isHidden = false;
                if (bbdesigner$(this.tooltip).css("display") == 'none' && this.model.enabled == true) {
                    (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Fade) ? bbdesigner$(this.tooltip).fadeIn(speed) : (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.Slide) ? bbdesigner$(this.tooltip).slideDown(speed) : bbdesigner$(this.tooltip).css({ display: "block" });
                    if (bbdesigner$(this.tooltip).css("display") == 'block') {
                        bbdesigner$(this.tooltip).attr('aria-hidden', 'false').css({ zIndex: BoldBIDashboard.getMaxZindex() + 1 });
                        if (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.None)
                            bbdesigner$(this.tooltip).addClass("e-customAnimation");
                        var elements = this._getScrollableParents();
                        this._on(elements, "scroll", this._hideTooltip);
                    }
                    if (this.triggerEvents("open", {}))
                        return;
                }
            }
        };
        BoldBIDashboardTooltip.prototype._getScrollableParents = function () {
            return bbdesigner$(this.element).parentsUntil("html").filter(function () {
                return bbdesigner$(this).css("overflow") != "visible";
            }).add(bbdesigner$(window));
        };
        BoldBIDashboardTooltip.prototype._tooltipAuto = function () {
            var proxy = this;
            this.timer = setTimeout(function () {
                proxy._hideTooltip();
            }, proxy.model.autoCloseTimeout);
        };
        BoldBIDashboardTooltip.prototype._beforeOpenTooltip = function (event) {
            this.positionTooltip = bbdesigner$.extend(true, {}, this.model.position.stem);
            this.positionTarget = bbdesigner$.extend(true, {}, this.model.position.target);
            this.targetElement = this.element;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.target)) {
                if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$(event.currentTarget).attr('data-content'))) {
                    this.model.content = bbdesigner$(event.currentTarget).attr('data-content');
                    this._setContent(this.model.content);
                }
            }
        };
        BoldBIDashboardTooltip.prototype._targetHover = function (event) {
            this.isTrack = true;
            if (this.model.enabled) {
                if (this._isHidden || ((BoldBIDashboard.browserInfo().name == 'msie' || BoldBIDashboard.browserInfo().name == 'edge') && this.model.associate == BoldBIDashboard.Tooltip.Associate.MouseFollow)) {
                    this.tooltip.stop(true, true);
                    if (this.triggerEvents("beforeOpen", { event: event })) {
                        this._isCancel = true;
                        return;
                    }
                    this._isCancel = false;
                    this._beforeOpenTooltip(event);
                    if (this.model.associate != BoldBIDashboard.Tooltip.Associate.MouseEnter && this.model.associate != BoldBIDashboard.Tooltip.Associate.MouseFollow) {
                        (!BoldBIDashboard.isNullOrUndefined(this.model.target)) ? this._positionElement(event.currentTarget) : this._positionElement(this.element);
                        clearTimeout(this.timer);
                        this._showTooltip();
                        if (this.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.Auto)
                            this._tooltipAuto();
                        (event.type == "click") ? this.triggerEvents("click", { event: event }) : this.triggerEvents("hover", { event: event });
                    }
                    else
                        this.isTrack = true;
                }
                else if (!BoldBIDashboard.isNullOrUndefined(this.model.target))
                    this._positionElement(event.currentTarget);
            }
        };
        BoldBIDashboardTooltip.prototype._onMouseOut = function (event) {
            if (this.model.enabled && !this._isHidden) {
                if (this.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.None)
                    this._hideTooltip();
                clearTimeout(this.mouseTimer);
            }
            this.isTrack = false;
        };
        BoldBIDashboardTooltip.prototype._onTooltipMouseEnter = function (event) {
            var proxy = this;
            if (this.model.enabled) {
                if (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.None)
                    bbdesigner$(proxy.tooltip).css({ display: "block" });
            }
        };
        BoldBIDashboardTooltip.prototype._onTooltipMouseLeave = function (event) {
            var proxy = this;
            if (this.model.enabled) {
                if (this.model.animation.effect == BoldBIDashboard.Tooltip.Effect.None) {
                    if (proxy.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.None)
                        bbdesigner$(proxy.tooltip).css({ display: "none" });
                }
            }
        };
        BoldBIDashboardTooltip.prototype._docTouchEndHandler = function (e) {
            if (!bbdesigner$(e.target).closest('.e-tooltip').length && this.model.closeMode == BoldBIDashboard.Tooltip.CloseMode.None)
                this._hideTooltip();
        };
        BoldBIDashboardTooltip.prototype._keyDown = function (event) {
            var code = (event.keyCode) ? event.keyCode : (event.which) ? event.which : event.charCode;
            if (this.model.enabled) {
                switch (code) {
                    case 27:
                        event.preventDefault();
                        this._hideTooltip();
                        break;
                }
            }
        };
        return BoldBIDashboardTooltip;
    }(BoldBIDashboard.WidgetBase));
    window.BoldBIDashboard.widget("BoldBIDashboardTooltip", "BoldBIDashboard.Tooltip", new BoldBIDashboardTooltip());
    window["BoldBIDashboardTooltip"] = null;
})(bbdesigner$);
BoldBIDashboard.Tooltip.CloseMode = {
    Auto: "auto",
    None: "none",
    Sticky: "sticky"
};
BoldBIDashboard.Tooltip.Effect = {
    Slide: "slide",
    Fade: "fade",
    None: "none"
};
BoldBIDashboard.Tooltip.Trigger = {
    Hover: "hover",
    Click: "click",
    Focus: "focus"
};
BoldBIDashboard.Tooltip.Collision = {
    Flip: "flip",
    FlipFit: "flipfit",
    None: "none",
    Fit: "fit"
};
BoldBIDashboard.Tooltip.Associate = {
    Window: "window",
    MouseFollow: "mousefollow",
    MouseEnter: "mouseenter",
    Target: "target",
    Axis: "axis"
};;
/**
* @fileOverview Plugin to craete a Timepicker with the Html input element
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardTimePicker", "BoldBIDashboard.TimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _rootCSS: "e-timepicker",
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },
        _requiresID: true,

        defaults: {

            cssClass: "",

            timeFormat: "",

            value: null,

            enableAnimation: true,

            locale: "en-US",

            htmlAttributes: {},

            readOnly: false,

            showPopupButton: true,

            enableStrictMode: false,

            interval: 30,

            hourInterval: 1,

            minutesInterval: 1,

            secondsInterval: 1,

            height: "",

            width: "",

            minTime: "12:00 AM",

            maxTime: "11:59 PM",

            showRoundedCorner: false,

            enableRTL: false,

            popupHeight: "191px",

            popupWidth: "auto",

            enabled: true,

            enablePersistence: false,

            disableTimeRanges: null,

            validationRules: null,

            validationMessages: null,

            focusIn: null,

            focusOut: null,

            beforeChange: null,

            change: null,

            select: null,

            create: null,

            destroy: null,

            beforeOpen: null,

            open: null,

            close: null
        },


        dataTypes: {
            timeFormat: "string",
            minTime: "string",
            maxTime: "string",
            readOnly: "boolean",
            interval: "number",
            showPopupButton: "boolean",
            locale: "string",
            hourInterval: "number",
            minutesInterval: "number",
            secondsInterval: "number",
            enabled: "boolean",
            enablePersistence: "boolean",
            enableAnimation: "boolean",
            enableStrictMode: "boolean",
            disableTimeRanges: "data",
            htmlAttributes: "data",
            validationRules: "data",
            validationMessages: "data",
        },

        observables: ["value"],

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.element.prop("disabled", false);
                this.model.enabled = true;
                this.wrapper.removeClass('e-disable');
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (this.model.showPopupButton) {
                    this.timeIcon.removeClass("e-disable").attr("aria-disabled", false);
                    if (this.popupList) this.popupList.removeClass("e-disable").attr("aria-disabled", false);
                }
                if (this._isIE8) this.timeIcon.children().removeClass("e-disable");
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.element.attr("disabled", "disabled");
                this.wrapper.addClass('e-disable');
                this.element.addClass("e-disable").attr("aria-disabled", true);
                if (this.model.showPopupButton) {
                    this.timeIcon.addClass("e-disable").attr("aria-disabled", true);
                    if (this.popupList) this.popupList.addClass("e-disable").attr("aria-disabled", true);
                }
                if (this._isIE8) this.timeIcon.children().addClass("e-disable");
                this._hideResult();
            }
        },


        getValue: function () {
            return this.element.val();
        },


        setCurrentTime: function () {
            if (!this.model.readOnly) this._setMask();
        },

        show: function () {
            (!this.showDropdown && !this._getInternalEvents) && this._showResult();
        },

        hide: function () {
            (this.showDropdown) && this._hideResult();
        },


        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },

        _timeFormat: function (format) {
            if (!format)
                format = BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard.patterns.t;
            var validatedformat = this._validateTimeFormat(format);
            if (validatedformat) {
                this.model.timeFormat = validatedformat;
                // Only change the format when model is not null.   
                this.model.minTime = BoldBIDashboard.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
                this.model.maxTime = BoldBIDashboard.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);

                if (this.model.value) {
                    this._setModelOption = true;
                    this.model.value = this._localizeTime(this.model.value);
                    this.element.val(this.model.value);
                }
                else {
                    this._setModelOption = false;
                    var timeValue = this._localizeTime(this.element.val());
                    if (timeValue && this._checkMinMax(timeValue)) {
                        this.model.value = timeValue;
                        this.element.val(timeValue);
                    }
                }
            }
            return validatedformat;
        },

        _getTimeFormat: function () {
            if (this._prevTimeFormat)
                this.model.timeFormat = BoldBIDashboard.preferredCulture(this.model.locale).calendar.patterns.t || "h:mm tt";
            this.seperator = this._getSeperator();
        },

        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            if (this.popupList) this.popupList.removeClass(this.model.cssClass).addClass(skin);
        },

        _localize: function (culture) {
            var currentTime = this._createObject(this.model.value, true);
            this.model.locale = culture;
            this._getTimeFormat();

            this.model.minTime = BoldBIDashboard.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
            this.model.maxTime = BoldBIDashboard.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);

            if (currentTime) {
                this.model.value = this._localizeTime(currentTime);
                this.element.val(this.model.value);
            }
            else {
                currentTime = this._localizeTime(this.element.val());
                if (currentTime && this._checkMinMax(currentTime)) {
                    this.model.value = currentTime;
                    this.element.val(currentTime);
                }
            }
            this._getAmPm();
        },
        _setLocalize: function (culture) {
            var culture = BoldBIDashboard.preferredCulture(culture);
            if (culture) {
                this.model.locale = culture.name == "en" ? "en-US" : culture.name;
                if (!BoldBIDashboard.isNullOrUndefined(this._options) && (BoldBIDashboard.isNullOrUndefined(this._options.timeFormat) || (!this._options.timeFormat)))
                    this.model.timeFormat = BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard.patterns.t;
                    this._prevTimeFormat = (BoldBIDashboard.isNullOrUndefined(this._options.timeFormat)||this._options.timeFormat=="") ? true : false;
            }
        },
        _updateInput: function () {
            if (BoldBIDashboard.isNullOrUndefined(this._options)) return;
            var value = this._localizeTime(this._options.value);
            if (!BoldBIDashboard.isNullOrUndefined(value))
                if (typeof value === "string" && this.model.enableStrictMode && !this.model.value) {
                    this.element.val(this._options.value);
                    this.isValidState = (this.element.val() == "") ? true : false;
                    this._checkErrorClass();
                }
        },
        _createMinMaxObj: function () {
            // create minTime object
            this._minTimeObj = this._createObject(this.model.minTime);
            if (!this._minTimeObj)
                this.model.minTime = BoldBIDashboard.format(this._createObject(new Date().setHours(0, 0, 0, 0)), this.model.timeFormat, this.model.locale);

            // create maxTime object
            this._maxTimeObj = this._createObject(this.model.maxTime);
            if (!this._maxTimeObj)
                this.model.maxTime = BoldBIDashboard.format(this._createObject(new Date().setHours(23, 59, 59, 59)), this.model.timeFormat, this.model.locale);
        },
        _setMinMax: function () {
            var minVal = new Date().setHours(0, 0, 0, 0);
            var maxval = new Date().setHours(23, 59, 59, 59);
            if (!BoldBIDashboard.isNullOrUndefined(this._options) && BoldBIDashboard.isNullOrUndefined(this._options.minTime))
                this.model.minTime = BoldBIDashboard.format(this._createObject(minVal), this.model.timeFormat, this.model.locale);
            if (!BoldBIDashboard.isNullOrUndefined(this._options) && BoldBIDashboard.isNullOrUndefined(this._options.maxTime))
                this.model.maxTime = BoldBIDashboard.format(this._createObject(maxval), this.model.timeFormat, this.model.locale);
            this._createMinMaxObj();
        },
        _init: function (options) {
            this._options = options;
            this._cloneElement = this.element.clone();
            this._ISORegex();
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
            this._updateInput();
            this._updateTextbox();
            if (this.model.validationRules != null) {
                this._initTimeValidator();
                this._setTimeValidation();
            }

        },
        _updateTextbox: function () {
            if (this._options === undefined || (this._options.value === undefined && !this.model.value))
                this._setTime(this._localizeTime(this.model.minTime));
        },

        _setMinMaxTime: function (prev, options) {
            if (!BoldBIDashboard.isNullOrUndefined(options["minTime"]) && bbdesigner$.trim(options["minTime"]) && this._isValid(options["minTime"])) {
                this.model.minTime = options["minTime"];
                this._minTimeObj = this._createObject(this.model.minTime);
                this._validateTimes();
            }
            if (!BoldBIDashboard.isNullOrUndefined(options["maxTime"]) && bbdesigner$.trim(options["maxTime"]) && this._isValid(options["maxTime"])) {
                this.model.maxTime = options["maxTime"];
                this._maxTimeObj = this._createObject(this.model.maxTime);
                this._validateTimes();
            }

            this._validateMinMax();
            this._createMinMaxObj();
            if (!BoldBIDashboard.isNullOrUndefined(options["minTime"])) options["minTime"] = this.model.minTime;
            if (!BoldBIDashboard.isNullOrUndefined(options["maxTime"])) options["maxTime"] = this.model.maxTime;
            if (!this._checkMinMax(this.model.value)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                        this.model.value = this.model.minTime;
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                        this.model.value = this.model.maxTime;
                }
                else {
                    this.isValidState = false;
                    this.model.value = null;
                }
            }
            if (prev !== this.model.value && this._isValid(this.model.value, true))
                this.element.val(this.model.value);
        },
        _setModel: function (options) {
            var change = false, prev = this.model.value;
            if (BoldBIDashboard.isNullOrUndefined(this.popupList)) this._renderDropdown();
            for (var option in options) {
                switch (option) {
                    case "timeFormat":
                        var prevTime = this._createObject(this.model.value);
                        this._preTimeformat = this.model.timeFormat;
                        var newFormat = this._timeFormat(options[option]);
                        options[option] = this.model.timeFormat;
                        if (newFormat)
                            this.seperator = this._getSeperator();
                        var currentTime = this._createObject(this.model.value);
                        change = (+prevTime === +currentTime) ? false : true;
                        break;
                    case "locale":
                        var prevTime = this._createObject(this.model.value);
                        this._localize(options[option]);
                        this.model.minTime = BoldBIDashboard.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
                        this.model.maxTime = BoldBIDashboard.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);
                        var currentTime = this._createObject(this.model.value);
                        change = (+prevTime === +currentTime) ? false : true;
                        break;
                    case "interval":
                        this.model.interval = options[option];
                        break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "height":
                        this._setHeight(options[option]); break;
                    case "width":
                        this.wrapper.width(options[option]);
                        this._setListWidth();
                        break;
                    case "value":
                        if (BoldBIDashboard.isPlainObject(options[option])) options[option] = null;
                        this.model.value = BoldBIDashboard.format(this._createObject(options[option], true), this.model.timeFormat, this.model.locale);
                        this._ensureValue();
                        this._enableMask();
                        if (this.model.enableStrictMode && !this._isValid(options[option], true)) {
                            var tval = this._isValid(options[option]) ? this._localizeTime(options[option]) : options[option];
                            this.element.val(tval);
                        }
                        options[option] = this.model.value;
                        change = true;
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initTimeValidator();
                            this._setTimeValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initTimeValidator();
                            this._setTimeValidation();
                        }
                        break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "enabled": if (options[option]) this.enable(); else this.disable(); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "disableTimeRanges":
                        this.model.disableTimeRanges = options[option];
                        this._initStartEnd();
                        this.model.value = BoldBIDashboard.format(this._createObject(this.element.val(), true), this.model.timeFormat, this.model.locale);
                        this._ensureValue();
                        this._enableMask();
                        if (this.model.enableStrictMode && !this._isValid(this.element.val(), true))
                            this.element.val(this.element.val());
                        change = true;
                }
            }
            if (!BoldBIDashboard.isNullOrUndefined(options["minTime"]) || !BoldBIDashboard.isNullOrUndefined(options["maxTime"])) {
                this._setMinMaxTime(prev, options);
                change = true;
            }
            if (!BoldBIDashboard.isNullOrUndefined(options["showPopupButton"]))
                this._showButton(options[option]);
            else if (this.model.showPopupButton && (newFormat || !BoldBIDashboard.isNullOrUndefined(options["minTime"]) || !BoldBIDashboard.isNullOrUndefined(options["maxTime"]) ||
                   !BoldBIDashboard.isNullOrUndefined(options["locale"]) || !BoldBIDashboard.isNullOrUndefined(options["interval"]) || !BoldBIDashboard.isNullOrUndefined(options["disableTimeRanges"]))) {
                this._reRenderDropdown();
            }
            if (change) {
                this._raiseChangeEvent(prev, true);
                options["value"] = this.model.value;
            }
            this._checkErrorClass();
        },


        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-input").removeAttr("ondragstart draggable aria-atomic aria-live aria-readonly").val(this.element.attr("value"));
            if (!this._cloneElement.attr('name')) this.element.removeAttr('name');
            if (this.popupList) this.popupList.remove();
        },

        _initialize: function () {
            this.target = this.element[0];
            this.timeIcon = null;
            this._disabledItems = [];
            this.popupList = null;
            this.focused = false;
            this.start = 0;
            this.end = 0;
            this.min = null;
            this.max = null;
            this.incomplete = false;
            this.downPosition = 0;
            this._setLocalize(this.model.locale);
            this._setMinMax();
            this._getAmPm();
            this.showDropdown = false;
            this._activeItem = 0;
            this.isValidState = true;
            this._manualFocus = false;
            this._isIE7 = this._checkIE7();
            this._initStartEnd();
            if (BoldBIDashboard.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._isIE8 = (BoldBIDashboard.browserInfo().name == "msie") && (BoldBIDashboard.browserInfo().version == "8.0") ? true : false;
            // _getInternalEvents is used when TimePicker used as a subcontrol of DateTimePicker 
            this._getInternalEvents = false;
            this._dateTimeInternal = false;
            if (!this.model.timeFormat) this._getTimeFormat();
            else this.seperator = this._getSeperator();
        },

        _render: function () {
            this._renderWrapper();
            this._setDimentions();
            this._renderTimeIcon();
            this._validateTimes();
            this._createMinMaxObj();
            this._addAttr(this.model.htmlAttributes);
            this._checkProperties();
            this._enableMask();
            this._checkErrorClass();
            this.element.attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "aria-readonly": this.model.readOnly, "value": this.model.value });
            (BoldBIDashboard.isNullOrUndefined(this.model.value)) ? this.wrapper.addClass('e-valid') : this.wrapper.removeClass('e-valid');
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({'tabindex':'0','role':'combobox','aria-expanded':'false'});
            this.wrapper = BoldBIDashboard.buildTag("span.e-timewidget e-widget " + this.model.cssClass + "#" + this.target.id + "_timewidget").insertAfter(this.element);
            this.wrapper.attr("style", this.element.attr("style"));
            this.element.removeAttr('style');
            if (!BoldBIDashboard.isTouchDevice()) this.wrapper.addClass('e-ntouch');
            this.container = BoldBIDashboard.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (BoldBIDashboard.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);

            });
        },
        _initTimeValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setTimeValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                }
            }
        },
        _renderTimeIcon: function () {
            if (this.model.showPopupButton) {
                this.timeIcon = BoldBIDashboard.buildTag("span.e-select").attr({ 'role': 'button', 'aria-label': 'select' });
                var icon = BoldBIDashboard.buildTag("span.e-icon e-clock").attr('role', 'presentation');
                if (this._isIE8) {
                    this.timeIcon.attr("unselectable", "on");
                    icon.attr("unselectable", "on");
                }
                this.timeIcon.append(icon);
                this.container.append(this.timeIcon).addClass("e-padding");
                this._on(this.timeIcon, "mousedown", this._timeIconClick);
            }

        },
        _elementClick: function (e) {
            if (!this.showDropdown) this._showResult();
        },
        _renderDropdown: function () {
            var oldWrapper = bbdesigner$("#" + this.element[0].id + "_popup").get(0);
            if (oldWrapper)
                bbdesigner$(oldWrapper).remove();
            if (!this.model.showPopupButton || this.popupList) return false;
            this.popupList = BoldBIDashboard.buildTag("div.e-time-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_popup", "", {}, { 'tabindex': 0, 'role':'listbox'});
            if (!BoldBIDashboard.isTouchDevice()) this.popupList.addClass('e-ntouch');
            this.popup = this.popupList;
            this.ul = BoldBIDashboard.buildTag("ul.e-ul");
            if (this._isIE8)
                this.ul.attr("unselectable", "on");
            var scrollDiv = BoldBIDashboard.buildTag("div").append(this.ul);
            bbdesigner$('body').append(this.popupList.append(scrollDiv));
            this._renderLiTags();
            this._setListHeight();
            this._setListWidth();
            this.popupList.BoldBIDashboardScroller({ height: this.popupList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.popupList.BoldBIDashboardScroller("instance");
            this.popupList.css("display", "none");
            this._listSize = this.ul.find("li").length;
        },
        _renderLiTags: function () {
            this._disabledItems = [];
            var start, end, timeVal, interval = this.model.interval * 60000;
            // Maintain the min and max time as object;
            var disableTime = (!BoldBIDashboard.isNullOrUndefined(this.model.disableTimeRanges) && this.model.disableTimeRanges.length > 0) ? true : false;
            start = this._minTimeObj;
            end = this._maxTimeObj;
            var i = 0;
            while (this._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start);
                var litag = bbdesigner$(document.createElement('li'));
                litag[0].appendChild(document.createTextNode(timeVal));
                if (this._isIE8) litag.attr("unselectable", "on");
                if (disableTime) {
                    if (this._ensureTimeRange(timeVal)) {
                        litag.addClass('e-disable');
                        this._disabledItems.push(i);
                    }
                    else {
                        litag.removeClass('e-disable');
                    }
                }
                this.ul[0].appendChild(litag[0]);
                start = new Date(start).getTime() + interval;
                i++;
            }

            var liTags = this.ul.find("li");
            if (!BoldBIDashboard.isTouchDevice()) {
                this._on(liTags, "mouseenter", bbdesigner$.proxy(this._OnMouseEnter, this));
                this._on(liTags, "mouseleave", bbdesigner$.proxy(this._OnMouseLeave, this));
            }
            this._on(liTags, "click", bbdesigner$.proxy(this._OnMouseClick, this));
            if (this.model.showPopupButton || !BoldBIDashboard.isNullOrUndefined(this.popupList))
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false,'role':'option' });
        },
        _ensureTimeRange: function (value) {
            if (!BoldBIDashboard.isNullOrUndefined(this.model.disableTimeRanges)) {
                var timeVal = this._makeDateTimeObj(value);
                for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                    if (+timeVal >= +this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime) && +timeVal <= +this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime))
                        return true;
                }
            }
            return false;
        },
        _initStartEnd: function () {
            this._startTime = [];
            this._endTime = [];
            if (!BoldBIDashboard.isNullOrUndefined(this.model.disableTimeRanges)) {
                for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                    this._startTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime);
                    this._endTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime);
                }
            }
        },
        _makeDateTimeObj: function (value) {
            if (typeof value === "string") {
                var dateFormat = BoldBIDashboard.preferredCulture(this.model.locale).calendar.patterns.d;
                var dateValue = BoldBIDashboard.format(new Date("1/1/2000"), dateFormat, this.model.locale);
                var obj = BoldBIDashboard.parseDate(dateValue + " " + value, dateFormat + " " + this.model.timeFormat, this.model.locale);
                if (!obj) {
                    var isJSONString = new Date(value);
                    if (!isNaN(Date.parse(isJSONString)) && !BoldBIDashboard.isNullOrUndefined(value))
                        return this._setEmptyDate(value);
                    else
                        obj = new Date("1/1/2000 " + value);
                }
                return obj;
            }
            else if (value instanceof Date)
                return this._setEmptyDate(value);
            else return null;
        },
        _reRenderDropdown: function () {
            this.ul.empty();
            this._renderLiTags();
            this._refreshScroller();
            this._changeActiveEle();
        },
        _refreshScroller: function () {
            var flag = this.popupList.css("display") == "none" ? true : false;
            this.popupList.css("height", "auto");
            this.popupList.find(".e-content, .e-vscroll").removeAttr("style");
            this.popupList.find(".e-vscroll div").removeAttr("style");

            if (flag) this.popupList.css("display", "block");
            this.scrollerObj.model.height = this.popupList.height();
            this.scrollerObj.model.scrollTop = 0;
            this.scrollerObj.refresh();
            if (this._isIE8) {
                bbdesigner$("#" + this.scrollerObj._id).children('.e-vscroll').children().attr("unselectable", "on");
                bbdesigner$("#" + this.scrollerObj._id).find('.e-vhandle').attr("unselectable", "on");
            }
            if (flag) this.popupList.css("display", "none");
        },

        _setListWidth: function () {
            if (this.popupList) {
                var width = this.model.popupWidth;
                if (width && width != "auto") this.popupList.css({ "width": width });
                else this.popupList.css({ "width": this.wrapper.width() });
            }
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _setListHeight: function () {
            if (this.popupList) this.popupList.css({ "max-height": this.model.popupHeight || "191px" });
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _updateScrollTop: function () {
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
        },
        _refreshPopup: function () {
            if (this.model.popupWidth == "auto") this.popupList.css({ "width": this.wrapper.width() });
            this._setListPosition();
            this._refreshScroller();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = bbdesigner$(document).scrollTop() + bbdesigner$(window).height() - (pos.top + bbdesigner$(elementObj).outerHeight()),
            winTopHeight = pos.top - bbdesigner$(document).scrollTop(),
            popupHeight = this.popupList.outerHeight(),
            popupWidth = this.popupList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = bbdesigner$(document).scrollLeft() + bbdesigner$(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupList.outerWidth() - elementObj.outerWidth();
            this.popupList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return BoldBIDashboard.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return BoldBIDashboard.util.getZindexPartial(this.element, this.popupList);
        },

        _enableMask: function () {
            var flag = false;
            if ((this.model.minTime && this._compareTime(this.model.minTime, this.model.value)) ||
                this.model.maxTime && this._compareTime(this.model.value, this.model.maxTime))
                this.isValidState = false;
            else this.isValidState = true;
            this._setTime(this.model.value);
            (BoldBIDashboard.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            if (this._getInternalEvents && !this.isValidState) this._trigger("outOfRange");
            this._changeActiveEle();
            this._preVal = this.element.val();
        },
        _setTime: function (time) {
            var modifiedTime = this._localizeTime(time);
            this.element.val(modifiedTime);
            if (this.model.enableStrictMode) {
                this.model.value = (this._compareTime(this.model.value, this.model.minTime) && this._compareTime(this.model.maxTime, this.model.value)) ? modifiedTime : null;
            } else {
                this.model.value = modifiedTime;
            }
        },
        _timeFromISO: function (date) {
            var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _setMask: function () {
            this.model.value = new Date();
            this._enableMask();
        },

        _validateTimes: function () {
            var validatedformat = this._validateTimeFormat(this.model.timeFormat);
            if (validatedformat) this.model.timeFormat = validatedformat;
            else this.model.timeFormat = "h:mm tt";
            if (!this._isValid(this.model.minTime)) this.model.minTime = "12:00 AM";
            if (!this._isValid(this.model.maxTime)) this.model.maxTime = "11:59 PM";
            if (!this._isValid(this.model.value, true)) this.model.value = null;
            if (!this._checkMinMax(this.model.value) && !this.model.enableStrictMode) {
                if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                    this.model.value = this.model.minTime;
                if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                    this.model.value = this.model.maxTime;
            }
            this._validateMinMax();
        },
        _ensureValue: function () {
            if (!this._checkMinMax(this.model.value) && this._isValid(this.model.value, true)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                        this.model.value = this.model.minTime;
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                        this.model.value = this.model.maxTime;
                }
                else
                    this.isValidState = false;
            }
        },
        _validateMinMax: function () {
            if (this.model.minTime && this.model.maxTime && this._compareTime(this.model.minTime, this.model.maxTime)) {
                this.model.minTime = this.model.maxTime;
            }
        },
        _checkProperties: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.disable();
            }
            else if (this.model.enabled && this.element.hasClass("e-disable")) {
                this.model.enabled = false;
                this.enable();
            }
            this._addProperty();
            this._checkAttributes();
        },
        _addProperty: function () {
            this._setRtl(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if (this.popupList) this.popupList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if (this.popupList) this.popupList.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                if (this.popupList) this.popupList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if (this.popupList) this.popupList.removeClass("e-corner");
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderTimeIcon();
                this._renderDropdown();
                this._addProperty();
            }
            else {
                this.container.removeClass("e-padding");
                this.timeIcon.remove();
                this.popupList.remove();
                this.timeIcon = this.popupList = null;
                bbdesigner$(document).off("mousedown", bbdesigner$.proxy(this._OnDocumentClick, this));
            }
        },
        _checkAttributes: function () {
            if (!this.element.attr("name"))
                this.element.attr({ "name": this.element[0].id });
            if ('ondragstart' in document.createElement('input'))
                this.element.attr({ "ondragstart": "return false" });
            if ('draggable' in document.createElement('input'))
                this.element.attr({ "draggable": "false" });
        },

        _getAmPm: function () {
            var dateObj = new Date();
            dateObj.setHours(0);
            this.ttAM = bbdesigner$.trim(this._localizeMeridian(dateObj));
            dateObj.setHours(23);
            this.ttPM = bbdesigner$.trim(this._localizeMeridian(dateObj));
        },

        _setDimentions: function () {
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this._setHeight(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
        },
        _setHeight: function (height) {
            if (height) this.wrapper.height(height);
            if (this._isIE7) this.element.height(this.container.height());
        },

        _validateTimeFormat: function (timeFormat) {
            var parts = timeFormat.split(" "), format = "";
            if (parts.length == 1 || parts.length == 2) {
                bbdesigner$(parts).each(function (i, part) {
                    format += bbdesigner$.trim(part) + " ";
                });
                return bbdesigner$.trim(format);
            }
            else return null;
        },

        _getSeperator: function () {
            var p = this._getElePlace(), formats = this.model.timeFormat.split(" ")[p.time];
            var regex = new RegExp("^[a-zA-Z0-9]+$");

            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats.charAt(i))) return formats.charAt(i);
            }
        },

        _checkInComplete: function () {
            var pos = this._getCaretSelection(), cursor = this._getStartEnd(pos);
            var replace = "00", selected = this._getSelectedValue(cursor), category = this._getCategory(cursor);
            if (pos.end - pos.start == this.element.val().length) this._checkAll();

            if (category && category != "tt") {
                this._findCategoryPosition(category);
                if (selected == "__") {
                    if (category == "h" || category == "hh") replace = "12";
                    this._changeToDefault(replace);
                }
                else if (category.length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, selected));
                }
            }
        },
        _checkAll: function () {
            var i, p = this._getElePlace(), categories = this.model.timeFormat.split(" ")[p.time].split(this.seperator);
            for (i = 0; i < categories.length; i++) {
                this._findCategoryPosition(categories[i]);
                var selected = this._getSelectedValue({ start: this.start, end: this.end });

                if (categories[i].length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.element.val(), this.start, this.end, selected));
                }
            }
        },

        _changeToDefault: function (replace) {
            this.incomplete = true;
            var preVal = this.element[0].value
            this.element[0].value = this._replaceAt(this.target.value, this.start, this.end, replace);
            var timeValue = this._checkExceedRange(this.target.value);
            if (!!timeValue) {
                this._setTime(this.model[timeValue]);
            }
            this._setSelection(this.start, this.end);
            this._raiseChangeEvent(preVal);
        },

        _setSelection: function (start, end) {
            var element = this.element[0];

            if (element.setSelectionRange)
                element.setSelectionRange(start, end);
            else if (element.createTextRange) {
                // For lower version browsers (IE8, IE7 ...)
                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', end);
                element.moveStart('character', start);
                element.select();
            }
        },

        _getSelectedValue: function (cursor) {
            return this.target.value.substring(cursor.start, cursor.end);
        },

        _getMinMax: function (currPart, keydown) {
            if (currPart == "hh" || currPart == "h") {
                this.min = 1; this.max = 11;
                if (keydown) this.max = 12;
            }
            else if (currPart == "HH" || currPart == "H") {
                this.min = 0; this.max = 23;
            }
            else if (currPart == "mm" || currPart == "m" || currPart == "ss" || currPart == "s") {
                this.min = 0; this.max = 59;
            }
        },

        _focusElement: function () {
            this._manualFocus = true;
            this.element.focus();
        },
        _targetFocus: function (e) {
            this._clearRange();
            e.preventDefault();
            this.focused = true;
            this.element.on('mousewheel DOMMouseScroll', bbdesigner$.proxy(this._mouseWheel, this));
            this.wrapper.addClass("e-focus").removeClass("e-error").attr('aria-invalid', "false");
            if (!this._manualFocus) {
                this._findCategoryPosition(this._getLeast(false));
                this._setSelection(this.start, this.end);
            }
            this._manualFocus = false;
            this._prevTimeVal = this.element.val();
            this._raiseEvent("focusIn");
            this.wrapper.addClass('e-valid');
        },
        _targetBlur: function () {
            this.focused = false;
            this.element.off('mousewheel DOMMouseScroll', bbdesigner$.proxy(this._mouseWheel, this));
            this.wrapper.removeClass("e-focus");
            if (!this.model.enableStrictMode) {
                // To remove the min value mask while focusout the timepicker.
                if (this.target.value.indexOf('_') > -1) this.element.val('');
            }
            if (!this._checkMinMax(this.target.value) && this._isValid(this.target.value, true)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this._createObject(this.target.value), this.model.minTime, true))
                        this.element.val(this.model.minTime);
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this._createObject(this.target.value), true))
                        this.element.val(this.model.maxTime);
                    if (!this._isValid(this.model.value, true))
                        this.element.val(null);
                    this.isValidState = true;
                    (BoldBIDashboard.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
                }
                else
                    this.isValidState = false;
            }
            else this.isValidState = true;
            this._ensureValue();
            this._raiseChangeEvent();
            this._checkErrorClass();
            this._raiseEvent("focusOut");
            if (!this.model.enableStrictMode) this._checkInComplete();
            (BoldBIDashboard.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
        },
        _clearRange: function () {
            var input = this.element[0];
            if (!isNaN(input.selectionStart)) {
                input.selectionStart = 0;
                input.selectionEnd = 0;
            }
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
            else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;
            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }
            // For lower version browsers (IE8, IE7 ...)
            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },

        _mouseDownOnInput: function (e) {
            if (!this.focused && (!BoldBIDashboard.isTouchDevice())) this._focusElement();
            this.downPosition = this._getCaretSelection();
            bbdesigner$(document).on("mouseup", bbdesigner$.proxy(this._mouseUpOnInput, this));
        },

        _mouseUpOnInput: function (e) {
            e.preventDefault();
            bbdesigner$(document).off("mouseup", bbdesigner$.proxy(this._mouseUpOnInput, this));
            var pos = this._getCaretSelection();

            if (this.incomplete) {
                this.incomplete = false;
                pos = this.downPosition;
            }
            // Select the Complete Time value using mouse.            
            if (this.target.value != this._getSelectedText()) {
                pos = this._getStartEnd(pos);
                this._setSelection(pos.start, pos.end);
            }
        },

        _getCategoryPosition: function (category) {
            var s = 0, e = 0, parts = this.target.value.split(" "), p = this._getElePlace(), sep = this.seperator, valid = false;
            var fParts = this.model.timeFormat.split(" ")[p.time].split(sep);
            var tParts = parts[p.time].split(sep);
            if (fParts.length > tParts.length) return { start: s, end: e, isValid: valid };

            if (category == "tt") {
                if (parts[p.tt] == this.ttAM || parts[p.tt] == this.ttPM) {
                    if (p.tt == 0) s = 0;
                    else s = parts[p.time].length + 1;
                    e = s + parts[p.tt].length;
                    valid = true;
                }
            }
            else {
                if (p.time == 0) s = 0;
                else s = parts[p.tt].length + 1;

                var index = fParts.indexOf(category);
                if (index != -1) {
                    for (var i = 0; i < fParts.length; i++) {
                        e = tParts[i].length + 1;
                        if (i == index) break;
                        else s += e;
                    }
                    e += s - 1;
                    valid = true;
                }
            }
            return { start: s, end: e, isValid: valid };
        },
        _getCategory: function (cursor) {
            var parts = this.model.timeFormat.split(" "), sep = this.seperator;
            var p = this._getElePlace();
            if (cursor.isTT) return parts[p.tt];
            else return parts[p.time].split(sep)[cursor.index];
        },

        _getStartEnd: function (pos) {
            var tt, sep = this.seperator;
            var value = this.element.val(), parts = value.split(" "), s = 0, e = 0, place = tt = null, i, j;

            for (j = 0; j < parts.length; j++) {
                if (parts[j] != this.ttAM && parts[j] != this.ttPM) {
                    var time = parts[j].split(sep), tempS = s, tempE = s + time[0].length;
                    for (i = 0; i < time.length; i++) {
                        e = time[i].length + s;
                        if (pos.start <= e) {
                            place = i;
                            tt = false;
                            j = parts.length;
                            break;
                        }
                        else s += time[i].length + 1;
                    }
                }
                else {
                    if (pos.start <= s + parts[j].length) {
                        e = parts[j].length + s;
                        place = 0;
                        tt = true;
                        j = parts.length;
                        break;
                    }
                    else s += parts[j].length + 1;
                }
            }
            if (place == null) s = tempS, e = tempE, place = 0, tt = false;

            return { start: s, end: e, index: place, isTT: tt };
        },

        _modifyValue: function (isIncrement) {
            if (!this._isValid(this.target.value)) return;
            if (!this.model.enableStrictMode) this._checkInComplete();
            var pos = this._getCaretSelection(), cursor;
            if (pos.start == pos.end) {
                var cate = this._getLeast(true);
                var position = this._getCategoryPosition(cate);
                cursor = this._getStartEnd(position);
            }
            else cursor = this._getStartEnd(pos);
            this.start = cursor.start; this.end = cursor.end;
            this._changeValue(cursor, isIncrement);
        },

        _keyUpOnInput: function (e) {
            e.preventDefault();
            if (this._preVal != this.element.val()) {
                this._preVal = this.element.val();
            }
        },

        _getNextCategory: function (cate, direction) {
            var categories = [], sep = this.seperator;
            var fParts = this.model.timeFormat.split(" ");
            bbdesigner$(fParts).each(function (i, part) {
                if (part == "tt") categories.push(part);
                else {
                    var inner = part.split(sep);
                    categories = inner.concat(categories);
                }
            });
            var index = categories.indexOf(cate), ix;
            if (index != -1) {
                if (direction) {
                    if (index == 0) ix = categories.length - 1;
                    else ix = index - 1;
                }
                else {
                    if (index == categories.length - 1) ix = 0;
                    else ix = index + 1;
                }
                return categories[ix];
            }
            return cate;
        },
        _getElePlace: function () {
            var fParts = this.model.timeFormat.split(" "), time, tt;
            if (fParts[0] == "tt") time = 1, tt = 0;
            else time = 0, tt = 1;
            return { time: time, tt: tt };
        },
        _movePosition: function (pos, direction) {
            var cursor = this._getStartEnd(pos);
            var currCate = this._getCategory(cursor);
            if (!currCate) currCate = this._getLeast(direction);
            var next = this._getNextCategory(currCate, direction);
            var cursor = this._getCategoryPosition(next);

            if (cursor.isValid) {
                this._setSelection(cursor.start, cursor.end);
            }
        },
        _findActiveIndex: function () {
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem)) this._activeItem = 0;
        },
        _keyDownOnInput: function (e) {
            if (this.model.readOnly && !this._readOnlyKeys(e)) return false;
            var pos, cursor, category, key = e.keyCode;

            // _getInternalEvents is set to true when TimePicker used inside DateTimePicker control
            // in DateTimePicker control it allows Up, Down, Home, End, Tab keys only
            if (this._getInternalEvents && key != 38 && key != 40 && key != 36 && key != 35 && key != 9) return false;
            // Up, Down, Esc
            if (!this.model.enableStrictMode) {
                // Prevent type operation on popup open in state.
                if (this.showDropdown && key != 38 && key != 40 && key != 27 && !this._readOnlyKeys(e)) return false;
                else if (this.showDropdown && (key == 37 || key == 39)) e.keyCode = (key == 37) ? 38 : 40;
            }
            pos = this._getCaretSelection();
            cursor = this._getStartEnd(pos);
            category = this._getCategory(cursor);
            switch (e.keyCode) {
                case 38:
                    e.preventDefault();
                    if (!this.showDropdown) {
                        if (this._isValid(this.target.value)) this._modifyValue(true);
                    }
                    else if (this.showDropdown) {
                        e.preventDefault();
                        this._findActiveIndex();
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
                        if (this._activeItem == 0) this._activeItem = prevActiveItem;
                        this._addListHover();
                        activeItem = this._getActiveItem();
                        if (activeItem.length) this._selectTimeItem(activeItem);
                    }
                    break;
                case 40:
                    e.preventDefault();
                    if (e.altKey && this.model.showPopupButton)
                        this._showhidePopup();
                    else if (!this.showDropdown) {
                        if (this._isValid(this.target.value)) this._modifyValue(false);
                    }
                    else if (this.showDropdown) {
                        e.preventDefault();
                        this._findActiveIndex();
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectDown(this._activeItem);
                        if (this._activeItem < this._listSize) this._activeItem += 1;
                        else
                            this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 37:
                    e.preventDefault();
                    if (pos.start == pos.end) this._setSelection(pos.start - 1, pos.start - 1);
                    else this._movePosition(pos, true);
                    break;
                case 39:
                    e.preventDefault();
                    if (pos.start == pos.end) this._setSelection(pos.start + 1, pos.start + 1);
                    else this._movePosition(pos, false);
                    break;

                case 36:
                    // Home key 
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var homecate = this._firstlastVal(true);
                        var hPos = this._getCategoryPosition(homecate);
                        if (hPos.isValid) this._setSelection(hPos.start, hPos.end);
                    }
                    else {
                        this._activeItem = 0;
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectDown(this._activeItem);
                        if (this._activeItem < this._listSize) this._activeItem += 1;
                        else
                            this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 35:
                    // End key
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var endcate = this._firstlastVal(false);
                        var ePos = this._getCategoryPosition(endcate);
                        if (ePos.isValid) this._setSelection(ePos.start, ePos.end);
                    }
                    else {
                        this._activeItem = this._listSize + 1;
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
                        if (this._activeItem == 0) this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 9:
                    if (this._getInternalEvents) break;
                    this._hideResult();
                    var flag = null;
                    if (e.shiftKey && pos.start > 0) flag = true;
                    else if (!e.shiftKey && pos.end < this.element.val().length) flag = false;
                    if (flag != null) {
                        e.preventDefault();
                        this._checkInComplete();
                        this._movePosition(pos, flag);
                    }
                    break;
                case 13:
                    if (!this.showDropdown) {
                        this._raiseChangeEvent();
                        break;
                    }
                case 27:
                    e.preventDefault();
                    this._hideResult();
                    break;
                case 8:
                case 46:
                    if (this.model.enableStrictMode) return;
                    if (this.target.value != this._getSelectedText()) {
                        e.preventDefault();
                        if (category && category != "tt") {
                            this._findCategoryPosition(category);
                            var _doBackspace = (key == 8 && pos.start != this.start), _doDelete = (key == 46 && pos.end != this.end), len;
                            len = this.end - this.start;

                            if ((pos.start != pos.end || len == 1) && (_doBackspace || _doDelete || pos.start != pos.end)) {
                                var s1 = this.start, s2 = this.end, te;
                                this.element[0].value = this._replaceAt(this.target.value, s1, s2, "__");
                                te = (s2 - s1 != 2) ? s2 + 1 : s2;
                                this._setSelection(s1, te);
                            }
                            else {
                                if (_doBackspace) {
                                    this.element[0].value = this._replaceAt(this.target.value, pos.start - 1, pos.start, "");
                                    this._setSelection(pos.start - 1, pos.start - 1);
                                }
                                else if (_doDelete) {
                                    this.element[0].value = this._replaceAt(this.target.value, pos.end, pos.end + 1, "");
                                    this._setSelection(pos.end, pos.end);
                                }
                            }
                        }

                    }
                    break;

            }

            var currSelection = this._getSelectedValue(cursor);
            var unicode = e.keyCode ? e.keyCode : e.charCode, actualkey;

            if (e.keyCode > 47 && e.keyCode < 58)
                actualkey = String.fromCharCode(unicode);
            else if (e.keyCode > 95 && e.keyCode < 106)
                actualkey = String.fromCharCode(unicode - 48);
            if (category == "tt" && ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 64 && e.keyCode < 91) || (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106))) {
                e.preventDefault();
                var ttPos = this._getCategoryPosition(category);
                this.start = ttPos.start;
                this.end = ttPos.end;
                this._changeAmPm(currSelection);
                this._raiseChangeEvent();
            }

            // Select complete text and then press time value in the textbox               
            if (this.target.value == this._getSelectedText() && (!e.shiftKey && !e.ctrlKey && !e.altKey)) {
                if (e.keyCode > 64 && e.keyCode < 91 && !this.model.enableStrictMode) e.preventDefault();
                if ((e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                    var cursor = this._getStartEnd(pos);
                    this._setSelection(cursor.start, cursor.end);
                }
            }

            if ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                if (category != "tt") {
                    this._getMinMax(category, true);
                    if (pos.start == pos.end) {
                        this._findCategoryPosition(category);
                        var newVal;
                        if (pos.start == this.start) {
                            newVal = actualkey + currSelection;
                            if (this.model.enableStrictMode == false) {
                                this._validateTimes();
                                this._targetBlur();
                            }
                            if (this.model.value == null) this.element.val(this.model.minTime);
                            var cursor = this._getStartEnd(pos);
                            this._setSelection(cursor.start, cursor.end);
                        }
                        else {
                            newVal = currSelection + actualkey;
                        }
                        if (newVal.length > 2 || !(Number(newVal) >= this.min && this.max >= Number(newVal))) {
                            !this.model.enableStrictMode && e.preventDefault();
                        }
                    }
                    else if (!(Number(actualkey) >= this.min && this.max >= Number(actualkey))) {
                        !this.model.enableStrictMode && e.preventDefault();
                    }
                }
            }
            else if (!this._allowKeyCodes(e)) {
                !this.model.enableStrictMode ? (e.keyCode == 8 || e.keyCode == 46) ? e.stopPropagation() : e.preventDefault() : e.stopPropagation();
            }
        },

        _getSelectedText: function (e) {
            if (window.getSelection) {
                var element = bbdesigner$('#' + this.element[0].id).get(0);
                return element.value.substring(element.selectionStart, element.selectionEnd);
            }
                // For IE
            else return document.selection.createRange().text;
        },
        _allowKeyCodes: function (e) {
            if ((e.ctrlKey && (e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 90 || e.keyCode == 89))
                || e.keyCode == 9 || e.keyCode == 116 || e.keyCode == 13)
                return true;
            return false;
        },
        _readOnlyKeys: function (e) {
            if (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || this._allowKeyCodes(e))
                return true;
            return false;
        },

        _firstlastVal: function (initial) {
            var parts = this.model.timeFormat.split(" "), sep = this.seperator;
            if (initial) {
                if (parts[0] != "tt") return parts[0].split(sep)[0];
                return "tt";
            }
            else {
                if (parts[0] != "tt") return "tt";
                else if (parts[1]) {
                    var lastItem = parts[1].split(sep);
                    return lastItem.length ? lastItem[lastItem.length - 1] : "tt";
                }
                return "tt";
            }
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (this.model.readOnly) return false;
            var delta, rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._modifyValue(true);
            else if (delta < 0)
                this._modifyValue(false);
        },

        _addListHover: function () {
            this._addSelected();
            this._updateScrollTop();
        },
        _addSelected: function () {
            this.ul.find("li").removeClass("e-active e-hover");
            var activeItem = this._getActiveItem();
            if (activeItem.length && !activeItem.hasClass('e-disable'))
                activeItem.addClass('e-active');
        },
        _disableItemSelectDown: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if (bbdesigner$.inArray(current, this._disabledItems) < 0)
                    return current;
                else
                    return this._disableItemSelectDown(current + 1);
            }
            else return this._listSize;
        },

        _disableItemSelectUp: function (current) {
            current = current - 1;
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if (bbdesigner$.inArray(current, this._disabledItems) < 0)
                    return current + 1;
                else if (current > 0)
                    return this._disableItemSelectUp(current);
            }
            return 0;
        },
        _getActiveItem: function () {
            return bbdesigner$(this.ul.find("li")[this._activeItem - 1]);
        },

        _timeIconClick: function (event) {
            if (BoldBIDashboard.isNullOrUndefined(this.popupList)) {
                this._renderDropdown();
                this._addProperty();
            };
            var isRightClick = false;
            if (event.button)
                isRightClick = (event.button == 2);
            else if (event.which)
                isRightClick = (event.which == 3); //for Opera
            if (isRightClick) return;
            event.preventDefault();
            if (!this.model.enabled || this.model.readOnly || this.ul.find("li").length < 1) return false;
            this._showhidePopup();
            var len = this.element.val().length;
            if (!BoldBIDashboard.isTouchDevice()) this._setSelection(len, len);
        },
        _showhidePopup: function () {
            if (this._getInternalEvents) return false;
            if (!this.showDropdown)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (this.popupList == null) this._renderDropdown();
            this._raiseEvent("beforeOpen");
            this._refreshPopup();
            if (!this.focused && (!BoldBIDashboard.isTouchDevice())) this._focusElement();
            if (this.model.value) this._changeActiveEle();
            else
                this.ul.find("li").removeClass("e-active");

            var proxy = this, sTop = this._vissibleAndCalculateTop();
            this.popupList.slideDown(this.model.enableAnimation ? 200 : 0, function () {
                bbdesigner$(document).on("mousedown", bbdesigner$.proxy(proxy._OnDocumentClick, proxy));
            });
            this.scrollerObj.setModel({ "scrollTop": sTop });
            this.showDropdown = true;
            this._listSize = this.ul.find("li").length;
            bbdesigner$(window).on("resize", bbdesigner$.proxy(this._OnWindowResize, this));
            this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this._raiseEvent("open");
            this.wrapper.addClass("e-active");
        },
        _hideResult: function (e) {
			if ( e && (e.type == "touchmove" || e.type== "scroll")) {
				if (bbdesigner$(e.target).parents("#"+this.popupList[0].id).length > 0)
			   return;
			}           
			if (this.showDropdown && !this._getInternalEvents) {
			this.showDropdown = false;
			this.popupList.slideUp(this.model.enableAnimation ? 100 : 0);
			bbdesigner$(document).off("mousedown", bbdesigner$.proxy(this._OnDocumentClick, this));
			bbdesigner$(window).off("resize", bbdesigner$.proxy(this._OnWindowResize, this));
			this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this._hideResult);
			this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
			this._raiseEvent("close");
			this.wrapper.removeClass("e-active");
            }
        },

        _vissibleAndCalculateTop: function () {
            this.popupList.css({ "display": "block" });
            var scrollTop = this._calcScrollTop();
            this.popupList.css({ "display": "none" });
            return scrollTop;
        },
        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), liH = this.ul.find("li").outerHeight(), index, top;
            index = this.ul.find("li.e-active").index();
            top = (liH * index) - ((this.popupList.outerHeight() - liH) / 2);
            return top;
        },
        _changeActiveEle: function () {
            if (!this.model.showPopupButton || !this.popupList) return false;
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem) || this._ensureTimeRange(currTime)) this._activeItem = 0;
            this._addListHover();
        },

        _OnDocumentClick: function (e) {
            if (!bbdesigner$(e.target).is(this.popupList) && !bbdesigner$(e.target).parents(".e-time-popup").is(this.popupList) &&
                !bbdesigner$(e.target).is(this.wrapper) && !bbdesigner$(e.target).parents(".e-timewidget").is(this.wrapper)) {
                this._hideResult();
            }
            else if (bbdesigner$(e.target).is(this.popupList) || bbdesigner$(e.target).parents(".e-time-popup").is(this.popupList))
                e.preventDefault();
        },
        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            this.ul.find("li").removeClass("e-hover");
            if (!bbdesigner$(targetEle).hasClass('e-disable'))
                bbdesigner$(targetEle).addClass("e-hover");
        },
        _OnMouseLeave: function (e) {
            if (!this._dateTimeInternal || this.model.value)
                this.ul.find("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            e.preventDefault();
            if (bbdesigner$(e.target).hasClass('e-disable')) return;
            if (this.model.enabled && !this.model.readOnly) {
                this._activeItem = bbdesigner$(e.target).index() + 1;
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false });
                bbdesigner$(e.target).attr({ 'aria-selected': true, 'tabindex': 0 });
                this._addSelected();
                this._selectTimeItem(bbdesigner$(e.target));
            }
            this._showhidePopup();
        },
        _selectTimeItem: function (ele) {
            this._beforeChange(ele);
            var flag = this._raiseChangeEvent();
            if (flag)
                this._trigger("select", { value: this.model.value, prevTime: this._previousValue });
        },

        _findCategoryPosition: function (category) {
            if (category == "least") category = this._getLeast(true);
            var pos = this._getCategoryPosition(category);
            this.start = pos.start;
            this.end = pos.end;
        },

        _getLeast: function (lower) {
            var formats = this.model.timeFormat.split(" "), sep = this.seperator, res = null;
            bbdesigner$(formats).each(function (i, e) {
                if (e != "tt") {
                    var times = e.split(sep);
                    if (lower) res = times[times.length - 1];
                    else res = times[0];
                }
            });
            return res;
        },

        _changeValue: function (cursor, isIncrement) {
            var preVal = this.target.value, currValue, category = this._getCategory(cursor);
            if (!category) return false;
            this._setSelection(this.start, this.end);
            currValue = this.target.value.substring(this.start, this.end);
            if (this._checkMinMax(this.target.value)) {
                if (currValue != this.ttAM && currValue != this.ttPM) {
                    currValue = this._changeCurrentValue(currValue, category, isIncrement);
                    if (category.length != 1) currValue = this._changeWhole(currValue);
                    this._findCategoryPosition(category);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, currValue));
                    this.end = this.start + currValue.toString().length;
                    this._setSelection(this.start, this.end);
                    if (this._ensureTimeRange(this.target.value) && this._checkMinMax(this.target.value)) {
                        var timeObject = this._createObject(this.target.value);
                        var hour = timeObject.getHours();
                        var fromTime = isIncrement ? this._startTime : this._endTime;
                        var toTime = isIncrement ? this._endTime : this._startTime;
                        if (!BoldBIDashboard.isNullOrUndefined(this.model.disableTimeRanges)) {
                            for (i = 0; i < this.model.disableTimeRanges.length; i++) {
                                if ((fromTime[i].getHours() === hour) || ((+timeObject >= +this._startTime[i]) && +timeObject <= +this._endTime[i])) {
                                    this.target.value = this._localizeTime(toTime[i]);
                                    this._findCategoryPosition(category);
                                    this._setSelection(this.start, this.end);
                                    this._changeValue(cursor, isIncrement);
                                }
                            }
                        }
                    }
                }
                else this._changeAmPm(currValue);
            }
            else {
                var timeValue = this._checkExceedRange(this.target.value);
                this._setTime(this.model[timeValue]);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            if (!this._checkMinMax(this.target.value)) {
                this.element.val(this.model.value);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            else this._raiseChangeEvent();
        },

        _checkMinMax: function (value) {
            var res = this._checkExceedRange(value);
            if (res == null) res = false;
            return !res;
        },
        _checkExceedRange: function (value) {
            if (value) {
                if (this.model.minTime && !this._compareTime(value, this.model.minTime, true)) return "minTime";
                if (this.model.maxTime && !this._compareTime(this.model.maxTime, value, true)) return "maxTime";
            }
            return null;
        },

        _changeWhole: function (currValue) {
            return currValue > 9 ? "" + currValue : "0" + currValue;
        },
        _changeAmPm: function (ampm) {
            ampm = ampm == this.ttAM ? this.ttPM : this.ttAM;
            this.element.val(this._replaceAt(this.target.value, this.start, this.end, ampm));
            this._setSelection(this.start, this.end);
        },
        _changeMinute: function (isIncrement) {
            var formats = ["mm", "m"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var minute = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (minute == this.max) {
                        minute = this.min;
                        this._changeHour(isIncrement);
                    }
                    else minute += 1;
                }
                else {
                    if (minute == this.min) {
                        minute = this.max;
                        this._changeHour(isIncrement);
                    }
                    else minute -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) minute = this._changeWhole(minute);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, minute));
            }
        },
        _changeHour: function (isIncrement) {
            var formats = ["hh", "h", "HH", "H"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var hour = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (hour == this.max) {
                        hour += 1;
                        this._changeMeridian();
                    }
                    else if (hour > this.max) hour = this.min;
                    else hour += 1;
                }
                else {
                    if (hour == this.min) hour = this.max + 1;
                    else if (hour > this.max) {
                        hour = this.max;
                        this._changeMeridian();
                    }
                    else hour -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) hour = this._changeWhole(hour);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, hour));
            }
        },
        _getExactFormat: function (cate) {
            var tFormat = this.model.timeFormat;
            for (var i = 0; i < cate.length; i++) {
                if (tFormat.indexOf(cate[i]) != -1) return cate[i];
            }
            return null;
        },
        _changeMeridian: function () {
            var start = this.model.timeFormat.indexOf("tt");
            if (start != -1) {
                this._findCategoryPosition("tt");
                var meridian = this.target.value.substring(this.start, this.end);
                meridian = (meridian == this.ttAM) ? this.ttPM : this.ttAM;
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, meridian));
            }
        },
        _changeCurrentValue: function (current, category, isIncrement) {
            current = Number(current);
            var c = category, step = 1, change = true;
            this._getMinMax(c);

            if (c == "hh" || c == "h" || c == "HH" || c == "H") step = this.model.hourInterval;
            else if (c == "mm" || c == "m") step = this.model.minutesInterval;
            else if (c == "ss" || c == "s") step = this.model.secondsInterval;
            if (step <= 0) return current;

            if (isIncrement) {
                if ((c == "hh" || c == "h") && current > this.max) current = this.min - 1 + step;
                else if (current < this.max) current += step;
                else {
                    change = false;
                    if (c != "hh" && c != "h") current = this.min - 1 + step;
                    else current += step;
                    this._changeAdjacent(c, isIncrement);
                }
                if ((c == "hh" || c == "h") && current == this.max + 1)
                    change && this._changeAdjacent(c, isIncrement);
                else if (current > this.max + 1) {
                    current = current - (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
                if ((c != "hh" && c != "h") && current == this.max + 1) {
                    current = this.min;
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            else {
                if ((c != "hh" && c != "h") && current > this.min) current -= step;
                else if ((c == "hh" || c == "h") && current > this.min && current <= this.max) current -= step;
                else if ((c == "hh" || c == "h") && current == this.min) current = this.max + 2 - step;
                else {
                    change = false;
                    current = this.max + 1 - step;
                    this._changeAdjacent(c, isIncrement);
                }
                if (current < this.min) {
                    current = current + (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            return current;
        },
        _changeAdjacent: function (c, isIncrement) {
            if (c == "ss" || c == "s") this._changeMinute(isIncrement);
            else if (c == "mm" || c == "m") this._changeHour(isIncrement);
            else if (c == "hh" || c == "h" || c == "HH" || c == "H") this._changeMeridian();
        },

        _valueChange: function (e) {
            this._raiseChangeEvent();
        },

        _beforeChange: function (ele) {
            if (!this._raiseEvent("beforeChange")) {
                this.element.val(ele.text());
            }
            return true;
        },

        _raiseChangeEvent: function (prev, isCode) {
            prev = (prev === undefined) ? this.model.value : prev;
            this._previousValue = prev;
            var current = !this.target.value ? null : this.target.value;
            if (prev == current) return false;
            if (this._checkMinMax(this.target.value) && this._isValid(this.target.value, this.model.enableStrictMode) || !this.target.value) this.isValidState = true;
            else this.isValidState = false;
            this.model.value = this._isValid(this.target.value, true) && this._checkMinMax(this.target.value) ? this.target.value : null;
            if (!this.model.value && !this.model.enableStrictMode) this._setTime(this.model.value);
            if (this.model.value == this._previousValue) return false;
            this._raiseEvent("change", isCode);
            this._raiseEvent("_change", isCode);
            return true;
        },
        _raiseEvent: function (name, isCode) {
            var data = { value: this.model.value, prevTime: this._previousValue };
            if (name == "change") data.isInteraction = !isCode;
            return (this._trigger(name, data));
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _replaceAt: function (mainString, from, to, replace) {
            return mainString.substring(0, from) + replace + mainString.substring(to);
        },
        _localizeTime: function (value) {
            if (value)
                return bbdesigner$.trim(BoldBIDashboard.format(this._createObject(value), this.model.timeFormat, this.model.locale));
            return null;
        },
        _localizeMeridian: function (value) {
            return bbdesigner$.trim(BoldBIDashboard.format(value, "tt", this.model.locale));
        },
        _compareTime: function (time1, time2, orEqual) {
            orEqual = (!orEqual) ? false : true;
            if (orEqual) return this._parse(time1) >= this._parse(time2);
            else return this._parse(time1) > this._parse(time2);
        },
        _isValid: function (time, validate) {
            time = this._createObject(time, validate);
            return time && typeof time.getTime === "function" && isFinite(time.getTime());
        },
        _parse: function (time) {
            return Date.parse(this._createObject(time));
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _createObject: function (value, validate) {
            var obj = null;
            if (typeof value === "string") {
                var format = this._setModelOption ? this._preTimeformat : this.model.timeFormat;
                var dateFormat = BoldBIDashboard.preferredCulture(this.model.locale).calendar.patterns.d;
                var dateValue = BoldBIDashboard.format(new Date("1/1/2000"), dateFormat, this.model.locale);
                obj = BoldBIDashboard.parseDate(dateValue + " " + value, dateFormat + " " + format, this.model.locale);
                if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this.model.value = obj = this._timeFromISO(value);
                this._setModelOption = false;
                if (!obj) {
                    var isJSONString = new Date(value);
                    if (!isNaN(Date.parse(isJSONString)) && !BoldBIDashboard.isNullOrUndefined(value))
                        obj = this._setEmptyDate(value);
                    else
                        obj = !this._dateTimeInternal || value == "" ? null : new Date("1/1/2000 " + value);
                }
            }
            else if (typeof value === "number")
                obj = new Date(value);
            else if (value instanceof Date)
                obj = this._setEmptyDate(value);

            if (obj && !this._dateTimeInternal && validate) {
                var timeVal = this._localizeTime(obj);
                if (this._ensureTimeRange(timeVal))
                    obj = null;
            }
            return obj;
        },

        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.element, "mousedown", this._mouseDownOnInput);
            this._on(this.element, "keydown", this._keyDownOnInput);
            this._on(this.element, "keyup", this._keyUpOnInput);
        }
    });
})(bbdesigner$, SyncfusionBoldBIDashboard);;
;
/**
* @fileOverview Plugin provides support to display calendar within your web page and allows to pick the date.
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/

(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardDatePicker", "BoldBIDashboard.DatePicker", {

        element: null,
        _rootCss: "e-datepicker",

        model: null,
        validTags: ["input", "div", "span"],
        _setFirst: false,
        _addToPersist: ["value"],
        _cancelValue: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },


        defaults: {

            dayHeaderFormat: "min",

            showPopupButton: true,

            enableAnimation: true,

            showFooter: true,

            displayInline: false,

            htmlAttributes: {},

            dateFormat: '',

            watermarkText: "Select date",

            value: null,
            minDate: new Date("01/01/1900"),

            maxDate: new Date("12/31/2099"),

            startLevel: "month",

            depthLevel: "",

            cssClass: "",

            startDay: -1,

            stepMonths: 1,

            locale: "en-US",

            showOtherMonths: true,

            enableStrictMode: false,

            enablePersistence: false,

            enabled: true,

            width: "",

            height: "",

            enableRTL: false,

            showRoundedCorner: false,

            headerFormat: 'MMMM yyyy',

            buttonText: 'Today',

            readOnly: false,

            specialDates: null,

            fields: {

                date: "date",

                tooltip: "tooltip",

                iconClass: "iconClass",

                cssClass: "cssClass"
            },

            showTooltip: true,

            showDisabledRange: true,

            highlightSection: "none",

            highlightWeekend: false,

            validationRules: null,

            validationMessage: null,
            validationMessages: null,

            allowEdit: true,

            tooltipFormat: "ddd MMM dd yyyy",

            allowDrillDown: true,

            blackoutDates: [],

            beforeDateCreate: null,

            open: null,

            close: null,

            select: null,

            change: null,

            focusIn: null,

            focusOut: null,

            beforeOpen: null,

            beforeClose: null,

            navigate: null,

            create: null,

            destroy: null,

            weekNumber: false

        },


        dataTypes: {
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            displayInline: "boolean",
            showPopupButton: "boolean",
            locale: "string",
            readOnly: "boolean",
            cssClass: "string",
            dateFormat: "string",
            watermarkText: "string",
            headerFormat: "string",
            buttonText: "string",
            specialDates: "data",
            showTooltip: "boolean",
            highlightSection: "enum",
            highlightWeekend: "boolean",
            enableAnimation: "boolean",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data",
            tooltipFormat: "string",
            allowEdit: "boolean",
            allowDrillDown: "boolean",
            weekNumber: "boolean"

        },

        _renderPopup: function () {
            this.sfCalendar = BoldBIDashboard.buildTag('div.e-datepicker e-popup e-widget ' + this.model.cssClass + ' e-calendar ' + (this.model.specialDates ? (this.model.specialDates[0][this._mapField._icon] ? 'e-icons ' : '') : ''), "", {}, { id: (this._id ? 'e-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                     .insertBefore(this.element);
            if (this.model.displayInline && !this.element.is("input"))
                this.sfCalendar.addClass('e-inline');
            this.popup = this.sfCalendar;
            if (!BoldBIDashboard.isTouchDevice()) this.sfCalendar.addClass('e-ntouch');
            this._setRestrictDateState(this.model.showDisabledRange);
            this._createCalender();
            this._setDisplayInline(this.model.displayInline);
            this._resizeCalender();
            this._setRTL(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
            this._wireCalendarEvents();
        },

        _setModel: function (jsondata) {
            if (BoldBIDashboard.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
            var callRefresh = false, start = false, validate = false;
            for (var key in jsondata) {
                switch (key) {
                    case "dayHeaderFormat":
                        this.model.dayHeaderFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "weekNumber":
                        this.model.weekNumber = jsondata[key];
                        this._refreshDatepicker();
                        break;
                    case "showPopupButton":
                        this._renderDateIcon(jsondata[key], true);
                        break;
                    case "displayInline":
                        if (!jsondata[key]) this._bindDateButton();
                        this._setDisplayInline(jsondata[key]);
                        if (!this.model.allowEdit && !jsondata[key] && this._isInputBox)
                            this.element.on("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
                        break;
                    case "value":
                        if (BoldBIDashboard.isPlainObject(jsondata[key])) jsondata[key] = null;
                        if (BoldBIDashboard.isNullOrUndefined(jsondata["minDate"]) && BoldBIDashboard.isNullOrUndefined(jsondata["maxDate"])) {
                            this._setDateValue(jsondata[key]);
                            if (this._specificFormat())
                                this._stopRefresh = true;
                            jsondata[key] = this.model.value;
                        }
                        else
                            this._updateDateValue(jsondata[key]);
                        validate = callRefresh = start = true;
                        break;
                    case "specialDates":
                        this.model.specialDates = jsondata[key];
                        this._createSpecialDateObject();
                        callRefresh = start = true;
                        break;
                    case "fields":
                        this.model.fields = jsondata[key];
                        this._mapField = this._getMapper();
                        callRefresh = start = true;
                        break;
                    case "showTooltip":
                        this.model.showTooltip = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "highlightWeekend":
                        this.model.highlightWeekend = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "highlightSection":
                        this.model.highlightSection = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "dateFormat":
                        this.model.dateFormat = jsondata[key];
                        this._ensureValue();
                        break;
                    case "minDate":
                        this._setMinDate(jsondata[key]);
                        jsondata[key] = this.model.minDate;
                        this._ensureValue();
                        validate = callRefresh = start = true;
                        break;
                    case "maxDate":
                        this._setMaxDate(jsondata[key]);
                        jsondata[key] = this.model.maxDate;
                        this._ensureValue();
                        validate = callRefresh = start = true;
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
                        this.model.startDay = ((BoldBIDashboard.isNullOrUndefined(this._options.startDay)) && (this.model.startDay === this.culture.calendar.firstDay))
                            ? -1 : (this._options.startDay === this.defaults.startDay) ? -1 : this.model.startDay;
                        this.model.dateFormat = ((BoldBIDashboard.isNullOrUndefined(this._options.dateFormat)) && (this.model.dateFormat === this.culture.calendar.patterns.d))
                            ? '' : this.model.dateFormat;
                        this._setCulture(jsondata[key]);
                        if (this.model.value) this._setDateValue(this.model.value);
                        jsondata[key] = this.model.locale;
                        callRefresh = start = true;
                        break;
                    case "showOtherMonths":
                        this.model.showOtherMonths = jsondata[key];
                        this._otherMonthsVisibility();
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = jsondata[key];
                        validate = callRefresh = start = true;
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessages = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "readOnly":
                        this.model.readOnly = jsondata[key];
                        this._disbleMaualInput();
                        break;
                    case "width":
                        this._setWidth(jsondata[key]);
                        break;
                    case "height":
                        this._setHeight(jsondata[key]);
                        break;
                    case "cssClass":
                        this._setSkin(jsondata[key]);
                        break;
                    case "enableRTL":
                        this._setRTL(jsondata[key]);
                        break;
                    case "showRoundedCorner":
                        this._setRoundedCorner(jsondata[key]);
                        break;
                    case "enabled":
                        if (!jsondata[key]) this.disable();
                        else this.enable();
                        break;
                    case "buttonText":
                        if (BoldBIDashboard.isNullOrUndefined(this._options)) this._options = {};
                        this._options["buttonText"] = this.model.buttonText = jsondata[key];
                        this._localizedLabels.buttonText = this.model.buttonText;
                        this._setFooterText(jsondata[key]);
                        break;
                    case "showFooter":
                        this._enableFooter(jsondata[key]);
                        break;
                    case "watermarkText":
                        if (BoldBIDashboard.isNullOrUndefined(this._options)) this._options = {};
                        this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                    case "startDay":
                        var initial = jsondata[key];
                        if (parseInt(jsondata[key]) < 0 || parseInt(jsondata[key]) > 6) {
                            jsondata[key] = this.culture.calendar.firstDay;
                            initial = -1;
                        }
                        this.model.startDay = jsondata[key];
                        if (BoldBIDashboard.isNullOrUndefined(this._options)) this._options = {};
                        this._options["startDay"] = initial;
                        callRefresh = start = true;
                        break;
                    case "startLevel":
                        this.model.startLevel = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "headerFormat":
                        this.model.headerFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "depthLevel":
                        this.model.depthLevel = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "allowEdit": this._changeEditable(jsondata[key]); break;
                    case "tooltipFormat":
                        this.model.tooltipFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "allowDrillDown":
                        this._allowQuickPick(jsondata[key]);
                        callRefresh = start = true;
                        break;
                    case "showDisabledRange":
                        this._setRestrictDateState(jsondata[key]);
                        break;
                    case "blackoutDates":
                        this.model.blackoutDates = jsondata[key];
                        this._initDisableObj(this.model.blackoutDates);
                        callRefresh = start = true;
                        break;
                }
            }
            if (validate) {
                this._validateMinMaxDate();
                jsondata["value"] = this.model.value;
                jsondata["maxDate"] = this.model.maxDate;
                jsondata["minDate"] = this.model.minDate;
            }
            this._setWaterMark();

            if (callRefresh && (this.isValidState || this.model.displayInline))
                this._refreshDatepicker();
            if (start) this._startLevel(this.model.startLevel);
            this._triggerChangeEvent();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this.model.displayInline)
                bbdesigner$(window).off("resize", bbdesigner$.proxy(this._OnWindowResize, this));
            if (this._isOpen)
                this.hide();
            this.sfCalendar && this.sfCalendar.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this._cloneElement.removeClass("e-js e-input").removeClass(BoldBIDashboard.util.getNameSpace(this.sfType));
            this._cloneElement.insertAfter(this.element);
            this.element.remove();
        },

        _init: function (options) {
            this._options = options;
            this._cloneElement = this.element.clone();
            this._dt_drilldown = false;
            this._ISORegex();
            this._initDisableObj(this.model.blackoutDates);
            this.animation = {
                open: { duration: 200 },
                close: { duration: 100 }
            };
            this._animating = false;
            this._isInputBox = this._isInputBox();
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._checkAttribute();
            this._setValues();
            this._createDatePicker();
            if (!BoldBIDashboard.isNullOrUndefined(options) && !BoldBIDashboard.isNullOrUndefined(options.validationMessage))
                this.model.validationMessages = this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
        },

        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                }
            }
        },
        _checkAttribute: function () {
            var attr = ["min", "max", "readonly", "disabled"], propName = ["minDate", "maxDate", "readOnly", "enabled"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if (!BoldBIDashboard.isNullOrUndefined(value)) {
                    if (BoldBIDashboard.isNullOrUndefined(this._options))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                    else if (BoldBIDashboard.isNullOrUndefined(this._options[propValue]))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _updateDateValue: function (value) {
            var date = this._checkDateObject(value);
            if (date != null) {
                this.isValidState = true;
                if (date == "") {
                    this.element.val("");
                    this.model.value = null;
                } else {
                    this.model.value = date;
                    this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
                }
            }
            else {
                (typeof date === "string" && this.model.enableStrictMode) ? this.element.val(value) : this.element.val("");
                this.model.value = null;
                this.isValidState = (this.element.val() == "") ? true : false;
            }
            this._removeWatermark();
        },
        _ensureValue: function () {
            var dateValue = this._parseDate(this.element.val(), this.model.dateFormat);
            if (this.model.value)
                this._setDateValue(this.model.value);
            else if (dateValue)
                this._setDateValue(dateValue);
        },
        _changeEditable: function (bool) {
            var action = bool ? "_on" : "_off";
            if (this.element.is(":input")) {
                if (bool) {
                    if (!this.model.readOnly) this.element.attr("readonly", false);
                    this.element.off("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
                }
                else {
                    if (!this.model.readOnly) this.element.attr("readonly", "readonly");
                    if (!this.model.displayInline) this.element.on("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
                }
                this[action](this.element, "blur", this._onFocusOut);
                this[action](this.element, "focus", this._onFocusIn);
                this[action](this.element, "keydown", this._onKeyDown);
            }
        },
        _allowQuickPick: function (value) {
            bbdesigner$('.e-datepicker-headertext', this.sfCalendar)[value ? "on" : "off"]("click", bbdesigner$.proxy(this._forwardNavHandler, this));
        },
        _setRestrictDateState: function (value) {
            var action = value ? "addClass" : "removeClass";
            this.sfCalendar[action]("e-dp-restrict-show");
        },
        _setValues: function () {
            this.Date = new Date();
            this._id = this.element[0].id;
            this.isValidState = true;
            this._setCulture(this.model.locale);
            this._setMinDate(this.model.minDate);
            this._setMaxDate(this.model.maxDate);
            this._calendarDate = this._zeroTime(new Date());
            if (this.model.startDay < 0 || this.model.startDay > 6) this.model.startDay = 0;
            this.Date.firstDayOfWeek = this.model.startDay;
            this.Date.fullYearStart = '20';
            this._showHeader = true;
            if (BoldBIDashboard.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._validateMinMaxDate();
            this._dateValue = new Date(this._calendarDate.toString());
            this._isIE7 = this._checkIE7();
            this._isIE8 = (BoldBIDashboard.browserInfo().name == "msie") && (BoldBIDashboard.browserInfo().version == "8.0") ? true : false;
            this._isIE9 = (BoldBIDashboard.browserInfo().name == "msie") && (BoldBIDashboard.browserInfo().version == "9.0") ? true : false;
            // this variable is set to true in DateTimePicker control
            this._getInternalEvents = false;
            this._flag = true;
            this._ejHLWeekEnd = false;
            this._isOpen = false;
            this._prevDate = null;
            this._preValue = null;
            this._isFocused = false;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled") proxy.disable();
                else if (keyName == "readOnly") proxy.model.readOnly = true;
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (BoldBIDashboard.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);

            });
        },
        _createDatePicker: function () {
            this._createWrapper();
            this._wireEvents();
            if (this.model.displayInline) {
                this.show();
            }
            if (this.model.enableRTL) this._setRTL(true);
            if (this.model.showRoundedCorner) this._setRoundedCorner(true);
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name") && this._isInputBox)
                this.element.attr("name", this.element[0].id);
            if (this.model.displayInline && !this._isInputBox)
                this._hiddenInput.attr("name", this.element[0].id);
        },
        _createWrapper: function () {
            this._getMapper();
            if (this.model.specialDates)
                this._createSpecialDateObject();
			this.element.attr("tabindex","0");
            if (this._isInputBox) {
                this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'aria-expanded':'false','role':'combobox' });
                this.wrapper = BoldBIDashboard.buildTag("span.e-datewidget e-widget " + this.model.cssClass);
                this.wrapper.attr("style", this.element.attr("style"));
                this.element.removeAttr('style');
                if (!BoldBIDashboard.isTouchDevice()) this.wrapper.addClass('e-ntouch');
                this.innerWrapper = BoldBIDashboard.buildTag("span.e-in-wrap e-box e-padding");
                this.wrapper.append(this.innerWrapper).insertBefore(this.element);
                this.innerWrapper.append(this.element);
                this.dateIcon = BoldBIDashboard.buildTag("span.e-select#" + this._id + "-img", "", {}, (this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(BoldBIDashboard.buildTag("span.e-icon e-calendar", "", {}, { 'aria-label': 'Select' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})).insertAfter(this.element);
            }
            if (!this._isSupport || (this.model.displayInline && !this._isInputBox)) {
                this._hiddenInput = BoldBIDashboard.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                if (this._isInputBox) this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                bbdesigner$(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
            this._checkNameAttr();
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            if (this._id)
                bbdesigner$("#e-" + this._id).remove();
            this._setDateValue(this.model.value);
            this._preValue = this._parseDate(this.element.val(), this.model.dateFormat);
            this._setWaterMark();
            this._dateValue = new Date(this._calendarDate.toString());
            if (this.model.displayInline) this._renderPopup();
            else if (this._isInputBox) this._renderDateIcon(this.model.showPopupButton, false);
            if (this.model.readOnly) this._disbleMaualInput();
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && bbdesigner$(this.element).hasClass("e-disable")) this.enable();
            this._layoutChanged();
            this._checkErrorClass();
            this._addAttr(this.model.htmlAttributes);
        },
        _isInputBox: function () {
            return (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type')));
        },

        _renderDateIcon: function (bool, reRender) {
            if (reRender && this.model.showPopupButton == bool) return;
            if (!bool && this.dateIcon) {
                this._bindInputEvent();
                this.dateIcon.css('display', 'none');
                this.innerWrapper.removeClass('e-padding');
            }
            else {
                if (this.innerWrapper) {
                    this.innerWrapper.addClass('e-padding');
                    this.dateIcon.css('display', 'block');
                }
                if (!this.model.displayInline)
                    this._bindDateButton();
            }
            this.model.showPopupButton = bool;
        },

        _resizeCalender: function () {
            if ((this.model.dayHeaderFormat == "short") || (this.model.dayHeaderFormat == "min") || (this.model.dayHeaderFormat == "none"))
                this.sfCalendar.removeClass("e-headerlong");
            else if (this.model.dayHeaderFormat == "long") {
                this.sfCalendar.addClass("e-headerlong");
            }
        },

        _setWidth: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.width(value);
                else this.element.width(value);
            }
            else
                this.model.width = this.wrapper ? this.wrapper.outerWidth() : this.element.width();
        },
        _setHeight: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.height(value);
                else this.element.height(value);
            }
            else
                this.model.height = this.wrapper ? this.wrapper.outerHeight() : this.element.height();
            if (this._isIE7) this.element.height(this.innerWrapper.height());
        },
        _setRTL: function (isRTL) {
            if (isRTL) {
                if (this.wrapper) {
                    this.wrapper.addClass("e-rtl");
                }
                this.sfCalendar && this.sfCalendar.addClass("e-rtl");
            }
            else {
                if (this.wrapper) {
                    this.wrapper.removeClass("e-rtl");
                }
                this.sfCalendar && this.sfCalendar.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (bool) {
            if (bool) {
                if (this.innerWrapper)
                    this.innerWrapper.addClass("e-corner");
                this.sfCalendar && this.sfCalendar.addClass("e-corner");
            }
            else {
                if (this.innerWrapper)
                    this.innerWrapper.removeClass("e-corner");
                this.sfCalendar && this.sfCalendar.removeClass("e-corner");
            }
        },

        _refreshDatepicker: function () {
            if (this._stopRefresh) {
                this._stopRefresh = false
                return;
            }
            var _currentVal = this.element.val();
            //  For checking the year maximum range....
            if (this._specificFormat() && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != _currentVal)
                var currentValue = this._parseDate(_currentVal, true);
            else var currentValue = this._parseDate(_currentVal);
            currentValue = this._validateYearValue(currentValue);
            this._setDateValue(currentValue);
            if (this._specificFormat() && this._compareDate(this.model.value, this._calendarDate))
                this.element.val(_currentVal)
            bbdesigner$(".e-datepicker-headertext", this.sfCalendar).text(this._formatter(this._calendarDate, this.model.headerFormat));
            this._resizeCalender();
            this._dateValue = new Date(this._calendarDate.toString());
            this._hoverDate = this._calendarDate.getDate() - 1;
            this._renderCalendar(this, this._dateValue);
            this._setFooterText(this._localizedLabels.buttonText);
            this._enableFooter(this.model.showFooter);
            this._layoutChanged();
        },
        _validateYearValue: function (value) {
            if (value != null) {
                var twoDigitYearMax = BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard.twoDigitYearMax;
                twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
                if (this._calendarDate.getFullYear() - value.getFullYear() == 100) {
                    if (this._calendarDate.getFullYear() > twoDigitYearMax)
                        value.setFullYear(this._calendarDate.getFullYear())
                }
            }
            return value;
        },
        _setFooterText: function (footerText) {
            bbdesigner$('.e-footer-text', this.sfCalendar).html(footerText);
        },
        _setSkin: function (skin) {
            if (this.wrapper) {
                this.wrapper.removeClass(this.model.cssClass);
                this.wrapper.addClass(skin);
            }
            else {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
            this.sfCalendar.removeClass(this.model.cssClass);
            this.sfCalendar.addClass(skin);
        },
        _setDisplayInline: function (isDisplayInline) {
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this._isInputBox) {
                this.sfCalendar.insertAfter(this.wrapper);
                this._setDatePickerPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.sfCalendar);
                if (!this._isSupport || !this._isInputBox) this._hiddenInput.css("display", "none");
            }
            else {
                this.sfCalendar.css('display', 'none');
                bbdesigner$('body').append(this.sfCalendar);
                this._isOpen = false;
            }
            if (isDisplayInline) {
                this.show();
                this._off(this.dateIcon, "mousedown", this._showDatePopUp);
                this.element.off("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
            }

        },

        _disbleMaualInput: function () {
            if (this.model.readOnly) {
                bbdesigner$(this.element).attr("readonly", "readonly");
                if (!this.model.displayInline) this.hide();
            }
            else if (this.model.allowEdit)
                bbdesigner$(this.element).prop("readonly", false);

        },
        _checkDateObject: function (date, val) {
            if (!date || (typeof JSON === "object" && JSON.stringify(date) === "{}")) return date = null;
            else if (!(date instanceof Date)) {
                if (this._specificFormat())
                    var val = this._parseDate(date, true);
                else
                    var val = this._parseDate(date, val);
                date = val ? val : (val = this._checkJSONString(date)) ? val : null;
            }
            if (!isNaN(Date.parse(date))) {
                this._dateValue = this._calendarDate = this._zeroTime(date)
                if (this._validateDate(date))
                    return this._dateValue;
            }
            return null;
        },
        _checkJSONString: function (date) {
            // Validate the string value
            if (!isNaN(Date.parse(date))) {
                if ((new Date(date).toJSON() === date) || (new Date(date).toDateString() === date) || (new Date(date).toGMTString() === date) ||
                    (new Date(date).toISOString() === date) || (new Date(date).toLocaleString() === date) ||
                    (new Date(date).toString() === date) || (new Date(date).toUTCString() === date)) {
                    return new Date(new Date(date).getTime() + (BoldBIDashboard.serverTimezoneOffset * 60 * 60 * 1000));
                }
                else if (typeof date == "string") return this._dateFromISO(date);
            } else if (this._extISORegex.exec(date) || this._basicISORegex.exec(date)) return this._dateFromISO(date);
        },
        _dateFromISO: function (date) {
            var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _checkInstanceType: function (date) {
            date = this._stringToObject(date);
            if (!date) return null;
            else if (!(date instanceof Date)) {
                date = this._parseDate(date);
            }
            if (!isNaN(Date.parse(date))) return this._zeroTime(date);
            return null;
        },
        _stringToObject: function (value) {
            if (typeof value === "string") {
                var val = BoldBIDashboard.parseDate(value, this.model.dateFormat, this.model.locale);
                value = (val != null) ? val : new Date(value);
            }
            return value;
        },
        _validateMinMaxDate: function () {
            var dateChange = false, valueExceed = false;
            if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
            if (!this.model.enableStrictMode) {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.value = this.model.minDate;
                        dateChange = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.value = this.model.maxDate;
                        dateChange = true;
                    }
                }
                else {
                    this.element.val("");
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
                this.isValidState = true;
            }
            else {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.minDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.maxDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else this.isValidState = true;
                }
                else {
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
            if (dateChange) this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
        },
        _setCulture: function (culture) {
            this.culture = BoldBIDashboard.preferredCulture(culture);
            if (this.culture) {
                this.model.locale = this.culture.name == "en" ? "en-US" : this.culture.name;
                this.Date.dayNames = this.culture.calendar.days.names;
                this.Date.dayNamesMin = this.culture.calendar.days.namesShort;
                this.Date.abbrDayNames = this.culture.calendar.days.namesAbbr;
                this.Date.monthNames = this.culture.calendar.months.names;
                this.Date.abbrMonthNames = this.culture.calendar.months.namesAbbr;
                this.Date.format = this.culture.calendar.patterns.d;
                if (this.model.dateFormat == '') this.model.dateFormat = this.culture.calendar.patterns.d;
                if (this.model.startDay == -1) this.model.startDay = this.culture.calendar.firstDay;
            }
            this._separator = this._getSeparator();
            this._localizedLabels = this._getLocalizedLabels();

            if (!BoldBIDashboard.isNullOrUndefined(this._options)) {
                if (!BoldBIDashboard.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
                if (!BoldBIDashboard.isNullOrUndefined(this._options.buttonText))
                    this._localizedLabels.buttonText = this._options.buttonText;
            }
            this._localizedLabelToModel();
        },

        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },

        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    bbdesigner$(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },

        _setDatePickerPosition: function () {
            if (!this.model.displayInline || this._isInputBox) {
                var elementObj = this.element.is('input') ? this.wrapper : this.element;
                var pos = this._getOffset(elementObj), winLeftWidth, winRightWidth,
                winBottomHeight = bbdesigner$(document).scrollTop() + bbdesigner$(window).height() - (pos.top + bbdesigner$(elementObj).outerHeight()),
                winTopHeight = pos.top - bbdesigner$(document).scrollTop(),
                popupHeight = this.sfCalendar.outerHeight(),
                popupWidth = this.sfCalendar.outerWidth(),
                left = pos.left,
                totalHeight = elementObj.outerHeight(),
                border = (totalHeight - elementObj.height()) / 2,
                maxZ = this._getZindexPartial(), popupmargin = 3,
                topPos = (popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin; // popupmargin denotes space b/w the element and the popup.
                winLeftWidth = bbdesigner$(document).scrollLeft() + bbdesigner$(window).width() - left;
                winRightWidth = bbdesigner$(document).scrollLeft() + left + elementObj.width();
                if (this.model.enableRTL || popupWidth > winLeftWidth && (popupWidth < left + elementObj.outerWidth()) && !BoldBIDashboard.isNullOrUndefined(this.wrapper))
                    left += this.wrapper.width() - this.sfCalendar.width();
                if (popupWidth > winRightWidth) left = pos.left;
                this.sfCalendar.css({
                    "left": left + "px",
                    "top": topPos + "px",
                    "z-index": maxZ
                });
            }
        },

        _getOffset: function (ele) {
            return BoldBIDashboard.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return BoldBIDashboard.util.getZindexPartial(this.element, this.sfCalendar);
        },

        _setMinDate: function (d) {
            this.model.minDate = this._checkInstanceType(d);
            if (!this.model.minDate) {
                this.model.minDate = (new Date('11/31/1899'));
            }
        },

        _setMaxDate: function (d) {
            this.model.maxDate = this._checkInstanceType(d);
            if (!this.model.maxDate) {
                this.model.maxDate = (new Date('12/31/2099')); // using the JS Date.parse function which expects mm/dd/yyyy
            }
        },
        _setDateValue: function (date, val) {
            var newDate = this._checkDateObject(date, val);
            if (newDate != null) {
                this.isValidState = true;
                this.model.value = new Date(newDate.toString());
                if (!this.model.displayInline)
                    this.wrapper.addClass('e-valid');
                this._validateMinMaxDate();
                this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            }
            else {
                if (date instanceof Date) {
                    this._validateMinMaxDate();
                    date = this._formatter(date, this.model.dateFormat);
                }
                (this.model.enableStrictMode) ? this.element.val(date) : this.element.val(null);
                this.model.value = null; //updating model value as null to avoid the recursive call to this method
                if (!this.model.displayInline)
                    this.wrapper.removeClass('e-valid');
                this._triggerChangeEvent();
                this.isValidState = (this.element.val() == "" || BoldBIDashboard.isNullOrUndefined(this.element.val())) ? true : false;
            }
            this._removeWatermark();
        },
        _updateInputVal: function () {
            var val = this._validateValue();
            if ((val != null || !this.model.enableStrictMode) && this.sfCalendar && this.sfCalendar.find('.e-datepicker-days').is(':visible'))
                this._refreshDatepicker();
        },
        _validateInputVal: function () {
            var val = this._validateValue();
            if (val != null) {
                if (!this.model.enableStrictMode) {
                    if (val <= this.model.maxDate && val >= this.model.minDate)
                        this.isValidState = true;
                    else {
                        this.model.value = null;
                        this.isValidState = true;
                    }
                }
            }
        },

        _validateValue: function () {
            if (this._specificFormat() && this.element.val() != this._formatter(this._preValue, this.model.dateFormat, this.model.locale))
                var value = this._parseDate(this.element.val(), true);
            else var value = this._parseDate(this.element.val());
            return this._validateYearValue(value);
        },
        _getSeparator: function () {
            var formats;
            if (this.culture) {
                formats = this.culture.calendar.patterns.d;
            }
            else formats = this.model.dateFormat;
            var regex = new RegExp("^[a-zA-Z0-9]+$");
            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats[i])) return formats[i];
            }
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },

        //Date formatter - Convert date object to specific date format
        _formatter: function (date, format) {
            var newFormat = this._checkFormat(format);
            return BoldBIDashboard.format(date, newFormat, this.model.locale);
        },
        _parseDate: function (date, type) {
            var newFormat = this._checkFormat(this.model.dateFormat);
            var DateValue = date;
            if ((this._specificFormat()) && DateValue != undefined && date != "" && type != true && !(BoldBIDashboard.format(BoldBIDashboard.parseDate(DateValue, newFormat, this.model.locale), this.model.dateFormat, this.model.locale) == DateValue)) {
                return this._dateValue;
            }
            else return BoldBIDashboard.parseDate(date, newFormat, this.model.locale);
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? BoldBIDashboard.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },

        isLeapYear: function (year) {
            return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
        },
        //Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
        _zeroTime: function (date) {
            var newDate = typeof date === "string" ? this._parseDate(date) : new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },

        _getDaysInMonth: function (date) {
            return [31, (this.isLeapYear(date) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][date.getMonth()];
        },

        _addDays: function (d, number) {
            d.setDate(d.getDate() + number);
            return d;
        },

        _addYears: function (d, number) {
            d.setFullYear(d.getFullYear() + number);
            return d;
        },

        _addMonths: function (d, number) {
            var tempDatedateMonth = d.getDate();
            d.setMonth(d.getMonth() + number);
            if (tempDatedateMonth > d.getDate())
                this._addDays(d, -d.getDate());
            return d;
        },
        //Checks if the day is a weekend day (Sat or Sun).
        _isWeekend: function (date) {
            return date.getDay() == 0 || date.getDay() == 6;
        },

        _isSpecialDates: function (dates) {
            if (this.model.specialDates) {
                for (var i = 0; i < this.model.specialDates.length; i++) {
                    if (this.model.specialDates[i] && this.model.specialDates[i][this._mapField._date]) {
                        if (dates.getDate() == this.model.specialDates[i][this._mapField._date].getDate() && dates.getMonth() == this.model.specialDates[i][this._mapField._date].getMonth() && dates.getFullYear() == this.model.specialDates[i][this._mapField._date].getFullYear()) {
                            this._getIndex = i;
                            return true;
                        }
                    }
                }
            }
            return false;
        },
        _getMapper: function () {
            var mapper = this.model.fields;
            this._mapField = {};
            this._mapField["_date"] = (mapper && mapper.date) ? mapper["date"] : "date";
            this._mapField["_tooltip"] = (mapper && mapper.tooltip) ? mapper["tooltip"] : "tooltip";
            this._mapField["_icon"] = (mapper && mapper.iconClass) ? mapper["iconClass"] : "iconClass";
            this._mapField["_custom"] = (mapper && mapper.cssClass) ? mapper["cssClass"] : "cssClass";
        },
        _createSpecialDateObject: function () {
            for (var i = 0; i < this.model.specialDates.length; i++) {
                this.model.specialDates[i][this._mapField._date] = this._checkInstanceType(this.model.specialDates[i][this._mapField._date]);
            }
        },

        _getMonthName: function (abbreviated, date) {
            return abbreviated ? this.Date.abbrMonthNames[date.getMonth()] : this.Date.monthNames[date.getMonth()];
        },



        _displayNewMonth: function (m, y) {
            this._setDisplayedMonth(this.displayedMonth + m, this.displayedYear + y, true);
            return false;
        },

        _setDisplayedMonth: function (m, y, rerender) {
            if (this.model.minDate == undefined || this.model.maxDate == undefined) {
                return;
            }
            var s = new Date(this.model.minDate.getTime());
            s.setDate(1);
            var e = new Date(this.model.maxDate.getTime());
            e.setDate(1);

            var t;
            if ((!m && !y) || (isNaN(m) && isNaN(y))) {

                t = this._zeroTime(new Date());
                t.setDate(1);
            } else if (isNaN(m)) {

                t = new Date(y, this.displayedMonth, 1);
            } else if (isNaN(y)) {

                t = new Date(this.displayedYear, m, 1);
            } else {

                t = new Date(y, m, 1);
            }

            if (t.getTime() < s.getTime()) {
                t = s;
            } else if (t.getTime() > e.getTime()) {
                t = e;
            }
            var oldMonth = this.displayedMonth;
            var oldYear = this.displayedYear;
            this.displayedMonth = t.getMonth();
            this.displayedYear = t.getFullYear();
            var tempDate = t;
            if (rerender && (this.displayedMonth != oldMonth || this.displayedYear != oldYear)) {
                this._renderCalendar(this, tempDate);
                this._dateValue = tempDate;
                this._trigger("monthChanged", [this.displayedMonth, this.displayedYear]);
            }
        },
        _clearSelected: function () {
            this.numSelected = 0;
            if (!BoldBIDashboard.isNullOrUndefined(this.sfCalendar)) {
                if (this.model.highlightSection == "week") {
                    bbdesigner$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-selected-week');
                }
                else if (this.model.highlightSection == "month") {
                    bbdesigner$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().parent().removeClass('e-selected-month');
                }
                else if (this.model.highlightSection == "workdays") {
                    bbdesigner$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-work-week');
                }
                else
                    bbdesigner$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false);
            }

        },
        _addSelected: function () {
            if (this.model.highlightSection == "week") {
                bbdesigner$('td.e-active', this.sfCalendar).parent().addClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                bbdesigner$('td.e-active, this.sfCalendar').parent().parent().addClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                bbdesigner$('td.e-active', this.sfCalendar).parent().addClass('e-work-week');
            }
        },

        _hideOtherMonths: function (sfCalendar) {
            bbdesigner$('td.other-month', sfCalendar).css("visibility", "hidden");
        },
        _showOtherMonths: function (sfCalendar) {
            bbdesigner$('td.other-month', sfCalendar).css({ 'visibility': 'visible' });
        },
        _otherMonthsVisibility: function () {
            if (this.model.showOtherMonths)
                this._showOtherMonths(this.sfCalendar);
            else
                this._hideOtherMonths(this.sfCalendar);
        },

        _createCalender: function () {
            BoldBIDashboard.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(BoldBIDashboard.buildTag("span.e-prev").append(BoldBIDashboard.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(BoldBIDashboard.buildTag("span.e-text").append(BoldBIDashboard.buildTag("span.e-datepicker-headertext").text(this._formatter(this._calendarDate, this.model.headerFormat)).attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(BoldBIDashboard.buildTag("span.e-next").append(BoldBIDashboard.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .appendTo(this.sfCalendar);
            this._enableHeader(this._showHeader);
            var table = BoldBIDashboard.buildTag("table.e-dp-viewdays", "", {}).data("e-table", "data").attr({ 'role': 'grid'}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.sfCalendar.append(table);
            this._renderCalendar(this);
            this._startLevel(this.model.startLevel);
            BoldBIDashboard.buildTag("div.e-footer")
                .append(BoldBIDashboard.buildTag("span.e-footer-icon"))
                .append(BoldBIDashboard.buildTag("span.e-footer-text"))
                .appendTo(this.sfCalendar);
            bbdesigner$('.e-footer-text', this.sfCalendar).html(this._localizedLabels.buttonText);
            this._enableFooter(this.model.showFooter);
        },
        _enableHeader: function (show) {
            if (show) bbdesigner$(".e-header", this.sfCalendar).show();
            else bbdesigner$(".e-header", this.sfCalendar).hide();
        },
        _enableFooter: function (show) {
            if (show) bbdesigner$('.e-footer', this.sfCalendar).show();
            else bbdesigner$('.e-footer', this.sfCalendar).hide();
            this._todayBtnDisable();
        },
        _todayBtnDisable: function () {
            var today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 0, 0, 0);
            if (!(+this.model.minDate <= +today && +this.model.maxDate >= +today)) {
                bbdesigner$('.e-footer', this.sfCalendar).addClass('e-footer-disable')
            } else {
                bbdesigner$('.e-footer', this.sfCalendar).removeClass('e-footer-disable')
            }
        },
        _checkArrows: function (min, max) {
            this._preArrowCondition(min, this.model.minDate.getFullYear());
            this._nextArrowCondition(max, this.model.maxDate.getFullYear());
        },
        _checkDateArrows: function () {
            this._preArrowCondition(this._tempMinDate, this.model.minDate);
            this._nextArrowCondition(this._tempMaxDate, this.model.maxDate);
        },
        _preArrowCondition: function (val1, val2) {
            if (val1 <= val2) this.sfCalendar.find(".e-arrow-sans-left").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-arrow-sans-left").removeClass("e-disable").attr({ "aria-disabled": false });
        },
        _nextArrowCondition: function (val1, val2) {
            if (val1 >= val2) this.sfCalendar.find(".e-arrow-sans-right").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-arrow-sans-right").removeClass("e-disable").attr({ "aria-disabled": false });
        },

        _previousNextHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled || bbdesigner$(event.target).hasClass("e-disable")) return false;
            event.preventDefault();
            var prevTable = bbdesigner$("table", this.sfCalendar), navFrom;
            navFrom = this._navigateFrom(prevTable);
            var element = (bbdesigner$(event.target).is('a')) ? bbdesigner$(event.target.parentNode) : bbdesigner$(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrevDate(progress);
            var currentTable = bbdesigner$("table", this.sfCalendar), tClassName, navTo;
            tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case "e-dp-viewdays": navTo = "month"; break;
                case "e-dp-viewmonths": navTo = "year"; break;
                case "e-dp-viewyears": navTo = "decade"; break;
                case "e-dp-viewallyears": navTo = "century"; break;
            }
            this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
        },
        _processNextPrevDate: function (progress) {
            if (this._DRPdisableFade) {
                var s = new Date(this.sfCalendar.find("td.current-month").attr("data-date"));
                this._dateValue = s;
            }
            if (progress && this.sfCalendar.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
            else if (!progress && this.sfCalendar.find(".e-arrow-sans-right").hasClass("e-disable")) return false;

            var currentTable = bbdesigner$("table", this.sfCalendar), temp;
            var tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case 'e-dp-viewdays':
                    var step = this.model.stepMonths;
                    if (progress) {
                        if (this._dateValue <= this.model.minDate) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (this._dateValue >= this.model.maxDate) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addMonths(this._dateValue, (progress ? -step : step));
                    if (this._clickedDate)
                        this._calendarDate = this._clickedDate;
                    this._dateValue = this._dateValue < this.model.minDate ? new Date(this.model.minDate.toString()) : this._dateValue;
                    this._dateValue = this._dateValue > this.model.maxDate ? new Date(this.model.maxDate.toString()) : this._dateValue;
                    this._renderCalendar(this, this._dateValue);
                    bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    this._addFocus('day', this._hoverDate);
                    var dateRange = this._findFirstLastDay(new Date(this._dateValue.toString()));
                    this._preArrowCondition(dateRange.firstDay, this.model.minDate);
                    this._nextArrowCondition(dateRange.lastDay, this.model.maxDate);
                    break;
                case 'e-dp-viewmonths':
                    var dateValue = this._dateValue;
                    dateValue.setFullYear(bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text())
                    if (progress) {
                        if (dateValue.getFullYear() <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (dateValue.getFullYear() >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addYears(dateValue, (progress ? -1 : 1));
                    this._renderCalendar(this, dateValue);
                    temp = dateValue.getFullYear();
                    bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    bbdesigner$('tbody,tr.e-week-header', currentTable).not('.e-datepicker-months').hide();
                    bbdesigner$(bbdesigner$(currentTable).find('.e-datepicker-months')).show();
                    this._addFocus('month', this._hoverMonth);
                    this._checkArrows(temp, temp);
                    break;
                case 'e-dp-viewyears':
                    var yearValue;
                    yearValue = this._dateValue
                    yearValue.setFullYear(bbdesigner$(currentTable).find(".e-state-hover").text());
                    if (progress) {
                        if (parseInt(bbdesigner$('td.e-year-first:first').text()) <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (parseInt(bbdesigner$('td.e-year-last:first').prev().text()) >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    if ((bbdesigner$(currentTable).find(".e-state-hover").hasClass('e-year-first') && progress) || (bbdesigner$(currentTable).find(".e-state-hover").hasClass('e-year-last') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear());
                    else if ((bbdesigner$(currentTable).find(".e-state-hover").hasClass('e-year-first') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() + 11);
                    else if ((bbdesigner$(currentTable).find(".e-state-hover").hasClass('e-year-last') && progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() - 11);
                    else
                        this._dateValue.setFullYear(yearValue.getFullYear() + (progress ? -10 : 10));
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    bbdesigner$(".e-datepicker-headertext", this.sfCalendar).text((setYear + 1) + ' - ' + (setYear + 10));
                    bbdesigner$('tbody,tr.e-week-header', currentTable).not('.e-datepicker-years').hide();
                    bbdesigner$(bbdesigner$(currentTable).find('.e-datepicker-years')).show();
                    this._addFocus('year', this._hoverYear + (!(bbdesigner$('.e-year-first.e-hidedate').length) ? 0 : -1));
                    this._checkArrows(setYear + 1, setYear + 10);
                    break;
                case 'e-dp-viewallyears':
                    var headYears;
                    if (progress) {
                        headYears = parseFloat(bbdesigner$('td.e-allyear-first', currentTable.get(0)).text().split('-')[1]);
                        if (headYears <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else {
                            this._flag = true;
                        }

                    } else {
                        headYears = parseFloat(bbdesigner$('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                        if (headYears >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else
                            this._flag = true;
                    }
                    this._dateValue.setFullYear((!(this._lastHoveredYear) ? this._dateValue.getFullYear() : this._lastHoveredYear) + (progress ? -100 : 100));
                    this._lastHoveredYear = this._dateValue.getFullYear();
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 100) + 1);
                    temp = parseFloat(bbdesigner$('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                    bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text((setYear + 1) + ' - ' + temp);
                    bbdesigner$('tbody,tr.e-week-header', currentTable).not('.e-datepicker-allyears').hide();
                    bbdesigner$(bbdesigner$(currentTable).find('.e-datepicker-allyears')).show();
                    this._addFocus('allyear', this._hoverAllYear + (!(bbdesigner$('.e-allyear-first.e-hidedate').length) ? 0 : -1));
                    this._checkArrows(setYear + 1, temp);
                    break;
            }
            this._layoutChanged();
        },
        _addFocus: function (selection, index) {
            var cls = 'e-current-' + selection;
            if (selection == 'day') cls = 'current-month';
            var items = this.sfCalendar.find('tbody tr td.' + cls);
            if (selection == "month") {
                bbdesigner$(items).each(function (i, ele) {
                    if (parseInt(bbdesigner$(ele).attr("data-index")) == parseInt(index)) {
                        index = i;
                        return;
                    }
                });
            }
            var cell = items[index];
            if (!cell) cell = items.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            bbdesigner$(cell).addClass("e-state-hover");
            this._setActiveState(selection);
            return index;
        },
        _setActiveState: function (selection) {
            if (!(this.model.value instanceof Date)) return;
            var items = this.sfCalendar.find('tbody tr td.e-current-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "month":
                    if (this.model.value.getFullYear() === parseInt(bbdesigner$('.e-text', this.sfCalendar).text())) {
                        bbdesigner$(items).each(function (i, ele) {
                            if (parseInt(bbdesigner$(ele).attr("data-index")) == parseInt(proxy.model.value.getMonth())) {
                                indx = i;
                                return;
                            }
                        });
                    }
                    break;
                case "year":
                    var value = this.model.value.getFullYear();
                    bbdesigner$(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(value)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
                case "allyear":
                    var start = parseInt(this.model.value.getFullYear()) - ((parseInt(this.model.value.getFullYear()) % 10) + 1);
                    var active = (start + 1) + ' - ' + (start + 10);
                    bbdesigner$(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(active)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
            }
            cell = items[indx];
            if (cell) {
                this.sfCalendar.find('table td').removeClass("e-active");
                if (!bbdesigner$(cell).hasClass('e-hidedate'))
                    bbdesigner$(cell).addClass("e-active");
            }
        },
        _setFocusByName: function (name, value) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            bbdesigner$(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            bbdesigner$(cell).addClass("e-state-hover");
            this._setActiveState(name);
            return index;
        },
        _getHeaderTxt: function () {
            return this.sfCalendar.find(".e-datepicker-headertext").text();
        },
        _findFirstLastDay: function (value) {
            var y = value.getFullYear(), m = value.getMonth();
            var firstDay = new Date(y, m, 1);
            var lastDay = new Date(y, m + 1, 0);
            return { firstDay: firstDay, lastDay: lastDay }
        },
        _forwardNavHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (event) event.preventDefault();

            var currentTable = bbdesigner$("table", this.sfCalendar);
            var tclassName = bbdesigner$("table", this.sfCalendar).get(0).className, proxy = this, headerTxt, navTo;
            var navFrom = this._navigateFrom(currentTable);
            switch (tclassName) {
                case 'e-dp-viewdays':
                    this._hoverMonth = this._getDateObj(currentTable.find(".e-state-hover")).getMonth() ||
                                this._getDateObj(currentTable.find(".e-active")).getMonth() || 0;
                    if (this._DRPdisableFade) {
                        this._renderCalendar(this, this._calendarDate);
                        bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    }
                    this._startLevel("year"); navTo = "year";
                    this._addFocus('month', this._hoverMonth);
                    break;
                case 'e-dp-viewmonths':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("decade"); navTo = "decade";
                    this._hoverYear = this._setFocusByName('year', headerTxt);
                    break;
                case 'e-dp-viewyears':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("century"); navTo = "century";
                    this._hoverAllYear = this._setFocusByName('allyear', headerTxt);
                    break;
            }
            if (navFrom != "century") this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
            this._layoutChanged();
        },
        _cellSelection: function () {
            var currentTable = bbdesigner$("table", this.sfCalendar);
            var tclassName = bbdesigner$("table", this.sfCalendar).get(0).className;
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    this._hoverMonth = this._addFocus('month', this._dateValue.getMonth());
                    break;
                case 'e-dp-viewyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('year');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    this._hoverYear = this._setFocusByName('year', this._dateValue.getFullYear());
                    break;
                case 'e-dp-viewallyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('allyear');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', setYear + 1 + ' - ' + setYear + 10);
                    break;
            }
            this._layoutChanged();
        },
        _navigationToPrevNext: function (name) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            var value = this._dateValue.getFullYear();
            bbdesigner$(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (cell) {
                if (bbdesigner$(cell).hasClass('e-' + name + '-last'))
                    this._processNextPrevDate(false)
                else if (bbdesigner$(cell).hasClass('e-' + name + '-first'))
                    this._processNextPrevDate(true);
            }
        },
        _navigateFrom: function (prevTable) {
            var tPrevClassName = prevTable.get(0).className, navFrom;
            switch (tPrevClassName) {
                case "e-dp-viewdays": navFrom = "month"; break;
                case "e-dp-viewmonths": navFrom = "year"; break;
                case "e-dp-viewyears": navFrom = "decade"; break;
                case "e-dp-viewallyears": navFrom = "century"; break;
            }
            return navFrom;
        },
        _backwardNavHandler: function (event) {
            this._animating = true;
            if (this.model.readOnly || !this.model.enabled) return false;
            var element;
            if (event.type) {
                event.preventDefault();
                element = bbdesigner$(event.currentTarget);
            }
            else element = event;
            var cTable = bbdesigner$("table", this.sfCalendar), temp;
            var tclassName = bbdesigner$("table", this.sfCalendar).get(0).className, proxy = this, navTo;
            var navFrom = this._navigateFrom(cTable);
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    cTable.removeClass("e-dp-viewmonths").addClass("e-dp-viewdays");
                    this._lastHoveredMonth = parseInt(bbdesigner$(element).attr('data-index'));
                    this._dateValue = new Date(this._dateValue.getFullYear(), this._lastHoveredMonth, 1);
                    if (this._DRPdisableFade) this._trigger("_month_Loaded", { currentTarget: event.currentTarget });
                    this._renderCalendar(this, this._dateValue);
                    bbdesigner$('tbody', cTable).not('.e-datepicker-days,.e-week-header').hide();
                    bbdesigner$(bbdesigner$(cTable).find('.e-datepicker-days,.e-week-header')).fadeIn("fast", function () {
                        proxy._addFocus('day', proxy._hoverDate || 0);
                        proxy._animating = false;
                    });
                    bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat)); navTo = "month";
                    break;
                case 'e-dp-viewyears':
                    cTable.removeClass("e-dp-viewyears").addClass("e-dp-viewmonths");
                    this._lastHoveredYear = parseInt(element.text());
                    this._dateValue.setFullYear(this._lastHoveredYear);
                    this._renderCalendar(this, this._dateValue);
                    bbdesigner$('tbody,tr.e-week-header', cTable).not('.e-datepicker-months').hide();
                    if (BoldBIDashboard.isNullOrUndefined(this._hoverMonth) && !BoldBIDashboard.isNullOrUndefined(this._dateValue)) this._hoverMonth = this._dateValue.getMonth();
                    bbdesigner$(bbdesigner$(cTable).find('.e-datepicker-months')).fadeIn("fast", function () {
                        proxy._addFocus('month', proxy._hoverMonth || 0);
                        proxy._animating = false;
                    });
                    temp = element.text();
                    bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    this._checkArrows(temp, temp); navTo = "year";
                    break;
                case 'e-dp-viewallyears':
                    var headYears = element.text().split('-');
                    cTable.removeClass("e-dp-viewallyears").addClass("e-dp-viewyears");
                    if (headYears[0] < this.model.minDate.getFullYear()) headYears[0] = this.model.minDate.getFullYear().toString();
                    else if (headYears[0] > this.model.maxDate.getFullYear()) headYears[0] = this.model.maxDate.getFullYear().toString();
                    this._renderCalendar(this, (new Date(headYears[0], 0, 1)));
                    bbdesigner$('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    bbdesigner$(bbdesigner$(cTable).find('.e-datepicker-years')).fadeIn("fast", function () {
                        proxy._addFocus('year', proxy._hoverYear || 0);
                        proxy._animating = false;
                    });
                    bbdesigner$('.e-datepicker-headertext', this.sfCalendar).text(headYears[0] + ' - ' + headYears[1]);
                    this._checkArrows(headYears[0], headYears[1]); navTo = "decade";
                    this._dateValue = new Date(this._dateValue.setFullYear(parseInt(bbdesigner$.trim(headYears[0])) + ((!this._lastHoveredYear) ? this._dateValue.getFullYear() % 10 : this._lastHoveredYear % 10)));
                    break;
                default:
                    this._clearSelected();
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    element.not('td.other-month.e-hidedate').addClass('e-active').attr('aria-selected', true);
                    this._addSelected();

                    this._hoverDate = this._getDateObj(element).getDate() - 1;
                    this._dateValue = new Date(element.attr('data-date'));
                    this._clickedDate = new Date(element.attr('data-date'));
                    this._animating = false;
                    break;
            }
            if (navFrom != "month") this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
            this._layoutChanged();
        },

        _startLevel: function (start) {
            var cTable = bbdesigner$("table", this.sfCalendar);
            var headerText = bbdesigner$(".e-datepicker-headertext", this.sfCalendar), s, e;
            var dateValue = this._dateValue;
            switch (start) {
                case "decade":
                    cTable.removeClass("e-dp-viewallyears e-dp-viewmonths e-dp-viewdays").addClass("e-dp-viewyears");
                    bbdesigner$('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    bbdesigner$(bbdesigner$(cTable).find('.e-datepicker-years')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) dateValue = this._calendarDate;
                    else dateValue = dateValue;
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    s = setYear + 1;
                    e = setYear + 10;
                    headerText.text(s + ' - ' + e);
                    this._checkArrows(s, e);
                    this._hoverYear = this._setFocusByName('year', dateValue.getFullYear());
                    break;
                case "century":
                    if (!(this._calendarDate < this._dateValue)) this._renderCalendar(this, dateValue);
                    cTable.removeClass("e-dp-viewyears e-dp-viewdays e-dp-viewmonths").addClass("e-dp-viewallyears");
                    bbdesigner$('tbody,tr.e-week-header', cTable).not('.e-datepicker-allyears').hide();
                    bbdesigner$(bbdesigner$(cTable).find('.e-datepicker-allyears')).show();
                    s = parseFloat(bbdesigner$('td.e-allyear-first', cTable.get(0)).text().split('-')[1]) + 1;
                    e = parseFloat(bbdesigner$('td.e-allyear-last', cTable.get(0)).prev().text().split('-')[1]);
                    var headYears = s + ' - ' + e;
                    headerText.text(headYears);
                    this._checkArrows(s, e);
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', (setYear + 1) + ' - ' + (setYear + 10));
                    break;
                case "year":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewdays").addClass("e-dp-viewmonths");
                    bbdesigner$('tbody,tr.e-week-header', cTable).hide();
                    bbdesigner$(bbdesigner$(cTable).find('.e-datepicker-months')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) s = this._calendarDate.getFullYear();
                    else s = dateValue.getFullYear();
                    headerText.text(s);
                    this._checkArrows(s, s);
                    this._hoverMonth = dateValue.getMonth();
                    this._addFocus('month', this._hoverMonth);
                    break;
                case "month":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewmonths").addClass("e-dp-viewdays ");
                    break;
            }
        },
        _depthLevel: function (depth) {
            var calendarTable = this.sfCalendar;
            switch (depth) {
                case "year":
                    bbdesigner$(calendarTable.find('.e-current-year,.e-current-allyear')).on("click", bbdesigner$.proxy(this._backwardNavHandler, this));
                    this._on(bbdesigner$('.e-current-month', this.sfCalendar), "click", bbdesigner$.proxy(this._onDepthSelectHandler, this));
                    break;
                case "decade":
                    bbdesigner$(calendarTable.find('.e-current-allyear')).on("click", bbdesigner$.proxy(this._backwardNavHandler, this));
                    bbdesigner$('.e-current-year', this.sfCalendar).on("click", bbdesigner$.proxy(this._onDepthSelectHandler, this));
                    break;
                case "century":
                    bbdesigner$(calendarTable.find('.e-current-allyear')).on("click", bbdesigner$.proxy(this._onDepthSelectHandler, this));
                    break;
                case "month":
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", bbdesigner$.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", bbdesigner$.proxy(this._onSetCancelDateHandler, this));
            }
        },
        _onDepthSelectHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (bbdesigner$(e.target).hasClass("e-current-month"))
                this._dateValue = new Date(this._dateValue.setMonth(parseInt(e.target.attributes["data-index"].value)));
            else if (bbdesigner$(e.target).hasClass("e-current-year"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            else if (bbdesigner$(e.target).hasClass("e-current-allyear"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            this._onSetCancelDateHandler(e);
        },

        _datepickerMonths: function (tbody, calendarTable, currentDate) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var month = 0;
            for (var i = 0; i < 3; i++) {
                var row = bbdesigner$(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = bbdesigner$(dc('td'))
                        .addClass('e-current-month e-state-default')
                        .attr({ 'data-index': month }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(this.Date.abbrMonthNames[month++]);
                    if (currentDate.getFullYear() < this.model.minDate.getFullYear() || currentDate.getFullYear() > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    else if ((currentDate.getFullYear() <= this.model.minDate.getFullYear() && month < this.model.minDate.getMonth() + 1) ||
                        (currentDate.getFullYear() >= this.model.maxDate.getFullYear() && month > this.model.maxDate.getMonth() + 1)) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            var s = currentDate.getFullYear();
            this._checkArrows(s, s);
        },

        _datepickerYears: function (tbody, calendarTable, currentYear) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 10) + 1);
            var years = [];
            for (var j = 0; j < 12; j++) {
                years.push(Year + j);
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = bbdesigner$(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = bbdesigner$(dc('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)
                        td.addClass('e-year-first e-current-year ');
                    else if (year == 11)
                        td.addClass('e-year-last e-current-year ');
                    else
                        td.addClass('e-current-year e-state-default');
                    if (years[year] < this.model.minDate.getFullYear() || years[year] > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-year');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            this._checkArrows(years[0], years[years.length]);
        },

        _datepickerAllYears: function (tbody, calendarTable, currentYear) {
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 100) + 10);
            var headYear = Year;
            var years = [], newline = this._isIE8 || this._isIE9 ? "" : "\n";

            for (var j = 0; j < 12; j++) {
                years.push(parseInt(Year) + " -" + newline + parseInt(Year + 9));
                Year = Year + 10;
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = bbdesigner$(document.createElement('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = bbdesigner$(document.createElement('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)
                        td.addClass('e-allyear-first e-current-allyear ');
                    else if (year == 11)
                        td.addClass('e-allyear-last e-current-allyear ');
                    else
                        td.addClass('e-current-allyear e-state-default');
                    if (parseInt(years[year].split('-\n')[1]) < this.model.minDate.getFullYear() || parseInt(years[year].split('-\n')[0]) > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-allyear');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
        },
        _renderHeader: function (dpObject) {
            var thead = bbdesigner$(document.createElement('thead'));
            var cultureObj = BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard.days;
            if (dpObject.model.dayHeaderFormat != "none") {
                var headRow = BoldBIDashboard.buildTag("tr.e-week-header").attr({ 'role': 'row' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                if (this.model.weekNumber == true) {
                    var WeekCulture = BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard.week;
                    var day = WeekCulture.name;
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "short")
                        headerday = WeekCulture.nameAbbr;
                    else if (dpObject.model.dayHeaderFormat == "long") headerday = week;
                    else headerday = WeekCulture.nameShort;
                    var tr = BoldBIDashboard.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'data-date': day, 'title': this._formatter(day, "dddd") }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(headerday);
                    headRow.append(tr);
                }
                for (var i = this.Date.firstDayOfWeek; i < this.Date.firstDayOfWeek + 7; i++) {
                    var weekday = i % 7;
                    var day = cultureObj.names[weekday];
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "short")
                        headerday = cultureObj.namesAbbr[weekday];
                    else if (dpObject.model.dayHeaderFormat == "long") headerday = day;
                    else headerday = cultureObj.namesShort[weekday];
                    var th = BoldBIDashboard.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'data-date': day, 'title': this._formatter(day, "dddd"), 'class': (weekday == 0 || weekday == 6 ? 'e-week-end' : 'e-week-day') }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                            .html(headerday);
                    headRow.append(th);
                }
            };
            return thead.append(headRow);
        },

        _renderCalendar: function (dpObject, date) {
            var proxy = this, today;
            dpObject = bbdesigner$.extend({}, BoldBIDashboard.DatePicker.prototype.defaults, dpObject);
            this.Date.firstDayOfWeek = this.model.startDay;
            if (date) today = date;
            else if (this._calendarDate) today = this._calendarDate;
            else today = proxy._zeroTime(new Date());
            var calendarTable = bbdesigner$('table', this.sfCalendar);
            calendarTable.empty();

            calendarTable.append(this._renderHeader(dpObject));

            var tbody = BoldBIDashboard.buildTag('tbody.e-datepicker-allyears', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerAllYears(tbody, calendarTable, today.getFullYear());

            tbody = BoldBIDashboard.buildTag("tbody.e-datepicker-years", "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerYears(tbody, calendarTable, today.getFullYear());
            var month = dpObject.model.month == undefined ? today.getMonth() : dpObject.model.month;
            var year = dpObject.model.year || today.getFullYear();
            var currentDate = (new Date(year, month, 1, 0, 0, 0));
            var firstDayOffset = this.Date.firstDayOfWeek - currentDate.getDay() + 1;
            if (firstDayOffset > 1) firstDayOffset -= 7;
            var weeksToDraw = Math.ceil(((-1 * firstDayOffset + 1) + this._getDaysInMonth(currentDate)) / 7);
            this._addDays(currentDate, (firstDayOffset - 1));
            var newdate = proxy._zeroTime(new Date());
            var selected = this._calendarDate;
            tbody = BoldBIDashboard.buildTag('tbody.e-datepicker-months', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            this._datepickerMonths(tbody, calendarTable, today);

            tbody = BoldBIDashboard.buildTag('tbody.e-datepicker-days', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var w = 0, _first = true, _last = true;
            while (w++ < weeksToDraw) {
                var r = bbdesigner$(document.createElement('tr')).attr({'role':'row'});
                if (this.model.weekNumber == true)
                {
                    var week = this._weekDate(currentDate);
                    week = bbdesigner$(document.createElement('td')).attr({}).addClass('e-weeknumber').html(week)
                    r.append(week);
                }
                for (var i = 0; i < 7; i++) {
                    var thisMonth = currentDate.getMonth() == month;
                    var checkSpecialDate = this._isSpecialDates(currentDate);
                    var disable = this._checkDisableRange(currentDate);
                    var index = this._getIndex;
                    var d = bbdesigner$(document.createElement('td')).
                        html(checkSpecialDate ? '<span></span>' + currentDate.getDate() : currentDate.getDate() + '')
                        .attr({

                            'data-date': currentDate.toDateString(),
                            'title': (this.model.showTooltip ? (checkSpecialDate && this.model.specialDates[index][this._mapField._tooltip] ? this.model.specialDates[index][this._mapField._tooltip] : this._formatter(currentDate, this.model.tooltipFormat)) : ''),
                            'aria-selected': false,
                            'role': 'gridcell'
                        }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .addClass((thisMonth ? 'current-month e-state-default ' : 'other-month e-state-default ') +
                            (this._isWeekend(currentDate) ? (this._ejHLWeekEnd ? 'e-dp-weekend e-week-end ' : (this.model.highlightWeekend ? 'e-week-end ' : '')) : 'e-week-day ') +
                            (thisMonth && currentDate.getTime() == newdate.getTime() ? 'today ' : ''));

                    d.find('span:first-of-type').addClass((checkSpecialDate ? (this.model.specialDates[index][this._mapField._icon] ? 'e-special-date-icon ' + this.model.specialDates[index][this._mapField._icon] + ' ' : 'e-special-day') : ''));
                    d.addClass(checkSpecialDate ? (this.model.specialDates[index][this._mapField._custom] ? this.model.specialDates[index][this._mapField._custom] : '') : '');
                    if (disable) this._disableDates({ date: currentDate, element: d });
                    if (selected.getTime() == currentDate.getTime() && thisMonth) {
                        if (!d.hasClass('e-hidedate'))
                            if (this.model.value) {
                                d.addClass('e-active').attr({ 'aria-selected': true });
                                if (this.model.highlightSection == "week") {
                                    r.addClass('e-selected-week');
                                }
                                if (this.model.highlightSection == "month") {
                                    tbody.addClass('e-selected-month');
                                }
                                if (this.model.highlightSection == "workdays") {
                                    r.addClass('e-work-week');
                                }
                            }
                            else { if(this.model.value!=null)d.addClass('e-state-hover').attr({ 'aria-selected': false }); }
                        if (!this._hoverDate) {
                            if (!d.hasClass('e-hidedate')) d.addClass('e-state-hover');
                            this._hoverDate = currentDate.getDate() - 1;
                        }
                    }
                    var cond = true;
                    if (currentDate < this.model.minDate || currentDate > this.model.maxDate) {
                        d.addClass('e-hidedate');
                        d.removeClass('current-month');
                        if (this.model.showOtherMonths) d.removeClass('other-month');
                        cond = _last = false;
                    }
                    if (thisMonth) {
                        if (cond && _first) {
                            this._tempMinDate = currentDate;
                            _first = false; _last = true;
                        }
                        if (_last) this._tempMaxDate = currentDate;
                    }
                    this._trigger("beforeDateCreate", { date: currentDate, value: this._formatter(currentDate, this.model.dateFormat), element: d });
                    r.append(d);
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1, 0, 0, 0);
                }
                tbody.append(r);
            }
            calendarTable.append(tbody);
            if (this._DRPdisableFade) {
                bbdesigner$(tbody).css("display", "block");
                bbdesigner$(tbody).css({ display: "table-row-group", "vertical-align": "middle", "border-color": "inherit" });
            }
            else {
                (this._isIE8 || this._isIE7) ? bbdesigner$(tbody).css("display", "block") : bbdesigner$(tbody).fadeIn("fast");
            }
            if (this.model.startLevel === this.model.depthLevel)
                this._depthLevel(this.model.depthLevel);
            else if (this.model.depthLevel != "month" && this.model.depthLevel != "") {
                if (this.model.startLevel == "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "year" && this.model.depthLevel != "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else {
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", bbdesigner$.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", bbdesigner$.proxy(this._onSetCancelDateHandler, this));
                }
            }
            else {
                this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", bbdesigner$.proxy(this._backwardNavHandler, this));
                this._on(calendarTable.find('.current-month , .other-month'), "click", bbdesigner$.proxy(this._onSetCancelDateHandler, this));
            }

            this._otherMonthsVisibility();
            this._checkDateArrows();
        },

        _checkDisableRange: function (value) {
            if (!BoldBIDashboard.isNullOrUndefined(this._disableCollection[value.getFullYear()]))
                if (bbdesigner$.inArray(value.getMonth(), this._disableCollection[value.getFullYear()]) !== -1)
                    return true;
            return false;
        },
        _initDisableObj: function (disableDates) {
            this._disableCollection = {};
            for (var i = 0; i < this.model.blackoutDates.length; i++) {
                var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                if (dateObj) {
                    var year = dateObj.getFullYear();
                    var month = dateObj.getMonth();
                    if (BoldBIDashboard.isNullOrUndefined(this._disableCollection[year])) this._disableCollection[year] = [];
                    if (bbdesigner$.inArray(month, this._disableCollection[year]) == -1) this._disableCollection[year].push(month);
                }
            }
        },

        _disableDates: function (args) {
            for (var i = 0; i < this.model.blackoutDates.length; i++) {
                var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                if (dateObj && +args.date === +dateObj)
                    args.element.removeClass('current-month').addClass('e-hidedate');
            }
        },

        _keyboardNavigation: function (e) {
            if (this._animating) return false;
            if ((this._isOpen) && (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                if (e.altKey) { if (e.keyCode == 13) { this._setCurrDate(e); return false; } else return; }
                var t = { row: null, col: null };

                t.col = this.sfCalendar.find('tbody tr td.e-state-hover').index();
                t.row = this.sfCalendar.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this.sfCalendar.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this.sfCalendar.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this.sfCalendar.find('table')[0].className, next, rowLength = 3, colLength = 4;
                switch (tableClass) {
                    case "e-dp-viewallyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "yearall", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverAllYear = this.sfCalendar.find('tbody.e-datepicker-allyears tr td').index(next);
                        break;
                    case "e-dp-viewyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "year", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverYear = this.sfCalendar.find('tbody.e-datepicker-years tr td').index(next);
                        break;
                    case "e-dp-viewmonths":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "month", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverMonth = this.sfCalendar.find('tbody.e-datepicker-months tr td').index(next);
                        break;
                    case "e-dp-viewdays":
                        rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length, colLength = 7;
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "day", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverDate = this._getDateObj(next).getDate() - 1;
                        break;
                }
                if (!e.ctrlKey) {
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
            else if (!this.model.displayInline && (e.keyCode == 27 || e.keyCode == 9)) { this.hide(); }
            else if (e.altKey && e.keyCode == 40) { this.show(); return false; }
        },
        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, cls = { parent: null, child: null };
            switch (target) {
                case "day": eleClass = "tbody.e-datepicker-days tr td.current-month";
                    cls.parent = ".e-datepicker-days", cls.child = ".current-month";
                    break;
                case "month": eleClass = "tbody.e-datepicker-months tr td.e-current-month";
                    cls.parent = ".e-datepicker-months", cls.child = ".e-current-month";
                    break;
                case "year": eleClass = "tbody.e-datepicker-years tr td.e-current-year";
                    cls.parent = ".e-datepicker-years", cls.child = ".e-current-year";
                    break;
                case "yearall": eleClass = "tbody.e-datepicker-allyears tr td.e-current-allyear";
                    cls.parent = ".e-datepicker-allyears", cls.child = ".e-current-allyear";
                    break;
            }
            if (t.row <= 0 && t.col <= 0)
                return this.sfCalendar.find(eleClass + ':first');
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return this.sfCalendar.find(eleClass + ':first');
                case 35:
                    return this.sfCalendar.find(eleClass + ':last');
                case 38:
                    if (ctrlKey && this.model.allowDrillDown) {
                        this._forwardNavHandler();
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "up");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrevDate(true);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "left");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                    }
                    return cell;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrevDate(false);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "right");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                    }
                    return cell;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls);
                        if (cell.length <= 0) {
                            cell = this._findVisible(t, cls, "down");
                            if (cell !== null) return cell;
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                    }
                case 13:
                    var tclassName = bbdesigner$("table", this.sfCalendar).get(0).className, ele, element;
                    ele = this._getCell(t, cls); element = bbdesigner$(ele)[0];
                    if (tclassName == "e-dp-viewmonths" && this.model.startLevel == "year" && this.model.depthLevel == "year") {
                        this._dateValue = new Date(this._dateValue.setMonth(parseInt(element.attributes["data-index"].value)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if ((tclassName == "e-dp-viewyears" && this.model.startLevel == "decade" && this.model.depthLevel == "decade") ||
                        (tclassName == "e-dp-viewallyears" && this.model.startLevel == "century" && this.model.depthLevel == "century")) {
                        this._dateValue = new Date(this._dateValue.setFullYear(parseInt(element.innerHTML)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if (tclassName == "e-dp-viewdays") {
                        this._backwardNavHandler(ele);
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else
                        this._backwardNavHandler(ele);
                    break;
            }
            return this._getCell(t, cls);
        },
        _findVisible: function (t, cls, key) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (i = 0; i >= 0; i++) {
                nextElement = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-hidedate') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass('other-month')) {
                    return null;
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    return nextElement;
                }
            }
        },
        _getCell: function (t, cls) {
            return this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child + ':nth-child(' + t.col + ')');
        },
        _getDateObj: function (element) {
            return new Date(element.attr("data-date"));
        },
        _touchCalendar: function (e) {
            var tableClass = this.sfCalendar.find('table')[0].className;
            switch (e.type) {
                case "pinchin":
                    if (tableClass != "e-dp-viewdays")
                        this._keyboardNavigation({ keyCode: 13 });
                    break;
                case "pinchout":
                    if (tableClass != "e-dp-viewallyears" && this.model.allowDrillDown)
                        this._forwardNavHandler();
                    break;
                case "swipeleft":
                    this._processNextPrevDate(false);
                    break;
                case "swiperight":
                    this._processNextPrevDate(true);
                    break;
            }
        },

        show: function (e) {
            if (BoldBIDashboard.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
            if (this._isOpen) return false;
            var proxy = this;
            this._popupOpen = true;
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
            if (!this.model.enabled) return;
            if (!this.model.displayInline) this._setDatePickerPosition();
            if (this._trigger("beforeOpen", { element: this.sfCalendar, events: e })) return false;
            this.sfCalendar.attr({ 'aria-hidden': 'false' });
            proxy._isOpen = true;
            this.sfCalendar.slideDown(this.model.enableAnimation ? this.animation.open.duration : 0, function () {
                if (proxy.model && !proxy.model.displayInline)
                    bbdesigner$(document).on("mousedown", bbdesigner$.proxy(proxy._onDocumentClick, proxy));
            });
            if (this._isIE8) {
                if (this.element.val() && this._compareDate(new Date(this.element.val()), previous)) this._updateInputVal();
            }
            else this._updateInputVal();
            this._refreshLevel(previous);
            this._trigger("open", { prevDate: previous, date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
            bbdesigner$(window).on("resize", bbdesigner$.proxy(this._OnWindowResize, this));
            if (!this.model.displayInline) {
              this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this.hide);
              this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this.hide);
			}
            this._isInputBox && this.wrapper.addClass("e-active");
        },


        hide: function (e) {
            if (!this._isOpen || this._getInternalEvents) return false;
            if (this._trigger("beforeClose", { element: this.sfCalendar, events: e })) return false;
            var proxy = this;
            this._popupOpen = false;
            this.sfCalendar.attr({ 'aria-hidden': 'true' });
            if (this._popClose && e != undefined && e.type != "click") {
                return;
            }
            this.sfCalendar.slideUp(this.model.enableAnimation ? this.animation.close.duration : 0, function () {
                proxy._isOpen = false;
                bbdesigner$(document).off("mousedown", bbdesigner$.proxy(proxy._onDocumentClick, proxy));
                proxy._setWaterMark();
            });
            if (this.element.val() != "") this._validateInputVal();
            this._trigger("close", { prevDate: this._prevDate, date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
            bbdesigner$(window).off("resize", bbdesigner$.proxy(this._OnWindowResize, this));
            this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this.hide);
            this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this.hide);
            this._isInputBox && this.wrapper.removeClass("e-active");
        },


        enable: function () {
            this.model.enabled = true;
            this.wrapper && this.wrapper.removeClass('e-disable');
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this.element.prop("disabled", false);
            if (this.dateIcon) this.dateIcon.removeClass('e-disable').attr({ "aria-disabled": false });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().removeClass("e-disable");
            this.element.prop("disabled", false);
            if (!this._isSupport)
                this._hiddenInput.prop("disabled", false);
            this.sfCalendar && this.sfCalendar.removeClass('e-disable').attr({ "aria-disabled": false });
        },


        disable: function () {
            this.model.enabled = false;
            this.wrapper && this.wrapper.addClass('e-disable');
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this.element.attr("disabled", "disabled");
            if (this.dateIcon) this.dateIcon.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().addClass("e-disable");
            this.element.attr("disabled", "disabled");
            if (!this._isSupport)
                this._hiddenInput.attr("disabled", "disabled");
            this.sfCalendar && this.sfCalendar.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isOpen) {
                if (this.element.is(':input')) this.element.blur();
                if (!this.model.displayInline) this.hide();
            }
        },

        getValue: function () { return this._formatter(this.model.value, this.model.dateFormat); },

        _wireCalendarEvents: function () {
            this._allowQuickPick(this.model.allowDrillDown);
            this._on(bbdesigner$('.e-next', this.sfCalendar), "click", bbdesigner$.proxy(this._previousNextHandler, this));
            this._on(bbdesigner$('.e-prev', this.sfCalendar), "click", bbdesigner$.proxy(this._previousNextHandler, this));
            if (!this.model.displayInline) {
                this.sfCalendar.on("mouseenter touchstart", bbdesigner$.proxy(function () { this._popClose = true; }, this));
                this.sfCalendar.on("mouseleave touchend", bbdesigner$.proxy(function () { this._popClose = false; }, this));
            }
            if (this.model.showFooter)
                this._on(bbdesigner$('.e-footer', this.sfCalendar), "click", this._setCurrDate);
            this.sfCalendar && this._on(this.sfCalendar, "pinchin pinchout swipeleft swiperight", bbdesigner$.proxy(this._touchCalendar, this));
        },

        _wireEvents: function () {
            if (this.element.is(":input") && (this.model.allowEdit)) {
                this._on(this.element, "blur", this._onFocusOut);
                this._on(this.element, "focus", this._onFocusIn);
                this._on(this.element, "keydown", this._onKeyDown);
            }

            if (!this.model.allowEdit) {
                this.element.attr("readonly", "readonly");
                this.element.on("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
            }
        },
        _bindDateButton: function () {
            this._on(this.dateIcon, "mousedown", this._showDatePopUp);
            if (this.model.allowEdit)
                this.element.off("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
        },
        _bindInputEvent: function () {
            this._off(this.dateIcon, "mousedown", this._showDatePopUp);
        },

        _specificFormat: function () {
            var parseInfo = BoldBIDashboard.globalize._getDateParseRegExp(BoldBIDashboard.globalize.findCulture(this.model.locale).calendar, this.model.dateFormat);
            return (bbdesigner$.inArray("dddd", parseInfo.groups) > -1 || bbdesigner$.inArray("ddd", parseInfo.groups) > -1)
        },

        _onFocusOut: function (e) {
            this._isFocused = false;
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
            this._validateOnFocusOut(this._validateValue(), e);
            this.wrapper.removeClass("e-focus");
            (BoldBIDashboard.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
            if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
            if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
            this.element.off("keydown", bbdesigner$.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            var _currentVal = this.element.val();
            var data = { prevDate: this._prevDate, value: _currentVal };
            if (this._specificFormat()) {
                if (this._prevDate != _currentVal)
                    this._setDateValue(_currentVal, true);
            }
            else
                this._setDateValue(_currentVal);
            if (!this.model.value) this._clearSelected();
            this._trigger("focusOut", data);
            this._checkErrorClass();
        },
        _onFocusIn: function (e) {
            if (this._isSupport) {
                e.preventDefault();
                this._isFocused = true;
            }
            this.wrapper.removeClass('e-error');
            this.isValidState = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.addClass('e-valid');
            if (this.model.readOnly)
                return;
            if (!this._isSupport) this._hiddenInput.css("display", "none");
            this.element.on("keydown", bbdesigner$.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton && !this.model.readOnly) this.show(e);
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            this._trigger("focusIn", { date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
        },
        _elementClick: function (e) {
            if (!this._popupOpen) this.show(e);
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport)
                this._hiddenInput.css("display", "none");
        },
        _refreshPopup: function () {
            this._refreshDatepicker();
            this._startLevel(this.model.startLevel);
        },
        _weekDate: function (currentDate) {
            var time, checkDate = new Date(currentDate.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;

        },
        _refreshLevel: function (previous) {
            if ((this.model.startLevel == this.model.depthLevel) && this.model.startLevel != "month") {
                var val = this._stringToObject(this.element.val());
                val = this._validateYearValue(val);
                if (val)
                    if (!this._compareDate(previous, val))
                        this._refreshPopup();
            }
        },
        _validateOnFocusOut: function (val, e) {
            var dateVal = this._preValue != null ? this._calendarDate : this._preValue;
            var calenderDate = this._formatter(dateVal, this.model.dateFormat);
            if (this._specificFormat() && (val > this.model.minDate) && (val < this.model.maxDate)) {
                if (val == null) this.model.value = dateVal
                else {
                    this.model.value = val;
                    var currDate = this._formatter(val, this.model.dateFormat, this.model.locale);
                }
            }
            else var currDate = this._formatter(this._parseDate((this._formatter(new Date(), "MM/dd/yyyy"))), this.model.dateFormat);
            var dateChange = false, valueExceed = false;
            if (val != null && !this.model.enableStrictMode) {
                if (BoldBIDashboard.isNullOrUndefined(this.model.value))
                    this.model.value = this._parseDate(this.element.val());
                if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
                if (!this.model.enableStrictMode) {
                    if (val) {
                        if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                            dateChange = true,
                            this._calendarDate = val = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                        }
                    }
                    else {
                        this.element.val("");
                        if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                        else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                    }
                    this.isValidState = true;
                }
                if (dateChange) this.element.val(this._formatter(val, this.model.dateFormat));
                if (!this._compareDate(this._preValue, this._parseDate(this.element.val(), true))) this._triggerChangeEvent(e);
            }
            else if (val == null && !this.model.enableStrictMode) {
                if (this._preTxtValue == null || this.element.val() == "") {
                    this.element.val("");
                    if (!this._isSupport) this._hiddenInput.css("display", "block");
                } else
                    this.element.val(calenderDate);
                this._triggerChangeEvent(e);
            }
            else {
                if (val) {
                    if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                        this.isValidState = false, valueExceed = true,
                        this._calendarDate = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                    }
                    else
                        this.isValidState = true;
                    this._triggerChangeEvent(e);
                    if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
                }
                else {
                    this.isValidState = false;
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
        },
        _onKeyDown: function (e) {
            if (e.keyCode === 13) {
                var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
                this._validateOnFocusOut(this._validateValue(), e);
                if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
                if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
                if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
                this._checkErrorClass();
            }
        },
        _showhidePopup: function (e) {
            if (!this.model.enabled) return false;
            if (this._isOpen) {
                if (!this._isFocused && this.element.is(':input') && (!BoldBIDashboard.isTouchDevice())) this.element.focus();
                if (!this._cancelValue) this.hide(e);
            }
            else {
                if (!this._isFocused && this.element.is(':input') && (!BoldBIDashboard.isTouchDevice())) this.element.focus();
                this.show(e);
            }
        },
        _compareDate: function (first, second) {
            var result = (+first === +second) ? true : false;
            return result;
        },
        _validateDate: function (val) {
            var result = true;
            if (val != null) {
                for (var i = 0; i < this.model.blackoutDates.length; i++) {
                    var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                    if (dateObj && +val === +dateObj)
                        result = false;
                }
                if ((val < this.model.minDate || val > this.model.maxDate) && this.model.enableStrictMode) {
                    result = false;
                    this.isValidState = false;
                }
            }

            return result;
        },

        _triggerChangeEvent: function (e) {
            var currentValue;
            var _currentVal = this.element.val() == "" ? null : this.element.val();
            this._prevDate = this._formatter(this._preValue, this.model.dateFormat);
            var data = { prevDate: this._prevDate, value: _currentVal, isInteraction: !!e };
            if (this._specificFormat() && e != undefined && e.type == "keydown" && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != this.element.val())
                currentValue = this._parseDate(this.element.val(), true);
            else if ((this._specificFormat() && e != undefined && e.type == "blur"))
                currentValue = this.model.value;
            else currentValue = this._parseDate(_currentVal);
            currentValue = this._validateYearValue(currentValue);
            if (!this._validateDate(currentValue)) currentValue = null;
            if (!this._compareDate(this._preValue, currentValue)) {
                this._preValue = this.model.value = currentValue;
                data.value = this._formatter(this.model.value, this.model.dateFormat);
                if (this.model.value) this._clickedDate = this._calendarDate = this.model.value;
                if (this.model.displayInline && !this._isInputBox) this._hiddenInput.attr('value', _currentVal);
                if (!this.model.value && !this.model.enableStrictMode) this._setDateValue(this.model.value);
                data.value = _currentVal;
                this._trigger("_change", data);
                data.value = this._formatter(this.model.value, this.model.dateFormat);
                this._trigger("change", data);
                this._checkErrorClass();
            }
            else if (!(this.element.val() == "" && this._prevDate == null) && this.element.val() != this._prevDate) {
                data.value = this.element.val();
                this._trigger("_change", data);
            }
        },

        _triggerSelectEvent: function (e) {
            var val = this.element.val();
            if (this._parseDate(val)) {
                var data = { prevDate: this._prevDate, date: this.model.value, value: val, isSpecialDay: this._isSpecialDates(this.model.value) };
                if (this._prevDate != val) {
                    if (this._parseDate(data.value) && (this.model.value >= this.model.minDate && this.model.value <= this.model.maxDate)) {
                        this._cancelValue = this._trigger("select", data);
                    }
                }
                if (this._dt_drilldown) this._trigger("dt_drilldown", data);
            }
        },

        _onDocumentClick: function (e) {
            if (this.model) {
                if (!bbdesigner$(e.target).is(this.popup) && !bbdesigner$(e.target).parents(".e-popup").is(this.popup) &&
                    !bbdesigner$(e.target).is(this.wrapper) && !bbdesigner$(e.target).parents(".e-datewidget").is(this.wrapper)) {
                    this.hide(e);
                }
                else if (bbdesigner$(e.target).is(this.popup) || bbdesigner$(e.target).parents(".e-popup").is(this.popup)) {
                    e.preventDefault();
                }
            }
        },

        _OnWindowResize: function (e) {
            if (this.sfCalendar) this._setDatePickerPosition();
        },

        _showDatePopUp: function (e) {
            var isRightClick = false;
            if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            if (isRightClick) return;
            if (!this._isSupport && !this.model.showPopupButton) {
                e.preventDefault();
                this._onFocusIn();
            }
            if (this.model.readOnly) return;
            e.preventDefault();
            if (!this.model.enabled && this.model.displayInline) return false;
            this._showhidePopup(e);
        },
        _layoutChanged: function (e) {
            // this event internally used to observe the layout change in "DateTimePicker" control
            if (this._getInternalEvents) this._trigger("layoutChange");
        },
        _setCurrDate: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e) e.preventDefault();
            var proxy = this;
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._dateValue = this._zeroTime(new Date());
            this.model.value = this._calendarDate = new Date(this._dateValue.toString());
            this._setDateValue(this.model.value);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._refreshDatepicker();
            this._changeDayClass();
            this._startLevel(this.model.startLevel);
            this._onSetCancelDateHandler(e);
            this._layoutChanged();
        },
        _changeDayClass: function () {
            var className = this.popup.children("table")[0].className;
            if (className != "e-dp-viewdays") {
                this.popup.children("table").removeClass(className).addClass("e-dp-viewdays");
            }
        },

        _onSetCancelDateHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && (bbdesigner$(e.target).hasClass("e-disable") || bbdesigner$(e.target).hasClass("e-hidedate"))) return false;
            if (e && e.type) e.preventDefault();
            if (this._specificFormat()) this._prevDate = this.element.val();
            else this.model.value = this._parseDate(this.element.val());
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._setDateValue(this._dateValue);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._dateValue = (this.model.value == null)? null:new Date(this.model.value.toString());
            if (this.element.is(':input') && !this.model.displayInline) {
                this._showhidePopup(e);
            }
            if (e && bbdesigner$(e.currentTarget).hasClass("other-month"))
                this._refreshDatepicker();
            this._cellSelection();
        },
        _closeCalendar: function (ele) {
            if (!ele || ele == this.element) {
                this.sfCalendar.empty().remove();
            }
        },
        //Error class for input value validation
        _checkErrorClass: function () {
            if (this.wrapper) {
                if (this.isValidState) this.wrapper.removeClass("e-error");
                else this.wrapper.addClass("e-error");
            }
        },
        _getLocalizedLabels: function () {
            return BoldBIDashboard.getLocalizedConstants(this.sfType, this.model.locale);
        }
    });

    BoldBIDashboard.DatePicker.Locale = BoldBIDashboard.DatePicker.Locale || {};

    BoldBIDashboard.DatePicker.Locale['default'] = BoldBIDashboard.DatePicker.Locale['en-US'] = {
        watermarkText: "Select date",
        buttonText: 'Today'
    };


    BoldBIDashboard.DatePicker.Header = {
        /**  Removes the day header */
        None: "none",
        /**  Shows the day header format in short like Sun, Mon, Tue … */
        Short: "short",
        /**  Shows the day header format in min like Su, Mo, Tu … */
        Min: "min",
        /**  Shows the day header format in long like Sunday, Monday, Tuesday … */
        Long: "long"
    };

    BoldBIDashboard.DatePicker.HighlightSection = {
        /**  Highlight the Current Month. */
        Month: "month",
        /**  Highlight the Current Week. */
        Week: "week",
        /**  Highlight the Current WorkDays. */
        WorkDays: "workdays",
        /** Don't Highlight Anything. */
        None: "none"
    };


    BoldBIDashboard.DatePicker.Level = {
        /**  Starts from month level view. */
        Month: "month",
        /**  Starts from year level view. */
        Year: "year",
        /**  Starts from year decade level view. */
        Decade: "decade",
        /**  Starts from century level view.  */
        Century: "century"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);;
;
/// <reference path="../../common/jquery.d.ts" />
/// <reference path="../../BoldBIDashboard.web.all.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};

var BoldBIDashboardDateRangePicker = (function (_super) {
    __extends(BoldBIDashboardDateRangePicker, _super);
    function BoldBIDashboardDateRangePicker(element, options) {
        _super.call(this);
        this._rootCSS = "e-daterangepicker";
        this._setFirst = false;
        this.PluginName = "BoldBIDashboardDateRangePicker";
        this.id = "myDateRange";
        this._addToPersist = ["value"];
        this.type = "editor";
        this.angular = {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        };
        this._requiresID = true;
        this.model = null;
        this.validTags = ["input"];
        this.defaults = {
            height: "",
            width: "",
            value: "",
            cssClass: "",
            enabled: true,
            startDate: null,
            endDate: null,
            enableTimePicker: false,
            ranges: null,
			selectedRange: null,
            previouseRange: null,
            locale: "en-US",
            separator: "-",
            watermarkText: "Select Range",
            dateFormat: "",
            timeFormat: "",
            showPopupButton: true,
            showRoundedCorner: false,
            allowEdit: true,
            enablePersistence: false,
            create: null,
            change: null,
            beforeClose: null,
            beforeOpen: null,
            close: null,
            open: null,
            hover: null,
            click: null,
            clear: null,
            destroy: null,
			select: null,
			htmlAttributes: {},

        };
        this._isIE8 = (BoldBIDashboard.browserInfo().name == "msie") && (BoldBIDashboard.browserInfo().version == "8.0") ? true : false;
        this._prevValue = null;
        this._validState = null;
        BoldBIDashboardDateRangePicker.prototype.observables = ["value"];
        if (element) {
            if (!element["jquery"]) {
                element = bbdesigner$("#" + element);
            }
            if (element.length) {
                return bbdesigner$(element).BoldBIDashboardDateRangePicker().data(this.PluginName);
            }
        }
    }
    BoldBIDashboardDateRangePicker.prototype.setModel = function (opt, forceSet) {
        this.setModel(opt, forceSet);
    };
    BoldBIDashboardDateRangePicker.prototype.option = function (opt, forceSet) {
        this.option(opt, forceSet);
    };

    BoldBIDashboardDateRangePicker.prototype._setModel = function (options) {
        if (!this.popup) {
			 this._onMainFocusOut();
            this._renderPopup();
            this._updateValues();
		}
        var option;
        for (option in options) {
            switch (option) {
                case "allowEdit":
                    if (!options[option]) {
                        this.element.attr("readonly", "readonly");
                        this.element.on("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
                        this.element.off("blur", bbdesigner$.proxy(this._onMainFocusOut, this));
                    }
                    break;
                case "startDate":
                    var status = this._validateValues(options[option], "left");
                    if (status == false)
                        options[option] = null;
                    else {
                        if (!this._startEndValidation() && this.model.endDate != null) {
                            this._resetValues();
                            this.model.endDate = null;
                        }
                        this._updateValues();
                        this._selectedStartDate = this.model.startDate;
                        options[option] = this.model.startDate;
                    }

                    break;
                case "endDate":
                    var status = this._validateValues(options[option], "right");
                    if (status == false)
                        options[option] = null;
                    else {
                        if (!this._startEndValidation()) {
                            this._rightDP.element.parents(".e-datewidget").addClass("e-val-error");
                            this.model.endDate = null;
                        }
                        this._updateValues();
                        options[option] = this.model.endDate;
                    }
                    break;
                case "enableTimePicker":
                    this.model.enableTimePicker = options[option];
                    if (options[option]) {
                        this._renderTimePicker();
                    } else
                        this._removeTimePicker();
                    if (this._scrollerObj) {
                        this._scrollerObj.model.height = this.datePopup.height();
                        this._scrollerObj.refresh();
                    }
                    break;
                case "locale":
                    this._setCulture(options[option]);
                    options[option] = this.model.locale;
                    break;
                case "separator":
                    this.model.separator = options[option];
                    this._mainValue();
                    break;
                case "dateFormat":
                    if (this._leftDP)
                        this._leftDP.option(option, options[option]);
                    if (this._rightDP)
                        this._rightDP.option(option, options[option]);
                    this.model.dateFormat = options[option];
                    this._getDateTimeFormat();
                    this._updateInput();
                    break;
                case "timeFormat":
                    if (this._leftTP)
                        this._leftTP.option(option, options[option]);
                    if (this._rightTP)
                        this._rightTP.option(option, options[option]);
                    this.model.timeFormat = options[option];
                    this._getDateTimeFormat();
                    this._updateInput();
                    break;
                case "watermarkText":
                    if (BoldBIDashboard.isNullOrUndefined(this._options))
                        this._options = {};
                    this._options["watermarkText"] = this.model.watermarkText = options[option];
                    this._localizedLabels.watermarkText = this.model.watermarkText;
                    this._setWaterMark();
                    break;
                case "cssClass":
                    this._changeSkin(options[option]);
                    break;

                case "showRoundedCorner":
                    this._setRoundedCorner(options[option]);
                    break;
                case "showPopupButton":
                    this._renderDateIcon(options[option]);
                    break;

                case "value":
                    this.element.val(options[option]);
                    this._onMainFocusOut();
                    options[option] = this.model.value;
                    break;

                case "height":
                    this.wrapper.height(options[option]);
                    break;
                case "width":
                    this.wrapper.width(options[option]);
                    break;
                case "enabled":
                    if (options[option])
                        this.enable();
                    else
                        this.disable();
                    break;
                case "htmlAttributes":
                    this._addAttr(options[option]);
                    break;
            }
        }
    };
    BoldBIDashboardDateRangePicker.prototype._init = function (options) {
        this._cloneElement = this.element.clone();
        this._options = options;
        this._flagevents = false;
        this._id = this.element.attr("id");
        this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
		if (!this._startEndValidation()) this.model.endDate = null;
        if (this.element.val() == "" && this.model.value) {
            this.element.val(this.model.value);
        }
		this._getDateTimeFormat();
        if (this.element.val())
            this._setInitValue();
		else if (this.model.startDate != null && this.model.endDate != null && this._startEndValidation()) this._mainValue();
        this._createWrapper();
        if (this._validState == false && this.element.val())
            this.wrapper.addClass("e-error");
        this._popupOpen = false, this._isPopScroll = false;
        if (!this.model.enabled) this.disable();
        this._wireEvents();
    };
    BoldBIDashboardDateRangePicker.prototype._setInitValue = function () {
        var datestring = this.element.val().split(this.model.separator), _startdate = BoldBIDashboard.parseDate(datestring[0], this._dateTimeFormat, this.model.locale), _enddate = BoldBIDashboard.parseDate(datestring[1], this._dateTimeFormat, this.model.locale);
        if (_startdate && _enddate) {
            this.model.startDate = _startdate;
            this.model.endDate = _enddate;
        }
    };
    BoldBIDashboardDateRangePicker.prototype._getNextMonth = function (current) {
        var local = current;
        if (!(local instanceof Date))
            return new Date();
        var month = local.getMonth();
        if (month == 11) {
            var year = local.getFullYear() + 1;
            month = -1;
        } else
            var year = local.getFullYear();
        var dummy = new Date();
        dummy = new Date(dummy.setFullYear(year));
        dummy = new Date(dummy.setMonth(month + 1));
        dummy = new Date(dummy.setDate(1));
        return dummy;
    };
    BoldBIDashboardDateRangePicker.prototype._getDateTimeFormat = function () {
        var pattern = BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard.patterns;
        if (!this.model.dateFormat) this.model.dateFormat = pattern.d;
        if (this.model.enableTimePicker) {
            if (!this.model.timeFormat) this.model.timeFormat = pattern.t;
            this._dateTimeFormat = this.model.dateFormat + " " + this.model.timeFormat;
        }
        else
            this._dateTimeFormat = this.model.dateFormat;
    };
    BoldBIDashboardDateRangePicker.prototype._setValues = function () {
        this._leftDP.option("value", this.model.startDate);
        this._rightDP.option("value", this.model.endDate || null);
        if (this.model.startDate) this._setStartDate(this.model.startDate, bbdesigner$('.current-month[data-date="' + this.model.startDate.toDateString() + '"]'), true);
        if (this.model.endDate) this._setEndDate(this.model.endDate, bbdesigner$('.current-month[data-date="' + this.model.endDate.toDateString() + '"]'), true);
        this._rangeRefresh(this._setArgs(this._leftDP.popup));
        this._rangeRefresh(this._setArgs(this._rightDP.popup));
        this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
        if (this.model.enableTimePicker) {
            this._leftTP.option("value", this.model.startDate);
            this._rightTP.option("value", this.model.endDate);
        }
        this._updateRanges("left");
        this._updateRanges("right");
    };

    BoldBIDashboardDateRangePicker.prototype._customSet = function () {
        this._selectedStartDate = this.model.startDate;
        this._selectedEndDate = this.model.endDate;
        this._resetValues();
        if (this.popup) this._setValues();
        if (!this._popupOpen)
            this._mainValue();
        this._refreshMinMax();
        this._setWaterMark();
    };
    BoldBIDashboardDateRangePicker.prototype._setCulture = function (culture) {
        culture = BoldBIDashboard.preferredCulture(culture).name;
        this.model.locale = culture;
        this._setOption("locale", culture);
        this._localizedLabels = this._getLocalizedLabels();
        this._setLocalizedText();
        this._updateInput();
    };
    BoldBIDashboardDateRangePicker.prototype._setRoundedCorner = function (boolean) {
        if (boolean) {
            this._input_innerWrapper.addClass("e-corner");
            if (this.popup) this.popup.addClass("e-corner");
        } else {
            this._input_innerWrapper.removeClass("e-corner");
            if (this.popup) this.popup.removeClass("e-corner");
        }
        this._setOption("showRoundedCorner", boolean);
    };
    BoldBIDashboardDateRangePicker.prototype._renderDateIcon = function (boolean) {
        if (boolean) {
            this.dateRangeIcon = BoldBIDashboard.buildTag("span.e-select#" + this.id + "-img", "", {}, (this._isIE8) ? { 'unselectable': 'on' } : {}).append(BoldBIDashboard.buildTag("span.e-icon e-calendar", "", {}, { 'aria-label': 'Select' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})).insertAfter(this.element);
            this._input_innerWrapper.addClass('e-padding');
            this._on(this.dateRangeIcon, "mousedown", this._showDatePopUp);
            this._off(this.dateRangeIcon, "click", this._showDatePopUp);

        }
        else {
            if (this.dateRangeIcon) {
                this.dateRangeIcon.remove();
            }
            this._input_innerWrapper.removeClass('e-padding');
            this._off(this.dateRangeIcon, "click", this._showDatePopUp);
        }
    },
	BoldBIDashboardDateRangePicker.prototype._validateValues = function (val, cal_type) {
	    var obj = cal_type == "right" ? this._rightDP : this._leftDP;
	    var datavalu = val;
	    if (datavalu != null && typeof datavalu == "string") {
	        if (cal_type == "left") {
	            this.model.startDate = BoldBIDashboard.parseDate(val, this.model.dateFormat, this.model.locale) || null;
	            this.model.startDate = (this.model.startDate != null) ? this.model.startDate : new Date(datavalu);
	        }
	        else {
	            this.model.endDate = BoldBIDashboard.parseDate(val, this.model.dateFormat, this.model.locale) || null;
	            this.model.endDate = (this.model.endDate != null) ? this.model.endDate : new Date(datavalu);
	        }
	    } else {
	        if (val instanceof Date) {
	            if (cal_type == "left") {
	                this.model.startDate = val;
	                if (!isNaN(val.getDate())) {
	                    if (typeof this._formatter(this.model.startDate, this.model.locale) != "string")
	                        this.model.startDate = BoldBIDashboard.parseDate(this._formatter(this.model.startDate, this.model.locale), this.model.dateFormat);
	                } else
	                    return false;
	            } else if (cal_type == "right") {
	                this.model.endDate = val;
	                if (!isNaN(val.getDate())) {
	                    if (typeof this._formatter(this.model.endDate, this.model.locale) != "string")
	                        this.model.endDate = BoldBIDashboard.parseDate(this._formatter(this.model.endDate, this.model.locale), this.model.dateFormat);
	                } else
	                    return false;
	            }
	        } else
	            return false;
	    }
	    return true;
	};
    //Date formatter - Convert date object to specific date format
    BoldBIDashboardDateRangePicker.prototype._formatter = function (date, format) {
        var newFormat = this._checkFormat(format);
        return BoldBIDashboard.format(date, newFormat, this.model.locale);
    };

    BoldBIDashboardDateRangePicker.prototype._checkFormat = function (format) {
        var proxy = this;
        var dateFormatRegExp = this._regExp();
        return format.replace(dateFormatRegExp, function (match) {
            match = match === "/" ? BoldBIDashboard.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
            return match;
        });
    };
    BoldBIDashboardDateRangePicker.prototype._regExp = function () {
        return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
    };

    BoldBIDashboardDateRangePicker.prototype._setArgs = function (element) {
        var date = new Date(bbdesigner$(element.find(".current-month")[0]).attr("data-date"));
        this.args = {};
        this.args.element = element;
        this.args.month = date.getMonth();
        this.args.year = date.getFullYear();
        return this.args;
    };
    BoldBIDashboardDateRangePicker.prototype._changeSkin = function (skin) {
        this.wrapper.removeClass(this.model.cssClass).addClass(skin);
        this.popup.removeClass(this.model.cssClass).addClass(skin);

        this._setOption("cssClass", skin);
    };

    BoldBIDashboardDateRangePicker.prototype._renderDatePicker = function () {
        this.calendar_left = BoldBIDashboard.buildTag("input.leftDate_wrapper#" + this.element[0].id + "leftDate_wrapper", "", {}, { "type": "text" });
        this._leftDiv.append(this.calendar_left);
        this.calendar_right = BoldBIDashboard.buildTag("input.rightDate_wrapper#" + this.element[0].id + "rightDate_wrapper", "", {}, { "type": "text" });
        this._rightDiv.append(this.calendar_right);
        var proxy = this;
        var DPSettings = {
            displayInline: true,
            showFooter: false,
            watermarkText: "",
            enableStrictMode: true,
            locale: this.model.locale,
            dateFormat: this.model.dateFormat,
            _month_Loaded: function (e) {
                proxy._previousNextHandler(e);
            },
            enablePersistence: this.model.enablePersistence
        }
        this.calendar_left.BoldBIDashboardDatePicker(DPSettings);
        this.calendar_left.BoldBIDashboardDatePicker("option", "layoutChange", function (e) {
            proxy._refreshEvents("left");
            proxy._updateRanges("left");
            if (!proxy.popup.hasClass("e-daterange-responsive")) {
                if (proxy._scrollerObj) {
                    proxy._scrollerObj.model.height = proxy.datePopup.height();
                    proxy._scrollerObj.refresh();
                }
            }
        })
        this._leftDP = this.calendar_left.data("BoldBIDashboardDatePicker");
        this._leftDP.option("showPopupButton", false);
        this._leftDP._getInternalEvents = true, this._leftDP._DRPdisableFade = true;
        this._leftDP.popup.css({ "position": "static", "visibility": "inherit" });
        this.calendar_right.BoldBIDashboardDatePicker(DPSettings);
        this.calendar_right.BoldBIDashboardDatePicker("option", "layoutChange", function (e) {
            proxy._refreshEvents("right");
            proxy._updateRanges("right");
            if (!proxy.popup.hasClass("e-daterange-responsive")) {
                if (proxy._scrollerObj) {
                    proxy._scrollerObj.model.height = proxy.datePopup.height();
                    proxy._scrollerObj.refresh();
                }
            }
        })
        this._rightDP = this.calendar_right.data("BoldBIDashboardDatePicker");
        this._rightDP.option("showPopupButton", false);
        this._rightDP._getInternalEvents = true, this._rightDP._DRPdisableFade = true; // to get the layout change client side event
        this._rightDP.popup.css({ "position": "static", "visibility": "inherit" });
        this._on(bbdesigner$(this._leftDP.sfCalendar.find('table .e-datepicker-months td')), "click", bbdesigner$.proxy(this._previousNextHandler, this));
        this._on(this._leftDP.element, "keydown", this._onKeyDown);
        this._on(this._rightDP.element, "keydown", this._onKeyDown);
    };

    BoldBIDashboardDateRangePicker.prototype._renderPopup = function () {
        this.popup = BoldBIDashboard.buildTag("div.e-daterangepicker-popup e-popup e-widget e-box" + this.model.cssClass + "#" + this.element[0].id + "_popup").css("display", "none");
        bbdesigner$('body').append(this.popup);
        this.datePopup = BoldBIDashboard.buildTag("div.e-datepickers-popup");
        this.popup.append(this.datePopup);
        this._leftDiv = BoldBIDashboard.buildTag("div.e-left-datepicker");
        this._rightDiv = BoldBIDashboard.buildTag("div.e-right-datepicker");
        this.datePopup.append(this._leftDiv);
        this.datePopup.append(this._rightDiv);
        this._renderDatePicker();
        if (this.model.ranges)
            this._renderRanges();
        if (this.model.enableTimePicker)
            this._renderTimePicker();
        this._renderButton();
        this._bindDateButton();
        this._refreshEvents("left");
        this._refreshEvents("right");
        this._updateRanges("left");
        this._updateRanges("right");
        this._setRoundedCorner(this.model.showRoundedCorner);
        this._addAttr(this.model.htmlAttributes);
        this._on(this.popup.find(".leftDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._on(this.popup.find(".rightDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._on(this.popup.find(".leftDate_wrapper.e-timepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._on(this.popup.find(".rightDate_wrapper.e-timepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this.popup.on("mouseenter touchstart", bbdesigner$.proxy(function () { this._isPopScroll = true; }, this));
        this.popup.on("mouseleave touchend", bbdesigner$.proxy(function () { this._isPopScroll = false; }, this));
        this._on(bbdesigner$(window), "resize", this._resizePopup);
		this._wirePopupEvents();
    };

    BoldBIDashboardDateRangePicker.prototype._createWrapper = function () {
        this._localizedLabels = this._getLocalizedLabels();
        this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'tabindex': '0', 'role':'combobox', 'aria-expanded':'false', 'name' : this.element.attr('name') == undefined ? this._id : this.element.attr('name') }); 
        if (!this._isSupport) {
            this._hiddenInput = BoldBIDashboard.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
            this._hiddenInput.val(this._localizedLabels.watermarkText);
            this._hiddenInput.css("display", "block");
            var proxy = this;
            bbdesigner$(this._hiddenInput).focus(function () {
                proxy.element.focus();
            });
        }
        this.wrapper = BoldBIDashboard.buildTag("span.e-daterangewidget e-widget " + this.model.cssClass);
        if (!BoldBIDashboard.isTouchDevice())
            this.wrapper.addClass('e-ntouch');
        this._input_innerWrapper = BoldBIDashboard.buildTag("span.e-in-wrap e-box");
        this.wrapper.append(this._input_innerWrapper).insertBefore(this.element);
        this._input_innerWrapper.append(this.element);
        this._input_innerWrapper.addClass('e-padding');

        var proxy = this;
        this.culture = BoldBIDashboard.preferredCulture(this.model.locale);
        this._setRoundedCorner(this.model.showRoundedCorner);
        this._renderDateIcon(this.model.showPopupButton);
        if (this.wrapper) {
            if (this.model.width) this.wrapper.width(this.model.width);
            if (this.model.height) this.wrapper.height(this.model.height);
        }
        this._setWaterMark();
    };
    BoldBIDashboardDateRangePicker.prototype._updateOnRender = function (e) {
        if (this.model.enableTimePicker) {
            if (this._rightTime) {
                this._rightTP = this._rightTime.BoldBIDashboardTimePicker("instance");
                this._updateValues();
            }
        } else {
            if (this.calendar_right) {
                this._rightDP = this.calendar_right.BoldBIDashboardDatePicker("instance");
                this._updateValues();
            }
        }
    };
    BoldBIDashboardDateRangePicker.prototype._updateRangesList = function () {
        bbdesigner$(".e-dateranges-ul").find(".rangeItem.e-active").removeClass("e-active");
		if (this.model.selectedRange != null) {
            selectedElement = bbdesigner$(".e-dateranges-ul").find('.rangeItem[title="' + this.model.selectedRange + '"]');
            if (selectedElement.length > 0) {
                selectedElement.addClass('e-active');
            } else{
                bbdesigner$(".e-dateranges-ul").find(".rangeItem.e-custompic").addClass("e-active")
            }
        } else {
            bbdesigner$(".e-dateranges-ul").find(".rangeItem.e-custompic").addClass("e-active");
        }
    }
    BoldBIDashboardDateRangePicker.prototype._updateValues = function () {
        this._updateRangesList();
        this._getDateTimeFormat();
        if (this._startEndValidation() || (this.model.startDate != null && this.model.endDate == null)) {
            this._validateValues(this.model.startDate, "left");
            this._validateValues(this.model.endDate, "right");
            if (this.popup) this._setValues();
            this._mainValue();
        } else {
            this._clearRanges();
            this.element.val("");
        }
        this._refreshMinMax();
        this._setWaterMark();
    };
    BoldBIDashboardDateRangePicker.prototype._startEndValidation = function () {
        if (this.model.startDate && this.model.endDate) {
            var start = this.model.startDate, end = this.model.endDate;
            return !(end && start > end);
        }
        return false;
    };
    BoldBIDashboardDateRangePicker.prototype._addAttr=function (htmlAttr) {
        var proxy = this;
        bbdesigner$.map(htmlAttr, function (value, key) {
            var keyName = key.toLowerCase();
            if (keyName == "class") proxy.wrapper.addClass(value);
            else if (keyName == "disabled") proxy.disable();
            else if (keyName == "readOnly") proxy.model.readOnly = true;
            else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
            else if (BoldBIDashboard.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
            else proxy.wrapper.attr(key, value);

        });
    },
    BoldBIDashboardDateRangePicker.prototype._renderButton = function () {
        this._buttonDiv = BoldBIDashboard.buildTag("div.e-drpbuttons");
        var _reset = BoldBIDashboard.buildTag("div.e-drp-button e-drp-reset e-btn e-select e-flat").attr({ 'tabindex': '0' });
        var _apply = BoldBIDashboard.buildTag("div.e-drp-button e-drp-apply e-disable e-btn e-select e-flat").attr({ 'tabindex': '0' });
        var _cancel = BoldBIDashboard.buildTag("div.e-drp-button e-drp-cancel e-btn e-select e-flat").attr({ 'tabindex': '0' });
        this._buttonDiv.append(_reset);
        this._buttonDiv.append(_apply);
        this._buttonDiv.append(_cancel);
        this.popup.append(this._buttonDiv);
        this._setLocalizedText();
        this._on(bbdesigner$(this._buttonDiv.find("div.e-drp-reset")), "click", this.clearRanges);
        var bbdesigner$this = this;
        this._on(bbdesigner$(this._buttonDiv.find("div.e-drp-apply")), "click", function (e) {
            if (bbdesigner$this._buttonDiv.find(".e-drp-apply").hasClass("e-disable")) {
                return;
            }
            if(this.model.previouseRange != null){
                this.model.selectedRange = this.model.previouseRange;
            }
            bbdesigner$this._isPopScroll = false;
            bbdesigner$this._updateInput();
            bbdesigner$this._showhidePopup();
            bbdesigner$this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
            this._trigger("change", { value: this.model.value, startDate: this.model.startDate, endDate: this.model.endDate });
            this._trigger("select", { startDate: this.model.startDate, endDate: this.model.endDate, value: this.model.value });
        });
        this._on(bbdesigner$(this._buttonDiv.find("div.e-drp-cancel")), "click", this._cancelButton);
    };
    BoldBIDashboardDateRangePicker.prototype._setLocalizedText = function () {
        if (!BoldBIDashboard.isNullOrUndefined(this._options)) {
            if (!BoldBIDashboard.isNullOrUndefined(this._options.buttonText))
                bbdesigner$.extend(this._localizedLabels.ButtonText, this._options.buttonText);
            if (!BoldBIDashboard.isNullOrUndefined(this._options.watermarkText))
                this._localizedLabels.watermarkText = this._options.watermarkText;
        }
        this.model.buttonText = this._localizedLabels.ButtonText;
        bbdesigner$(this._buttonDiv.find("div.e-drp-reset")).text(this.model.buttonText.reset);
        bbdesigner$(this._buttonDiv.find("div.e-drp-apply")).text(this.model.buttonText.apply);
        bbdesigner$(this._buttonDiv.find("div.e-drp-cancel")).text(this.model.buttonText.cancel);
        if (this._customRangePicker && this._customRangePicker.find("ul li.e-custompic").length > 0)
            (this._customRangePicker.find("ul li.e-custompic")).text(this._localizedLabels.customPicker);
        this._setWaterMark();
    };

    BoldBIDashboardDateRangePicker.prototype._renderRanges = function () {
        this._renderRangesWrapper();
        this.popup.append(this._customRangePicker);
        this._ranges_li = "";
        var proxy = this;
        if (this.model.ranges) {
            for (var i = 0; i < this.model.ranges.length; i++) {
                var s = this.model.ranges[i];
                var value = s.range;
                if (value.length === 2) {
                    var start = new Date(value[0]);
                    var end = new Date(value[1]);
                    if (BoldBIDashboard.isNullOrUndefined(start))
                        start = new Date(value[0]);
                    if (BoldBIDashboard.isNullOrUndefined(end))
                        end = new Date(value[1]);
                    if (start <= end) {
                        proxy._ranges_li += "<li role='menuitem' title='" + s.label + "' class='rangeItem' data-e-range='" + JSON.stringify(value) + "' data-e-value='" + s.range + "'>" + s.label + "</li>";
                    }
                }
            }
        }
        this._ranges_li += "<li role='menuitem' class='rangeItem e-active e-custompic' data-e-range='customPicker'>" + this._localizedLabels.customPicker + "</li>";
        this.popup.find("div.e-custom-dateranges ul").append(this._ranges_li);
        this._on(this._customRangePicker.find("ul li.rangeItem"), "click", this._customSelection);
        this._customRangePicker.BoldBIDashboardScroller({ height: this.datePopup.height(), width: 0, scrollerSize: 15 });
        proxy._scrollerObj = this._customRangePicker.BoldBIDashboardScroller("instance");
    };
    BoldBIDashboardDateRangePicker.prototype._removeTimePicker = function () {
        this._leftDiv.removeClass("e-left-timepicker");
        this._rightDiv.removeClass("e-right-timepicker");
        this._leftTP.destroy();
        this._rightTP.destroy();
        this._rightTP = null;
        this._leftTP = null;
        this._leftTime.remove();
        this._rightTime.remove();
        this._setOption("width", "");
        this._setOption("width", "100%");
        this._updateValues();
    };
    BoldBIDashboardDateRangePicker.prototype._setOption = function (option, value) {
        if (this._leftDP)
            this._leftDP.option(option, value);
        if (this._rightDP)
            this._rightDP.option(option, value);
        if (this.model.enableTimePicker) {
            if (this._leftTP)
                this._leftTP.option(option, value);
            if (this._rightTP)
                this._rightTP.option(option, value);
        }
    };
    BoldBIDashboardDateRangePicker.prototype._renderTimePicker = function () {
        if (this.model.timeFormat == '')
            this.model.timeFormat = this.culture.calendar.patterns.t;
        this._leftTime = BoldBIDashboard.buildTag("input.leftTime#" + this._id + "_lTime");
        this._leftDiv.append(this._leftTime);
        this._leftDiv.addClass("e-left-timepicker");
        var proxy = this;
        var TPSettings = {
            popupWidth: "115px",
            locale: this.model.locale,
            timeFormat: this.model.timeFormat,
            open: function () {
                this.popup.addClass("e-daterange-timepopup");
                this.model.open = null;
            }
        }
        this._leftTime.BoldBIDashboardTimePicker(TPSettings);
        this._leftTime.BoldBIDashboardTimePicker({
            "select": function (e) {
                if (proxy.model.startDate && proxy.model.endDate) {
                    if (proxy._rightTP && proxy.model.startDate.toLocaleDateString() == proxy.model.endDate.toLocaleDateString())
                        proxy._rightTP.option("minTime", e.value);
                    proxy._buttonDiv.find(".e-drp-apply").removeClass("e-disable");
                }
            }
        })
        this._leftTP = this._leftTime.BoldBIDashboardTimePicker("instance");
        this._rightTime = BoldBIDashboard.buildTag("input.rightTime#" + this._id + "_rTime");
        this._rightDiv.append(this._rightTime);
        this._rightDiv.addClass("e-right-timepicker");
        this._rightTime.BoldBIDashboardTimePicker(TPSettings);
        this._leftTime.BoldBIDashboardTimePicker({
            "select": function (e) {
                if (proxy.model.startDate && proxy.model.endDate) {
                    proxy._buttonDiv.find(".e-drp-apply").removeClass("e-disable");
                }
            }
        })
        this._rightTP = this._rightTime.BoldBIDashboardTimePicker("instance");
        this._on(this._leftTP.element, "keydown", this._onKeyDown);
        this._on(this._rightTP.element, "keydown", this._onKeyDown);
        //below code for position the timepicker and datepicker
        this._setTimePickerPos();
    };
    BoldBIDashboardDateRangePicker.prototype._setTimePickerPos = function () {
        bbdesigner$("#" + this._id + "_lTime_timewidget").css({
            position: "absolute",
            top: 0,
            left: this._leftDP.popup.width() + this._leftDP.popup.position().left - this.popup.find(bbdesigner$("#" + this._id + "_lTime_timewidget")).outerWidth()
        });
        bbdesigner$("#" + this._id + "_rTime_timewidget").css({
            position: "absolute",
            top: !this.popup.hasClass("e-daterange-responsive") ? 0 : this._rightDP.wrapper.position().top,
            left: this._rightDP.popup.width() + this._rightDP.popup.position().left - this.popup.find(bbdesigner$("#" + this._id + "_rTime_timewidget")).outerWidth()
        });
    };
    BoldBIDashboardDateRangePicker.prototype._updateInput = function (e) {
        if (!(this.model.startDate && this.model.endDate)) {
            if (this.model.value)
                this.element.val(this.model.value);
            if (this._popupOpen)
                this.popupHide();
            return;
        }
        this._resetValues();
        this.wrapper.removeClass("e-error");
        this._mainValue();
        this._refreshMinMax();
    };
    BoldBIDashboardDateRangePicker.prototype._removeWatermark = function () {
        if (this.element.val() != "" && !this._isSupport)
            this._hiddenInput.css("display", "none");
    };
    BoldBIDashboardDateRangePicker.prototype._mainValue = function () {
		var startDt = this.model.startDate, endDt = this.model.endDate;
        var lefttime = BoldBIDashboard.format(startDt, this.model.timeFormat, this.model.locale), righttime = BoldBIDashboard.format(endDt, this.model.timeFormat, this.model.locale);
        var _startDateString = BoldBIDashboard.format(startDt, this.model.dateFormat, this.model.locale);
        var _endDateString = BoldBIDashboard.format(endDt, this.model.dateFormat, this.model.locale);
        if (this.model.enableTimePicker) {
			if (this.popup && this._leftTP && this._rightTP && this._leftTP.model.value && this._rightTP.model.value) {
				lefttime = this._leftTP.model.value;
				righttime = this._rightTP.model.value;
			}
			_startDateString = BoldBIDashboard.format(_startDateString + " " + lefttime, this._dateTimeFormat, this.model.locale);
			_endDateString = BoldBIDashboard.format(_endDateString + " " + righttime, this._dateTimeFormat, this.model.locale);
			this.model.startDate = BoldBIDashboard.parseDate(_startDateString, this._dateTimeFormat, this.model.locale);
			this.model.endDate = BoldBIDashboard.parseDate(_endDateString, this._dateTimeFormat, this.model.locale);
            }
		else {
			if (this.popup) {
			this.model.startDate = BoldBIDashboard.parseDate(_startDateString, this._leftDP.model.dateFormat, this.model.locale);
			this.model.endDate = BoldBIDashboard.parseDate(_endDateString, this._rightDP.model.dateFormat, this.model.locale);
			}
		}
        if (_startDateString != null && _endDateString != null) {
            this.model.value = _startDateString + " " + this.model.separator + " " + _endDateString;
            this.element.val(this.model.value);
            if (this._hiddenInput)
                this._hiddenInput.attr('value', this.model.value);
            this._removeWatermark();
            this._validState = true;
        } else {
            this.model.value = null;
            this._setWaterMark();
            this._validState = false;
        }
        this._prevValue = this.model.value;
        if (this._buttonDiv)
            this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
        this._trigger("_change", { value: this.model.value });
    };
    BoldBIDashboardDateRangePicker.prototype._bindDateButton = function () {
        if (this.dateRangeicon)
            this._on(this.dateRangeIcon, "click", this._showDatePopUp);
        if (!this.model.allowEdit) {
            this.element.attr("readonly", "readonly");
            this.element.on("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
            this.element.off("blur", bbdesigner$.proxy(this._onMainFocusOut, this));
        }
        if (this.model.allowEdit) {
            this.element.off("mousedown", bbdesigner$.proxy(this._showDatePopUp, this));
        }
    };

    BoldBIDashboardDateRangePicker.prototype._showDatePopUp = function (e) {
        if (!this.model.enabled)
            return false;
        var isRightClick = false;
        if (e.button)
            isRightClick = (e.button == 2);
        else if (e.which)
            isRightClick = (e.which == 3); //for Opera
        if (isRightClick)
            return;
        this._showhidePopup(e);
    };
    BoldBIDashboardDateRangePicker.prototype._showhidePopup = function (e) {
        if (this._popupOpen) {
            if (!this._isFocused && this.element.is(':input') && (!BoldBIDashboard.isTouchDevice())) {
                this.wrapper.addClass('e-focus');
            }
            this.popupHide(e);
        } else {
            if (!this._isFocused && this.element.is(':input') && (!BoldBIDashboard.isTouchDevice())) {
                this.wrapper.addClass('e-focus');
            }
            this.popupShow(e);
        }
    };
    BoldBIDashboardDateRangePicker.prototype.popupHide = function (e) {
	   if ( e && (e.type == "touchmove" || e.type== "scroll")) {
		   if (bbdesigner$(e.target).parents("#"+this.popup[0].id).length > 0)
			   return;
	   }
        if (!this._popupOpen || this._isPopScroll) return false;
        var proxy = this;
        this._trigger("beforeClose", { element: this.popup, events: e });
        this.popup.attr({ 'aria-hidden': 'true' });
		this.element.attr({'aria-expanded':'false'})
        if (this._leftTP && !this._leftTP._popupOpen)
            this._leftTP.hide();
        if (this._rightTP && !this._rightTP._popupOpen)
            this._rightTP.hide();
        this.popup.css("visibility", "visible").slideUp(100, function () {
            proxy._popupOpen = false;
        });
        this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this.popupHide);
        this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this.popupHide);
        this._trigger("close", { element: this.popup, events: e });
        this.wrapper.removeClass("e-active");
    };

    BoldBIDashboardDateRangePicker.prototype.popupShow = function (e) {
        if (!this.popup) {
            this._onMainFocusOut();
            this._renderPopup();
            this._updateValues();
        }
        this._updateRangesList();
        if (!this.model.enabled)
            return false;
        if (this._popupOpen)
            return false;
        var proxy = this;
        this._trigger("beforeOpen", { element: this.popup, events: e });
        this.wrapper.addClass('e-focus');
        this.popup.attr({ 'aria-hidden': 'false' });
		this.element.attr({'aria-expanded':'true'})
        proxy._popupOpen = true;
        this.popup.css({ 'visibility': 'hidden', 'display': 'block' });
        this._resizePopup();
        this.popup.css({ 'display': 'none', 'visibility': 'visible' }).slideDown(100, function () {
        });
        this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this.popupHide);
        this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this.popupHide);
        this._trigger("open", { element: this.popup, events: e });
        this.wrapper.addClass("e-active");
    };
    BoldBIDashboardDateRangePicker.prototype._resizePopup = function () {
        var proxy = this, range_width = 0, ran_height = 0;
        var cal_width = proxy.datePopup.find(".e-popup.e-calendar").outerWidth();
        var cal_height = proxy.datePopup.find(".e-popup.e-calendar").height();
        if (this._customRangePicker && this._customRangePicker.height() <= 0)
            this._customRangePicker.height(this.datePopup.height());
        if (this.model.ranges && this.model.ranges.length > 0)
            var ran_height = this._customRangePicker.find("ul").height(), range_width = proxy._customRangePicker.outerWidth();
        if (bbdesigner$(window).width() - this.wrapper.position().left < ((cal_width * 2) + range_width) + 25) {
            proxy.popup.addClass("e-daterange-responsive");
            proxy._setOption("width", "95%");
            if (this.model.enableTimePicker) {
                this._setOption("width", "47%");
                this._setDatePickerPosition();
                bbdesigner$("#" + this._id + "_lTime_timewidget").css({
                    left: this._leftDP.wrapper.outerWidth() + 5
                });

                bbdesigner$("#" + this._id + "_rTime_timewidget").css({
                    left: this._rightDP.wrapper.outerWidth() + 5
                });
                if (proxy._scrollerObj) {
                    proxy._scrollerObj.model.height = ran_height < cal_height ? ran_height + 10 : cal_height;
                    proxy._scrollerObj.refresh();
                }
                return;
            }
            if (proxy._scrollerObj) {
                proxy._scrollerObj.model.height = ran_height < cal_height ? ran_height + 10 : cal_height;
                proxy._scrollerObj.refresh();
            }
        } else {
            proxy.popup.removeClass("e-daterange-responsive");
            if (this.model.enableTimePicker) {
                this._leftTP.option("width", "115px");
                this._rightTP.option("width", "115px");
                this._setTimePickerPos();
            }
            if (proxy._scrollerObj) {
                proxy._scrollerObj.model.height = this.datePopup.height();
                proxy._scrollerObj.refresh();
            }
        }
        this._setDatePickerPosition();
    };
    BoldBIDashboardDateRangePicker.prototype._onDocumentClick = function (e) {
        if (this.model) {
            if (!this.popup) this.wrapper.removeClass('e-focus');
            else if (this.popup && !bbdesigner$(e.target).is(this.popup) && !bbdesigner$(e.target).parents(".e-popup").is(this.popup) && !bbdesigner$(e.target).is(this.wrapper) && !bbdesigner$(e.target).parents(".e-daterangewidget").is(this.wrapper)) {
                if (!this.model.enableTimePicker) {
                    if (this._popupOpen)
                        this.popupHide(e);
                    this.wrapper.removeClass('e-focus');
                }
                else if (this.model.enableTimePicker && !bbdesigner$(e.target).is(this._leftTP.popup) && !bbdesigner$(e.target).parents(".e-popup").is(this._leftTP.popup) && !bbdesigner$(e.target).is(this._rightTP.popup) && !bbdesigner$(e.target).parents(".e-popup").is(this._rightTP.popup)) {
                    if (this._popupOpen)
                        this.popupHide(e);
                    this.wrapper.removeClass('e-focus');
                }
            }
        }
    };
    BoldBIDashboardDateRangePicker.prototype._getOffset = function (ele) {
        var pos = ele.offset() || { left: 0, top: 0 };
        if (bbdesigner$("body").css("position") != "static") {
            var bodyPos = bbdesigner$("body").offset();
            pos.left -= bodyPos.left;
            pos.top -= bodyPos.top;
        }
        return pos;
    };

    BoldBIDashboardDateRangePicker.prototype._getZindexPartial = function (element, popupEle) {
        if (!BoldBIDashboard.isNullOrUndefined(element) && element.length > 0) {
            var parents = element.parents(), bodyEle;
            bodyEle = bbdesigner$('body').children();
            if (!BoldBIDashboard.isNullOrUndefined(element) && element.length > 0)
                bodyEle.splice(bodyEle.index(popupEle), 1);
            bbdesigner$(bodyEle).each(function (i, ele) {
                parents.push(ele);
            });

            var maxZ = Math.max.apply(maxZ, bbdesigner$.map(parents, function (e, n) {
                if (bbdesigner$(e).css('position') != 'static')
                    return parseInt(bbdesigner$(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000)
                maxZ = 10000;
            else
                maxZ += 1;
            return maxZ;
        }
    };

    BoldBIDashboardDateRangePicker.prototype._setDatePickerPosition = function () {
        var elementObj = this.element.is('input') ? this.wrapper : this.element;
        var pos = this._getOffset(elementObj), winLeftWidth, winRightWidth, winBottomHeight = bbdesigner$(document).scrollTop() + bbdesigner$(window).height() - (pos.top + bbdesigner$(elementObj).outerHeight()), winTopHeight = pos.top - bbdesigner$(document).scrollTop(), popupHeight = this.popup.outerHeight(), popupWidth = this.popup.outerWidth(), left = pos.left, totalHeight = elementObj.outerHeight(), border = (totalHeight - elementObj.height()) / 2, maxZ = this._getZindexPartial(this.element, this.popup), popupmargin = 3, topPos = (popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin;
        winLeftWidth = bbdesigner$(document).scrollLeft() + bbdesigner$(window).width() - left;
        if (popupWidth > winLeftWidth && (popupWidth < left + elementObj.outerWidth()))
            left -= this.popup.outerWidth() - elementObj.outerWidth();

        this.popup.css({
            "left": left + "px",
            "top": topPos + "px",
            "z-index": maxZ
        });

        if (this.model.enableTimePicker) {
            bbdesigner$("#" + this._id + "_lTime_timewidget").css({
                position: "absolute",
                top: 0,
                left: this._leftDP.popup.width() + this._leftDP.popup.position().left - bbdesigner$("#" + this._id + "_lTime_timewidget").width()
            });
            bbdesigner$("#" + this._id + "_rTime_timewidget").css({
                position: "absolute",
                top: !this.popup.hasClass("e-daterange-responsive") ? 0 : this._rightDP.wrapper.position().top,
                left: this._rightDP.popup.width() + this._rightDP.popup.position().left - bbdesigner$("#" + this._id + "_rTime_timewidget").width()
            });
        }
    };
    BoldBIDashboardDateRangePicker.prototype._dateEleClicked = function (e) {
        bbdesigner$(".e-dateranges-ul").find(".rangeItem.e-active").removeClass("e-active");
        bbdesigner$(".e-dateranges-ul").find(".rangeItem.e-custompic").addClass("e-active");
        this._activeItem = bbdesigner$(e.currentTarget);
        if (this._activeItem.hasClass("e-hidedate")) {
            e.stopPropagation();
            return;
        }
        if (this._activeItem.hasClass("other-month")) {
            this._refreshMinMax();
        }
        var dateString = this._activeItem.attr("data-date");
        var cal_type = (bbdesigner$(e.currentTarget).parents(".e-left-datepicker").length > 0) ? "left" : "right";
        if (BoldBIDashboard.isNullOrUndefined(dateString) || dateString === "")
            return;
        var currentDate = new Date(dateString);
        if (this._selectedStartDate != null && this._selectedEndDate != null)
            this._selectedStartDate = null;
        if (this._selectedStartDate == null) {
            this._selectedStartDate = currentDate;
            this._selectedEndDate = null;
            if (this._startDate)
                this._startDate.date = null;
            this._rightDP.element.val(null);
            if (cal_type == "right") {
                this._leftDP._stopRefresh = true;
                this._leftDP.option("value", this._selectedStartDate);
                this._leftDP.element.val(this._selectedStartDate.toLocaleDateString());
            }
            if (this._rightTP)
                this._rightTP.option("value", "");
            this.popup.find(".in-range").removeClass("in-range");
            this.datePopup.find("td.e-state-default.e-active").removeClass("e-active");
            this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
            var startElement = bbdesigner$(this.datePopup.find('.current-month[data-date="' + dateString + '"]'));
            this._selectedStartDate = new Date(startElement.attr("data-date"));
            this._setStartDate(this._selectedStartDate, startElement, true);
        } else if ((this._selectedStartDate !== null && this._selectedEndDate == null) && !(currentDate < this._selectedStartDate)) {
            var minDate = currentDate;
            var dateString = bbdesigner$(e.currentTarget).attr("data-date");
            this._rightDP._stopRefresh = true;
            this._rightDP.option("value", new Date(dateString));
            this._rightDP._stopRefresh = false;
            if (this._rightTP)
                this._rightTP.option("value", new Date(dateString));
            this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
            var endElement = bbdesigner$(this.datePopup.find('.current-month[data-date="' + dateString + '"]'));
            this._selectedStartDate = this.model.startDate;
            this._selectedEndDate = new Date(dateString);
            this._setEndDate(this._selectedEndDate, endElement, true);
            this._startDate = {};
            this._startDate.date = this._selectedStartDate;
            this._updateRanges("left");
            this._updateRanges("right");
            if (cal_type == "left") {
                this._leftDP._stopRefresh = true;
                this._leftDP.option("value", this.model.startDate);
                this._leftDP.element.val(this.model.startDate.toLocaleDateString());
            }
        } else {
            this._selectedStartDate = currentDate;
            this._selectedEndDate = null;
            if (this._endDate)
                this._endDate.date = null;
            this.popup.find(".in-range").removeClass("in-range");
            this._rightDP.option("value", null);
            if (this._rightTP)
                this._rightTP.option("value", "");
            if (cal_type == "right") {
                this._leftDP._stopRefresh = true;
                this._leftDP.option("value", this._selectedStartDate);
                this._leftDP.element.val(this._selectedStartDate.toLocaleDateString());
            }
            this._setStartDate(this._selectedStartDate, this._activeItem, true);
            this._updateRanges("left");
            this._updateRanges("right");
        }
        this._trigger("click", { element: bbdesigner$(e.currentTarget), startDate: this.model.startDate, endDate: this.model.endDate, value: new Date(bbdesigner$(e.currentTarget).attr("data-date")) });
    };
    BoldBIDashboardDateRangePicker.prototype._setStartDate = function (value, current_element, newset) {
        this._startDate = {};
        this._startDate.date = value;
        if (newset) {
            this._endDate = {};
            this._endDate.date = null;
        }
        this._leftDP._checkDateArrows();
        this.datePopup.find("td.e-state-default").removeClass("e-select e-start-date e-active showrange e-end-date e-state-hover");
        this.popup.find(".in-range").removeClass("in-range");
        current_element.addClass("e-start-date");
        this.model.startDate = value;
        if (this._buttonDiv)
            this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
        if (!this.model.enableTimePicker)
            return;
        var bbdesigner$this = this._leftTP;
        var _value = BoldBIDashboard.format(this._leftTP.model.value || this._leftDP.model.value, bbdesigner$this.model.timeFormat, this.model.locale);
        if (_value)
            this._rightTP.option("minTime", _value);
        if (_value)
            this._leftTP.option("value", _value);
    };
    BoldBIDashboardDateRangePicker.prototype._setEndDate = function (value, current_element, newset) {
        this._rightDP.element.parents(".e-datewidget").removeClass("e-val-error");
        this._endDate = {};
        this._endDate.date = value;
        this.popup.find("td.e-end-date").removeClass("e-select e-end-date");
        current_element.addClass("e-end-date");
        if (this._buttonDiv)
            this._buttonDiv.find(".e-disable").removeClass("e-disable");
        this.model.endDate = value;
        if (this._startDate.date.getFullYear() == this._endDate.date.getFullYear()) {
            if (this._startDate.date.getMonth() == this._endDate.date.getMonth()) {
                return;
            }
        }
        if (!this.model.enableTimePicker)
            return;
        if (this.model.startDate.getDate() == this.model.endDate.getDate()) {
            this._rightTP.option("minTime", this._leftTP.option("value") || "");
            this._rightTP.option("value", this._leftTP.option("value") || "");
        } else {
            var bbdesigner$this = this._rightTP;
            var _value = BoldBIDashboard.format(this._rightTP.model.value, bbdesigner$this.model.timeFormat, this.model.locale);
            if (_value)
                this._rightTP.option("minTime", _value);
            if (_value)
                this._rightTP.option("value", _value);
        }
    };

    BoldBIDashboardDateRangePicker.prototype._rangeRefresh = function (args) {
        var startElement, endElement;
        if (this._rightDP) {
            var popup = args.element.parent().hasClass("e-left-datepicker") ? this._leftDP.popup : this._rightDP.popup;
        }
        if (this._startDate && this._startDate.date && this._startDate.date.getMonth() == args.month && this._startDate.date.getFullYear() == args.year) {
            startElement = bbdesigner$(popup.find('.current-month[data-date="' + this._startDate.date.toDateString() + '"]'));
            this._setStartDate(this._startDate.date, startElement, false);
            if (this._startDate.date.getDate() + 1 == startElement.next("td").text())
                bbdesigner$(startElement).addClass("showrange");
        }
        if (this._endDate && this._endDate.date && this._endDate.date.getMonth() == args.month && this._endDate.date.getFullYear() == args.year) {
            endElement = bbdesigner$(popup.find('.current-month[data-date="' + this._endDate.date.toDateString() + '"]'));
            this._setEndDate(this._endDate.date, endElement, false);
        }
        if (startElement == endElement)
            bbdesigner$(startElement).removeClass("showrange");
        if (this._rightDP)
            if ((this._startDate && this._startDate.date) && (this._endDate && this._endDate.date)) {
                if (this._startDate.date.getFullYear() <= args.year && this._endDate.date.getFullYear() >= args.year) {
                    var s = args.element.parent().hasClass("e-left-datepicker") ? bbdesigner$(popup.find('td.current-month')[0]) : bbdesigner$(popup.find('td.current-month')[0]);
                    var type = args.element.parent().hasClass("e-left-datepicker") ? "left" : "right";
                    this._updateRanges(type);
                }
            }
    };
    BoldBIDashboardDateRangePicker.prototype._renderRangesWrapper = function () {
        if (BoldBIDashboard.isNullOrUndefined(this._customRangePicker)) {
            this._customRangePicker = BoldBIDashboard.buildTag("div.e-custom-dateranges").css("height", this.datePopup.height());
            this.popup.append(this._customRangePicker);
            this._customRangePicker.insertBefore(this._buttonDiv);
            this._ranges_li = "<ul class='e-dateranges-ul' role=menu></ul>";
            this._customRangePicker.append(this._ranges_li);
        }
    };
    BoldBIDashboardDateRangePicker.prototype.setRange = function (range) {
        var startDate, endDate, ranges, selectedElement;
        this._clearRanges();
	    bbdesigner$(".e-dateranges-ul").find(".rangeItem.e-active").removeClass("e-active");
        if (typeof range == "string") {
			this.model.selectedRange = range;
            for (var i = 0; i < this.model.ranges.length; i++) {
                ranges = this.model.ranges[i];
                if (ranges.label == range) {
                    this.model.startDate = ranges.range[0];
                    this.model.endDate = ranges.range[1];
		            selectedElement = bbdesigner$(".e-dateranges-ul").find('.rangeItem[title="' + range + '"]');
                    if (selectedElement.length) {
                        selectedElement.addClass('e-active');
                    }
                    this._updatePreRanges();
                    return;
                }
            }
        } else if (typeof range == "object") {
            if (range.length == 2) {
                this.model.startDate = range[0];
                this.model.endDate = range[1];
                this._updatePreRanges();
                return;
            }
        }
    };
    BoldBIDashboardDateRangePicker.prototype._updatePreRanges = function () {
        this._selectedStartDate = this.model.startDate;
        this._selectedEndDate = this.model.endDate;
        this._resetValues();
        if (this.popup) this._setValues();
        this._refreshMinMax();
        if (!this._popupOpen)
            this._mainValue();
        this._setWaterMark();
    };
    BoldBIDashboardDateRangePicker.prototype.destroy = function () {
        this.destroy();
    };
    BoldBIDashboardDateRangePicker.prototype._destroy = function () {
        if (this._popupOpen)
            this._showhidePopup();
        if (this.wrapper) {
            this.element.removeClass("e-input");
            this.element.removeAttr("aria-atomic aria-live placeholder");
            !this._cloneElement.attr("tabindex") && this.element.attr("tabindex") && this.element.removeAttr("tabindex");
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
        }
        if (!BoldBIDashboard.isNullOrUndefined(this._leftDP))
            this._leftDP.destroy();
        if (!BoldBIDashboard.isNullOrUndefined(this._rightDP))
            this._rightDP.destroy();
        if (!BoldBIDashboard.isNullOrUndefined(this._rightTP))
            this._rightTP.destroy();
        if (!BoldBIDashboard.isNullOrUndefined(this._leftTP))
            this._leftTP.destroy();
        if (!BoldBIDashboard.isNullOrUndefined(this._scrollerObj))
            this._scrollerObj.destroy();
        this.popup.remove();
    };
    BoldBIDashboardDateRangePicker.prototype.addRanges = function (args) {
        var proxy = this, _ranges_li = "", title;
        if (args) {
            for (var i = 0; i < args.length; i++) {
                var s = args[i];
                var value = s.range;
                if (value.length === 2) {
                    var start = new Date(value[0]);
                    var end = new Date(value[1]);
                    if (BoldBIDashboard.isNullOrUndefined(start))
                        start = new Date(value[0]);
                    if (BoldBIDashboard.isNullOrUndefined(end))
                        end = new Date(value[1]);
                    if (start <= end) {
                        if (!s.label)
                            s.label = "PreDefined Ranges";
                        _ranges_li += "<li aria-selected='false' title='" + s.label + "'class='rangeItem' data-e-range='" + JSON.stringify(value) + "' data-e-value='" + s.range + "'>" + s.label + "</li>";
                    }
                }
            }
        }
        this._renderRangesWrapper();
        this._customRangePicker.find(".e-dateranges-ul").append(_ranges_li);
        this._off(this._customRangePicker.find("ul li.rangeItem"), "click", this._customSelection);
        this._on(this._customRangePicker.find("ul li.rangeItem"), "click", this._customSelection);
        if (this._scrollerObj)
            this._scrollerObj.refresh();
    };
    BoldBIDashboardDateRangePicker.prototype._righthoverRange = function (e) {
        this._activeItem = bbdesigner$(e.currentTarget);
        if (this._activeItem.hasClass("e-hidedate")) {
            e.stopPropagation();

            return;
        }
        this.popup.find(".range-hover").removeClass("range-hover");
        if (this._activeItem.hasClass("in-range"))
            this._activeItem.addClass("range-hover");
        var dateString = this._activeItem.attr("data-date");
        var currentDate = new Date(dateString);
        this._trigger("hover", { element: e.currentTarget, events: e, value: new Date(this._activeItem.attr("data-date")) });

        var that = this;
        if (!BoldBIDashboard.isNullOrUndefined(that._selectedStartDate) && (BoldBIDashboard.isNullOrUndefined(that._selectedEndDate)))
            this.popup.find(".current-month").each(function (index, el) {
                var element = bbdesigner$(el);
                var dateString = element.attr("data-date");
                if (BoldBIDashboard.isNullOrUndefined(dateString) || dateString === "")
                    return;
                var date = new Date(dateString);
                if (date > that._startDate.date && date < currentDate) {
                    element.addClass("in-range");
                } else {
                    element.removeClass("in-range");
                }
                if (date.getTime() === that._selectedStartDate.getTime() && element.next().length !== 0 && element.next("td.current-month").length !== 0 && currentDate > that._selectedStartDate && new Date(new Date(that._selectedStartDate.getTime()).setDate(that._selectedStartDate.getDate() + 1)).getTime() !== currentDate.getTime()) {
                    element.addClass("showrange");
                } else {
                    element.removeClass("showrange");
                }
            });
    };
    BoldBIDashboardDateRangePicker.prototype._customSelection = function (e) {
        this._customRangePicker.find(".e-active").removeClass("e-active");
        if (bbdesigner$(e.currentTarget).attr("data-e-range") != "customPicker") {
            var range = bbdesigner$(e.currentTarget).attr("data-e-value").split(",");
            this.model.startDate = new Date(range[0]);
            this.model.endDate = new Date(range[1]);
            this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
            this._customSet();
        } else {
            this.model.startDate = null;
            this.model.endDate = null;
            this._clearRanges();
        }
        this._customRangePicker.find(".e-active").removeClass("e-active");
        bbdesigner$(e.currentTarget).addClass("e-active");
        this.model.previouseRange = bbdesigner$(e.currentTarget).text();
    };
    BoldBIDashboardDateRangePicker.prototype._setWaterMark = function () {
        if (this.element != null && this.element.hasClass("e-input")) {
            if ((!this._isSupport) && this.element.val() == "") {
                this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
            }
            else {
                bbdesigner$(this.element).attr("placeholder", this._localizedLabels.watermarkText);
            }
            return true;
        }
    };
    BoldBIDashboardDateRangePicker.prototype._clearRanges = function (e) {
        this._updateRangesList();
        this._setOption("value", "");
        if (this.popup) this._rightDP.element.parents(".e-datewidget").removeClass("e-val-error");
        this._selectedStartDate = null;
        this._selectedEndDate = null;
        if (this._startDate)
            this._startDate.date = null;
        if (this._endDate)
            this._endDate.date = null;
        if (this.popup) this.popup.find("td").removeClass("e-start-date e-end-date in-range e-active e-state-hover today");
        this.model.value = null;
        this.model.startDate = null;
        this.model.endDate = null;
        if (this._buttonDiv)
            this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
    };
    BoldBIDashboardDateRangePicker.prototype.clearRanges = function () {
        this._clearRanges();
        this._refreshMinMax();
        this.element.val("");
        this._trigger("_change", { value: this.model.value });
        this._trigger("change", { value: this.model.value, startDate: this.model.startDate, endDate: this.model.endDate });
        this._trigger("clear", {});
    };
    BoldBIDashboardDateRangePicker.prototype._getLocalizedLabels = function () {
        return BoldBIDashboard.getLocalizedConstants("BoldBIDashboard.DateRangePicker", this.model.locale);
    };
    BoldBIDashboardDateRangePicker.prototype._unWireEvents = function () {
        this._off(bbdesigner$('.e-next', this.popup), "click", bbdesigner$.proxy(this._previousNextHandler, this));
        this._off(bbdesigner$('.e-prev', this.popup), "click", bbdesigner$.proxy(this._previousNextHandler, this));
        this._off(bbdesigner$(this._buttonDiv.find("div.e-drp-cancel")), "click", this._cancelButton);
        this._off(bbdesigner$(this._buttonDiv.find("div.e-drp-reset")), "click", this.clearRanges);
        this._off(this.popup.find(".leftDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._off(this.popup.find(".rightDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        if (this.model.allowEdit) {
            this._off(this.element, "blur", this._onMainFocusOut);
            this._off(this.element, "focus", this._onFocusIn);
            this._off(this.element, "keydown", this._onKeyDown);
        }
    };
    BoldBIDashboardDateRangePicker.prototype._onDocumentKeyDown = function (e) {
        if (e.keyCode != "13")
            return;
        if (!this._buttonDiv.find(".e-drp-apply").hasClass("e-disable") && this.wrapper.hasClass("e-focus")) {
            this._buttonDiv.find(".e-drp-apply").click();
        }
    };
    BoldBIDashboardDateRangePicker.prototype._wirePopupEvents = function () {
		this._on(bbdesigner$('.e-next', this.popup), "click", bbdesigner$.proxy(this._previousNextHandler, this));
        this._on(bbdesigner$('.e-prev', this.popup), "click", bbdesigner$.proxy(this._previousNextHandler, this));
	};
    BoldBIDashboardDateRangePicker.prototype._wireEvents = function () {
        bbdesigner$(document).on("mousedown", bbdesigner$.proxy(this._onDocumentClick, this));
        bbdesigner$(document).on("keydown", bbdesigner$.proxy(this._onDocumentKeyDown, this));
        if (this.model.allowEdit) {
            this._on(this.element, "blur", this._onMainFocusOut);
            this._on(this.element, "focus", this._onFocusIn);
            this._on(this.element, "keydown", this._onKeyDown);
        }
    };
    BoldBIDashboardDateRangePicker.prototype._onFocusIn = function (e) {
        if (this._isSupport) {
            e.preventDefault();
            this._isFocused = true;
        }
        if (this.wrapper.hasClass("e-error")) {
            this._validState = false;
            this.wrapper.removeClass('e-error');
        }
        if (!this.model.showPopupButton && !this.model.readOnly) this.popupShow(e);
        if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
        this.wrapper.addClass("e-focus");
    };

    BoldBIDashboardDateRangePicker.prototype._onKeyDown = function (e) {
        if (e.keyCode == 13) {
            if (bbdesigner$(e.currentTarget).hasClass("e-datepicker")) {
                this._validateValues(bbdesigner$(e.currentTarget).val(), bbdesigner$(e.currentTarget).parents(".e-left-datepicker").length > 0 ? "left" : "right");
                bbdesigner$(e.currentTarget).parents(".e-left-datepicker").length > 0 ? this._leftDP.model.value = this.model.startDate : this._rightDP.model.value = this.model.endDate;
                this._onPopupFocusOut(e);
            } else {
                bbdesigner$(e.currentTarget).hasClass("leftTime") && this._leftTP && this._rightTP ? this._leftTP._trigger("select") : this._rightTP._trigger("select");
            }
        }
        e.stopImmediatePropagation();
    };
    BoldBIDashboardDateRangePicker.prototype._cancelButton = function () {
        this.model.previouseRange = null;
        this._prevValue = null, this._isPopScroll = false;
        this._clearRanges();
        this._onMainFocusOut();
        this._showhidePopup();
    };
    BoldBIDashboardDateRangePicker.prototype._updateRanges = function (cal_type) {
        var cal = cal_type == "left" ? this._leftDP : this._rightDP;
        var proxy = this;
        cal.popup.find("td.current-month").each(function (index, el) {
            var element = bbdesigner$(el);
            var dateString = element.attr("data-date");
            if (BoldBIDashboard.isNullOrUndefined(dateString) || dateString === "")
                return;
            var date = new Date(dateString);
            if (!BoldBIDashboard.isNullOrUndefined(proxy._startDate) && !BoldBIDashboard.isNullOrUndefined(proxy._startDate.date) && !BoldBIDashboard.isNullOrUndefined(proxy._endDate.date))
                if (date > proxy._startDate.date && date < proxy._endDate.date) {
                    element.addClass("in-range");
                } else {
                    element.removeClass("in-range");
                }
            if (!BoldBIDashboard.isNullOrUndefined(proxy._startDate) && !BoldBIDashboard.isNullOrUndefined(proxy._startDate.date) && date.toDateString() == proxy._startDate.date.toDateString()) {
                element.addClass("e-start-date");
                if (!BoldBIDashboard.isNullOrUndefined(proxy._endDate) && !BoldBIDashboard.isNullOrUndefined(proxy._endDate.date) && proxy._startDate.date.toDateString() != proxy._endDate.date.toDateString())
                    element.addClass("showrange");
                element.removeClass("in-range");
            }
            if (!BoldBIDashboard.isNullOrUndefined(proxy._endDate) && !BoldBIDashboard.isNullOrUndefined(proxy._endDate.date))
                if (!BoldBIDashboard.isNullOrUndefined(proxy._endDate) && date.toDateString() == proxy._endDate.date.toDateString()) {
                    element.addClass("e-end-date");
                    element.removeClass("in-range");
                }
        });
        if (cal.popup.find(".e-start-date").length > 0) {
            if (bbdesigner$(cal.popup.find(".e-start-date")).next("td.in-range").length > 0)
                return;
            else
                bbdesigner$(cal.popup.find(".e-start-date")).removeClass("showrange");
        }
    };

    BoldBIDashboardDateRangePicker.prototype.getSelectedRange = function () {
        var args = { startDate: this.model.startDate, endDate: this.model.endDate };
        return args;
    };
    BoldBIDashboardDateRangePicker.prototype.enable = function () {
        this.element[0].disabled = false;
        this.model.enabled = true;
        this.wrapper.removeClass('e-disable');
        this.element.removeClass("e-disable");
        this.element.attr("aria-disabled", "false");        
        if (!this._isSupport)
            this._hiddenInput.attr("enabled", "enabled");
        if (this.dateRangeIcon)
            this.dateRangeIcon.removeClass("e-disable").attr("aria-disabled", "false");
        if (this.popup) this.popup.children("div").removeClass("e-disable").attr("aria-disabled", "false");
        this._setOption("enabled", true);
    };
    BoldBIDashboardDateRangePicker.prototype.disable = function () {
        this.element[0].disabled = true;
        this.model.enabled = false;
        this.wrapper.addClass('e-disable');
        this.element.addClass("e-disable");
        this.element.attr("aria-disabled", "true");
        this.element.attr("disabled", "disabled");
        if (!this._isSupport)
            this._hiddenInput.attr("disabled", "disabled");
        if (this.dateRangeIcon)
            this.dateRangeIcon.addClass("e-disable").attr("aria-disabled", "true");
        if (this.popup) this.popup.children("div").addClass("e-disable").attr("aria-disabled", "true");
        this.popupHide();
        this._setOption("enabled", false);
    };

    BoldBIDashboardDateRangePicker.prototype._onMainFocusOut = function (e) {
        var element_value = this.element.val(), setError;
        this.wrapper.removeClass('e-focus');
        if (this.element.val() == "" && this._prevValue == null) return;
        if (this._prevValue && this._prevValue == this.element.val()) {
            this._validState ? this.wrapper.removeClass('e-error') : this.wrapper.addClass('e-error');
            return;
        }
        else this._updateRangesList();
        if (this.element.val() == "") {
            this.wrapper.removeClass('e-error');
            this._clearRanges();
            this._setWaterMark();
            this._refreshMinMax();
            this._trigger("change", { value: this.model.value, startDate: null, endDate: null });
            this._trigger("_change", { value: this.model.value });
            return;
        }
        this.wrapper.removeClass("e-error");
        var datestring = this.element.val().split(this.model.separator), _startdate = BoldBIDashboard.parseDate(datestring[0], this._dateTimeFormat, this.model.locale), _enddate = BoldBIDashboard.parseDate(datestring[1], this._dateTimeFormat, this.model.locale);
        this._validState = true;
        if (!this._validateValues(_startdate, "left") || !this._validateValues(_enddate, "right") || !this._startEndValidation()) {
            this._clearRanges();
            this._refreshMinMax();
            setError = true;
        }
        if (element_value != "" && setError) {
            this.element.val(element_value);
            this.wrapper.addClass("e-error");
            this.model.value = null;
            this._validState = false;
            this._trigger("_change", { value: this.element.val() });
            this._trigger("change", { value: this.model.value, startDate: null, endDate: null });
            return;
        }
        this._resetValues();
        if (this.popup) this._setValues();
        this._refreshMinMax();
        this.model.value = this._validState && element_value != "" ? element_value : null;
        if (!this._popupOpen)
            this._mainValue();
        this._prevValue = this.model.value;
        this._validState ? this.wrapper.removeClass('e-error').removeClass("e-focus") : this.wrapper.addClass('e-error').removeClass("e-focus");
        this._trigger("change", { value: this.model.value, startDate: this.model.startDate, endDate: this.model.endDate });
    };
    BoldBIDashboardDateRangePicker.prototype._onPopupFocusOut = function (e) {
        if (BoldBIDashboard.format(this._selectedStartDate, "M/d/yyyy") != bbdesigner$("#daterangeleftDate_wrapper").val() || BoldBIDashboard.format(this._selectedEndDate, "M/d/yyyy") != bbdesigner$("#daterangerightDate_wrapper").val()) {
            this._updateRangesList();
        }
        var picker = bbdesigner$(e.currentTarget).parents(".e-left-datepicker").length > 0 ? this._leftDP : this._rightDP;
        this._validateValues(bbdesigner$(e.currentTarget).val(), bbdesigner$(e.currentTarget).parents(".e-left-datepicker").length > 0 ? "left" : "right");
        bbdesigner$(e.currentTarget).parents(".e-left-datepicker").length > 0 ? this._leftDP.model.value = this.model.startDate : this._rightDP.model.value = this.model.endDate;
        var _prevStartValue = this.model.startDate;
        var _prevEndValue = this.model.endDate, stop = false;
        this._rightDP.element.parents(".e-datewidget").removeClass("e-val-error");
        if (!this._startEndValidation()) {
            if (bbdesigner$(e.currentTarget).parents(".e-left-datepicker").length > 0) {
                this._clearRanges();
                this.model.startDate = _prevStartValue;
                this._selectedStartDate = this.model.startDate;
            } else {
                this._rightDP.element.parents(".e-datewidget").addClass("e-val-error");
                this.model.endDate = null;
                stop = true;
            }
        }
        if (_prevStartValue == null) {
            this._clearRanges();
            return;
        }
        this._selectedStartDate = this.model.startDate;
        this._selectedEndDate = this.model.endDate;
        this._resetValues();
        if (this.popup) this._setValues();
        if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
        this._refreshMinMax();
        if (!this._popupOpen)
            this._mainValue();
        if (stop)
            this._rightDP.element.val(_prevEndValue.toLocaleDateString());
        this._setWaterMark();
    };
    BoldBIDashboardDateRangePicker.prototype._resetValues = function () {
        if (this.popup) {
            this._leftDP.option("maxDate", null);
            this._rightDP.option("minDate", null);
            this._leftDP.option("value", this._leftDP.model.value);
            this._rightDP.option("value", this._rightDP.model.value);
        }
    };
    BoldBIDashboardDateRangePicker.prototype._resetRanges = function () {
        if (this.popup) {
            this._leftDP.option("maxDate", null);
            this._rightDP.option("minDate", null);
            this._leftDP.option("value", this._leftDP.model.value);
            this._rightDP.option("value", this._rightDP.model.value);
        }
    };
    BoldBIDashboardDateRangePicker.prototype._refreshMinMax = function () {
        if (this.popup) {
            var local = this._getNextMonth(this._leftDP._calendarDate);
            if (local.toDateString() > this._rightDP._calendarDate.toDateString()) {
                var temp = this._rightDP.model.value;
                this._rightDP._calendarDate = local;
                this._rightDP._dateValue = local;
                this._rightDP.option("value", local);
            }
            this._rightDP.option("minDate", local);
            this._rightDP.option("value", temp);
            var temp = this._rightDP._calendarDate, y = temp.getFullYear(), m = temp.getMonth();
            this._leftDP.option("maxDate", new Date(y, m, 0));
        }
    };
    BoldBIDashboardDateRangePicker.prototype._refreshEvents = function (cal_type) {
        this._off(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._off(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._off(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._off(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._on(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._on(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._on(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._on(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._on(bbdesigner$(this._leftDP.sfCalendar.find('table .e-datepicker-months td')), "click", bbdesigner$.proxy(this._previousNextHandler, this));
    };
    BoldBIDashboardDateRangePicker.prototype._previousNextHandler = function (e) {
        var selectedCalender = bbdesigner$(e.currentTarget).closest(".e-calendar").parent();
        var cal_type = selectedCalender.hasClass("e-left-datepicker") ? "left" : "right", leftDateString, rightDateString;
        if (e.type == "_month_Loaded") {
            if (cal_type == "left") {
                rightDateString = bbdesigner$(this._rightDP.popup.find("td.current-month")[0]).attr("data-date");
                leftDateString = this._leftDP._dateValue.toDateString();
            } else if (cal_type == "right") {
                leftDateString = bbdesigner$(this._leftDP.popup.find("td.current-month")[0]).attr("data-date");
                rightDateString = this._rightDP._dateValue.toDateString();
            }
        } else {
            rightDateString = bbdesigner$(this._rightDP.popup.find("td.current-month")[0]).attr("data-date");
            leftDateString = bbdesigner$(this._leftDP.popup.find("td.current-month")[0]).attr("data-date");
        }
        var leftDate = new Date(leftDateString);
        var rightDate = new Date(rightDateString);
        leftDate.setHours(0, 0, 0, 0);
        rightDate.setHours(0, 0, 0, 0);
        var status = true;
        if (cal_type == "right") {
            var cls = bbdesigner$("table", this._leftDP.sfCalendar).get(0).className;
            if (cls == "e-dp-viewdays")
                this._leftDP._stopRefresh = true;
            this._rightDP._stopRefresh = false;
            var temp = rightDate, y = temp.getFullYear(), m = temp.getMonth();
            this._leftDP.option("maxDate", new Date(y, m, 0));
            if (cls == "e-dp-viewmonths")
                this._leftDP._startLevel("year");
            this._leftDP._checkDateArrows();
        } else {
            var cls = bbdesigner$("table", this._rightDP.sfCalendar).get(0).className;
            if (bbdesigner$("table", this._rightDP.sfCalendar).get(0).className == "e-dp-viewdays")
                this._rightDP._stopRefresh = true;
            this._leftDP._stopRefresh = false;
            this._rightDP.option("minDate", this._getNextMonth(leftDate));
            if (cls == "e-dp-viewmonths")
                this._rightDP._startLevel("year");
            this._rightDP._checkDateArrows();
        }

        this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
    };
    return BoldBIDashboardDateRangePicker;
})(BoldBIDashboard.WidgetBase);
window.BoldBIDashboard.widget("BoldBIDashboardDateRangePicker", "BoldBIDashboard.DateRangePicker", new BoldBIDashboardDateRangePicker());
window["BoldBIDashboardDateRangePicker"] = null;

BoldBIDashboard.DateRangePicker.Locale = {};

BoldBIDashboard.DateRangePicker.Locale = BoldBIDashboard.DateRangePicker.Locale || {};

BoldBIDashboard.DateRangePicker.Locale['default'] = BoldBIDashboard.DateRangePicker.Locale['en-US'] = {
    ButtonText: {
        apply: "Apply",
        cancel: "Cancel",
        reset: "Reset"
    },
    watermarkText: "Select Range",
    customPicker: "Custom Picker"
};
//# sourceMappingURL=BoldBIDashboard.daterangepicker.js.map
;;
/**
* @fileOverview Plugin to select the date and time values.
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardDateTimePicker", "BoldBIDashboard.DateTimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        _rootCSS: "e-datetimepicker",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },
        _requiresID: true,


        defaults: {

            cssClass: "",

            locale: "en-US",

            readOnly: false,

            showRoundedCorner: false,

            enableRTL: false,

            htmlAttributes: {},
            allowEdit: true,

            enabled: true,

            value: "",

            name: null,

            minDateTime: new Date("1/1/1900 12:00:00 AM"),

            maxDateTime: new Date("12/31/2099 11:59:59 PM"),

            height: "",

            width: "",

            dateTimeFormat: "",

            showPopupButton: true,

            enableStrictMode: false,

            buttonText: {

                today: "Today",

                timeNow: "Time Now",

                done: "Done",

                timeTitle: "Time"
            },

            watermarkText: "Select datetime",

            enablePersistence: false,

            interval: 30,

            timeDisplayFormat: "",

            timePopupWidth: 105,
            popupPosition: "bottom",

            dayHeaderFormat: "short",

            startLevel: "month",

            depthLevel: "",

            startDay: -1,

            stepMonths: 1,

            showOtherMonths: true,

            enableAnimation: true,

            headerFormat: 'MMMM yyyy',

            validationRules: null,

            validationMessage: null,

            validationMessages: null,
            timeDrillDown: {
                enabled: false,
                interval: 5,
                showMeridian: false,
                autoClose: true,
                showFooter: true
            },

            beforeOpen: null,

            beforeClose: null,

            open: null,

            close: null,

            change: null,

            create: null,

            destroy: null,

            focusIn: null,

            focusOut: null

        },


        dataTypes: {
            allowEdit: "boolean",
            cssClass: "string",
            locale: "string",
            readOnly: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            enabled: "boolean",
            enableAnimation: "boolean",
            dateTimeFormat: "string",
            showPopupButton: "boolean",
            buttonText: "data",
            watermarkText: "string",
            enablePersistence: "boolean",
            enableStrictMode: "boolean",
            interval: "number",
            timeDrillDown: "data",
            timeDisplayFormat: "string",
            dayHeaderFormat: "string",
            startLevel: "string",
            depthLevel: "string",
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            headerFormat: "string",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data"
        },

        _setModel: function (options) {
            if (!this.popup) this._renderDropdown();
            var option, validate = false;
            for (option in options) {
                switch (option) {
                    case "allowEdit": this._changeEditable(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "locale": this._localize(options[option]); break;
                    case "readOnly": this._readOnly(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "value":
                        options[option] = this._setValue(options[option]);
                        if (this._specificFormat())
                            this._stopRefresh = true
                        validate = true;
                        this._prevDateTime = this._prevDateTimeVal || this._preVal;
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        validate = true;
                        break;
                    case "minDateTime":
                        var temp = this._stringToObject(options[option]);
                        var mintime = this._getFormat(temp, this.timePicker.model.timeFormat);
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("minDate", temp);
                            this.timePicker.option("minTime", mintime);
                            options[option] = temp;
                            this.model.minDateTime = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true;
                        break;
                    case "maxDateTime":
                        var temp = this._stringToObject(options[option]);
                        var maxtime = this._getFormat(options[option], this.timePicker.model.timeFormat);
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("maxDate", temp);
                            this.timePicker.option("maxTime", maxtime);
                            options[option] = temp;
                            this.model.maxDateTime = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true; break;
                    case "height": this.wrapper.height(options[option]); break;
                    case "width": this.wrapper.width(options[option]); break;
                    case "dateTimeFormat":
                        this.model.dateTimeFormat = options[option];
                        if (this.isValidState) this._setValue(this.model.value);
                        break;
                    case "showPopupButton": this._showButton(options[option]); break;
                    case "watermarkText":
                        if (BoldBIDashboard.isNullOrUndefined(this._options)) this._options = {};
                        this._options[option] = this.model.watermarkText = options[option];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                    case "buttonText":
                        if (!BoldBIDashboard.isNullOrUndefined(this._options))
                            this._options["buttonText"] = this.model.buttonText = options[option];
                        this._localizedLabels.buttonText = this.model.buttonText;
                        this._buttonText(options[option]); break;
                    case "interval":
                        this._updateTimeHeight();
                        this.timePicker.option("interval", options[option]); break;
                    case "timeDisplayFormat":
                        this._updateTimeHeight();
                        this.timePicker.option("timeFormat", options[option]); break;
                    case "timePopupWidth":
                        this._updateTimeHeight();
                        this.timePicker.option("popupWidth", options[option]);
                        break;
                    case "dayHeaderFormat": this.datePicker.option("dayHeaderFormat", options[option]); break;
                    case "startLevel": this.datePicker.option("startLevel", options[option]); break;
                    case "depthLevel": this.datePicker.option("depthLevel", options[option]); break;
                    case "startDay": this.datePicker.option("startDay", options[option]);
                        this.model.startDay = this.datePicker.model.startDay;
                        options[option] = this.model.startDay; break;
                    case "stepMonths": this.datePicker.option("stepMonths", options[option]); break;
                    case "showOtherMonths": this.datePicker.option("showOtherMonths", options[option]); break;
                    case "headerFormat": this.datePicker.option("headerFormat", options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "popupPosition": this.model.popupPosition = options[option]; this._setListPosition(); break;
                    case "timeDrillDown":

                        // For timeDrillDown.enabled
                        if (!BoldBIDashboard.isNullOrUndefined(options[option].enabled)) {
                            this.model.timeDrillDown.enabled = options[option].enabled; this._changeDesign();
                        }

                        // For timeDrillDown.interval
                        if (!BoldBIDashboard.isNullOrUndefined(options[option].interval)) {
                            this.model.timeDrillDown.interval = options[option].interval;
                            this._generateMins(bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));
                        }

                        // For timeDrillDown.showMeridian
                        if (!BoldBIDashboard.isNullOrUndefined(options[option].showMeridian)) {
                            this.model.timeDrillDown.showMeridian = options[option].showMeridian;
                            this._sfTimeHour.empty(); this._renderHourTable();
                        }

                        // For timeDrillDown.showFooter
                        if (!BoldBIDashboard.isNullOrUndefined(options[option].showFooter)) {
                            this.model.timeDrillDown.showFooter = options[option].showFooter;
                            this._changeDesign();
                        }
                        break;

                }
            }
            if (validate) this._validateMinMax();
            this._valueChange(true);
            if (option == "value") options[option] = this.model.value;
            this._updateTimeHeight();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this.isPopupOpen)
                this._hideResult();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this._cloneElement.removeClass("e-js e-input").removeClass(BoldBIDashboard.util.getNameSpace(this.sfType));
            this._cloneElement.insertAfter(this.element);
            this.element.remove();
            if (!BoldBIDashboard.isNullOrUndefined(this.datePicker))
                this.datePicker.destroy();
            if (!BoldBIDashboard.isNullOrUndefined(this.timePicker))
                this.timePicker.destroy();
			if(this.popup)this.popup.remove();
        },


        _init: function (options) {
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._options = options;
            this._cloneElement = this.element.clone();
            this._ISORegex();
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._validateMeridian();
            this._checkAttribute();
            this._initialize();
            this._initial = true;
            this._interval = 60;
            this._render();
            this._wireEvents();
            this._addAttr(this.model.htmlAttributes);
            if (!BoldBIDashboard.isNullOrUndefined(options) && !BoldBIDashboard.isNullOrUndefined(options.validationMessage))
                this.model.validationMessages = this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
			this._removeWatermark();
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
        },
        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },
        _changeDesign: function () {
            if (this.model.timeDrillDown.enabled) {
                var state = this.model.timeDrillDown.showFooter ? "block" : "none";
                this.popup.addClass("e-drill-down");
                this._timeContainer.css("display", "none");
                this._buttonContainer.css("display", "none");
                this.datePicker.option("showFooter", this.model.timeDrillDown.showFooter);
                bbdesigner$('.e-footer', this._sfTimeHour).css("display", state);
                bbdesigner$('.e-footer', this._sfTimeMins).css("display", state);
            }
            else {
                this.popup.removeClass("e-drill-down");
                this._sfTimeHour.hide();
                this._sfTimeMins.hide();
                this._updateTimeHeight();
                this._dateContainer.show();
                this._timeContainer.show();
                this._buttonContainer.show();
                this.datePicker.option("showFooter", false);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
            }
        },
        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _checkAttribute: function () {
            this.model.value = this.model.value === "" ? this.element[0].value : this.model.value;
            if (!this._options.minDateTime) this.model.minDateTime = this.element[0].min;
            if (!this._options.maxDateTime) this.model.maxDateTime = this.element[0].max;
            if (BoldBIDashboard.isNullOrUndefined(this._options.readOnly)) this.model.readOnly = this.element.is("[readonly]");
            if (BoldBIDashboard.isNullOrUndefined(this._options.enabled)) this.model.enabled = !this.element.is("[disabled]");
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = bbdesigner$.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : bbdesigner$.validator.messages[ruleName];
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled") proxy._enabled(false);
                else if (keyName == "readOnly") proxy._readOnly(true);
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (BoldBIDashboard.isValidAttr(proxy.element[0], keyName)) proxy.element.attr(keyName, value);
                else proxy.wrapper.attr(keyName, value);
            });
        },
        _validateMeridian: function () {
            var culture = BoldBIDashboard.preferredCulture(this.model.locale);
            if (culture) this.model.locale = culture.name == "en" ? "en-US" : culture.name;
            if (!BoldBIDashboard.isNullOrUndefined(this._options)) {
                if (!BoldBIDashboard.isNullOrUndefined(this._options.timeDrillDown)) {
                    if (BoldBIDashboard.isNullOrUndefined(this._options.timeDrillDown.showMeridian))
                        this.model.timeDrillDown.showMeridian = BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
                }
                else this.model.timeDrillDown.showMeridian = BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
            }
            else
                this.model.timeDrillDown.showMeridian = BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
        },
        _initialize: function () {
            var val;
            this.popup = null;
            this.isPopupOpen = false;
            this.isValidState = true;
            this._localizedLabels = this._getLocalizedLabels();
            if (!BoldBIDashboard.isNullOrUndefined(this._options)) {
                if (!BoldBIDashboard.isNullOrUndefined(this._options.buttonText))
                    bbdesigner$.extend(this._localizedLabels.buttonText, this._options.buttonText);
                if (!BoldBIDashboard.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            if (this.model.startDay == -1) this.model.startDay = BoldBIDashboard.preferredCulture(this.model.locale).calendar.firstDay;
            this._isIE8 = (BoldBIDashboard.browserInfo().name == "msie") && (BoldBIDashboard.browserInfo().version == "8.0") ? true : false;
            this._isIE9 = (BoldBIDashboard.browserInfo().name == "msie") && (BoldBIDashboard.browserInfo().version == "9.0") ? true : false;
            if (!this.model.dateTimeFormat || !this.model.timeDisplayFormat) this._getDateTimeFormat();
            if (!this.model.value || (typeof JSON === "object" && JSON.stringify(this.model.value) === "{}")) val = null;
            else if (!(this.model.value instanceof Date)) {
                var dateTimeObj = BoldBIDashboard.parseDate(this.model.value, this.model.dateTimeFormat, this.model.locale);
                val = dateTimeObj ? dateTimeObj : (dateTimeObj = this._checkJSONString(this.model.value)) ? dateTimeObj : null;
            }
            else val = this.model.value;
            if (val) this.model.value = val;
            var min = this.model.minDateTime = this._stringToObject(this.model.minDateTime);
            if (!min || !this._isValidDate(min)) this.model.minDateTime = this.defaults.minDateTime;
            var max = this.model.maxDateTime = this._stringToObject(this.model.maxDateTime);
            if (!max || !this._isValidDate(max)) this.model.maxDateTime = this.defaults.maxDateTime;
        },
        _checkJSONString: function (dateTimeString) {
            // Validate the string value
            var dateTimeObj = new Date(dateTimeString);
            if (!isNaN(Date.parse(dateTimeObj))) {
                if ((dateTimeObj.toJSON() === this.model.value) || (dateTimeObj.toGMTString() === this.model.value) ||
                    (dateTimeObj.toISOString() === this.model.value) || (dateTimeObj.toLocaleString() === this.model.value) ||
                    (dateTimeObj.toString() === this.model.value) || (dateTimeObj.toUTCString() === this.model.value))
                    return dateTimeObj;
                else if (typeof dateTimeString == "string") return this._dateFromISO(dateTimeString);
            } else if (this._extISORegex.exec(dateTimeString) || this._basicISORegex.exec(dateTimeString)) return this._dateFromISO(dateTimeString);
        },
        _render: function () {
            this._renderWrapper();
            this._renderIcon();
            this._setDimentions();
            this._checkProperties();
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "tabindex": "0", 'role':'combobox','aria-expanded':'false' });
            this.wrapper = BoldBIDashboard.buildTag("span.e-datetime-wrap e-widget " + this.model.cssClass + "#" + this.element[0].id + "_wrapper").insertAfter(this.element);
            this._setValue(this.model.value);
            this.wrapper.attr("style", this.element.attr("style"));
            this.element.removeAttr("style");
            if (!BoldBIDashboard.isTouchDevice()) this.wrapper.addClass('e-ntouch');
            this.container = BoldBIDashboard.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            if (!this._isSupport) {
                this._hiddenInput = BoldBIDashboard.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                bbdesigner$(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport && this._hiddenInput)
                this._hiddenInput.css("display", "none");
        },
        _renderIcon: function () {
            if (!this.model.showPopupButton) return false;
            this.datetimeIcon = BoldBIDashboard.buildTag("span.e-select", "", {}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var icon = BoldBIDashboard.buildTag("span.e-icon e-datetime", "", {}, { "aria-label": "select" }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.datetimeIcon.append(icon);
            this.container.append(this.datetimeIcon).addClass("e-padding");
            this._on(this.datetimeIcon, "click", this._iconClick);
            this._on(this.datetimeIcon, "mousedown", function (e) { e.preventDefault(); });
        },
        _setDimentions: function () {
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this.wrapper.height(this.model.height);
            this.wrapper.width(this.model.width);
        },

        _renderDropdown: function () {
            var oldWrapper = bbdesigner$("#" + this.element[0].id + "_popup").get(0);
            if (oldWrapper)
                bbdesigner$(oldWrapper).remove();
            this.popup = BoldBIDashboard.buildTag("div.e-datetime-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.element[0].id + "_popup").css("visibility", "hidden");
            if (!BoldBIDashboard.isTouchDevice()) this.popup.addClass('e-ntouch');
            bbdesigner$('body').append(this.popup);
            this._renderControls();

            var _timeTitle, _dateContainer, popupContainer, _today, _now, _done;

            _timeTitle = BoldBIDashboard.buildTag("div.e-header", this._localizedLabels.buttonText.timeTitle).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._dateContainer = BoldBIDashboard.buildTag("div.e-datecontainer").append(this.datePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._timeContainer = BoldBIDashboard.buildTag("div.e-timecontainer").append(_timeTitle, this.timePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._drillDownContainer = BoldBIDashboard.buildTag("div.e-drillDowncontainer").append().attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            popupContainer = BoldBIDashboard.buildTag("div.e-popup-container").append(this._dateContainer, this._timeContainer, this._drillDownContainer).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            _today = BoldBIDashboard.buildTag("div.e-dt-button e-dt-today e-btn e-select e-flat", this._localizedLabels.buttonText.today).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _now = BoldBIDashboard.buildTag("div.e-dt-button e-dt-now e-btn e-select e-flat", this._localizedLabels.buttonText.timeNow).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _done = BoldBIDashboard.buildTag("div.e-dt-button e-dt-done e-btn e-select e-flat", this._localizedLabels.buttonText.done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._buttonContainer = BoldBIDashboard.buildTag("div.e-button-container").append(_today, _now, _done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._renderDrillDown();
            this.popup.append(popupContainer, this._buttonContainer);
            this._checkForResponsive();
            this._updateTimeHeight();

            this._bindOperations();
            this._updateValues();
            this.popup.css({ "visibility": "visible", "display": "none" });

            this._on(_today, "click", this._todayClick);
            this._on(_now, "click", this._nowClick);
            this._on(_done, "click", this._doneClick);
            this.popup.on("mouseenter touchstart", bbdesigner$.proxy(function () { this._popClose = true; }, this));
            this.popup.on("mouseleave touchend", bbdesigner$.proxy(function () { this._popClose = false; }, this));
            this._changeDesign();
        },
        _renderControls: function () {
            this._renderDateControl();
            this._renderTimeControl();

            var tempContainer = BoldBIDashboard.buildTag("span").append(this.datePicker.wrapper, this.timePicker.wrapper);
            tempContainer.find("span").css("display", "none");
            this.popup.append(tempContainer);
        },
        _renderDrillDown: function () {
            this._renderHourPopup();
            this._renderMinsPopup();
        },
        _renderHourPopup: function () {
            var table;
            this._sfTimeHour = BoldBIDashboard.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-hours ', "", {}, { id: (this._id ? 'e-hours-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            if (!BoldBIDashboard.isTouchDevice()) this._sfTimeHour.addClass('e-ntouch');
            this._drillDownContainer.append(this._sfTimeHour);
            this._renderHourTable();
        },
        _renderHourTable: function () {
            // Rendering header template
            BoldBIDashboard.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(BoldBIDashboard.buildTag("span.e-prev").append(BoldBIDashboard.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(BoldBIDashboard.buildTag("span.e-text").append(BoldBIDashboard.buildTag("span.e-hours-headertext").text("October 2015").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(BoldBIDashboard.buildTag("span.e-next").append(BoldBIDashboard.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeHour);

            // Render meridian calendar popup.
            if (this._interval < 1) return false;
            var start, end, timeVal, rowCount, table, tr, interval = this._interval * 60000;
            var tableCount = this.model.timeDrillDown.showMeridian ? 2 : 1; rowCount = this.model.timeDrillDown.showMeridian ? 6 : 4;
            var timeDisplayFormat = this.model.timeDrillDown.showMeridian ? "hh" : "HH:00";
            var meridianText = ["AM", "PM"], count = 0, meridianClass = "";

            start = this.timePicker._createObject("12:00:00 AM");
            end = this.model.timeDrillDown.showMeridian ? this.timePicker._createObject("11:59:59 AM") : this.timePicker._createObject("11:59:59 PM");

            for (var i = 0; i < tableCount; i++) {
                if (this.model.timeDrillDown.showMeridian) {
                    meridianClass = meridianText[i].toLowerCase();
                    var txt = !BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    BoldBIDashboard.buildTag("div.e-header-" + meridianClass).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                      .append(BoldBIDashboard.buildTag("span.e-text").append(BoldBIDashboard.buildTag("span.e-hours-meridiantxt-" + meridianClass).text(txt)
                      .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                      .appendTo(this._sfTimeHour);
                }

                // Table for Time Value
                table = BoldBIDashboard.buildTag("table.e-dp-viewhours", "", {}).data("e-table", "data").attr({ 'role': 'grid' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this._sfTimeHour.append(table);

                var tbody = BoldBIDashboard.buildTag('tbody.e-timepicker-hours').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                tr = BoldBIDashboard.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                while (this.timePicker._compareTime(end, start, true)) {
                    timeVal = this._localizeTime(start, timeDisplayFormat);
                    var tdtag = BoldBIDashboard.buildTag("td.e-hour e-state-default", timeVal);
                    this.model.timeDrillDown.showMeridian && tdtag.addClass("e-hour-" + meridianClass);
                    if (this._isIE8) tdtag.attr("unselectable", "on");
                    tr.append(tdtag);
                    count++;
                    if (count >= rowCount) {
                        count = 0;
                        tbody.append(tr);
                        tr = BoldBIDashboard.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    }
                    start = this.timePicker._createObject(start).getTime() + interval;
                }

                //tbody.append(tr);
                table.append(tbody);

                if (this.model.timeDrillDown.showMeridian) {
                    start = this.timePicker._createObject("12:00:00 PM");
                    end = this.timePicker._createObject("11:59:59 PM");
                }
            }

            // Rendering the footer template
            BoldBIDashboard.buildTag("div.e-footer")
              .append(BoldBIDashboard.buildTag("span.e-footer-icon"))
              .append(BoldBIDashboard.buildTag("span.e-footer-text"))
              .appendTo(this._sfTimeHour);
            bbdesigner$('.e-footer-text', this._sfTimeHour).html(this._localizedLabels.buttonText.timeNow);
            bbdesigner$(".e-hours-headertext", this._sfTimeHour).text(BoldBIDashboard.format(this.datePicker.model.value, "dd MMM yyyy"));

            // Bind action to the item.
            this._on(this._sfTimeHour.find('.e-hour'), "click", bbdesigner$.proxy(this._hourNavHandler, this));
            this._on(bbdesigner$('.e-next', this._sfTimeHour), "click", bbdesigner$.proxy(this._prevNextHourHandler, this));
            this._on(bbdesigner$('.e-prev', this._sfTimeHour), "click", bbdesigner$.proxy(this._prevNextHourHandler, this));
            this._on(bbdesigner$('.e-footer', this._sfTimeHour), "click", this._todayBtn);
            bbdesigner$('.e-hours-headertext', this._sfTimeHour).on("click", bbdesigner$.proxy(this._forwardNavHandler, this));

            this._sfTimeHour.hide();
        },
        _localizeTime: function (value, format) {
            return bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(value), format, this.model.locale));
        },
        _renderMinsPopup: function () {
            this._sfTimeMins = BoldBIDashboard.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-minitues ', "", {}, { id: (this._id ? 'e-time-minitues-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            if (!BoldBIDashboard.isTouchDevice()) this._sfTimeMins.addClass('e-ntouch');
            this._drillDownContainer.append(this._sfTimeMins);

            // Rendering header template
            BoldBIDashboard.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(BoldBIDashboard.buildTag("span.e-prev").append(BoldBIDashboard.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(BoldBIDashboard.buildTag("span.e-text").append(BoldBIDashboard.buildTag("span.e-minitues-headertext").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(BoldBIDashboard.buildTag("span.e-next").append(BoldBIDashboard.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeMins);

            // Meridian Header template
            BoldBIDashboard.buildTag("div.e-mins-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                          .append(BoldBIDashboard.buildTag("span.e-text").append(BoldBIDashboard.buildTag("span.e-minitues-meridiantxt").text("AM")
                          .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                          .appendTo(this._sfTimeMins);

            // Table for Time Value
            var table = BoldBIDashboard.buildTag("table.e-dp-viewmins", "", {}).data("e-table", "data").attr({ 'role': 'grid' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._sfTimeMins.append(table);

            var tbody = BoldBIDashboard.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            // Render Time value
            if (this._intervall < 1) return false;
            var start, end, timeVal, interval = this._interval * 60000;
            start = this.timePicker._createObject("12:00:00 AM");
            end = this.timePicker._createObject("11:59:59 PM");
            var tr = BoldBIDashboard.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var count = 0;
            while (this.timePicker._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start, "HH:00");
                var tdtag = BoldBIDashboard.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;
                if (count >= 4) {
                    count = 0;
                    tbody.append(tr);
                    tr = BoldBIDashboard.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                }
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            //tbody.append(tr);
            table.append(tbody);
            bbdesigner$('.e-minitues-headertext', this._sfTimeMins).text(bbdesigner$('.e-hours-headertext', this._sfTimeHour).text());

            // Rendering the footer template
            BoldBIDashboard.buildTag("div.e-footer")
               .append(BoldBIDashboard.buildTag("span.e-footer-icon"))
               .append(BoldBIDashboard.buildTag("span.e-footer-text"))
               .appendTo(this._sfTimeMins);
            bbdesigner$('.e-footer-text', this._sfTimeMins).html(this._localizedLabels.buttonText.timeNow);
            bbdesigner$(".e-minitues-headertext", this._sfTimeMins).text(BoldBIDashboard.format(this.datePicker.model.value, "dd MMM yyyy"));
            !this.model.timeDrillDown.showMeridian && bbdesigner$(".e-mins-header", this._sfTimeMins).css("display", "none");

            // Bind action to the item.
            this._on(table.find('.e-mins'), "click", bbdesigner$.proxy(this._minsNavHandler, this));
            this._on(bbdesigner$('.e-next', this._sfTimeMins), "click", bbdesigner$.proxy(this._prevNextMinsHandler, this));
            this._on(bbdesigner$('.e-prev', this._sfTimeMins), "click", bbdesigner$.proxy(this._prevNextMinsHandler, this));
            this._on(bbdesigner$('.e-footer', this._sfTimeMins), "click", this._todayBtn);
            bbdesigner$('.e-minitues-headertext', this._sfTimeMins).on("click", bbdesigner$.proxy(this._forwardNavHandler, this));
            this._sfTimeMins.hide();
        },
        _todayBtn: function () {
            this._nowClick();
            this._hideResult();
        },
        _hourNavHandler: function (e) {
            var value;
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && bbdesigner$(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();

            bbdesigner$("table", this._sfTimeHour).find("td").removeClass("e-active");
            bbdesigner$(e.target).addClass("e-active");

            this._sfTimeHour.hide();
            this._sfTimeMins.show();
            this._addFocus(this._sfTimeMins);
            if (this.model.timeDrillDown.showMeridian) {
                var txt = bbdesigner$(e.target).hasClass("e-hour-am") ? "AM" : "PM";
                value = bbdesigner$(e.target).text() + ":00 " + txt;
            }
            else
                value = bbdesigner$(e.target).text();
            this._generateMins(value);
            var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
            var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
            var val2 = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));
            var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
            index = Math.ceil(index);
            this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);
        },
        _minsNavHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && bbdesigner$(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();
            bbdesigner$("table", this._sfTimeMins).find("td").removeClass("e-active").removeClass("e-state-hover");
            bbdesigner$(e.target).addClass("e-active");
            if (this.model.timeDrillDown.showMeridian) {
                var value = bbdesigner$(e.target).text() + " " + BoldBIDashboard.format(this._datetimeValue, "tt", "en-US");
                value = this.timePicker._localizeTime(value)
            }
            else
                value = bbdesigner$(e.target).text();
            this.timePicker.option("value", value);
            this.datePicker.option("value", this._datetimeValue);
            this._datetimeValue = new Date(this.model.value.toString());
            this._updateInput();
            this.model.timeDrillDown.autoClose && this._hideResult(e);
        },
        _generateMins: function (value) {
            var minsTable = bbdesigner$('table', this._sfTimeMins);
            minsTable.empty();
            this.model.timeDrillDown.showMeridian ? bbdesigner$(".e-mins-header", this._sfTimeMins).show() : bbdesigner$(".e-mins-header", this._sfTimeMins).hide()
            var displayFormat = this.model.timeDrillDown.showMeridian ? "hh:mm" : "HH:mm";
            bbdesigner$('.e-minitues-headertext', this._sfTimeMins).text(bbdesigner$('.e-hours-headertext', this._sfTimeHour).text());
            var tbody = BoldBIDashboard.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var start, tr, end, timeVal, count = 0, interval = this.model.timeDrillDown.interval * 60000;
            start = this.timePicker._createObject(value);
            this._datetimeValue.setHours(start.getHours());
            end = this.timePicker._createObject(start).getTime() + 59 * 60000;
            tr = BoldBIDashboard.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            tbody.append(tr);
            while (this.timePicker._compareTime(end, start, true)) {
                if (count >= 4) {
                    count = 0;
                    tr = BoldBIDashboard.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    tbody.append(tr);
                }
                timeVal = this._localizeTime(start, displayFormat);
                var tdtag = BoldBIDashboard.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            minsTable.append(tbody);
            bbdesigner$(".e-mins-header", this._sfTimeMins).find('.e-minitues-meridiantxt').text(BoldBIDashboard.format(this._datetimeValue, "tt", this.model.locale))
            this._disableRange("mins");
            this._on(minsTable.find('.e-mins'), "click", bbdesigner$.proxy(this._minsNavHandler, this));
        },
        _prevNextHourHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = (bbdesigner$(event.target).is('a')) ? bbdesigner$(event.target.parentNode) : bbdesigner$(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeHour);
        },
        _prevNextMinsHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = (bbdesigner$(event.target).is('a')) ? bbdesigner$(event.target.parentNode) : bbdesigner$(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeMins);
        },
        _processNextPrev: function (progress, wrapper) {
            if (progress && wrapper.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
            else if (!progress && wrapper.find(".e-arrow-sans-right").hasClass("e-disable")) return false;
            var currentTable = bbdesigner$("table", wrapper), temp;
            var incVal, tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case "e-dp-viewhours":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setDate(this._datetimeValue.getDate() + incVal);
                    this._disableRange("hour");

                    this._hoverHour = this._setFocusByIndex("hour", this._hoverHour, this._sfTimeHour);
                    bbdesigner$(".e-hours-headertext", this._sfTimeHour).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
                    bbdesigner$(".e-minitues-headertext", this._sfTimeMins).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
                case "e-dp-viewmins":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setHours(this._datetimeValue.getHours() + incVal);
                    this._generateMins(bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));

                    var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                    var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                    var val2 = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                    var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                    index = Math.ceil(index);

                    this._disableRange("mins");

                    this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);

                    bbdesigner$(".e-hours-headertext", this._sfTimeHour).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
                    bbdesigner$(".e-minitues-headertext", this._sfTimeMins).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
            }
        },
        _forwardNavHandler: function (event, table) {
            if (this.model.readOnly || !this.model.enabled) return false;
            var hclassName, proxy = this;
            if (event) event.preventDefault();
            if (event)
                hclassName = bbdesigner$(event.currentTarget).get(0).className;
            else
                hclassName = table.find(".e-text>span").get(0).className;

            switch (hclassName) {
                case "e-hours-headertext":
                    this._sfTimeHour.css("display", "none");
                    this._dateContainer.css("display", "block");
                    this._addFocus(this._dateContainer.find('.e-datepicker'));
                    break;
                case "e-minitues-headertext":
                    this._sfTimeMins.css("display", "none");
                    this._disableRange("hour");

                    var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                    var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
                    indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                    indx = Math.floor(indx);

                    this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

                    bbdesigner$(".e-hours-headertext", this._sfTimeHour).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
                    bbdesigner$(".e-minitues-headertext", this._sfTimeMins).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
                    this._sfTimeHour.css("display", "block");
                    this._addFocus(this._sfTimeHour);
                    break;
            }
        },
        _renderDateControl: function () {
            var dateInput = BoldBIDashboard.buildTag("input#" + this.element[0].id + "_date", "", {}, { "type": "text" });
            this.popup.append(dateInput);
            dateInput.BoldBIDashboardDatePicker({

                height: "0px", width: "0px",
                displayInline: true,
                showDateIcon: false,
                showFooter: this.model.timeDrillDown.enabled ? this.model.timeDrillDown.showFooter : false,
                enableStrictMode: true,
                buttonText: this._localizedLabels.buttonText.today,

                minDate: this._stringToObject(this.model.minDateTime),
                maxDate: this._stringToObject(this.model.maxDateTime),

                dayHeaderFormat: this.model.dayHeaderFormat,
                startLevel: this.model.startLevel,
                depthLevel: this.model.depthLevel,
                startDay: this.model.startDay,
                stepMonths: this.model.stepMonths,
                showOtherMonths: this.model.showOtherMonths,
                headerFormat: this.model.headerFormat,

                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale
            });
            if (!BoldBIDashboard.isNullOrUndefined(this.model.value))
                this._datetimeValue = new Date(this.model.value.toString());
            this.datePicker = dateInput.data("BoldBIDashboardDatePicker");
            this._datetimeValue = new Date(this.datePicker._dateValue.toString());
            this.model.startDay = this.datePicker.model.startDay;
            this.datePicker._getInternalEvents = true;
            this.datePicker._dt_drilldown = true;
            this.datePicker.popup.css({ "position": "static", "display": "block" });
        },
        _renderTimeControl: function () {
            var timeInput = BoldBIDashboard.buildTag("input#" + this.element[0].id + "_time", "", {}, { "type": "text" });
            this.popup.append(timeInput);

            timeInput.BoldBIDashboardTimePicker({
                height: "0px", width: "0px",
                interval: this.model.interval,
                timeFormat: this.model.timeDisplayFormat,
                popupWidth: this.model.timePopupWidth,
                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale
            });
            this.timePicker = timeInput.data("BoldBIDashboardTimePicker");
            this.timePicker._renderDropdown();
            this.timePicker.popup.css({ "position": "static", "display": "block" });
            this.timePicker._getInternalEvents = true;
            this.timePicker.showDropdown = true;
            this.timePicker._dateTimeInternal = true;
            var min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            var max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;

        },
        _updateTimeHeight: function () {
            var height = this.popup.find(".e-timecontainer .e-header").is(":visible") ? this.datePicker.popup.height() - this.popup.find(".e-header").height() : this.datePicker.popup.height();
            height = this.popup.hasClass("e-dt-responsive") ? "98px" : height;
            this.timePicker.option("popupHeight", height);
        },

        _bindOperations: function () {
            var proxy = this;
            this.datePicker.option("layoutChange", function () { proxy._updateTimeHeight(); });
            this.datePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.timePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.datePicker.option("change", function (a) {
                proxy._refreshTimes(a);
            });
            this.datePicker.option("select", function (e) {
                proxy._updateInput(e);
            });
            this.datePicker.option("dt_drilldown", function (e) {
                if (proxy.model.timeDrillDown.enabled) {
                    proxy._updateInput(e);
                    proxy._switchToDrilDown(e);
                }
            });
            this.timePicker.option("select", function () { proxy._updateInput(); });
        },
        _switchToDrilDown: function (e) {
            this._dateContainer.hide();
            this._sfTimeHour.show();
            this._addFocus(this._sfTimeHour);
            var selected = new Date(this.model.value.toString());
            this._datetimeValue = new Date(selected.setHours(this._datetimeValue.getHours(), this._datetimeValue.getMinutes(), this._datetimeValue.getSeconds(), this._datetimeValue.getMilliseconds()));

            // To hide the hours that exceeds the min and max.
            this._disableRange("hour");

            var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
            var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
            var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
            indx = Math.floor(indx);

            this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

            bbdesigner$(".e-hours-headertext", this._sfTimeHour).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
            bbdesigner$(".e-minitues-headertext", this._sfTimeMins).text(BoldBIDashboard.format(this._datetimeValue, "dd MMM yyyy"));
        },
        _disableRange: function (view) {
            var interval = view == "hour" ? this._interval : this.model.timeDrillDown.interval, table = view == "hour" ? this._sfTimeHour : this._sfTimeMins
            var addClassName = view == "hour" ? "e-hide-hour e-disable" : "e-hide-mins e-disable";
            table.find('tbody tr td.e-' + view).removeClass(addClassName);
            table.find('.e-arrow-sans-left').removeClass("e-disable");
            table.find('.e-arrow-sans-right').removeClass("e-disable");
            var start = view == "hour" ? this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00") :
                this._localizeTime(bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)), "HH:00");

            if (this._compareDate(this.model.minDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.minDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this.model.minDateTime), "HH:mm", this.model.locale));
                indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = view == "hour" ? Math.floor(indx) : Math.ceil(indx);
                for (i = 0; i < indx; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    bbdesigner$(cell).addClass(addClassName);
                }
                table.find('.e-arrow-sans-left').addClass("e-disable");
            }
            if (this._compareDate(this.model.maxDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.maxDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this.model.maxDateTime), "HH:mm", this.model.locale));
                indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = Math.floor(indx) + 1;
                var length = table.find('tbody tr td.e-' + view).length
                for (i = indx; i < length; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    bbdesigner$(cell).addClass(addClassName);
                }
                table.find('.e-arrow-sans-right').addClass("e-disable");
            }
        },
        _setFocusByName: function (name, value, table) {
            var allValues = table.find('tbody tr td.e-' + name), index, cell;
            bbdesigner$(allValues).each(function (i, ele) {
                if (ele.innerHTML == value) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!bbdesigner$(cell).hasClass("e-hide-" + name))
                bbdesigner$(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setFocusByIndex: function (name, index, table) {
            var allValues = table.find('tbody tr td.e-' + name), cell;
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!bbdesigner$(cell).hasClass("e-hide-" + name))
                bbdesigner$(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setActiveState: function (selection, table) {
            var items = table.find('tbody tr td.e-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "hour":
                    if (this._compareDate(this.model.value, this._datetimeValue)) {

                        var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                        var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(this.model.value), "HH:00", this.model.locale));
                        indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                        indx = Math.floor(indx);

                    }
                    break;
                case "mins":
                    if (this._compareDate(this.model.value, this._datetimeValue) && (this.model.value.getHours() === this._datetimeValue.getHours())) {

                        var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                        var val = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                        var val2 = bbdesigner$.trim(BoldBIDashboard.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                        indx = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                        indx = Math.ceil(indx);
                    }
                    break;
            }
            cell = items[indx];
            if (cell) {
                table.find('table td').removeClass("e-active");
                bbdesigner$(cell).removeClass("e-state-hover").addClass("e-active");
            }
        },

        _compareDate: function (first, second) {
            var val1 = new Date(first.toString()).setHours(0, 0, 0, 0);
            var val2 = new Date(second.toString()).setHours(0, 0, 0, 0);
            var result = (+val1 === +val2) ? true : false;
            return result;
        },

        _updateInput: function (e) {
            var minVal = new Date().setHours(0, 0, 0, 0);
            var date = this._getDate() || new Date(), time = this._getTime() || this.timePicker._createObject(minVal);
            this.model.value = new Date(date.getFullYear(), date.getMonth(), date.getDate(),
                time.getHours(), time.getMinutes(), time.getSeconds());
            this._updateDateTime();
            this._raiseChangeEvent();
            this._updateModel(e, true);
            if (e)
                e.cancel = true;
        },
        _updateDateTime: function () {
            this.isValidState = true;
            var datetime = this._objectToString(this.model.value);
            this.element.val(datetime);
            this._removeWatermark();
        },
        _refreshTimes: function (args) {
            var value = this._getDateObj(args.value, this.datePicker.model.dateFormat);
            if (!value) return false;
            this.isValidState = true;

            if (this._compare(value, this._setEmptyTime(this.model.minDateTime))) {
                var mintime = this._getFormat(this.model.minDateTime, this.timePicker.model.timeFormat);
                var preTime = this._getTime();
                this.timePicker.option("minTime", mintime);
                if (!this.model.enableStrictMode) {
                    this._updateInput();
                }
            }
            else
                this.timePicker.option("minTime", this._defaultMinVal());

            if (this._compare(value, this._setEmptyTime(this.model.maxDateTime))) {
                var maxtime = this._getFormat(this.model.maxDateTime, this.timePicker.model.timeFormat);
                var preTime = this._getTime();
                this.timePicker.option("maxTime", maxtime);
                if (!this.model.enableStrictMode) {
                    this._updateInput();
                }
            }
            else
                this.timePicker.option("maxTime", this._defaultMaxVal());

            this.timePicker._changeActiveEle();
        },

        _defaultMinVal: function () {
            var minVal = new Date().setHours(0, 0, 0, 0);
            var minTimeVal = BoldBIDashboard.format(this.timePicker._createObject(minVal), this.timePicker.model.timeFormat, this.timePicker.model.locale);
            return minTimeVal;
        },
        _defaultMaxVal: function () {
            var maxval = new Date().setHours(23, 59, 59, 59);
            var maxTimeVal = BoldBIDashboard.format(this.timePicker._createObject(maxval), this.timePicker.model.timeFormat, this.timePicker.model.locale);
            return maxTimeVal;
        },
        _updateValues: function () {
            var dateValue = this.model.value;
            if (this.model.value != null) {
                this.datePicker.option("value", this.model.value);
                this.timePicker.option("value", this.model.value);
            }
            this._setValue(dateValue);
            this._validateMinMax();
            this._preVal = this.element.val();
            this._checkErrorClass();
        },
        _specificFormat: function () {
            var parseInfo = BoldBIDashboard.globalize._getDateParseRegExp(BoldBIDashboard.globalize.findCulture(this.model.locale).calendar, this.model.dateFormat);
            return (bbdesigner$.inArray("dddd", parseInfo.groups) > -1 || bbdesigner$.inArray("ddd", parseInfo.groups) > -1)
        },
        _changeEditable: function (bool) {
            var action = bool ? "_on" : "_off";
            if (this.element.is(":input")) {
                if (bool) {
                    if (!this.model.readOnly) this.element.attr("readonly", false);
                    this.element.off("mousedown", bbdesigner$.proxy(this._showhidePopup, this));
                }
                else {
                    if (!this.model.readOnly) this.element.attr("readonly", "readonly");
                    this.element.on("mousedown", bbdesigner$.proxy(this._showhidePopup, this));
                }
                this[action](this.element, "blur", this._targetBlur);
                this[action](this.element, "focus", this._targetFocus);
                this[action](this.element, "keydown", this._keyDownOnInput);
            }
            this._change("allowEdit", bool);
        },
        _setValue: function (value) {
            if (!value || (typeof JSON === "object" && JSON.stringify(value) === "{}")) {
                this.element.val("");
                this.model.value = null;
                this.isValidState = true;
                this.wrapper.removeClass('e-valid');
            }
            else if (typeof value === "string") {
                if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this._checkObject(this._dateFromISO(value));
                else {
                    this.element.val(value);
                    this._updateModel();
                    this._validateMinMax();
                    this._checkStrictMode();
                    this.wrapper.addClass('e-valid');
                }
            }
            else if (value instanceof Date && this._isValidDate(value)) {
                this._checkObject(value);
            }
            this._checkErrorClass();
            return this.model.value;
        },
        _checkObject: function (value) {
            if (value instanceof Date && this._isValidDate(value)) {
                this.model.value = value;
                this._updateDateTime();
                this._validateMinMax();
                this._checkStrictMode();
            }
        },
        _dateFromISO: function (date) {
            var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _validateValue: function (value) {
            var dateObj = BoldBIDashboard.parseDate(value, this.model.dateTimeFormat);
            if (!dateObj || dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime) {
                this.model.value = null;
                this._change("value", this.model.value);
                this.isValidState = false;
            }
            else {
                this._change("value", this.model.value);
                this.isValidState = true;
            }
        },
        _validateMinMax: function () {
            var value, min, max;
            value = (this.model.value) ? this._stringToObject(this.model.value) : null;
            min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;
            if (!value || !min || !max) return false;
            if (min > max) this.model.minDateTime = this.model.maxDateTime;
            if (value < min) {
                if (!this.model.enableStrictMode) {
                    this._setValue(min);
                    this.isValidState = true;
                }
                else if (this.model.enableStrictMode) {
                    this.datePicker.option('minDate', this._getFormat(min, this.datePicker.model.dateFormat));
                    this.timePicker.option('minTime', this._getFormat(min, this.timePicker.model.timeFormat));
                    this.isValidState = false;
                }
            }
            if (value > max) {
                if (!this.model.enableStrictMode) {
                    this._setValue(max);
                    this.isValidState = true;
                }
                else if (this.model.enableStrictMode) {
                    this.datePicker.option('maxDate', this._getFormat(max, this.datePicker.model.dateFormat));
                    this.timePicker.option('maxTime', this._getFormat(max, this.timePicker.model.timeFormat));

                    this.isValidState = false;

                }
            }

            if (!(value < min) && !(value > max)) this.isValidState = true;
        },

        _checkProperties: function () {
            this.model.readOnly && this._readOnly(true);
            this.model.showRoundedCorner && this._setRoundedCorner(true);
            this.model.enableRTL && this._setRtl(true);
            this.model.enabled && this._enabled(true);
            if (!this.model.enabled) this._enabled(false);
            else if (this.model.enabled && this.element.hasClass("e-disable")) this._enabled(true);
            this.model.name = !this._options.name ? !this.element.attr("name") ? this.element[0].id : this.element.attr("name") : this.model.name;
            this.element.attr("name", this.model.name);
            this._checkStrictMode();
            this._checkErrorClass();
            this._setWaterMark();
        },

        _checkStrictMode: function () {
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    if (this.model.value < this.model.minDateTime) {
                        this.element.val(this._objectToString(this.model.minDateTime));
                        this.model.value = this.model.minDateTime;
                        this.isValidState = true;
                    }
                    else if (this.model.value > this.model.maxDateTime) {
                        this.element.val(this._objectToString(this.model.maxDateTime));
                        this.model.value = this.model.maxDateTime;
                        this.isValidState = true;
                    }
                    else {
                        this.model.value = "";
                        this.element.val("");
                        this.isValidState = true;
                    }
                }
            }
            else if (this.model.enableStrictMode) {
                if (!this.isValidState) {

                    this.model.value = null;
                    this.isValidState = false;
                }
            }
        },

        _targetFocus: function (e) {
            e.preventDefault();
            this.isFocused = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass("e-error");
            if (!this._isSupport) this._hiddenInput.css("display", "none");
            this._prevDateTimeVal = this.element.val();
            if (!this.model.showPopupButton && !this.model.readOnly) this._showResult();
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            if (!this.model.showPopupButton && this.model.readOnly) this._off(this.element, "click", this._elementClick);
            this._trigger("focusIn", { value: this.model.value });
            this.wrapper.addClass('e-valid');
        },
        _targetBlur: function () {
            this.isFocused = false;
            this.wrapper.removeClass("e-focus");
            if (!this.model.showPopupButton) this._hideResult();
            var dateObj = BoldBIDashboard.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
            if (dateObj && !this.model.enableStrictMode) {
                if (dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime) {
                    dateObj = dateObj < this.model.minDateTime ? this.model.minDateTime : this.model.maxDateTime;
                    this.element.val(this._objectToString(dateObj));
                }
            }
            var val = BoldBIDashboard.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
            if (val == null && !this.model.enableStrictMode) {
                if (this._prevDateTimeVal == null || this.element.val() == "") {
                    this.element.val("");
                } else
                    this.element.val(this._preVal);
            }
            this._valueChange();
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    this.element.val(this._prevDateTimeVal);
                    this._preVal = this._prevDateTimeVal;
                    this.model.value = this._stringToObject(this._prevDateTimeVal);
                    this.isValidState = true;
                }
                else
                    this._prevDateTimeVal = this.element.val();
            } else if (this.element.val() != "")
                this._validateValue(this.element.val());
            if (!this._isSupport && this.element.val() == "")
                this._hiddenInput.css("display", "block");
            this._checkErrorClass();
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            this._trigger("focusOut", { value: this.model.value });
            (BoldBIDashboard.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            this._previousDateUpdate();
        },
        _previousDateUpdate: function () {
            var previous = BoldBIDashboard.parseDate(this._prevDateTime, this.model.dateTimeFormat);
            var current = BoldBIDashboard.parseDate(this.element.val(), this.model.dateTimeFormat);
            if (!(+previous === +current)) {
                this._preValString = this._prevDateTime;
                this._prevDateTime = this.element.val();
            }
            return this._preValString;
        },
        _elementClick: function () {
            if (!this.isPopupOpen) this._showResult();
        },
        _keyDownOnInput: function (e) {
            switch (e.keyCode) {
                case 40:
                    if (e.altKey) this._showhidePopup();
                    break;
                case 37:
                case 39:
                    if (!this.model.timeDrillDown.enabled)
                        if (e.altKey && this.isPopupOpen) {
                            e.preventDefault();
                            this._addPrevNextFocus(e.keyCode == 37);
                        }
                    break;
                case 27:
                    e.preventDefault();
                case 9:
                    this._hideResult();
                    break;
                case 13:    // Enter Key
                    var val = BoldBIDashboard.parseDate(this.element.val(), this.model.dateTimeFormat);
                    if (val == null && !this.model.enableStrictMode) {
                        if (this._prevDateTimeVal == null || this.element.val() == "") {
                            this.element.val("");
                        } else
                            this.element.val(this._preVal);
                    }
                    this._valueChange();
                    if (!this.model.timeDrillDown.enabled) {
                        this._valueChange();
                        if (this.model.enableStrictMode)
                            this._checkErrorClass();
                        break;
                    }
            }
        },
        _addFocus: function (target) {
            if (!target.hasClass("e-focus")) {
                this._removeFocus();
                target.addClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    bbdesigner$(document).on("keydown", bbdesigner$.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    bbdesigner$(document).on("keydown", bbdesigner$.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    bbdesigner$(document).on("keydown", bbdesigner$.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    bbdesigner$(document).on("keydown", bbdesigner$.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    bbdesigner$(document).on("keydown", bbdesigner$.proxy(this._buttonClick, this));
            }
        },
        _removeFocus: function () {
            var target = this._getFocusedElement();
            if (target.length > 0) {
                target.removeClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    bbdesigner$(document).off("keydown", bbdesigner$.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    bbdesigner$(document).off("keydown", bbdesigner$.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    bbdesigner$(document).off("keydown", bbdesigner$.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    bbdesigner$(document).off("keydown", bbdesigner$.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    bbdesigner$(document).off("keydown", bbdesigner$.proxy(this._buttonClick, this));
            }
        },
        _addPrevNextFocus: function (flag) {
            // flag true means previous focus, false means next focus
            var target = this._getFocusedElement(), next;
            if (target.length > 0) {
                if (target.hasClass("e-datepicker e-popup"))
                    next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-timecontainer");
                else if (target.hasClass("e-timecontainer"))
                    next = flag ? this.popup.find(".e-datecontainer >.e-datepicker.e-popup") : this.popup.find(".e-dt-today");
                else if (target.hasClass("e-dt-today"))
                    next = flag ? this.popup.find(".e-timecontainer") : this.popup.find(".e-dt-now");
                else if (target.hasClass("e-dt-now"))
                    next = flag ? this.popup.find(".e-dt-today") : this.popup.find(".e-dt-done");
                else if (target.hasClass("e-dt-done"))
                    next = flag ? this.popup.find(".e-dt-now") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            }
            else next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            this._addFocus(next);
        },
        _getFocusedElement: function () {
            return this.popup.children("div").find("div.e-focus")
        },
        _keyDownOnHours: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeHour.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeHour.find('tbody tr td.e-state-hover').parent().index();

                if (t.col != -1)
                    t.col = t.col + 1;
                else
                    t.col = this._sfTimeHour.find('tbody tr td.e-active').index() + 1;


                if (t.row != -1) {
                    t.row = t.row + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-state-hover').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }
                else {
                    t.row = this._sfTimeHour.find('tbody tr td.e-active').parent().index() + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-active').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }

                var tableClass = this._sfTimeHour.find('table')[0].className, next;
                rowLength = this._sfTimeHour.find('tbody.e-timepicker-hours tr').length, colLength = this.model.timeDrillDown.showMeridian ? 6 : 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "hours", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeHour.find('tbody.e-timepicker-hours tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeHour.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },

        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, table, cls = { parent: null, child: null };
            switch (target) {
                case "hours": eleClass = "tbody.e-timepicker-hours tr td.e-hour";
                    cls.parent = ".e-timepicker-hours", cls.child = ".e-hour";
                    hiddenClass = ".e-hide-hour";
                    table = this._sfTimeHour;
                    break;
                case "mins": eleClass = "tbody.e-timepicker-mins tr td.e-mins";
                    cls.parent = ".e-timepicker-mins", cls.child = ".e-mins";
                    hiddenClass = ".e-hide-mins";
                    table = this._sfTimeMins;
                    cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    break;

            }
            if (t.row <= 0 && t.col <= 0)
                return table.find(eleClass + ':not(.e-disable):first');
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return table.find(eleClass + ':not(.e-disable):first');
                case 35:
                    return table.find(eleClass + ':not(.e-disable):last');
                case 38:
                    if (ctrlKey) {
                        this._forwardNavHandler(null, table);
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "up", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrev(true, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                        // different columns for the mins popup.
                        if (target == "mins") t.col = cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    }
                    else {
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "left", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                    }
                    return cell;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrev(false, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "right", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                    }
                    return cell;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls, table).not(hiddenClass);
                        if (cell.length <= 0) {
                            cell = this._findVisible(t, cls, "down", table);
                            if (cell !== null) return cell;
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                    }
                case 13:
                    var ele, element;
                    ele = this._getCell(t, cls, table); element = bbdesigner$(ele)[0];
                    args = { type: null, target: ele };
                    if (target == "hours") this._hourNavHandler(args);
                    if (target == "mins") this._minsNavHandler(args);
                    break;
            }
            return this._getCell(t, cls, table).not(hiddenClass);
        },
        _getCell: function (t, cls, table) {
            var row = t.row;
            if (this.model.timeDrillDown.showMeridian && t.row > 2 && table.hasClass('e-time-hours'))
                row = row - 2;
            var cell = table.find('tbody' + cls.parent + ' tr:nth-child(' + row + ') td' + cls.child + ':nth-child(' + t.col + ')');
            if (this.model.timeDrillDown.showMeridian && cell.length > 0 && table.hasClass('e-time-hours'))
                cell = t.row <= 2 ? bbdesigner$(cell[0]) : bbdesigner$(cell[1]);
            return cell;
        },
        _findVisible: function (t, cls, key, table) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (i = 0; i >= 0; i++) {
                //nextElement = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                nextElement = this._getCell({ row: rows, col: cols }, cls, table)
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-disable') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    nextElement = this._getCell(t, cls, table)
                    return nextElement;
                }
            }
        },
        _keyDownOnMinutes: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeMins.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeMins.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this._sfTimeMins.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this._sfTimeMins.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this._sfTimeMins.find('table')[0].className, next;
                rowLength = this._sfTimeMins.find('tbody.e-timepicker-mins tr').length, colLength = 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "mins", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeMins.find('tbody.e-timepicker-mins tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeMins.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },
        _valueChange: function (isCode) {
            if (!this.model.enableStrictMode) {
                if (this._preVal != this.element.val()) {
                    this._preVal = this.element.val();
                    this._updateModel();
                    this._validateMinMax();
                    this._raiseChangeEvent(isCode);
                }
                this._setWaterMark();
            }
            else if (this.model.enableStrictMode) {
                if (this._preVal != this.element.val() || this.model.value < this.model.minDateTime || this.model.value > this.model.maxDateTime) {
                    this._updateModel();
                    this._raiseChangeEvent(isCode);
                }
            }
        },
        _updateModel: function (e, stopUpdateModel) {
            if (this._stopRefresh) {
                this._stopRefresh = false
                return;
            }
            var value = this.element.val();
            if (value == "") {
                this.model.value = null;
                this._change("value", this.model.value);
                this.isValidState = true;
            }
            else {
                var dateObj;
                if (e != undefined && e.type == "select" || this._prevDateTimeVal == this.element.val()) dateObj = this.model.value;
                else dateObj = BoldBIDashboard.parseDate(value, this.model.dateTimeFormat, this.model.locale);
                if (dateObj) {
                    this.model.value = dateObj;
                    this.isValidState = true;
                    if (!stopUpdateModel)
                        this._refreshPopup();
                    if (this._specificFormat() && this._prevDateTimeVal != this.element.val())
                        this.element.val(this._objectToString(this.model.value));
                }
                else {
                    this.model.value = null;
                    this._change("value", this.model.value);
                    this.isValidState = false;
                    if (!this.model.enableStrictMode)
                        this.element.val(this._objectToString(this.model.value));
                }
            }
        },
        _refreshPopup: function () {
            if (this.isValidState && this.isPopupOpen) {
                var date = this._setEmptyTime(this.model.value), time = this._setEmptyDate(this.model.value);
                var getDate = this._getDate(), getTime = this._getTime();
                if (!getDate || !this._compare(getDate, date)) this.datePicker.option("value", date);
                if (!getTime || !this._compare(getTime, time)) this.timePicker.option("value", time);
            }
        },

        _buttonClick: function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                var target = this._getFocusedElement();
                if (target.hasClass("e-dt-today"))
                    this._todayClick();
                else if (target.hasClass("e-dt-now"))
                    this._nowClick();
                else if (target.hasClass("e-dt-done"))
                    this._doneClick();
            }
        },
        _todayClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            if (!this.datePicker.popup.find(".today").hasClass("e-active") ||
                !this.datePicker.popup.children("table").hasClass("e-dp-viewdays") ||
                this.element.val() == "" || !this.isValidState) {
                this.datePicker._setCurrDate();
                this._updateInput();
            }
        },
        _nowClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            this.timePicker.setCurrentTime();
            var mintime = this.model.minDateTime, maxtime = this.model.maxDateTime, date = this.datePicker.model.value, time = new Date();
            date = BoldBIDashboard.isNullOrUndefined(date) ? new Date() : date;
            var currTime = new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
            if (currTime < mintime)
                this.timePicker.option("value", this.timePicker._localizeTime(mintime));
            else if (currTime > maxtime)
                this.timePicker.option("value", this.timePicker._localizeTime(maxtime));
            this._updateInput();
        },
        _doneClick: function () {
            this._hideResult();
        },

        _iconClick: function (e) {
            e.preventDefault();
            if (!this.isFocused && (!BoldBIDashboard.isTouchDevice())) this.element.focus();
            this._showhidePopup();
            if (this._isIE9)
                this.popup.find(".e-popup-container").css("display", "inline-block");
        },
        _setInitialSelection: function () {
            var elements = this.timePicker.ul.find("li");
            if (elements.hasClass('e-hover')) return;
            var currentTime = this.timePicker._setEmptyDate(new Date()), selected;
            selected = currentTime;
            if (this.timePicker.minTime && !this._compareTime(this._createObject(currentTime), this.timePicker.minTime, true))
                selected = this.timePicker.minTime;
            if (this.timePicker.maxTime && !this._compareTime(this.timePicker.maxTime, this._createObject(currentTime), true))
                selected = this.timePicker.maxTime;
            var firstTime = elements.first().html(), index;
            index = (this.timePicker._parse(selected) - this.timePicker._parse(firstTime)) / (this.timePicker.model.interval * 60000);
            index = Math.round(index);
            var activeItem = (index == elements.length) ? index : index + 1;
            if (activeItem < 0 || activeItem > elements.length || isNaN(activeItem)) activeItem = 1;
            var activeEle = bbdesigner$(this.timePicker.ul.find("li")[activeItem - 1]);
            activeEle.addClass('e-hover');
            this._calcScrollTop();
        },
        _calcScrollTop: function () {
            var ulH = this.timePicker.ul.outerHeight(), liH = this.timePicker.ul.find("li").outerHeight(), index, top;
            index = this.timePicker.ul.find("li.e-hover").index();
            top = (liH * index) - ((this.timePicker.popupList.outerHeight() - liH) / 2);
            this.timePicker.scrollerObj.setModel({ "scrollTop": top });
        },
        _showhidePopup: function () {
            if (this.model.readOnly) return false;
            if (!this.isPopupOpen)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (!this.popup) this._renderDropdown();
            if (this.isPopupOpen || !this.model.enabled) return false;
            if (this._trigger("beforeOpen", { element: this.popup })) return false;
            this.isPopupOpen = true;
			this.element.attr({'aria-expanded':'true'})
            this._setListPosition();
            this._checkForResponsive();
            var proxy = this;
            this.popup.slideDown(this.model.enableAnimation ? 200 : 0, function () {
                proxy._on(bbdesigner$(document), "mousedown", proxy._OnDocumentClick);
                proxy.model.timeDrillDown.enabled && proxy._addFocus(proxy._dateContainer.find('.e-datepicker'));
                if (!proxy.timePicker.model.value) proxy._setInitialSelection();
            });
            this._updateModel();
            this._updateTimeHeight();
            this._validateMinMax();
            this._on(bbdesigner$(window), "resize", this._OnWindowResize);
            this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._on(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this._raiseEvent("open");
            if (this._initial) {
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
                this._initial = false;
            }
            this.wrapper.addClass("e-active");
        },
        _hideResult: function (e) {
			if ( e && (e.type == "touchmove" || e.type== "scroll")) {
				if (bbdesigner$(e.target).parents("#"+this.popup[0].id).length > 0)
				return;
	        }
            var proxy = this;
            if (!this.isPopupOpen) return false;
            if (this._trigger("beforeClose", { element: this.popup })) return false;
            this.isPopupOpen = false;
			this.element.attr({'aria-expanded':'false'})
            this._removeFocus();
            if (this._popClose && e && e.type != "click") {
                this.isPopupOpen = true;
                return;
            }
            this.popup.slideUp(this.model.enableAnimation ? 100 : 0, function () {
                if (proxy.model) {
                    if (proxy.model.timeDrillDown.enabled) {
                        proxy._sfTimeHour.hide();
                        proxy._sfTimeMins.hide();
                        proxy._dateContainer.show();
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(proxy.model.value))
                        proxy._datetimeValue = new Date(proxy.model.value.toString());
                }
            });
            this._raiseEvent("close");
            this._off(bbdesigner$(document), "mousedown", this._OnDocumentClick);
            this._off(bbdesigner$(window), "resize", this._OnWindowResize);
            this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._off(BoldBIDashboard.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this.wrapper.removeClass("e-active");
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = bbdesigner$(document).scrollTop() + bbdesigner$(window).height() - (pos.top + bbdesigner$(elementObj).outerHeight()),
            winTopHeight = pos.top - bbdesigner$(document).scrollTop(),
            popupHeight = this.popup.outerHeight(),
            popupWidth = this.popup.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
			popupPosition = this.model.popupPosition;
            if (this.model.popupPosition == BoldBIDashboard.PopupPosition.Bottom)
                var topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            else
                var topPos = ((popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = bbdesigner$(document).scrollLeft() + bbdesigner$(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popup.outerWidth() - elementObj.outerWidth();
            this.popup.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return BoldBIDashboard.util.getOffset(ele);
        },

        _OnDocumentClick: function (e) {
            if (this.model) {
                if (!bbdesigner$(e.target).is(this.popup) && !bbdesigner$(e.target).parents(".e-datetime-popup").is(this.popup) &&
                    !bbdesigner$(e.target).is(this.wrapper) && !bbdesigner$(e.target).parents(".e-datetime-wrap").is(this.wrapper)) {
                    this._hideResult();
                }
                else if (bbdesigner$(e.target).is(this.popup) || bbdesigner$(e.target).parents(".e-datetime-popup").is(this.popup)) {
                    e.preventDefault();
                    if (bbdesigner$(e.target).parents(".e-datepicker").length > 0) this._addFocus(bbdesigner$(e.target).parents(".e-datepicker"));
                    else if (bbdesigner$(e.target).parents(".e-timecontainer").length > 0) this._addFocus(bbdesigner$(e.target).parents(".e-timecontainer"));
                    else if (bbdesigner$(e.target).hasClass("e-dt-button")) this._addFocus(bbdesigner$(e.target));
                    else if (bbdesigner$(e.target).parents(".e-time-hours").length > 0) this._addFocus(bbdesigner$(e.target).parents(".e-time-hours"));
                    else if (bbdesigner$(e.target).parents(".e-time-minitues").length > 0) this._addFocus(bbdesigner$(e.target).parents(".e-time-minitues"));
                    else this._removeFocus();
                }
            }
        },
        _OnWindowResize: function (e) {
            this._setListPosition();
            this._checkForResponsive();
            this._updateTimeHeight();
        },

        _raiseChangeEvent: function (isCode) {
            var previous = BoldBIDashboard.parseDate(this._prevDateTimeVal, this.model.dateTimeFormat);
            var current = BoldBIDashboard.parseDate(this.element.val(), this.model.dateTimeFormat);
            if (!(+previous === +current)) {
                this._preVal = this.element.val();
                var data = { prevDateTime: this._prevDateTimeVal, value: this.element.val(), isInteraction: !isCode, isValidState: this.isValidState };
                this._trigger("_change", data);
                data.value = bbdesigner$.trim(this.element.val()) == "" ? null : this.element.val();
                this._trigger("change", data);
                this._prevDateTimeVal = this.element.val();
            }
            else if ((this._prevDateTimeVal != this.element.val())) {
                var data = { prevDateTime: this._prevDateTimeVal, value: this.element.val(), isValidState: this.isValidState };
                this._prevDateTimeVal = this.element.val()
                this._trigger("_change", data);
            }
        },
        _raiseEvent: function (name) {
            var dateStringVal = this._previousDateUpdate();
            if (this.element != null && this.model[name])
                return this._trigger(name, { prevDateTime: BoldBIDashboard.isNullOrUndefined(dateStringVal || this._preValString) ? '' : dateStringVal || this._preValString, value: this.element.val() });
            return false;
        },
        _getDateTimeFormat: function () {
            var pattern = BoldBIDashboard.preferredCulture(this.model.locale).calendar.patterns;

            if (!this.model.dateTimeFormat) this.model.dateTimeFormat = pattern.d + " " + pattern.t;
            if (!this.model.timeDisplayFormat) this.model.timeDisplayFormat = pattern.t;
        },
        _getZindexPartial: function () {
            return BoldBIDashboard.util.getZindexPartial(this.element, this.popup);
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
        _getDate: function () {
            return this.datePicker.model.value;
        },
        _getTime: function () {
            return this._getDateObj(this.timePicker.model.value, this.timePicker.model.timeFormat);
        },
        _setEmptyTime: function (date) {
            var newDate = new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _objectToString: function (obj) {
            return this._getFormat(obj, this.model.dateTimeFormat);
        },
        _stringToObject: function (value) {
            return this._getDateObj(value, this.model.dateTimeFormat);
        },
        _getFormat: function (value, format) {
            if (value instanceof Date) {
                var newFormat = this._checkFormat(format);
                return BoldBIDashboard.format(value, newFormat, this.model.locale);
            }
            else return value;
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? BoldBIDashboard.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },
        _getDateObj: function (value, format) {
            if (typeof value === "string") {
                var newFormat = this._checkFormat(format);
                var temp = BoldBIDashboard.parseDate(value, newFormat, this.model.locale);
                if (temp != null)
                    return temp;
                else {
                    if (value != "" && value != null) {
                        var dateregexp = /^\s*(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d).*Z\s*$/, month, datetimesplit = dateregexp.exec(value);
                        var datevariable = new Date();
                        if (datetimesplit) {
                            datevariable = new Date();
                            month = +datetimesplit[2];
                            datevariable.setUTCFullYear(datetimesplit[1], month - 1, datetimesplit[3]);
                            datevariable.setUTCHours(datetimesplit[4], datetimesplit[5], datetimesplit[6]);
                            if (month != datevariable.getUTCMonth() + 1)
                                datevariable.setTime();
                        }
                        if (this._isValidDate(datevariable))
                            return datevariable;
                    }
                    else return null;
                }
            }
            else return value;
        },
        _compare: function (obj1, obj2) {
            return obj1 && obj2 && obj1.getTime() == obj2.getTime();
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },


        _change: function (property, value) {
            if (this.popup) {
                this.datePicker.option(property, value);
                this.timePicker.option(property, value);
            }
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.popup.removeClass(this.model.cssClass).addClass(skin);

            this._change("cssClass", skin);
        },
        _localize: function (culture) {
            this.model.locale = culture;
            if (BoldBIDashboard.isNullOrUndefined(this._options.timeDisplayFormat))
                this.model.timeDisplayFormat = "";
            if (BoldBIDashboard.isNullOrUndefined(this._options.dateTimeFormat))
                this.model.dateTimeFormat = "";
            var meridianText = ["AM", "PM"];
            this._getDateTimeFormat();
            this.timePicker.option("timeFormat", this.model.timeDisplayFormat);
            this._localizedLabels = this._getLocalizedLabels();
            if (!BoldBIDashboard.isNullOrUndefined(this._options)) {
                if (!BoldBIDashboard.isNullOrUndefined(this._options.buttonText))
                    bbdesigner$.extend(this._localizedLabels.buttonText, this._options.buttonText);
                if (!BoldBIDashboard.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            this._buttonText(this._localizedLabels.buttonText);
            if (this.isValidState || (this.model.value instanceof Date && this._isValidDate(this.model.value)))
                this.element.val(this._objectToString(this.model.value));
            this._preVal = this.element.val();
            this._change("locale", culture);
            this.model.startDay = this.datePicker.model.startDay;
            this._validateMeridian();
            this._sfTimeHour.empty();
            this._renderHourTable();

            // Update the meridian support
            if (this.model.timeDrillDown.showMeridian)
                for (i = 0; i < 2; i++) {
                    var txt = !BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? BoldBIDashboard.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    bbdesigner$("span.e-hours-meridiantxt-" + meridianText[i].toLowerCase(), this._sfTimeHour).text(txt);

                }
        },
        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    bbdesigner$(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },
        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },
        _readOnly: function (boolean) {
            this.model.readOnly = boolean;
            if (boolean) this.element.attr("readonly", "readonly");
            else this.element.prop("readonly", false);

            this._change("readOnly", boolean);
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                if(this.popup)this.popup.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if(this.popup) this.popup.removeClass("e-corner");
            }
            this.datePicker.option("showRoundedCorner", boolean);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if(this.popup) this.popup.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if(this.popup) this.popup.removeClass("e-rtl");
            }

            this._change("enableRTL", boolean);
        },
        _enabled: function (boolean) {
            if (boolean) {
                this.model.enabled = false;
                this.enable();
            }
            else {
                this.model.enabled = true;
                this.disable();
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderIcon();
            }
            else {
                this.container.removeClass("e-padding");
                this.datetimeIcon.remove();
                this.datetimeIcon = null;
            }
        },
        _buttonText: function (data) {
            bbdesigner$.extend(this.model.buttonText, data);
            this.popup.find(".e-dt-today").html(this.model.buttonText.today);
            this.popup.find(".e-dt-now").html(this.model.buttonText.timeNow);
            this.popup.find(".e-dt-done").html(this.model.buttonText.done);
            this.popup.find(".e-timecontainer").find(".e-header").html(this.model.buttonText.timeTitle);
        },
        _checkForResponsive: function () {
            if ((bbdesigner$(window).outerWidth() > 200) && (bbdesigner$(window).outerWidth() <= 500)) {
                if (!this.popup.hasClass("e-dt-responsive")) {
                    this.popup.addClass("e-dt-responsive");
                    this.timePicker.option("popupWidth", this.datePicker.popup.outerWidth());
                    this.timePicker.option("popupHeight", 98);
                    this.timePicker._refreshScroller();
                    this.timePicker._changeActiveEle();
                }
            }
            else if (this.popup.hasClass("e-dt-responsive")) {
                this.popup.removeClass("e-dt-responsive");
                this.timePicker.option("popupWidth", this.model.timePopupWidth);
                var height = this.datePicker.popup.height() - this.popup.find(".e-header").height();
                this.timePicker.option("popupHeight", height);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
            }
        },

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.model.enabled = true;
                this.element.prop("disabled", false);
                this.wrapper.removeClass("e-disable");
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (!this._isSupport)
                    this._hiddenInput.prop("disabled", false);
                if (this.datetimeIcon) this.datetimeIcon.removeClass("e-disable").attr("aria-disabled", false);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().removeClass("e-disable");
                if (this.popup) {
                    this.popup.children("div").removeClass("e-disable").attr("aria-disabled", false);
                    this._change("enabled", true);
                }
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.wrapper.addClass("e-disable");
                this.element.addClass("e-disable").attr("aria-disabled", true);
                this.element.attr("disabled", "disabled");
                if (!this._isSupport)
                    this._hiddenInput.attr("disabled", "disabled");
                if (this.datetimeIcon) this.datetimeIcon.addClass("e-disable").attr("aria-disabled", true);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().addClass("e-disable");
                this._hideResult();
                this._change("enabled", false);
                if (this.popup) {
                    this.popup.children("div").addClass("e-disable").attr("aria-disabled", true);
                    this.datePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                    this.timePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                }
            }
        },


        getValue: function () {
            return this._objectToString(this.model.value);
        },


        setCurrentDateTime: function () {
            if (!this.model.readOnly)
                this._setValue(new Date());
        },


        show: function () {
            this._showResult();
        },


        hide: function () {
            this._hideResult();
        },


        _wireEvents: function () {
            if (this.model.allowEdit) {
                this._on(this.element, "focus", this._targetFocus);
                this._on(this.element, "blur", this._targetBlur);
                this._on(this.element, "keydown", this._keyDownOnInput);
            }
            if (!this.model.allowEdit) {
                this.element.attr("readonly", "readonly");
                this.element.on("mousedown", bbdesigner$.proxy(this._showhidePopup, this));
            }


        },

        _getLocalizedLabels: function () {
            return BoldBIDashboard.getLocalizedConstants(this.sfType, this.model.locale);
        }
    });

    BoldBIDashboard.DateTimePicker.Locale = BoldBIDashboard.DateTimePicker.Locale || {};

    BoldBIDashboard.DateTimePicker.Locale['default'] = BoldBIDashboard.DateTimePicker.Locale['en-US'] = {
        watermarkText: "Select datetime",
        buttonText: {
            today: "Today",
            timeNow: "Time Now",
            done: "Done",
            timeTitle: "Time"
        }
    };

    BoldBIDashboard.PopupPosition = {
        Bottom: "bottom",
        Top: "top"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);;
;
 // /<reference path="jquery-1.10.2.min.js" />
   'use strict';

    /* eslint max-depth: ["error", 10]*/
   /* eslint max-params: ["error", 10]*/
   /* eslint no-extra-parens: ["off"]*/
(function (bbdesigner$, BoldBIDashboard, undefined) {  // eslint-disable-line no-undefined, id-length, no-shadow-restricted-names, no-unused-vars
    BoldBIDashboard.widget("BoldBIDashboardBreadcrumb", "BoldBIDashboard.Breadcrumb", {
        element: null,
        model: null,
        defaults: {
            dataSource: [],
            width: "",
            selected: null
        },
        _init: function () {
            this._initPrivateProperties();
            this._drawBreadcrumb();
            this._wireEvents();
        },
        _setModel: function (options) {
            for (var prop in options) {
                if (options.hasOwnProperty(prop)) { // eslint-disable-line no-prototype-builtins
                    switch (prop) {
                        case "selected": this.model.selected = options[prop];
                            break;
                        case "dataSource":
                            this.model.dataSource = options[prop];
                            break;
                        case "width":
                            this.model.width = options[prop];
                            break;
                        default:
                         break;
                    }
                }
            }
        },
        dataTypes: {
            dataSource: "array",
            width: "string"
        },
        destroy: function() {
            this._unWireEvents();
            this.element.html("");
        },
        redraw: function() {
            this._unWireEvents();
            this.element.html("");
            this._initPrivateProperties();
        },
        _breadCrumbDropdownclose: function(evt) {
			if (!bbdesigner$(evt.target).hasClass('e-dashboardbreadcrumb-drillIconBackward')) {
			if (bbdesigner$(document.activeElement).find(".e-dashboardbreadcrumb-drillIconBackward-focused")) {
				bbdesigner$(document.activeElement).find('.e-dashboardbreadcrumb-dropDown').
				remove();
				var backwardIconClose = bbdesigner$(document.activeElement).find(".e-dashboardbreadcrumb-drillIconBackward-focused");
				backwardIconClose.removeClass("e-dashboardbreadcrumb-drillIconBackward-focused");

				return;
            }
			}

		},
        _selectedHandler: function (evt) {
            if (this.model.selected && this._id !== evt.currentTarget.id) {
                this._trigger("selected", { id: this._id, tabId: evt.currentTarget.id });
            }
        },
        _toolTip: function (evt) {
			// var top1 = 25;
			var Textpercent = 100;
			var Ten = 10;
			var fifteen = 15;
			var opacity = 0.9;
			var eight = 8;
			var zero = 0;
			var two = 2;
            var width = this.model.width;
            var left = evt.currentTarget.offsetLeft;
            var topOffset = evt.currentTarget.offsetTop;
            var top = 0;
            // var top = evt.clientY + top1;
            var textElement = this._measureText(evt.currentTarget.textContent.trim(), Textpercent, { size: "11px", fontStyle: "Normal", fontFamily: "Roboto" });
            var textWidth = textElement.width;
            var textHeight = textElement.height;
            var offsetWidth = evt.currentTarget.offsetWidth;
            var scrollWidth = evt.currentTarget.scrollWidth;
            if (offsetWidth < scrollWidth) {
                left = (width - left > (textWidth + Ten)) ? left : left - (textWidth - (width - left)) - fifteen;
                width = width < (textWidth + fifteen) ? width * opacity : textWidth + eight;
                top = topOffset + textHeight + 5;
                var toolTip = bbdesigner$('<div>').attr({ 'id': 'toolTip'}).
                css({'left': String((left <= zero ? two : left)) + 'px', 'top': top + 'px', 'padding': '5px', 'background-color': '#fff', 'box-shadow': '0 1px 4px rgba(0,0,0,.15)', 'border': '1px solid rgba(0,0,0,.15)', 'display': 'block', 'position': 'absolute', 'z-index': '1010', 'font-size': '13px'});
                toolTip.html(String(evt.currentTarget.textContent));
                this.element.append(toolTip);
            }
        },
        _removeToolTip: function () {
            bbdesigner$('#toolTip').remove();
        },
         _wireEvents: function() {
            this._on(this.element, 'mouseover', ".e-dashboardbreadcrumb-drill, .e-dashboardbreadcrumb-dropDown ul li", this._toolTip);
            this._on(this.element, 'mouseleave', ".e-dashboardbreadcrumb-drill, .e-dashboardbreadcrumb-dropDown ul li", this._removeToolTip);
            this._on(this.element, 'click', ".e-dashboardbreadcrumb-drill, .e-dashboardbreadcrumb-dropDown ul li", this._selectedHandler);
			this._on(bbdesigner$("body"), 'click', this._breadCrumbDropdownclose);
            this._on(this.element, "click", this.element, this._selectedHandler);
        },
        _unWireEvents: function() {
            this._off(this.element, 'click', ".e-dashboardbreadcrumb-drill, .e-dashboardbreadcrumb-dropDown ul li", this._selectedHandler);
            this._off(this.element, 'mouseover', ".e-dashboardbreadcrumb-drill, .e-dashboardbreadcrumb-dropDown ul li", this._toolTip);
            this._off(this.element, 'mouseleave', ".e-dashboardbreadcrumb-drill, .e-dashboardbreadcrumb-dropDown ul li", this._removeToolTip);
			this._off(bbdesigner$("body"), 'click', this._breadCrumbDropdownclose);
            this._off(this.element, "click", this.element, this._selectedHandler);
        },
        _initPrivateProperties: function() {
            this.forwardIconWidth = 24;
            this.backwardIconWidth = 20;
            this._id = this.element.attr("id");
            },
        _measureText: function (text, maxWidth, font) {
			var zero = 0;
			var one = 1;
			var two = 2;
			var index = -1;
            var element = bbdesigner$(document).find("#" + this._id + "_breadcrumbMeasureText");
            var textObj = null;
            if (element.length === zero) {
                textObj = document.createElement('text');
                bbdesigner$(textObj).attr({ 'id': String(this._id) + "_breadcrumbMeasureText" });
                document.body.appendChild(textObj);
            } else {
                textObj = element[zero];
            }

            var style = "",
			size = "",
			family = "";
            textObj.innerHTML = text;
            if (typeof font !== "undefined" && typeof font.size === "undefined") {
                var fontarray = font;
                fontarray = fontarray.split(" ");
                style = fontarray[zero];
                size = fontarray[one];
                family = fontarray[two];
            }

            if (font !== "undefined" && font !== null) {
                textObj.style.fontSize = (font.size > zero) ? (font.size + "px") : font.size ? font.size : (size.indexOf("px") === index || size.indexOf("%") === index) ? size + "px" : size;
                textObj.style.fontStyle = font.fontStyle ? font.fontStyle : style;
                textObj.style.fontFamily = font.fontFamily ? font.fontFamily : family;
            }
            textObj.style.backgroundColor = 'white';
            textObj.style.position = 'absolute';
            textObj.style.top = -100;
            textObj.style.left = 0;
            textObj.style.visibility = 'hidden';
            if (maxWidth) {
                textObj.style.maxwidth = maxWidth + "px";
            }
            var bounds = { width: textObj.offsetWidth, height: textObj.offsetHeight };
            if (BoldBIDashboard.browserInfo().name === "msie" || BoldBIDashboard.browserInfo().name === "webkit") {
                textObj.parentNode.removeChild(textObj);
            } else {
                textObj.remove();
             }

            return bounds;
        },
        _drawBreadcrumb: function () {
			var width1 = 75;
			var zero = 0;
			var width2 = 160;
			var one = 1;
            var headers = this.model.dataSource;
            if (this.model.width < width1) {
                this._dropDownMenu(zero, headers); // To show all levels in dropdown
            } else if (this.model.width > width1 && this.model.width < width2) {
                this._dropDownMenu(one, headers); // To show all levels except last level in dropdown
            } else {
                this._calculationForNavigationTab(headers);
              }
        },
       _calculationForNavigationTab: function (headers) {
            var level = headers.length,
				headerWidth = 0,
				dropdownList = -1,
				one = 1,
				zero = 0,
				width1 = 100,
				two = 2,
				twenty = 20,
				header = 13,
				index = -1,
				three = 3;
            for (var i = level - one; i >= zero; i--) {
                headerWidth += this._measureText(headers[i].displayText.trim(), width1, { size: "11", fontStyle: "Normal", fontFamily: "Roboto" }).width + this.forwardIconWidth;
                if (i === zero) {
                    headerWidth -= header; // in first level we don't need forwardIcon but we use margin-left.
                }
                if (headerWidth - twenty >= this.model.width && (headers.length !== two || ((headers.length - one) === i))) {
                    dropdownList = i;
                    break;
                }
            }
            if (dropdownList === index) {
                bbdesigner$('#' + this._id + "_breadcrumbDiv").html("");
                this._navigationTab(zero, headers, false);
            } else {
                this._navigationTab(((dropdownList === one && headers.length === three) || ((headers.length - one) === dropdownList)) ? dropdownList : dropdownList + one, headers, true);
            }
        },

          /* global l :true*/
         /* eslint no-undef: "error"*/
        _navigationTab: function (start, headers, backward) {
			var totalWidth1 = 11;
			var widthpercent = 100;
			var zero = 0;
			var five = 5;
			var one = 1;
			// var two = 2;
			var three = 3;
			var twenty = 20;
            var totalWidth = 0;
            if (!backward) {
                totalWidth += totalWidth1; // For fist level we have to add 11(margin-left) for calculating width
                for (var i = 0; i < start; i++) {
                    totalWidth += this._measureText(headers[i].displayText.trim(), widthpercent, { size: "11", fontStyle: "Normal", fontFamily: "Roboto" }).width;
                    if (i !== zero) {
                        totalWidth += this.forwardIconWidth;
                    }
                }
            }
            var id = this._id + "_breadcrumbDiv";
            var breadcrumb = this.element.find(String(id));
            for (var j = start; j < headers.length; j++) {
                if (breadcrumb.length === zero) {
                    breadcrumb = bbdesigner$('<div>').attr({ 'id': String(id)}).
					css({ 'height': '12px', 'background': '#FFFFFF', "display": "block" });
                }
                if (backward && j === start) {
                    breadcrumb.html("");
                    breadcrumb.append(bbdesigner$('<div>').addClass("e-dashboardbreadcrumb-drillIconBackward"));
                    breadcrumb.on('click', bbdesigner$.proxy(this._dropDownForHidedLevels, this, start, headers));
                    totalWidth += this.backwardIconWidth;
                } else if (j !== zero) {
                    breadcrumb.append(bbdesigner$('<div>').addClass("e-dashboardbreadcrumb-drillIconForward"));
                    totalWidth += (this.forwardIconWidth - five);
                }
                var hWidth = this._measureText(headers[j].displayText.trim(), widthpercent, { size: "11", fontStyle: "Normal", fontFamily: "Roboto" }).width + five;
                totalWidth += hWidth;
                if (j === headers.length - one && (totalWidth > this.model.width)) {
                    hWidth = hWidth - (totalWidth - this.model.width) - three;
                } else if (j !== headers.length - one && (totalWidth + twenty) > this.model.width) {
                    this._navigationTab(j + one, headers, "true");
                    break;
                }
                if (j !== zero) {
                    breadcrumb.append(bbdesigner$('<div>').attr({ 'id': String(headers[j].id)}).
					html(String(headers[j].displayText)).
					addClass("e-dashboardbreadcrumb-drill").
					css({ 'width': String(hWidth) + 'px' }));
                 } else {
                    breadcrumb.append(bbdesigner$('<div>').attr({ 'id': String(headers[j].id)}).
                    html(String(headers[j].displayText)).
                    addClass("e-dashboardbreadcrumb-drill").
                    css({ 'padding-left': '2px', 'width': String(hWidth) + 'px' }));
                   }
            }
            if (this.element.find(String(id)).length === zero) {
                this.element.append(breadcrumb);
            }
        },

         /* global _selectedHandler :true*/
         /*  eslint no-undef: "error"*/
        _dropDownMenu: function (level, headers) {
			var zero = 0;
			var one = 1;
			var width1 = 25;
            var id = this._id + "_breadcrumbDiv";
            var breadcrumb = this.element.find(String(id));
            if (level === one) {
                if (breadcrumb.length === zero) {
                    breadcrumb = bbdesigner$('<div>').attr({ 'id': String(this._id) + "breadcrumbDiv" }).
                    css({ 'height': '10px', 'background': '#FFFFFF', "display": "block" });
                }
                breadcrumb.html("");
                breadcrumb.append(bbdesigner$('<div>').addClass("e-dashboardbreadcrumb-drillIconBackward"));
                breadcrumb.on('click', bbdesigner$.proxy(this._dropDownForHidedLevels, this, (level === zero ? headers.length : headers.length - one), headers));
                breadcrumb.append(bbdesigner$('<div>').attr({ 'id': String(headers[level].id)}).
                html(String(headers[headers.length - one].displayText)).
                addClass("e-dashboardbreadcrumb-drill").
                css({ 'width': String((this.model.width - width1)) + 'px' }));
            } else {
                if (breadcrumb.length === zero) {
                    breadcrumb = bbdesigner$('<div>').attr({ 'id': String(this._id) + "breadcrumbDiv" }).
                    css({ 'height': '10px', 'background': '#FFFFFF', "display": "block", 'position': 'absolute' });
                }
                breadcrumb.html("");
                breadcrumb.append(bbdesigner$('<div>').addClass("e-dashboardbreadcrumb-drillIconBackward").
                css({ 'position': 'absolute', 'top': '0', 'left': '0' }));
                breadcrumb.on('click', _selectedHandler);
            }
            if (this.element.find(String(id)).length === zero) {
                this.element.append(breadcrumb);
            }
        },
        _dropDownForHidedLevels: function (levels, headers, evt) {
			var lengthpercent = 100;
			var twenty = 20;
			var width1 = 150;
			var nine = 9;
			var ten = 10;
			var onetwenty = 120;
			var fifteen = 15;
			if (bbdesigner$(evt.target).hasClass('e-dashboardbreadcrumb-drill')) {
				return;
			}
            if (bbdesigner$(evt.currentTarget).children().
			hasClass("e-dashboardbreadcrumb-drillIconBackward-focused")) {
				bbdesigner$(evt.currentTarget).children().
				removeClass("e-dashboardbreadcrumb-drillIconBackward-focused");
				this.element.find('.e-dashboardbreadcrumb-dropDown').remove();

                return;
            }
                this.element.find('.e-dashboardbreadcrumb-drillIconBackward').addClass("e-dashboardbreadcrumb-drillIconBackward-focused");
                var dropDown = bbdesigner$('<div>').addClass("e-dashboardbreadcrumb-dropDown");
                var ui = bbdesigner$('<ul>');
                var width = 0;
                for (var i = 0; i < levels; i++) {
                    ui.append(bbdesigner$('<li>').attr({ 'id': String(headers[i].id)}).
                    html(String(headers[i].displayText)));
                    var length = this._measureText(headers[i].displayText.trim(), lengthpercent, { size: "11px", fontStyle: "Normal", fontFamily: "Roboto" }).width;
                    if (width < length) {
                        width = length;
                    }
                }
                width = this.model.width < (width + twenty) ? (this.model.width < width1 ? this.model.width * nine / ten : onetwenty) : ((this.model.width < width1) ? this.model.width * nine / ten : width + fifteen);
                dropDown.css({ 'width': String(width), 'position': 'absolute', 'top': '15px', 'left': '5px' }).append(ui);
                this.element.append(dropDown);

                return;

        }

    });
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
// <reference path="BoldBIDashboard.dashboardviewer.all.min.js" />
// <reference path="BoldBIDashboard.core.js" />
// <reference path="jquery-1.11.3.min.js" />
/* eslint no-extra-parens: ["error", "all", { "nestedBinaryExpressions": false }] */
/* eslint  max-depth: ["error", 8] */
'use strict';
(function(bbdesigner$, BoldBIDashboard, undefined) { // eslint-disable-line id-length, no-undefined, no-shadow-restricted-names, no-unused-vars
       BoldBIDashboard.widget("BoldBIDashboardDashboardDatePicker", "BoldBIDashboard.DashboardDatePicker", {
        // widget element will be automatically set in this
        element: null,
        _rootCss: "e-dashboarddatepicker",
        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        defaults: {
            cssClass: "",
            startDate: "01/01/1900",
            endDate: "01/01/2050",
            showLatestDate: false,
            ranges: null,
            value: {
                range: "",
                start: "",
                end: ""
            },
            datePickerType: "single",
            // Need to do add functionality for drop down support in month and year
            showDropDowns: false,
            // Need to do add this functionality in later stage
            showWeekNumbers: false,
            showCustomDatePicker: true,
            enableRTL: false,
            highlightAvailableDates: false,
            fixedCalendarSelection: false,
            limitDate: true,
            specialDates: null,
			defaultDate: "none",
            dashboardMode: null,
            firstDayOfWeek: 0,
            dataSource: [],
            width: "",
            height: "",
            watermarkText: "Select date",
            scalingFactor: 1,
            locale: {
                culture: "en-US",
                applyLabel: "Apply",
                cancelLabel: "Cancel",
                fromLabel: "From",
                toLabel: "To",
                seperator: "-",
                format: "dd/MM/yyyy",
                customRangeLabel: "Custom",
                daysOfWeek: [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                monthNames: [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December"
                ]
            },

            create: null,
            destroy: null,
            popupShow: null,
            selected: null,
            popupHide: null
        },
        dataTypes: {
            startDate: "string",
            endDate: "string",
            showLatestDate: "boolean",
            value: "data",
            ranges: "data",
            locale: "data",
            datePickerType: "string",
            defaultDate: "string",
            showDropDowns: "boolean",
            showWeekNumbers: "boolean",
            dataSource: "data",
            enableRTL: "boolean"
        },
        _init: function () {
            this._initPrivateProperties();
            this._setValues();
            this._setWaterMarkText();
            this._createDatePicker();
            this._initializeContainers();
            this._createDatePickerDropDown();
            this._unwireEvents();
            this._wireEvents();
            this._addLocalizedLabelText();
            this._selectInitialValue();
        },
        _setModel: function (options) {
            for (var option in options) {
                if ({}.hasOwnProperty.call(options, option)) {
                    switch (option) {
                        case "width":
                            this._setWidth(this.controlWrapper);
                            break;
                        case "heigt":
                            this._setHeight(this.controlWrapper);
                            break;
                        case "dataSource":
                            this.model.dataSource = options[option];
                            this.redraw();
                            break;
                        case "startDate":
                            this.model.startDate = options[option];
                            this.redraw();
                            break;
                        case "endDate":
                            this.model.endDate = options[option];
                            this.redraw();
                            break;
                        case "enableRTL":
                            this._setRTL(this.controlWrapper);
                            break;
						case "DefaultDate":
							this._defaultToday();
							break;
                        default:
                            break;
                    }
                }
            }
        },
		_defaultToday: function(){
			if (this.model.defaultDate === BoldBIDashboard.DashboardDatePicker.DefaultDate.Today) {
                var todaysDate = new Date();
				var year = todaysDate.getFullYear();
                var month = todaysDate.getMonth();
                var day = todaysDate.getDate();
                var date = new Date(year, month, day);
				var parsedDate = BoldBIDashboard.globalize.format(date, this.format, this.model.locale.culture);
				this.element.val(parsedDate);
				this.selectedDate = { date: date };
                this.prevDate = this.selectedDate.date;
                if (!BoldBIDashboard.isNullOrUndefined(this.container)) {
                    this._selectDate();
                }
                this._trigger("selected", { datePickerType: BoldBIDashboard.DashboardDatePicker.Type.Single, selectedRange: "Today Day(s)", dateFormat: this.format, value: parsedDate });
			}
        },
        _showTooltip: function (evt) {
            var five = 5,
                divideBy28 = 28,
                divideBy18 = 18,
                divideBy20 = 20,
                divideBy500 = 500;
            var target = bbdesigner$(evt.currentTarget);
            if (!BoldBIDashboard.isNullOrUndefined(this.tooltipContainer)) {
                var that = this;
                if (!BoldBIDashboard.isNullOrUndefined(this.tooltipTimer)) {
                    clearTimeout(this.tooltipTimer);
                    this.tooltipTimer = null;
                }
                this.tooltipTimer = setTimeout(function () {
                    var text = target.text();
                    var bounds = that._measureText(text, target.width(), "Normal 12 Roboto");
                    if (bounds.width > target.width()) {
                        that.tooltipContainer.html(text).css({ "top": evt.clientY + bounds.height + divideBy28 > bbdesigner$(window).height() ? evt.clientY - bounds.height : evt.clientY + divideBy18, "left": evt.clientX + bounds.width > bbdesigner$(window).width() ? evt.clientX - bounds.width - divideBy20 : evt.clientX + five }).
                            fadeIn();
                    }
                }, divideBy500);
            }
        },
        _hideTooltip: function () {
            if (!BoldBIDashboard.isNullOrUndefined(this.tooltipContainer)) {
                this.tooltipContainer.fadeOut();
            }
        },
        _measureText: function (text, maxWidth, font) {
            var zero = 0,
                lessThanZero = -1;
            var element = bbdesigner$(document).find("#cardMeasureText");
            var textObj = null;
            if (element.length === zero) {
                textObj = document.createElement('text');
                bbdesigner$(textObj).attr({ 'id': 'cardMeasureText' });
                document.body.appendChild(textObj);
            } else {
                textObj = element[0];
            }

            var style = "",
                size = "",
                family = "";
            textObj.innerHTML = text;
            if (typeof font !== "undefined" && typeof font.size === "undefined") {
                var fontarray = font;
                fontarray = fontarray.split(" ");
                style = fontarray[0];
                size = fontarray[1];
                family = fontarray[2];
            }

            if (font !== null) {
                textObj.style.fontSize = font.size > zero ? font.size + "px" : font.size ? font.size : size.indexOf("px") === lessThanZero || size.indexOf("%") === lessThanZero ? size + "px" : size;
                textObj.style.fontStyle = font.fontStyle ? font.fontStyle : style;
                textObj.style.fontFamily = font.fontFamily ? font.fontFamily : family;
            }
            textObj.style.backgroundColor = 'white';
            textObj.style.position = 'absolute';
            textObj.style.top = -100;
            textObj.style.left = 0;
            textObj.style.visibility = 'hidden';
            if (maxWidth) {
                textObj.style.maxwidth = maxWidth + "px";
            }
            var bounds = { width: textObj.offsetWidth, height: textObj.offsetHeight };
            if (BoldBIDashboard.browserInfo().name === "msie") {
                textObj.parentNode.removeChild(textObj);
            } else {
                textObj.remove();
            }

            return bounds;
        },
        _setWaterMarkText: function () {
            if(this.model.defaultDate === BoldBIDashboard.DashboardDatePicker.DefaultDate.Today){
                var todaysDate = new Date();
                var year = todaysDate.getFullYear();
                var month = todaysDate.getMonth();
                var day = todaysDate.getDate();
                var date = new Date(year, month, day);
                var parsedDate = BoldBIDashboard.globalize.format(date, this.format, this.model.locale.culture);
                this.element.val(parsedDate);
                this.selectedDate = { date: date };
                this.prevDate = this.selectedDate.date;
            } else if (this.model.datePickerType === BoldBIDashboard.DashboardDatePicker.Type.Single) {
                bbdesigner$(this.element).attr("placeholder", this.model.watermarkText);
            } else {
                bbdesigner$(this.element).attr("placeholder", this.model.watermarkText);
                this._setCulture(this.model.locale.culture);
                var text = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? BoldBIDashboard.globalize.format(this.startDate, this.format, this.model.locale.culture) + " " + this.seperator + " " + BoldBIDashboard.globalize.format(this.endDate, this.format, this.model.locale.culture) : BoldBIDashboard.globalize.format(this.startDate, this.model.locale.displayFormat, this.model.locale.culture) + " " + this.seperator + " " + BoldBIDashboard.globalize.format(this.endDate, this.model.locale.displayFormat, this.model.locale.culture);
                if (this.mainInputVal !== text) {
                    this.mainInputVal = text;
                }
                this.element.val(text);
            }
        },
        _setValues: function () {
            this._isIE7 = this._checkIE7();
            this._isIE8 = (BoldBIDashboard.browserInfo().name === "msie") && (BoldBIDashboard.browserInfo().version === "8.0");
            this._isIE9 = (BoldBIDashboard.browserInfo().name === "msie") && (BoldBIDashboard.browserInfo().version === "9.0");
        },
        _selectInitialValue: function () {
            var zero = 0;
            this.codeTriggeredEvent = true;
            if (!this.isNullOrUndefinedOrEmpty(this.model.value)) {
                var isSet = false;
                if (!this.isNullOrUndefinedOrEmpty(this.model.value.range)) {
                    var li = this.container.find(".e-dashboarddatepicker-ranges ul li[e-data-value='" + this.model.value.range + "']");
                    if (li.length !== zero) {
                        li.trigger("click");
                        isSet = true;
                    }
                }
                if (!isSet && !this.isNullOrUndefinedOrEmpty(this.model.value.start)) {
                    var end = null,
                        start = this._parseDate(this.model.value.start);
                    if (!this.isNullOrUndefinedOrEmpty(this.model.value.end)) {
                        end = this._parseDate(this.model.value.end);
                    }
                    if (start !== null && end === null) {
                        end = start;
                    }
                    if (start !== null && end !== null && start <= end) {
                        if (this.model.datePickerType === "single") {
                            this.singleCalenderDate = start;
                            this.selectedDate = { date: new Date(start.getTime()) };
                            this.prevDate = start;
                            this._updateCalendar("single");
                            this._updateInputs(true);
                        } else {
                            this.leftCalenderDate = start;
                            this.rightCalenderDate = end;
                            this.oldSelectedStartDate = this.selectedStartDate = { date: new Date(start.getTime()) };
                            this.oldSelectedEndDate = this.selectedEndDate = { date: new Date(end.getTime()) };
                            this.container.find(".e-dashboarddatepicker-ranges ul li[e-data-range=customPicker]").trigger("click");
                            this._updateCalendar("left");
                            this._updateCalendar("right");
                            this._updateInputs(true);
                        }
                    }
                }
                this._removeDatePickerWrongFormat();
            } else if (this.model.datePickerType === "range") {
                this.oldSelectedStartDate = this.selectedStartDate = { date: new Date(this.startDate.getTime()) };
                this.oldSelectedEndDate = this.selectedEndDate = { date: new Date(this.endDate.getTime()) };
                this._updateCalendar("left");
                this._updateCalendar("right");
                this._updateInputs(true);
            }
            this.codeTriggeredEvent = false;
        },
        isNullOrUndefinedOrEmpty: function (obj) {
            return BoldBIDashboard.isNullOrUndefined(obj) || obj === "";
        },
        _initPrivateProperties: function () {
            var divideBy1900 = 1900,
                divideBy2050 = 2050,
                one = 1;
            this.mainInputVal = null;
            this.prevSelectedRange = null;
            this.selectedRange = null;
            this.codeTriggeredEvent = false;
            this.selectedStartDate = null;
            this.selectedEndDate = null;
            this.selectedDate = null;
            this.oldSelectedStartDate = null;
            this.oldSelectedEndDate = null;
            this.selectedStartDateValue = null;
            this.selectedEndDateValue = null;
            this.seperator = !BoldBIDashboard.isNullOrUndefined(this.model.locale) ? !BoldBIDashboard.isNullOrUndefined(this.model.locale.seperator) ? this.model.locale.seperator : this.defaults.locale.seperator : this.defaults.locale.seperator;
            this.format = !BoldBIDashboard.isNullOrUndefined(this.model.locale) ? !BoldBIDashboard.isNullOrUndefined(this.model.locale.format) ? this.model.locale.format : this.defaults.locale.format : this.defaults.locale.format;
            this.daysOfWeek = !BoldBIDashboard.isNullOrUndefined(this.model.locale) ? !BoldBIDashboard.isNullOrUndefined(this.model.locale.daysOfWeek) ? this.model.locale.daysOfWeek : this.defaults.locale.daysOfWeek : this.defaults.locale.daysOfWeek;
            this.monthNames = !BoldBIDashboard.isNullOrUndefined(this.model.locale) ? !BoldBIDashboard.isNullOrUndefined(this.model.locale.monthNames) ? this.model.locale.monthNames : this.defaults.locale.monthNames : this.defaults.locale.monthNames;
            this.isOpen = false;
            this.startDate = !BoldBIDashboard.isNullOrUndefined(this.model.startDate) && this.model.startDate !== "" ? this._parseDate(this.model.startDate) || new Date(divideBy1900, one, one) : new Date(divideBy1900, one, one);
            this.endDate = !BoldBIDashboard.isNullOrUndefined(this.model.endDate) && this.model.endDate !== "" ? this._parseDate(this.model.endDate) || new Date(divideBy2050, one, one) : new Date(divideBy2050, one, one);
            this.leftCalenderDate = this._setCalendarDate(this.startDate);
            this.rightCalenderDate = this._setCalendarDate(this.endDate);
            this.singleCalenderDate = this._setCalendarDate(this.startDate);
            this.prevDate = null;
            this.tooltipContainer = null;
            this.tooltipTimer = null;
            this.minDate = new Date(divideBy1900, one, one);
            this.maxDate = new Date(divideBy2050, one, one);
        },
        _initializeContainers: function () {
            this.controlWrapper = this.element.parent();
        },
        _createDatePicker: function () {
            this.element.addClass("e-input-main");
            var datePickerWrapper = BoldBIDashboard.buildTag("div#" + this.element.attr("id") + "_wrapper.e-dashboarddatepicker-wrapper");
            this.element.after(datePickerWrapper);
            var i = BoldBIDashboard.buildTag("i.e-dashboarddatepicker-icon");
            datePickerWrapper.append(this.element, i);
            this._setWidth(datePickerWrapper);
            this._setHeight(datePickerWrapper);
            if (this.model.enableRTL) {
                i.addClass("e-rtl");
                this._setRTL(datePickerWrapper);
            }
        },
        _setWidth: function (datePickerWrapper) {
            if (this.model.width) {
                bbdesigner$(datePickerWrapper).width(this.model.width);
                bbdesigner$(this.element).css({ "width": bbdesigner$(datePickerWrapper).width() });
            } else {
                datePickerWrapper.width(this.model.width);
            }
        },
        _setHeight: function (datePickerWrapper) {
            if (this.model.height) {
                bbdesigner$(datePickerWrapper).height(this.model.height);
                bbdesigner$(this.element).css({ "height": bbdesigner$(datePickerWrapper).height() });
            } else {
                datePickerWrapper.height(this.model.height);
            }
        },
        _createDatePickerDropDown: function () {
            var id = this.element.attr("id");
            var wrapperId = id + "_popup_wrapper";
            var popupWrapperTemplate = '<div id="' + wrapperId + '" class="e-dashboarddatepicker e-dashboarddatepicker-popup-wrapper ' + this.model.cssClass + '">' +
                '<div class="e-dashboarddatepicker-content">' +
                '<div class="e-dashboarddatepicker-calander-selector-wrapper">' +
                '<div class="e-dashbaorddatepicker-date-selectors">' +
                '<div style="margin-right: 5px;" class="e-dashboarddatepicker-input-container left">' +
                '<span class="e-fromspan left"/>' +
                '<input class="e-input-mini left" type="text" name="daterangepicker_start" value="" />' +
                '</div>' +
                '<div  class="e-dashboarddatepicker-input-container left">' +
                '<span class="e-tospan left"/>' +
                '<input class="e-input-mini left" type="text" name="daterangepicker_end" value="" />' +
                '</div>' +
                '</div>' +
                '<div class="e-dashboarddatepicker-calander-wrapper">' +
                '<div style="margin-right:17px;" class="e-dashboarddatepicker-calendar left-calendar left">' +
                '<div class="calendar-table"></div>' +
                '</div>' +
                '<div class="e-dashboarddatepicker-calendar right-calendar left">' +
                '<div class="calendar-table"></div>' +
                '</div>' +
                '<div class="e-dashboarddatepicker-calendar-table"></div>' +
                '</div>' +
                '</div>' +
                '<div class="e-dashboarddatepicker-ranges" id="' + id + '_ranges">' +
                '</div>' +
                '<div class="e-dashboarddatepicker-calendar single-calendar left">' +
                '<div class="calendar-table"></div>' +
                '</div>' +
                '</div>' +
                '<div class="e-dashboarddatepicker-footer">' +
                '<div class="date-range-alert-message">The start date must be before the end date</div>' +
                '<button class="btn e-dashboarddatepicker-cancel-btn" type="button"></button>' +
                '<button class="btn e-dashboarddatepicker-apply-btn"  type="button"></button> ' +
                '</div>';
            if (this.model.enableRTL) {
				this.container = bbdesigner$(popupWrapperTemplate).addClass("e-rtl");
			} else {
				this.container = bbdesigner$(popupWrapperTemplate).removeClass("e-rtl");
			}
            this.tooltipContainer = BoldBIDashboard.buildTag("div#" + this.element.attr("id") + "_tooltip.e-dashboarddatepicker-tooltip");
            this.container.append(this.tooltipContainer);
            this.element.parents("body").append(this.container);
            if (this.model.datePickerType === BoldBIDashboard.DashboardDatePicker.Type.Single) {
                this.singleCalenderDate = new Date(this.startDate);
                this.container.find(".e-dashboarddatepicker-footer").css("display", "none");
                this.container.find(".e-dashboarddatepicker-calander-selector-wrapper").css("display", "none");
                this.container.find(".e-dashboarddatepicker-ranges").css("display", "none");
                this._createCalender(bbdesigner$(this.container).find(".single-calendar .calendar-table"), this.singleCalenderDate !== null ? this.singleCalenderDate : this.startDate);
            } else {
                this.leftCalenderDate = this.selectedStartDate !== null ? this.selectedStartDate : new Date(this.startDate);
                this.rightCalenderDate = this.selectedEndDate !== null ? this.selectedEndDate : new Date(this.endDate);
                this.container.find(".single-calendar").css("display", "none");
                this._createCalender(this.container.find(".left-calendar .calendar-table"), this.leftCalenderDate);
                this._createCalender(this.container.find(".right-calendar .calendar-table"), this.rightCalenderDate);
                this._renderRanges();
            }
            this._updateCalenderArrow();
            this.element.trigger("create", this);
        },
        _createCalender: function (calender, currentDate) {
            var calenderTable = bbdesigner$("<table>");
            calenderTable.append(this._renderHeader(currentDate));
            calenderTable.append(this._renderCalenderDays(currentDate));
            bbdesigner$(calender).append(calenderTable);
        },
        _setRTL: function (datePickerWrapper) {
            if (this.model.enableRTL) {
				bbdesigner$(datePickerWrapper).addClass("e-rtl");
            } else {
				bbdesigner$(datePickerWrapper).removeClass("e-rtl");
            }
        },
        _renderHeader: function (currentDate) {
            var zero = 0,
                six = 6,
                seven = 7;
            var thead = bbdesigner$(document.createElement('thead'));
            var headRow = BoldBIDashboard.buildTag("tr.e-week-header").attr({ 'role': 'columnheader' }).
                attr(this._isIE8 ? { 'unselectable': 'on' } : {});
            for (var i = this.model.firstDayOfWeek; i < (this.model.firstDayOfWeek + seven); i++) {
                var weekday = i % seven;
                var day = this.daysOfWeek[weekday];
                var th = BoldBIDashboard.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'date': day, 'title': this._formatter(day, "dddd"), 'class': weekday === zero || weekday === six ? 'e-week-end' : 'e-week-day' }).attr(this._isIE8 ? { 'unselectable': 'on' } : {}).
                    html(this.daysOfWeek[weekday]);
                headRow.append(th);
            }
            this._renderCalendarHeader(thead, currentDate);

            return thead.append(headRow);
        },
        _renderCalendarHeader: function (thead, currentDate) {
            var tr = BoldBIDashboard.buildTag("tr");
            tr.append('<th class="e-prev-month"><i></i></th>');
            tr.append('<th class="e-current-month" colspan=5>' + this.monthNames[currentDate.getMonth()] + " " + this.seperator + " " + currentDate.getFullYear() + '</th>');
            tr.append('<th class="e-next-month"><i></i></th>');
            thead.append(tr);
        },
        _renderCalenderDays: function (selectedDate) {
            var zero = 0,
                one = 1,
                seven = 7;
            var month = selectedDate.getMonth();
            var year = selectedDate.getFullYear();
            var currentDate = new Date(year, month, one, zero, zero, zero);
            var firstDayOffset = (this.model.firstDayOfWeek + one) - currentDate.getDay();
            if (firstDayOffset > one) {
                firstDayOffset -= seven;
            }
            var weeksToDraw = 7; // As loop started with zero and system default calendar also showcase 6 weeks by default, changed the value as 7.
            this._addDays(currentDate, firstDayOffset - one);
            var tbody = BoldBIDashboard.buildTag('tbody.e-datepicker-days', "", { 'display': 'none' }).attr(this._isIE8 ? { 'unselectable': 'on' } : {});
            var weeks = 0;
            while ((weeks += one) < weeksToDraw) {
                var row = bbdesigner$(document.createElement('tr'));
                for (var i = 0; i < seven; i++) {
                    var thisMonth = currentDate.getMonth() === month;
                    var data = bbdesigner$(document.createElement('td')).
                        html(currentDate.getDate()).
                        attr({
                            'date': currentDate.toDateString()
                        }).
                        attr(this._isIE8 ? { 'unselectable': 'on' } : {}).
                        addClass(thisMonth ? 'current-month e-state-default ' : 'other-month e-state-default ');
                    if (currentDate < (!this.model.limitDate ? this.minDate : this.startDate) || currentDate > (!this.model.limitDate ? this.maxDate : this.endDate)) {
                        data.addClass('e-hidedate e-disable');
                    }
                    if (this.model.highlightAvailableDates) {
                        this._selectGivenDates(currentDate, data);
                    } else {
                        data.addClass("e-available-date").removeClass("e-unavailable-date");
                    }
                    row.append(data);
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + one, zero, zero, zero);
                }
                tbody.append(row);
            }

            return tbody.html();
        },
        _selectGivenDates: function (currentDate, tablecell) {
            if (!BoldBIDashboard.isNullOrUndefined(tablecell)) {
                var date = this._getDateString(currentDate);
                for (var i = 0; i < this.model.dataSource.length; i++) {
                    if (date === this.model.dataSource[i]) {
                        bbdesigner$(tablecell).addClass("e-available-date").
                            removeClass("e-unavailable-date");

                        return;
                    }
                }
                bbdesigner$(tablecell).removeClass("e-available-date").
                    addClass("e-unavailable-date");
            }
        },

        getDateInFormat: function (newDate) {
            var one = 1,
                ten = 10;
            var date = new Date(newDate);
            var dd = date.getDate();
            var mm = date.getMonth() + one; // January is 0!
            var yyyy = date.getFullYear();
            if (dd < ten) {
                dd = '0' + dd;
            }
            if (mm < ten) {
                mm = '0' + mm;
            }

            return dd + '/' + mm + '/' + yyyy;
        },
        _wireEvents: function () {
            this._on(bbdesigner$(window), "resize", this._windowResize);
            this._on(bbdesigner$(document), "click", this._documentClick);
            this._on(this.container, "click", ".e-dashboarddatepicker-ranges ul li", this._rangeClicked);
            this._on(this.element.parent(), "click", "i.e-dashboarddatepicker-icon", this.toggle);
            this._on(this.container, "click", ".e-dashboarddatepicker-cancel-btn", this.cancelClick);
            this._on(this.container, "click", ".e-dashboarddatepicker-apply-btn", this.applyClick);
            this._on(this.container, "click", ".e-prev-month", this._clickPrev);
            this._on(this.container, "click", ".e-next-month", this._clickNext);
            this._on(this.container, "mousedown", ".e-dashboarddatepicker-content .calendar-table table td", this.dateClicked);
            this._on(this.container, "mouseover", ".e-dashboarddatepicker-calander-wrapper .calendar-table table td", this.hoverRange);
            this._on(this.container, "mouseleave", ".e-dashboarddatepicker-calander-wrapper .calendar-table table", this._onTableMouseOut);
            this._on(this.element.parent(), "keyup", ".e-dashboarddatepicker.e-input-main", this._keyup);
            this._on(this.element.parent(), "blur", ".e-dashboarddatepicker.e-input-main", this._onFocusOut);
            this._on(this.element.parent(), "focus", ".e-dashboarddatepicker.e-input-main", this.showPopup);
            this._on(this.container, "keyup", ".e-input-mini", this._keyup);
            this._on(this.container, "blur", ".e-input-mini", this._onFocusOut);
            this._on(this.container, "focus", ".e-input-mini", this._onFocusIn);
            this._on(this.container, "mouseover", ".e-dashboarddatepicker-ranges ul li", this._showTooltip);
            this._on(this.container, "mouseout", ".e-dashboarddatepicker-ranges ul li", this._hideTooltip);
            this._on(BoldBIDashboard.getScrollableParents(this.element), "scroll", this.hidePopup);
        },
        _unwireEvents: function () {
            this._off(bbdesigner$(window), "resize", this._windowResize);
            this._off(bbdesigner$(document), "click", this._documentClick);
            this._off(this.container, "click", ".e-dashboarddatepicker-ranges ul li", this._rangeClicked);
            this._off(this.element.parent(), "click", "i.e-dashboarddatepicker-icon", this.toggle);
            this._off(this.container, "click", ".e-dashboarddatepicker-cancel-btn", this.cancelClick);
            this._off(this.container, "click", ".e-dashboarddatepicker-apply-btn", this.applyClick);
            this._off(this.container, "click", ".e-prev-month", this._clickPrev);
            this._off(this.container, "click", ".e-next-month", this._clickNext);
            this._off(this.container, "mousedown", ".e-dashboarddatepicker-calander-wrapper .calendar-table table td", this.dateClicked);
            this._off(this.container, "mouseover", ".e-dashboarddatepicker-calander-wrapper .calendar-table table td", this.hoverRange);
            this._off(this.container, "mouseleave", ".e-dashboarddatepicker-calander-wrapper .calendar-table table", this._onTableMouseOut);
            this._off(this.element.parent(), "keyup", ".e-dashboarddatepicker.e-input-main", this._keyup);
            this._off(this.element.parent(), "blur", ".e-dashboarddatepicker.e-input-main", this._onFocusOut);
            this._off(this.element.parent(), "focus", ".e-dashboarddatepicker.e-input-main", this.showPopup);
            this._off(this.container, "keyup", ".e-input-mini", this._keyup);
            this._off(this.container, "blur", ".e-input-mini", this._onFocusOut);
            this._off(this.container, "focus", ".e-input-mini", this._onFocusIn);
            this._off(this.container, "mouseover", ".e-dashboarddatepicker-ranges ul li", this._showTooltip);
            this._off(this.container, "mouseout", ".e-dashboarddatepicker-ranges ul li", this._hideTooltip);
            this._off(BoldBIDashboard.getScrollableParents(this.element), "scroll", this.hidePopup);
        },
        _windowResize: function () {
            if (this.isOpen) {
                this._makePopupPositionDecision();
                if(!(/Android/i.test(navigator.userAgent))){
                    this.cancelClick();
                }
            }
        },
        _destroy: function() {
			this._unwireEvents();
			bbdesigner$("#" + this.element.attr("id") + "_popup_wrapper").remove();
			bbdesigner$("#" + this.element.attr("id") + "_wrapper").remove();
            this.element.removeClass('e-dashboarddatepicker e-input ' + this.model.cssClass);
        },
        _showDatePicker: function () {
            var fifty = 50,
                labelHeight = 35;
            if (this.container.find(".e-dashboarddatepicker-calander-selector-wrapper").css("display") === "block") {
                return;
            }
            this.container.find(".e-dashboarddatepicker-calander-selector-wrapper").show();
            this.container.find(".e-dashboarddatepicker-ranges").css({ "width": "100px" });
            this.container.css({ "width": "542px" });
            this._makePopupPositionDecision();
            this.container.css({ "width": "auto" });
            var rangeDiv = this.container.find(".e-dashboarddatepicker-content .e-dashboarddatepicker-ranges");
            var obj = rangeDiv.data("BoldBIDashboardScroller");
            if (!BoldBIDashboard.isNullOrUndefined(obj)) {
                rangeDiv.find("e-content").css({ "width": rangeDiv.width(), "height": this.container.height() - fifty });
                rangeDiv.find("e-ranges").css({ "height": Object.keys(this.model.ranges).length * labelHeight });
                obj.refresh();
            }
        },
        _hideDatePicker: function () {
            var divideBy313 = 313,
                ten = 10;
            if (this.container.find(".e-dashboarddatepicker-calander-selector-wrapper").css("display") === "none") {
                return;
            }
            this.container.find(".e-dashboarddatepicker-calander-selector-wrapper").hide();
            this.container.css({ "width": "200px" });
            this.container.find(".e-dashboarddatepicker-ranges").css({ "width": "100%" });
            this._makePopupPositionDecision();
            var rangeDiv = this.container.find(".e-dashboarddatepicker-content .e-dashboarddatepicker-ranges");
            var height = this.container.find(".e-dashboarddatepicker-content .e-dashboarddatepicker-ranges ul").height() + ten;
            if (height > divideBy313) {
                height = divideBy313;
            }
            var obj = rangeDiv.data("BoldBIDashboardScroller");
            if (!BoldBIDashboard.isNullOrUndefined(obj)) {
                rangeDiv.find("e-content").css({ "width": "200px" });
                obj.model.height = height;
                obj.refresh();
            }
        },
        _keyup: function (evt) {
            var divideBy13 = 13;
            if (evt.keyCode === divideBy13) {
                this._onValidKeyPress(evt);
            } else {
                this._keyNavigate(evt);
            }
        },
        _documentClick: function (evt) {
            var zero = 0;
            if (this.isOpen && bbdesigner$(this.element).parent().
                find(evt.target).length === zero && this.container.find(evt.target).length === zero) {
                this.cancelClick();
            } else if (this.isOpen && this.container.find(evt.target).length > zero) {
                this._makePopupPositionDecision();
            }
        },

        _onFocusIn: function (args) {
            var dateRangeType = args.currentTarget.getAttribute("name");
            bbdesigner$(args.currentTarget).addClass('e-focus');
            if (dateRangeType === "daterangepicker_start") {
                this.container.find(".e-fromspan").addClass("e-focus");
                this._removeEndDateFocus();
            } else if (dateRangeType === "daterangepicker_end") {
                this.container.find(".e-tospan").addClass("e-focus");
                this._removeStartDateFocus();
            }
	    },

        _onFocusOut: function (args) {
            this._onValidKeyPress (args);
        },

        _onValidKeyPress: function (evt) {
            var divideBy13 = 13;
            var zero = 0,
                one = 1,
                two = 2,
                minusOne = -1;
            var target = bbdesigner$(evt.currentTarget);
            var val = target.val(),
                start = null,
                end = null,
                year = null,
                month = null,
                day = null;
            if (this.model.datePickerType === "single") {
                start = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(val) : BoldBIDashboard.globalize.parseDate(val, this.model.locale.displayFormat, this.model.locale.culture) || (!BoldBIDashboard.isNullOrUndefined(this.selectedDate) ? this.selectedStartDate : null);
                if (BoldBIDashboard.isNullOrUndefined(start) || (this.model.limitDate && (+this.startDate > +start || +this.endDate < start))) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.prevDate) || !this.isNullOrUndefinedOrEmpty(val)) {
                        this._removeDatePickerFocus();
                        bbdesigner$(this.target).addClass("e-wrong-format");
                    } else {
                        this._removeDatePickerWrongFormat();
                        bbdesigner$(this.target).addClass("e-popup-focus");
                    }
                } else {
                    start = BoldBIDashboard.isNullOrUndefined(start) ? this.prevDate : start;
                    year = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('y') === minusOne ? this.startDate.getFullYear() : start.getFullYear() : start.getFullYear();
                    month = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('M') === minusOne ? this.startDate.getMonth() : start.getMonth() : start.getMonth();
                    day = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('d') === minusOne ? this.startDate.getDate() : start.getDate() : start.getDate();
                    start = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? new Date(year, month, day) : start;
                    if (start >= this.startDate && start <= this.endDate || !this.model.limitDate) {
                        this.singleCalenderDate = this._setCalendarDate(start);
                        this.selectedDate = { date: new Date(start.getTime()) };
                        this._updateCalendar("single");
                        if (this.prevDate === null) {
                            this.prevDate = new Date();
                        }
                        this._removeDatePickerWrongFormat();
                        bbdesigner$(this.target).addClass("e-popup-focus");
                        if (evt.keyCode === divideBy13) {
                            target.blur();
                            this.hidePopup();
                            this.prevDate = this.selectedDate.date;
                            val = BoldBIDashboard.globalize.format(start, this.format, this.model.locale.culture);
                            if (!this.isNullOrUndefinedOrEmpty(this.model.selected) && !this.isNullOrUndefinedOrEmpty(val) && !this.codeTriggeredEvent) {
                                this._trigger("selected", { datePickerType: BoldBIDashboard.DashboardDatePicker.Type.Single, dateFormat: this.format, value: val });
                            }
                        }
                    }
                }
                return;
            }
            if (target.hasClass("e-input-main")) {
                var isWrongFormat = false;
                var dates = val.split(" " + this.seperator + " ");
                if (dates.length === two) {
                    start = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(dates[0]) : BoldBIDashboard.globalize.parseDate(dates[0], this.model.locale.displayFormat, this.model.locale.culture) || (!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) ? this.selectedStartDate.date : null);
                    if (BoldBIDashboard.isNullOrUndefined(start) || (this.model.limitDate && (+this.startDate > +start || +this.endDate < start))) {
                        isWrongFormat = true;
                    } else {
                        year = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('y') === minusOne ? this.startDate.getFullYear() : start.getFullYear() : start.getFullYear();
                        month = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('M') === minusOne ? this.startDate.getMonth() : start.getMonth() : start.getMonth();
                        day = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('d') === minusOne ? this.startDate.getDate() : start.getDate() : start.getDate();
                        start = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? new Date(year, month, day) : start;
                    }
                    
                    end = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(dates[1]) : BoldBIDashboard.globalize.parseDate(dates[1], this.model.locale.displayFormat, this.model.locale.culture) || (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) ? this.selectedEndDate.date : null);
                    if (BoldBIDashboard.isNullOrUndefined(end) || (this.model.limitDate && (+this.endDate < +end || +this.startDate > +end))) {
                        isWrongFormat = true;
                    } else {
                        year = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('y') === minusOne ? this.endDate.getFullYear() : end.getFullYear() : end.getFullYear();
                        month = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('M') === minusOne ? this.endDate.getMonth() : end.getMonth() : end.getMonth();
                        day = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('d') === minusOne ? this.endDate.getDate() : end.getDate() : end.getDate();
                        end = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? new Date(year, month, day) : end;
                    }
                    isWrongFormat = !isWrongFormat ? (+start > +end) : isWrongFormat;
                    if (!isWrongFormat) {
                        this._removeDatePickerWrongFormat();
                        bbdesigner$(this.target).addClass("e-popup-focus");
                            if (!BoldBIDashboard.isNullOrUndefined(start)) {
                                this.leftCalenderDate = this._setCalendarDate(new Date(start.getTime()));
                                this.selectedStartDate = { date: new Date(start.getTime()) };
                                this._updateCalendar("left");
                            }
                            if (!BoldBIDashboard.isNullOrUndefined(end)) {
                                this.rightCalenderDate = this._setCalendarDate(new Date(end.getTime()));
                                this.selectedEndDate = { date: new Date(end.getTime()) };
                                this._updateCalendar("right");
                            }
                            this._toggleCustomRangeSelection();
                            this._removeStartDateWrongFormat();
                            this._removeEndDateWrongFormat();
                            this.selectedStartDateValue = null;
                            this.selectedEndDateValue = null;
                            this._updateInputs(target.hasClass("e-input-main"));
			            if (evt.keyCode === divideBy13) {
                            if (BoldBIDashboard.isNullOrUndefined(this.container.find(".e-dashboarddatepicker-apply-btn").attr('disabled'))) {
                                this.container.find(".e-dashboarddatepicker-apply-btn").focus();
                            }
                        }
                    } else {
                        this._removeDatePickerFocus();
                        if (isWrongFormat) {
                            bbdesigner$(this.target).addClass("e-wrong-format");
                        }
                        this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": true });
                    }
                } else {
                    if (!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) && !BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) || !this.isNullOrUndefinedOrEmpty(val)) {
                        this._removeDatePickerFocus();
                        bbdesigner$(this.target).addClass("e-wrong-format");
                    } else {
                        this._removeDatePickerWrongFormat();
                        bbdesigner$(this.target).addClass("e-popup-focus");
                    }
                    this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": true });
                }
            } else if (target.hasClass("e-input-mini")) {
                var isWrongFormat = true;
                if (target.attr("name") === "daterangepicker_start") {
                    start = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(val) : BoldBIDashboard.globalize.parseDate(val, this.model.locale.displayFormat, this.model.locale.culture) || (!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) ? this.selectedStartDate.date : null);
                    var endInput = this.container.find("input[name=daterangepicker_end]");
                    var endValue = endInput.val();
                    end = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(endValue) : BoldBIDashboard.globalize.parseDate(endValue, this.model.locale.displayFormat, this.model.locale.culture) || (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) ? this.selectedEndDate.date : null);
                    if (BoldBIDashboard.isNullOrUndefined(start) || (this.model.limitDate && (+this.startDate > +start || +this.endDate < start)) || (!BoldBIDashboard.isNullOrUndefined(end) && +end < +start)) {
                        this.selectedStartDateValue = val;
                        this._removeStartDateFocus();
                        this.container.find("input[name=daterangepicker_start]").addClass("e-wrong-format");
                        this.container.find(".e-fromspan").addClass("e-wrong-format");
                        this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": true });
                    } else {
                        year = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('y') === minusOne ? this.startDate.getFullYear() : start.getFullYear() : start.getFullYear();
                        month = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('M') === minusOne ? this.startDate.getMonth() : start.getMonth() : start.getMonth();
                        day = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('d') === minusOne ? this.startDate.getDate() : start.getDate() : start.getDate();
                        start = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? new Date(year, month, day) : start;
                        if (!BoldBIDashboard.isNullOrUndefined(start)) {
                            this.leftCalenderDate = this._setCalendarDate(new Date(start.getTime()));
                            this.selectedStartDate = { date: new Date(start.getTime()) };
                            this._updateCalendar("left");
                            this._removeStartDateWrongFormat();
                            this._removeStartDateFocus();
                            if (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) && !(BoldBIDashboard.isNullOrUndefined(end) ||
                                (this.model.limitDate && (+this.endDate < +end || +this.startDate > +end)) || (!BoldBIDashboard.isNullOrUndefined(start) && +end < +start))) {
                                isWrongFormat = false;
                                this.selectedEndDate = { date: new Date(end.getTime()) };
                                this.rightCalenderDate = this._setCalendarDate(new Date(end.getTime()));
                                this._updateCalendar("right");
                                this._removeEndDateWrongFormat();
                                this._removeEndDateFocus();
                                this._toggleCustomRangeSelection();
                            }
                            this.selectedStartDateValue = null;
                        }
                        if (evt.keyCode === divideBy13) {
                            if (!isWrongFormat) {
                                this._updateInputs(target.hasClass("e-input-main"));
                            }
                            if (!this.container.find("input[name=daterangepicker_end]").hasClass("e-wrong-format")) {
                                this.container.find(".e-tospan").addClass("e-focus");
                            }
                            this.container.find("input[name=daterangepicker_end]").focus();
                        }
                    }
                } else {
                    end = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(val) : BoldBIDashboard.globalize.parseDate(val, this.model.locale.displayFormat, this.model.locale.culture) || (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) ? this.selectedEndDate.date : null);
                    var startInput = this.container.find("input[name=daterangepicker_start]");
                    var startValue = startInput.val();
                    start = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(startValue) : BoldBIDashboard.globalize.parseDate(startValue, this.model.locale.displayFormat, this.model.locale.culture) || (!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) ? this.selectedStartDate.date : null);
                    if (BoldBIDashboard.isNullOrUndefined(end) || (this.model.limitDate && (+this.endDate < +end || +this.startDate > +end)) || (!BoldBIDashboard.isNullOrUndefined(start) && +end < +start)) {
                        this.selectedEndDateValue = val;
                        this._removeEndDateFocus();
                        this.container.find("input[name=daterangepicker_end]").addClass("e-wrong-format");
                        this.container.find(".e-tospan").addClass("e-wrong-format");
                        this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": true });
                    } else {
                        year = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('y') === minusOne ? this.endDate.getFullYear() : end.getFullYear() : end.getFullYear();
                        month = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('M') === minusOne ? this.endDate.getMonth() : end.getMonth() : end.getMonth();
                        day = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this.model.locale.displayFormat.indexOf('d') === minusOne ? this.endDate.getDate() : end.getDate() : end.getDate();
                        end = !BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? new Date(year, month, day) : end;
                        if (!BoldBIDashboard.isNullOrUndefined(end)) {
                            this.selectedEndDate = { date: new Date(end.getTime()) };
                            this.rightCalenderDate = this._setCalendarDate(new Date(end.getTime()));
                            this._updateCalendar("right");
                            this._removeEndDateWrongFormat();
                            this._removeEndDateFocus();
                            if (!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) && !(BoldBIDashboard.isNullOrUndefined(start) ||
                                (this.model.limitDate && (+this.startDate > +start || +this.endDate < start)) || (!BoldBIDashboard.isNullOrUndefined(end) && +end < +start))) {
                                isWrongFormat = false;
                                this.leftCalenderDate = this._setCalendarDate(new Date(start.getTime()));
                                this.selectedStartDate = { date: new Date(start.getTime()) };
                                this._updateCalendar("left");
                                this._removeStartDateWrongFormat();
                                this._removeStartDateFocus();
                                this._toggleCustomRangeSelection();
                            }
                            this.selectedEndDateValue = null;
                        }
                        if (evt.keyCode === divideBy13) {
                            if (!isWrongFormat) {
                                this._updateInputs(target.hasClass("e-input-main"));
                            }
                            if (!BoldBIDashboard.isNullOrUndefined(this.container.find(".e-dashboarddatepicker-apply-btn").attr('disabled'))) {
                                this.container.find(".e-dashboarddatepicker-cancel-btn").focus();
                            } else {
                                this.container.find(".e-dashboarddatepicker-apply-btn").focus();
                            }
                        }
                    }
                }
            }
            if (this.container && !this.isOpen) {
                this._removeDatePickerFocus();
            }
        },
        _isWithinDateRange: function (date) {
            return !this.isNullOrUndefinedOrEmpty(date) && date >= !this.model.limitDate ? this.minDate : this.startDate && date <= !this.model.limitDate ? this.maxDate : this.endDate;
        },
        _parseDate: function (dateString) {
            return BoldBIDashboard.globalize.parseDate(dateString, this.format, this.model.locale.culture);
        },
        _getDateString: function (date) {
            this._setCulture(this.model.locale.culture);

            return BoldBIDashboard.globalize.format(date, this.format, this.model.locale.culture);
        },
        _updateInputs: function (updateMain) {
            var two = 2;
            if (this.model.datePickerType === "range") {
                var mainText = [],
                    startDateString = "",
                    endDateString = null,
                    start = this.selectedStartDate,
                    end = this.selectedEndDate;
                if (!BoldBIDashboard.isNullOrUndefined(start)) {
                    startDateString = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._getDateString(start.date) : BoldBIDashboard.globalize.format(start.date, this.model.locale.displayFormat, this.model.locale.culture);
                    mainText.push(startDateString);
                    this.container.find("input[name=daterangepicker_start]").val(!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) ? startDateString : this.isNullOrUndefinedOrEmpty(startDateString) ? "" : startDateString);
                }
                if (!BoldBIDashboard.isNullOrUndefined(end)) {
                    endDateString = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._getDateString(end.date) : BoldBIDashboard.globalize.format(end.date, this.model.locale.displayFormat, this.model.locale.culture);
                    mainText.push(endDateString);
                    if (BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) && this.isNullOrUndefinedOrEmpty(endDateString)) {
                        endDateString = startDateString;
                    }
                    this.container.find("input[name=daterangepicker_end]").val(!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) ? endDateString : this.isNullOrUndefinedOrEmpty(endDateString) ? "" : endDateString);
                }
                if (mainText.length === two && (!this.isOpen || updateMain)) {
                    this.element.val(mainText.join(" " + this.seperator + " "));
                }
                if (BoldBIDashboard.isNullOrUndefined(start) && BoldBIDashboard.isNullOrUndefined(end)) {
                    this.container.find("input[name=daterangepicker_start]").val("");
                    this.container.find("input[name=daterangepicker_start]").attr("placeholder", this.model.watermarkText);
                    this.container.find("input[name=daterangepicker_end]").val("");
                    this.container.find("input[name=daterangepicker_end]").attr("placeholder", this.model.watermarkText);
                    this.element.val("");
                    bbdesigner$(this.element).attr("placeholder", this.model.watermarkText);
                }
            } else if (!BoldBIDashboard.isNullOrUndefined(this.prevDate)) {
                var dateString = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._getDateString(this.prevDate) : BoldBIDashboard.globalize.format(this.prevDate, this.model.locale.displayFormat, this.model.locale.culture);
                this.element.val(dateString);
            } else if (this.model.datePickerType !== "range" && !BoldBIDashboard.isNullOrUndefined(this.model.showLatestDate) && this.model.showLatestDate) {
                if (!BoldBIDashboard.isNullOrUndefined(this.endDate)) {
                    this.singleCalenderDate = this._setCalendarDate(this.endDate);
                } else {
                    this.singleCalenderDate = this._setCalendarDate(this.startDate);
                }
                this._updateCalendar("single");
                this.element.val("");
            } else {
                this.element.val("");
                this._setWaterMarkText();
            }
        },
        _addLocalizedLabelText: function () {
            if (!BoldBIDashboard.isNullOrUndefined(this.model.locale)) {
                this.container.find(".e-fromspan").html(!BoldBIDashboard.isNullOrUndefined(this.model.locale.fromLabel) ? this.model.locale.fromLabel : this.defaults.locale.fromLabel);
                this.container.find(".e-tospan").html(!BoldBIDashboard.isNullOrUndefined(this.model.locale.toLabel) ? this.model.locale.toLabel : this.defaults.locale.toLabel);
                this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").html(!BoldBIDashboard.isNullOrUndefined(this.model.locale.applyLabel) ? this.model.locale.applyLabel : this.defaults.locale.applyLabel);
                this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-cancel-btn").html(!BoldBIDashboard.isNullOrUndefined(this.model.locale.cancelLabel) ? this.model.locale.cancelLabel : this.defaults.locale.cancelLabel);
            } else {
                this.container.find(".e-fromspan").html(this.defaults.locale.fromLabel);
                this.container.find(".e-tospan").html(this.defaults.locale.toLabel);
                this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").html(this.defaults.locale.applyLabel);
                this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-cancel-btn").html(this.defaults.locale.cancelLabel);
            }

        },
        _renderRanges: function () {
            var zero = 0,
                two = 2;
            if (this.model.datePickerType !== BoldBIDashboard.DashboardDatePicker.Type.Range || BoldBIDashboard.isNullOrUndefined(this.model.ranges) || Object.keys(this.model.ranges).length === zero) {
                this.container.find(".e-dashboarddatepicker-content .e-dashboarddatepicker-ranges").hide();

                return;
            }
            var ranges = "<div style='height:104px;width:100%;'><ul>";
            for (var range in this.model.ranges) {
                if ({}.hasOwnProperty.call(this.model.ranges, range)) {
                    var value = this.model.ranges[range];
                    if (Array.isArray(value) && value.length === two) {
                        var start = this._parseDate(value[0]);
                        var end = this._parseDate(value[1]);
                        if (BoldBIDashboard.isNullOrUndefined(start)) {
                            start = new Date(value[0]);
                        }
                        if (BoldBIDashboard.isNullOrUndefined(end)) {
                            end = new Date(value[1]);
                        }
                        if (!isNaN(start) && !isNaN(end) && start <= end) {
                            ranges += "<li aria-selected='false' e-data-range='" + JSON.stringify(value) + "' e-data-value='" + range + "'>" + range + "</li>";
                        }
                    }
                }
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.model.locale) && this.model.locale.customRangeLabel && this.model.showCustomDatePicker) {
                ranges += "<li aria-selected='false' e-data-range='customPicker'>" + this.model.locale.customRangeLabel + "</li>";
            }
            ranges += "</ul></div>";
            this.container.find(".e-dashboarddatepicker-ranges").append(ranges);
            this._hideDatePicker();
        },
        validateMonthNavigation: function (lowerDate, higherDate) {
            return (lowerDate.getFullYear() === higherDate.getFullYear() && lowerDate.getMonth() < higherDate.getMonth()) || (lowerDate.getFullYear() < higherDate.getFullYear());
        },
        // Private Event handlers
        _updateCalendar: function (type) {
            var calendar = type === "left" ? this.container.find(".e-dashboarddatepicker-calendar.left-calendar") : type === "right" ? this.container.find(".e-dashboarddatepicker-calendar.right-calendar") : type === "single" ? this.container.find(".e-dashboarddatepicker-calendar.single-calendar") : null;
            if (calendar === null) {
                return;
            }
            switch (type) {
                case "left":
                    this._updateCalenderDates(calendar, this.leftCalenderDate, this.monthNames[this.leftCalenderDate.getMonth()] + " " + this.seperator + " " + this.leftCalenderDate.getFullYear());
                    break;
                case "right":

                    /* while (this.rightCalenderDate <= this.leftCalenderDate) {
                        this.rightCalenderDate.setMonth(this.rightCalenderDate.getMonth() + one);
                    } */
                    this._updateCalenderDates(calendar, this.rightCalenderDate, this.monthNames[this.rightCalenderDate.getMonth()] + " " + this.seperator + " " + this.rightCalenderDate.getFullYear());
                    break;
                case "single":
                    this._updateCalenderDates(calendar, this.singleCalenderDate, this.monthNames[this.singleCalenderDate.getMonth()] + " " + this.seperator + " " + this.singleCalenderDate.getFullYear());
                    break;
                default:
                    break;
            }
        },
        _clickNext: function (evt) {
            var one = 1;
            if (bbdesigner$(evt.currentTarget).hasClass("e-arrow-diabled")) {
                return;
            }
            var selectedCalender = bbdesigner$(evt.currentTarget).closest(".e-dashboarddatepicker-calendar");
            if (selectedCalender.hasClass("single-calendar") && this.validateMonthNavigation(this.singleCalenderDate, !this.model.limitDate ? this.maxDate : this.endDate)) {
                this.singleCalenderDate = this._setCalendarDate(this.singleCalenderDate);
                this.singleCalenderDate.setMonth(this.singleCalenderDate.getMonth() + one);
                this._updateCalendar("single");
            } else if (selectedCalender.hasClass("left-calendar")) {
                this.leftCalenderDate = this._setCalendarDate(this.leftCalenderDate);
                this.leftCalenderDate.setMonth(this.leftCalenderDate.getMonth() + one);
                this._updateCalendar("left");
            } else {
                this.rightCalenderDate = this._setCalendarDate(this.rightCalenderDate);
                if (this.validateMonthNavigation(this.rightCalenderDate, !this.model.limitDate ? this.maxDate : this.endDate)) {
                    this.rightCalenderDate.setMonth(this.rightCalenderDate.getMonth() + one);
                    this._updateCalendar("right");
                }
            }
        },
        _clickPrev: function (evt) {
            var one = 1;
            if (bbdesigner$(evt.currentTarget).hasClass("e-arrow-diabled")) {
                return;
            }
            var selectedCalender = bbdesigner$(evt.currentTarget).closest(".e-dashboarddatepicker-calendar");
            if (selectedCalender.hasClass("single-calendar") && this.validateMonthNavigation(!this.model.limitDate ? this.minDate : this.startDate, this.singleCalenderDate)) {
                this.singleCalenderDate = this._setCalendarDate(this.singleCalenderDate);
                this.singleCalenderDate.setMonth(this.singleCalenderDate.getMonth() - one);
                this._updateCalendar("single");
            } else if (selectedCalender.hasClass("left-calendar")) {
                this.leftCalenderDate = this._setCalendarDate(this.leftCalenderDate);
                this.leftCalenderDate.setMonth(this.leftCalenderDate.getMonth() - one);
                this._updateCalendar("left");
            } else {
                this.rightCalenderDate = this._setCalendarDate(this.rightCalenderDate);
                if (this.validateMonthNavigation(this.leftCalenderDate, this.rightCalenderDate)) {
                    this.rightCalenderDate.setMonth(this.rightCalenderDate.getMonth() - one);
                    this._updateCalendar("right");
                }
            }
        },
        _updateCalenderArrow: function () {
            var one = 1;
            if (this.model.datePickerType === BoldBIDashboard.DashboardDatePicker.Type.Single) {
                this.validateArrow(!this.model.limitDate ? this.minDate : this.startDate, this.singleCalenderDate, bbdesigner$(this.container).find(".single-calendar .e-prev-month"));
                this.validateArrow(this.singleCalenderDate, !this.model.limitDate ? this.maxDate : this.endDate, bbdesigner$(this.container).find(".single-calendar .e-next-month"));
            } else {
                this.validateArrow(!this.model.limitDate ? this.minDate : this.startDate, this.leftCalenderDate, bbdesigner$(this.container).find(".left-calendar .e-prev-month"));
                this.validateArrow(this.leftCalenderDate, !this.model.limitDate ? this.maxDate : this.endDate, bbdesigner$(this.container).find(".left-calendar .e-next-month"));
                var temp = new Date(this.rightCalenderDate.getTime());
                temp.setMonth(temp.getMonth());

                this.validateArrow(this.leftCalenderDate, temp, bbdesigner$(this.container).find(".left-calendar .e-next-month"));
                this.validateArrow(this.leftCalenderDate, temp, bbdesigner$(this.container).find(".right-calendar .e-prev-month"));
                this.validateArrow(this.rightCalenderDate, !this.model.limitDate ? this.maxDate : this.endDate, bbdesigner$(this.container).find(".right-calendar .e-next-month"));
            }
        },
        validateArrow: function (lowerDate, higherDate, arrow) {
            if (this.validateMonthNavigation(lowerDate, higherDate) || !this.model.limitDate) {
                bbdesigner$(arrow).addClass("e-arrow-enabled").
                    removeClass("e-arrow-diabled");
            } else {
                bbdesigner$(arrow).addClass("e-arrow-diabled").
                    removeClass("e-arrow-enabled");
            }
        },
        _setCalendarDate: function (date) {
            var one = 1;
            var year = date.getFullYear(), // eslint-disable-line newline-after-var
                month = date.getMonth(); // eslint-disable-line newline-after-var

            return new Date(year, month, one);
        },
        _updateCalenderDates: function (selectedCalender, date, header) {
            selectedCalender.find("tbody").remove();
            selectedCalender.find("table").append(this._renderCalenderDays(date));
            selectedCalender.find(".e-current-month").html(header);
            if (this.model.datePickerType === "range") {
                if (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) {
                    this._highlightDate(this.selectedEndDate.date, this.selectedEndDate.element, true);
                }
            }
            this._selectDate();
            this._updateCalenderArrow();
        },
        _clearRangeSelection: function () {
            this.container.find(".e-dashboarddatepicker-ranges ul li.selected").each(function (index, el) {
                bbdesigner$(el).removeClass("selected").
                    attr({ "aria-selected": "false" });
            });
        },
        _toggleCustomRangeSelection: function () {
            if ((BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) || BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) && BoldBIDashboard.isNullOrUndefined(this.selectedRange)) {
                this._clearRangeSelection();
                this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").prop({ "disabled": true });
            } else {
                this._clearRangeSelection();
                if (this.model.fixedCalendarSelection) {
                    var validRange = this.selectedStartDate.date <= this.selectedEndDate.date;
                    this.container.find(".date-range-alert-message").css("display", validRange ? "none" : "block");
                    this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": !validRange });
                    if (validRange) {
                        this.container.find(".e-dashboarddatepicker-ranges ul li[e-data-range='customPicker']").addClass("selected").
                            attr({ "aria-selected": "false" });
                    }
                } else {
                    if ((BoldBIDashboard.isNullOrUndefined(this.oldSelectedStartDate) && BoldBIDashboard.isNullOrUndefined(this.oldSelectedEndDate)) || (+this.selectedStartDate.date !== +this.oldSelectedStartDate.date || +this.selectedEndDate.date !== +this.oldSelectedEndDate.date)) {
                        this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": false });
                    } else {
                        this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": true });
                    }
                    this.container.find(".e-dashboarddatepicker-ranges ul li[e-data-range='customPicker']").addClass("selected").attr({ "aria-selected": "false" });
                }
            }
        },
        _rangeClicked: function (evt) {
            var two = 2;
            var target = bbdesigner$(evt.currentTarget);
            var data = target.attr("e-data-range");
            if (!this.isNullOrUndefinedOrEmpty(this.tooltipTimer)) {
                clearTimeout(this.tooltipTimer);
            }
            if (BoldBIDashboard.isNullOrUndefined(data)) {
                return;
            }
            if (data === "customPicker" && this.model.showCustomDatePicker) {
                this._showDatePicker();
                if (this.selectedRange === null) {
                    this._clearRangeSelection();
                    target.addClass("selected").attr({ "aria-selected": "true" });
                }

                return;
            }
            var range = bbdesigner$.parseJSON(data),
                start = null,
                end = null;
            if (range.length === two) {
                start = range[0];
                end = range[1];
                this._setStartDate(start);
                this._setEndDate(end);
                if (this.model.showCustomDatePicker) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) {
                        this._highlightDate(this.selectedEndDate.date, this.selectedEndDate.element, true);
                    }
                    this._selectDate();
                }
                this.selectedRange = target;
                this._clearRangeSelection();
                this.oldSelectedStartDate = { date: new Date(this.selectedStartDate.date.getTime()) };
                this.oldSelectedEndDate = { date: new Date(this.selectedEndDate.date.getTime()) };
                target.addClass("selected").attr({ "aria-selected": "true" });
            }
            this.leftCalenderDate = new Date(this.selectedStartDate.date.getTime());
            this.rightCalenderDate = new Date(this.selectedEndDate.date.getTime());
            if (this.model.showCustomDatePicker) {
                this._updateCalendar("left");
                this._updateCalendar("right");
                this._hideDatePicker();
            }
            this._updateInputs(true);
            this.hidePopup();
            if (!this.isNullOrUndefinedOrEmpty(this.model.selected) && start !== null && end !== null && !this.codeTriggeredEvent) {
                this._trigger("selected", { datePickerType: BoldBIDashboard.DashboardDatePicker.Type.Range, selectedRange: target.attr("e-data-value"), dateFormat: this.format, selectedValues: { start: start, end: end } });
            }
        },
        _setStartDate: function (value) {
            this.selectedStartDate = {};
            this.selectedStartDate.date = BoldBIDashboard.globalize.parseDate(value, this.format, this.model.locale.culture);
        },
        _setEndDate: function (value) {
            this.selectedEndDate = {};
            this.selectedEndDate.date = BoldBIDashboard.globalize.parseDate(value, this.format, this.model.locale.culture);
        },
        _setSelectedDate: function (item) {
            var dateString = item.attr("date");
            if (this.isNullOrUndefinedOrEmpty(dateString)) {
                return null;
            }
            var date = new Date(dateString);
            if (this._isWithinDateRange(date)) {

                return { element: item, date: date };
            }

            return null;
        },
        _isDateRangeValid: function (obj, item, endDate) {
            var dateString = item.attr("date");
            if (!this.isNullOrUndefinedOrEmpty(dateString)) {
                var date = new Date(dateString); // eslint-disable-line newline-after-var
                if (endDate) {
                    return date >= obj.date;
                } else {
                    return date <= obj.date;
                }
            }

            return false;
        },
        _updateDateRangeErrorMessage: function (valid) {
            if (!valid) {
                this.container.find(".date-range-alert-message").css('display', 'block');
                this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": true });
            } else {
                this.container.find(".date-range-alert-message").css('display', 'none')
                this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": false });
            }
        },
        _highlightDate: function (currentDate, selectedItem, isCalendarChange) {
            var zero = 0,
                one = 1;
            var that = this;
            var isValid = false;
            if (this.model.fixedCalendarSelection) {
                isValid = !BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) || !BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) || !BoldBIDashboard.isNullOrUndefined(isCalendarChange);
            } else {
                isValid = !BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) && (BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) || !BoldBIDashboard.isNullOrUndefined(isCalendarChange));
            }
            if (isValid) {
                this.container.find(".calendar-table td").each(function (index, el) {
                    var element = bbdesigner$(el);
                    if (element.hasClass("other-month")) {
                        return;
                    }
                    var dateString = element.attr("date");
                    if (BoldBIDashboard.isNullOrUndefined(dateString) || dateString === "") {
                        return;
                    }
                    var date = new Date(dateString);
                    if (that.model.fixedCalendarSelection) {
                        var endDate = !BoldBIDashboard.isNullOrUndefined(that.selectedEndDate) ? that.selectedEndDate.date : currentDate;
                        if ((!BoldBIDashboard.isNullOrUndefined(that.selectedStartDate) && date >= that.selectedStartDate.date && date <= endDate) ||
                            (!BoldBIDashboard.isNullOrUndefined(that.selectedStartDate) && BoldBIDashboard.isNullOrUndefined(that.selectedEndDate) && date < that.selectedStartDate.date && date >= currentDate)) {
                            element.addClass("in-range");
                        } else {
                            element.removeClass("in-range");
                        }
                        if (!BoldBIDashboard.isNullOrUndefined(that.selectedStartDate) && date.getTime() === that.selectedStartDate.date.getTime() && element.next().length !== zero && currentDate > that.selectedStartDate.date && new Date(new Date(that.selectedStartDate.date.getTime()).setDate(that.selectedStartDate.date.getDate() + one)).getTime() !== currentDate.getTime()) {
                            element.addClass("showrange");
                        } else {
                            element.removeClass("showrange");
                        }
                    } else {
                        if (date > that.selectedStartDate.date && date < currentDate) {
                            element.addClass("in-range");
                        } else {
                            element.removeClass("in-range");
                        }
                        if (date.getTime() === that.selectedStartDate.date.getTime() && element.next().length !== zero && currentDate > that.selectedStartDate.date && new Date(new Date(that.selectedStartDate.date.getTime()).setDate(that.selectedStartDate.date.getDate() + one)).getTime() !== currentDate.getTime()) {
                            element.addClass("showrange");
                        } else {
                            element.removeClass("showrange");
                        }
                    }
                });
            }
        },
        _selectDate: function () {
            this.container.find("td.selected").removeClass("selected").
                attr({ "aria-selected": false });
            var that = this;
            if (this.model.datePickerType === "range") {
                this.container.find(".calendar-table td").each(function (index, el) {
                    var element = bbdesigner$(el);
                    var dateString = element.attr("date");
                    if (element.hasClass("other-month") || that.isNullOrUndefinedOrEmpty(dateString)) {
                        return;
                    }
                    var date = new Date(dateString);
                    if (that.model.fixedCalendarSelection) {
                        if ((!BoldBIDashboard.isNullOrUndefined(that.selectedStartDate) && that.selectedStartDate.date.getTime() === date.getTime() && element.parents(".e-dashboarddatepicker-calendar").hasClass("left-calendar")) || (that.selectedEndDate !== null && that.selectedEndDate.date.getTime() === date.getTime() && element.parents(".e-dashboarddatepicker-calendar").hasClass("right-calendar")) || (!BoldBIDashboard.isNullOrUndefined(that.selectedDate) && that.selectedDate.date.getTime() === date.getTime())) {
                            element.addClass("selected").attr({ "aria-selected": true });
                        }
                    } else {
                        if ((!BoldBIDashboard.isNullOrUndefined(that.selectedStartDate) && that.selectedStartDate.date.getTime() === date.getTime()) || (that.selectedEndDate !== null && that.selectedEndDate.date.getTime() === date.getTime()) || (!BoldBIDashboard.isNullOrUndefined(that.selectedDate) && that.selectedDate.date.getTime() === date.getTime())) {
                            element.addClass("selected").attr({ "aria-selected": true });
                        }
                    }
                });
            } else {
                this.container.find(".calendar-table td").each(function (index, el) {
                    var element = bbdesigner$(el);
                    var dateString = element.attr("date");
                    if (element.hasClass("other-month") || that.isNullOrUndefinedOrEmpty(dateString)) {
                        return;
                    }
                    var date = new Date(dateString);
                    if (!BoldBIDashboard.isNullOrUndefined(that.selectedDate) && that.selectedDate.date.getTime() === date.getTime()) {
                        element.addClass("selected").attr({ "aria-selected": true });
                    }
                });
            }
        },
        _setCulture: function (cultureName) {
            BoldBIDashboard.preferredCulture(cultureName);
        },
        _onTableMouseOut: function () {
            var startInput = this.container.find("input[name=daterangepicker_start]");
            var startInputValue = startInput.val();
            var start = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(startInputValue) : BoldBIDashboard.globalize.parseDate(startInputValue, this.model.locale.displayFormat, this.model.locale.culture);
            var endInput = this.container.find("input[name=daterangepicker_end]");
            var endInputValue = endInput.val();
            var end = BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? this._parseDate(endInputValue) : BoldBIDashboard.globalize.parseDate(endInputValue, this.model.locale.displayFormat, this.model.locale.culture);
            this._setCulture(this.model.locale.culture);
            if (startInput.hasClass('e-wrong-format')) {
                startInput.val(startInput.hasClass('e-focus') ? startInputValue : this.selectedStartDateValue);
            } else if (startInput.hasClass('e-focus') && BoldBIDashboard.isNullOrUndefined(start)) {
                startInput.val(startInputValue);
            } else if (!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate)) {
                startInput.val(BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? BoldBIDashboard.globalize.format(this.selectedStartDate.date, this.format, this.model.locale.culture) : BoldBIDashboard.globalize.format(this.selectedStartDate.date, this.model.locale.displayFormat, this.model.locale.culture));
            } else if (!BoldBIDashboard.isNullOrUndefined(this.oldSelectedStartDate)) {
                startInput.val(BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? BoldBIDashboard.globalize.format(this.oldSelectedStartDate.date, this.format, this.model.locale.culture) : BoldBIDashboard.globalize.format(this.oldSelectedStartDate.date, this.model.locale.displayFormat, this.model.locale.culture));
            } else {
                startInput.val("");
            }
            
            if (endInput.hasClass('e-wrong-format')) {
                endInput.val(endInput.hasClass('e-focus') ? endInputValue : this.selectedEndDateValue);
            } else if (endInput.hasClass('e-focus') && BoldBIDashboard.isNullOrUndefined(end)) {
                endInput.val(endInputValue);
            } else if (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) {
                endInput.val(BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? BoldBIDashboard.globalize.format(this.selectedEndDate.date, this.format, this.model.locale.culture) : BoldBIDashboard.globalize.format(this.selectedEndDate.date, this.model.locale.displayFormat, this.model.locale.culture));
            } else if (!BoldBIDashboard.isNullOrUndefined(this.oldSelectedEndDate)) {
                endInput.val(BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? BoldBIDashboard.globalize.format(this.oldSelectedEndDate.date, this.format, this.model.locale.culture) : BoldBIDashboard.globalize.format(this.oldSelectedEndDate.date, this.model.locale.displayFormat, this.model.locale.culture));
            } else {
                endInput.val("");
            }
        },
        // Public Methods
        hidePopup: function (args) {
            if (this.container && this.isOpen) {
                if (args !== undefined && args !== null && args.type === "scroll") {
                    this.container.show();
                    this._makePopupPositionDecision();
                } else {
                    this.isOpen = false;
                    this.container.hide();
                    this._removeDatePickerWrongFormat();
                    this._removeDatePickerFocus();
                    if (this.model.datePickerType === "range") {
                        this._removeStartDateFocus();
                        this._removeStartDateWrongFormat();
                        this._removeEndDateFocus();
                        this._removeEndDateWrongFormat();
                        this.selectedStartDateValue = null;
                        this.selectedEndDateValue = null;
                    }
                    this._off(BoldBIDashboard.getScrollableParents(this.element), "scroll", this.hidePopup); 
                }
            }
        },
        toggle: function () {
            if (this.isOpen) {
                this.hidePopup();
                this._updateInputs(true);
            } else {
                this.showPopup();
                if (this.model.datePickerType === "range") {
                    this.container.find("input[name=daterangepicker_start]").focus();
                    this.container.find(".e-fromspan").addClass("e-focus");
                }
            }
        },
        _makePopupPositionDecision: function () {
            var zero = 0,
            ten = 10 * this.model.scalingFactor,
			five = 5 * this.model.scalingFactor,
			windowScrollTop = document.fullscreenElement !== null ? bbdesigner$(window).scrollTop() : 0;
            var bottomPositionHeight = window.innerHeight - (this.controlWrapper.offset().top + this.element.height() + this.container.height());
            var topPositionHeight = this.controlWrapper.offset().top - this.container.height();
            var left = this.controlWrapper.offset().left + (this.controlWrapper.width() * this.model.scalingFactor) - ((this.container.width() * this.model.scalingFactor) + five);
            if (left < zero) {
                left = this.controlWrapper.offset().left;
            }
            if (this.model.enableRTL) {
                left = this.controlWrapper.offset().left + five;
            }
            if (BoldBIDashboard.isMobile()) {
                this.container.css({ "top": this.controlWrapper.offset().top + this.element.height() + five, "left": this.controlWrapper.offset().left });

                return;
            }
            if (bottomPositionHeight > zero && bottomPositionHeight > topPositionHeight) {
				this.container.css({ "top": this.controlWrapper.offset().top + (this.element.height() * this.model.scalingFactor) + five - windowScrollTop, "left": left });
            } else if (this.container.outerHeight() > this.controlWrapper.offset().top) {
                if (bottomPositionHeight < zero) {
                    left = this.controlWrapper.offset().left + (this.controlWrapper.width() * this.model.scalingFactor) - ((this.container.width() * this.model.scalingFactor) + five);
                    if (left < zero) {
                        left = this.controlWrapper.offset().left + (this.controlWrapper.width() * this.model.scalingFactor) + five;
                    }
                    this.container.css({ "top": this.controlWrapper.offset().top + (this.element.height() * this.model.scalingFactor) + five + (bottomPositionHeight < zero ? (bottomPositionHeight - ten) : zero) - windowScrollTop, "left": left }); // eslint-disable-line no-extra-parens
                    if ((this.controlWrapper.offset().top + (this.element.height() * this.model.scalingFactor) + five + (bottomPositionHeight < zero ? (bottomPositionHeight - ten) : zero)) < zero) { // eslint-disable-line no-extra-parens , no-self-compare
                            this.container.css({ "top": ten, "left": this.controlWrapper.offset().left });
                    }
                } else {
                    this.container.css({ "top": this.controlWrapper.offset().top - this.container.outerHeight() - five - windowScrollTop, "left": left });
                }
                this.container.css({ "top": this.controlWrapper.offset().top + (this.element.height() * this.model.scalingFactor) + five + (bottomPositionHeight < zero ? (bottomPositionHeight - ten) : zero) - windowScrollTop, "left": left }); // eslint-disable-line no-extra-parens
                if ((this.controlWrapper.offset().top + (this.element.height() * this.model.scalingFactor) + five + (bottomPositionHeight < zero ? (bottomPositionHeight - ten) : zero)) < zero) { // eslint-disable-line no-extra-parens , no-self-compare
                    this.container.css({ "top": ten, "left": this.controlWrapper.offset().left });
                }
            } else {
                this.container.css({ "top": this.controlWrapper.offset().top - this.container.outerHeight() - five - windowScrollTop, "left": left });
            }
        },
        showPopup: function () {
            var divideBy313 = 313,
                zero = 0,
                five = 5,
                ten = 10;
            if (this.container && !this.isOpen) {
                this.container.width('auto');
                this.container[zero].style.border = 'none';
                this._trigger("popupShow", this);
                this.container.show();
                bbdesigner$(this.target).addClass("e-popup-focus");
                this.isOpen = true;
                if (this.model.datePickerType === "range") {
                    this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": true });
                    var rangeDiv = this.container.find(".e-dashboarddatepicker-content .e-dashboarddatepicker-ranges");
                    var height = this.container.find(".e-dashboarddatepicker-content .e-dashboarddatepicker-ranges ul").height() + ten;
                    var bottomPositionHeight = window.innerHeight - (this.controlWrapper.offset().top + this.element.height() + this.container.height());
                    if (bottomPositionHeight < zero && Math.abs(bottomPositionHeight) > window.innerHeight && height > rangeDiv.height()) {
                        this.container.css({ "top": this.controlWrapper.offset().top - this.container.outerHeight() - (height - rangeDiv.height()) - five });
                    }
                    if (height > divideBy313) {
                        height = divideBy313;
                    }
                    if (BoldBIDashboard.isNullOrUndefined(rangeDiv.data("BoldBIDashboardScroller"))) {
                        rangeDiv.BoldBIDashboardScroller({
                            height: height
                        });
                    }
                }
                this._makePopupPositionDecision();
                this._on(BoldBIDashboard.getScrollableParents(this.element), "scroll", this.hidePopup);
            } else {
                if (this.model.datePickerType === "range") {
                    this._removeStartDateFocus();
                    this._removeEndDateFocus();
                }
            }
        },
        hoverRange: function (evt) {
            var selectedItem = bbdesigner$(evt.currentTarget);
            var dateString = selectedItem.attr("date");
            if (BoldBIDashboard.isNullOrUndefined(dateString) || dateString === "") {
                return;
            }
            var inputBox = null;

            if (this.model.fixedCalendarSelection) {
                if ((this.selectedStartDate === null || (this.selectedStartDate !== null && this.selectedEndDate !== null)) && selectedItem.parents(".e-dashboarddatepicker-calendar").hasClass("left-calendar")) {
                    inputBox = this.container.find("input[name=daterangepicker_start]");
                } else if (selectedItem.parents(".e-dashboarddatepicker-calendar").hasClass("right-calendar")) {
                    inputBox = this.container.find("input[name=daterangepicker_end]");
                }
            } else {
                if (this.selectedStartDate === null || (this.selectedStartDate !== null && this.selectedEndDate !== null)) {
                    inputBox = this.container.find("input[name=daterangepicker_start]");
                } else {
                    inputBox = this.container.find("input[name=daterangepicker_end]");
                }
            }
            var currentDate = new Date(dateString);
            if (this.model.limitDate && (currentDate < this.startDate || currentDate > this.endDate)) {
                return;
            }
            this._setCulture(this.model.locale.culture);
            if (!BoldBIDashboard.isNullOrUndefined(inputBox) && !this.container.find("input[name=daterangepicker_start]").is(":focus") && !this.container.find("input[name=daterangepicker_end]").is(":focus")) {
                inputBox.val(BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? BoldBIDashboard.globalize.format(currentDate, this.format, this.model.locale.culture) : BoldBIDashboard.globalize.format(currentDate, this.model.locale.displayFormat, this.model.locale.culture));
            }
            this._highlightDate(currentDate, selectedItem);
        },
        dateClicked: function (evt) {
            var one = 1;
            var selectedItem = bbdesigner$(evt.currentTarget);
            if (this.model.defaultDate !== BoldBIDashboard.DashboardDatePicker.DefaultDate.None && this.model.dashboardMode === 'design') {
                this.hidePopup();
                return;
            }
            if (this.model.datePickerType === BoldBIDashboard.DashboardDatePicker.Type.Single) {
                this.selectedDate = this._setSelectedDate(selectedItem);
                if (this.selectedDate === null || this.selectedDate.date < (!this.model.limitDate ? this.minDate : this.startDate) || this.selectedDate.date > (!this.model.limitDate ? this.maxDate : this.endDate)) {
                    return;
                }
                this._selectDate();
                this._setCulture(this.model.locale.culture);
                var parsedDate = BoldBIDashboard.globalize.format(this.selectedDate.date, this.format, this.model.locale.culture);
                this.element.val(!BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? BoldBIDashboard.globalize.format(this.selectedDate.date, this.model.locale.displayFormat, this.model.locale.culture) : parsedDate);
                bbdesigner$(this.target).blur();
                this.hidePopup();
                this.prevDate = this.selectedDate.date;
                if (!this.isNullOrUndefinedOrEmpty(this.model.selected) && !this.isNullOrUndefinedOrEmpty(parsedDate) && !this.codeTriggeredEvent) {
                    this._trigger("selected", { datePickerType: BoldBIDashboard.DashboardDatePicker.Type.Single, dateFormat: this.format, value: parsedDate });
                }
            } else {
                var dateString = selectedItem.attr("date");
                if (BoldBIDashboard.isNullOrUndefined(dateString) || dateString === "") {
                    return;
                }
                var currentDate = new Date(dateString);
                if (currentDate < (!this.model.limitDate ? this.minDate : this.startDate) || currentDate > (!this.model.limitDate ? this.maxDate : this.endDate)) {
                    return;
                }
                if (this.model.fixedCalendarSelection) {
                    if (selectedItem.parents(".e-dashboarddatepicker-calendar").hasClass("left-calendar")) {
                        if ((!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate) && this.selectedEndDate.date < currentDate) && this._isDateRangeValid(this.selectedEndDate, selectedItem, true)) {
                            this._updateDateRangeErrorMessage(false);
                        } else {
                            this._updateDateRangeErrorMessage(true);
                        }
                        this.selectedStartDate = this._setSelectedDate(selectedItem);
                    } else if (selectedItem.parents(".e-dashboarddatepicker-calendar").hasClass("right-calendar")) {
                        if ((!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) && this.selectedStartDate.date > currentDate) && this._isDateRangeValid(this.selectedStartDate, selectedItem, false)) {
                            this._updateDateRangeErrorMessage(false);
                        } else {
                            this._updateDateRangeErrorMessage(true);
                        }
                        this.selectedEndDate = this._setSelectedDate(selectedItem);
                    }
                } else {
                    if (this.selectedStartDate === null || !this._isDateRangeValid(this.selectedStartDate, selectedItem, true)) {
                        this.selectedStartDate = this._setSelectedDate(selectedItem);
                        this.selectedEndDate = null;
                    } else if (this.selectedStartDate !== null && this.selectedEndDate !== null) {
                        this.selectedStartDate = this._setSelectedDate(selectedItem);
                        this.selectedEndDate = null;
                    } else {
                        this.selectedEndDate = this._setSelectedDate(selectedItem);
                    }
                }
                if (this.selectedStartDate !== null) {
                    this._highlightDate(this.selectedStartDate.date, selectedItem);
                }
                if (selectedItem.hasClass("other-month")) {
                    if (this.selectedEndDate === null) {
                        this.leftCalenderDate = new Date(this.selectedStartDate.date.getTime());
                        this._updateCalendar("left");
                        if (selectedItem.parents(".e-dashboarddatepicker-calendar").hasClass("right-calendar")) {
                            this.rightCalenderDate = new Date(this.selectedStartDate.date);
                            this.rightCalenderDate.setMonth(this.selectedStartDate.date.getMonth() + one);
                            this._updateCalendar("right");
                        }
                    } else {
                        this.rightCalenderDate = new Date(this.selectedEndDate.date.getTime());
                        this._updateCalendar("right");
                    }
                }
                this._selectDate();
                if (this.selectedStartDate !== null && this.selectedEndDate === null) {
                    this._removeStartDateFocus();
                    this._removeStartDateWrongFormat();
                    this.selectedStartDateValue = null;
                } else if (this.selectedStartDate !== null && this.selectedEndDate !== null) {
                    this._removeEndDateFocus();
                    this._removeEndDateWrongFormat();
                    this.selectedEndDateValue = null;
                }
                if (!BoldBIDashboard.isNullOrUndefined(this.selectedRange)) {
                    this.prevSelectedRange = this.selectedRange.clone();
                    this.selectedRange = null;
                }
                this._toggleCustomRangeSelection();
                this._updateInputs(false);
            }
        },

        cancelClick: function () {
            this.container.find(".in-range").removeClass("in-range");
            this.selectedStartDate = this.oldSelectedStartDate;
            this.selectedEndDate = this.oldSelectedEndDate;
            if (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) {
                this.leftCalenderDate = this.selectedStartDate.date;
                this._updateCalendar("left");
                this._highlightDate(this.selectedEndDate.date, this.selectedEndDate.element, true);
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) {
                this.rightCalenderDate = this.selectedEndDate.date;
                this._updateCalendar("right");
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.prevSelectedRange)) {
                this._clearRangeSelection();
                this.selectedRange = this.prevSelectedRange.clone();
                this.prevSelectedRange = null;
                this.container.find(".e-dashboarddatepicker-ranges ul li[e-data-value='" + this.selectedRange.attr("e-data-value") + "']").addClass("selected").
                    attr({ "aria-selected": "true" });
            }
            this.container.find(".date-range-alert-message").css("display", "none");
            this.container.find(".e-dashboarddatepicker-footer .e-dashboarddatepicker-apply-btn").attr({ "disabled": false });
            if (BoldBIDashboard.isNullOrUndefined(this.selectedStartDate) || BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) {
                this.leftCalenderDate = new Date(this.startDate);
                this.rightCalenderDate = new Date(this.endDate);
                this._updateCalendar("left");
                this._updateCalendar("right");
            }
            this._selectDate();
            bbdesigner$(this.target).blur();
            this.hidePopup();
            this._updateInputs(true);
        },
        applyClick: function () {
            this.oldSelectedStartDate = this.selectedStartDate;
            this.oldSelectedEndDate = this.selectedEndDate;
            var startDate = null,
                endDate = null;
            this._setCulture(this.model.locale.culture);
            if (!BoldBIDashboard.isNullOrUndefined(this.selectedStartDate)) {
                endDate = startDate = BoldBIDashboard.globalize.format(this.selectedStartDate.date, this.format, this.model.locale.culture);
                if (!BoldBIDashboard.isNullOrUndefined(this.selectedEndDate)) {
                    endDate = BoldBIDashboard.globalize.format(this.selectedEndDate.date, this.format, this.model.locale.culture);
                }
                this.element.val((BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? startDate : BoldBIDashboard.globalize.format(this.selectedStartDate.date, this.model.locale.displayFormat, this.model.locale.culture)) + " " + this.seperator + " " + (BoldBIDashboard.isNullOrUndefined(this.model.locale.displayFormat) ? endDate : BoldBIDashboard.globalize.format(this.selectedEndDate.date, this.model.locale.displayFormat, this.model.locale.culture)));
            }
            this.hidePopup();
            if (!this.isNullOrUndefinedOrEmpty(this.model.selected) && startDate !== null && endDate !== null && !this.codeTriggeredEvent) {
                this._trigger("selected", { datePickerType: BoldBIDashboard.DashboardDatePicker.Type.Range, dateFormat: this.format, selectedValues: { start: startDate, end: endDate } });
            }
        },
        redraw: function () {
            this._unwireEvents();
            this._initPrivateProperties();
            this.container.remove();
            this._setWaterMarkText();
            this._initializeContainers();
            this._createDatePickerDropDown();
            this._unwireEvents();
            this._wireEvents();
            this._addLocalizedLabelText();
            this._selectInitialValue();
            this._updateInputs(true);
            this._removeDatePickerFocus();
        },
        _removeDatePickerFocus: function() {
            if(bbdesigner$(this.target).hasClass("e-popup-focus"))
            {
                bbdesigner$(this.target).removeClass("e-popup-focus");
            }
        },
        _removeDatePickerWrongFormat: function () {
            if(bbdesigner$(this.target).hasClass("e-wrong-format"))
            {
                bbdesigner$(this.target).removeClass("e-wrong-format");
            }
        },
        _removeStartDateFocus: function () {
            if (this.container.find("input[name=daterangepicker_start]").hasClass("e-focus")) {
                this.container.find("input[name=daterangepicker_start]").removeClass("e-focus");
            }
            if (this.container.find(".e-fromspan").hasClass("e-focus")) {
                this.container.find(".e-fromspan").removeClass("e-focus");
            }
        },
        _removeEndDateFocus: function () {
            if (this.container.find("input[name=daterangepicker_end]").hasClass("e-focus")) {
                this.container.find("input[name=daterangepicker_end]").removeClass("e-focus");
            }
            if (this.container.find(".e-tospan").hasClass("e-focus")) {
                this.container.find(".e-tospan").removeClass("e-focus");
            }
        },
        _removeStartDateWrongFormat: function () {
            if (this.container.find("input[name=daterangepicker_start]").hasClass("e-wrong-format")) {
                this.container.find("input[name=daterangepicker_start]").removeClass("e-wrong-format");
            }
            if (this.container.find(".e-fromspan").hasClass("e-wrong-format")) {
                this.container.find(".e-fromspan").removeClass("e-wrong-format");
            }
        },
        _removeEndDateWrongFormat: function () {
            if (this.container.find("input[name=daterangepicker_end]").hasClass("e-wrong-format")) {
                this.container.find("input[name=daterangepicker_end]").removeClass("e-wrong-format");
            }
            if (this.container.find(".e-tospan").hasClass("e-wrong-format")) {
                this.container.find(".e-tospan").removeClass("e-wrong-format");
            }
        },
        _isWeekend: function (date) {
            var zero = 0,
            six = 6;
            return date.getDay() === zero || date.getDay() === six; // eslint-disable-line newline-before-return
        },
        _getDaysInMonth: function (date) {
            var divideBy31 = 31,
                divideBy29 = 29,
                divideBy30 = 30,
                divideBy28 = 28;
            return [divideBy31, this.isLeapYear(date) ? divideBy29 : divideBy28, divideBy31, divideBy30, divideBy31, divideBy30, divideBy31, divideBy31, divideBy30, divideBy31, divideBy30, divideBy31][date.getMonth()]; // eslint-disable-line newline-before-return
        },
        isLeapYear: function (year) {
            var four = 4,
                zero = 0,
                divideBy100 = 100,
                divideBy400 = 400;
            return (year % four === zero && year % divideBy100 !== zero) || year % divideBy400 === zero; // eslint-disable-line newline-before-return
        },
        _addDays: function (days, number) {
            days.setDate(days.getDate() + number);

            return days;
        },
        _formatter: function (date, format) {
            var newFormat = this._checkFormat(format);  // eslint-disable-line newline-after-var

            return BoldBIDashboard.globalize.parseDate(date, newFormat, this.model.locale.culture);
        },
        _checkFormat: function (format) {
            var that = this;
            var dateFormatRegExp = this._regExp(); // eslint-disable-line newline-after-var

            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? BoldBIDashboard.preferredCulture(that.model.locale.culture).calendars.standard['/'] !== "/" ? "'/'" : match : match; // eslint-disable-line  no-param-reassign

                return match;
            });
        },
        // Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
        _zeroTime: function (date) {
            var zero = 0;
            var newDate = typeof date === "string" ? this._parseDate(date) : new Date(date);
            newDate.setMilliseconds(zero);
            newDate.setSeconds(zero);
            newDate.setMinutes(zero);
            newDate.setHours(zero);

            return newDate;
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },
        _checkIE7: function () {
            var one = 1,
                seven = 7,
                eight = 8;
            if (navigator.appName === 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"),
                    version = -one;
                if (re.exec(navigator.userAgent) !== null) {
                    version = parseFloat(RegExp.$1);
                }
                if (version >= seven && version < eight) {
                    return true;
                }
            }

            return false;
        },
        // -------------------------------------------------------------------Key Navigation---------------------------------------------------------------
        _keyNavigate: function (evt) {
            var divideBy37 = 37,
                divideBy38 = 38,
                divideBy39 = 39,
                divideBy40 = 40;
            switch (evt.keyCode) {
                case divideBy37:
                    if (evt.ctrlKey) {
                        if (this.model.datePickerType === BoldBIDashboard.DashboardDatePicker.Type.Single) {
                            this.container.find(".e-dashboarddatepicker-calendar.single-calendar th.e-prev-month").click();
                        }
                    }
                    break;
                case divideBy38:
                    break;
                case divideBy39:
                    if (evt.ctrlKey) {
                        if (this.model.datePickerType === BoldBIDashboard.DashboardDatePicker.Type.Single) {
                            this.container.find(".e-dashboarddatepicker-calendar.single-calendar th.e-next-month").click();
                        }
                    }
                    break;
                case divideBy40:
                    break;
                default:
                    break;
            }
        }
    });
    BoldBIDashboard.DashboardDatePicker.Type = {
        Single: "single",
        Range: "range"
    };
    BoldBIDashboard.DashboardDatePicker.DefaultDate = {
        None: "none",
        Today: "today",
        Yesterday: "yesterday",
        Tomorrow: "tomorrow"
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;