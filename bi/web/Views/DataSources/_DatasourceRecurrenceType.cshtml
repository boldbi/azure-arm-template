@{
    Layout = null;
    var globalAppSettings = _globalAppSettings;
    var isEdit = ViewBag.ScheduleItem != null ? true : false;
    var itemName = ViewBag.ScheduleItem != null && !string.IsNullOrWhiteSpace(ViewBag.ScheduleItem.ItemName) ? ViewBag.ScheduleItem.ItemName : ViewBag.ItemName;
    var manageLicenseSettingsUrl = _globalAppSettings.SystemSettings.IDPUrl + "/" + ServerAppConfig.TenantManagementHostName + "/administration/license-settings";
    var isAdmin = Context.Session.GetString("IsAdmin") != null && Convert.ToBoolean(Context.Session.GetString("IsAdmin"));
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var isSelfHosted = ServerAppConfig.IsSelfHosted;
    var minimumTime = ViewBag.MinimumTime;
    var helpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.DatasourceRefreshScheduleFailure);
    var url = new Uri(Context.Request.GetDisplayUrl());
    var dns = url.GetLeftPart(UriPartial.Authority);
}
<!DOCTYPE html>
<html class="dashboard-server">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    @await Html.PartialAsync("~/Views/Shared/_ApplicationThemeStyleSheet.cshtml")
    @await Html.PartialAsync("~/Views/Shared/_BaseThemeStyleSheet.cshtml")
    @await Html.PartialAsync("~/Views/Shared/_BaseFontStyleSheet.cshtml")

    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/datasourcerecurrencedependency.css" />
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/schedulerrecurrence.css" />
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/datasourcerecurrence.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/datasourcerecurrencedependency.min.css" />
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/schedulerrecurrence.min.css" />
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/datasourcerecurrence.min.css" />
    </environment>


    @await Html.PartialAsync("~/Views/Shared/_LoaderIcon.cshtml")
    <script asp-append-version="true" src="~/js/localizationcontent.js?v=@ServerAppConfig.ProductVersion&c=@System.Globalization.CultureInfo.CurrentCulture"></script>
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/datasourcerecurrencedependency.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/datasourcerecurrencedependency.min.js"></script>
    </environment>
    <script>
        var getActiveandInactiveUserWebUrl = "@Url.Action("getallactivegroupsandusers", "scheduler")";
        var getRecurrenceTypeUrl = "@Url.Action("GetRecurrenceTypeForDatasourceSchedule", "DataSources")";
        var getNextScheduleUrl = "@Url.Action("GetNextScheduleDate", "Scheduler")";
        var updateScheduleInfoUrl = "@Url.Action("UpdateDataSourceRefreshSettings", "DataSources")";
        var dateFormat = "@_clientDateTimeInfo.ClientDateTime.DateFormat";
        var scheduleRecipients = "@Url.Action("RecipientsList", "DataSources")";
        var getActiveandInactiveUserUrl = { "web": "@Url.Action("getallactiveusers", "scheduler")", "api": "/internal/items/getallactiveusers" };
        var getActiveInactiveGroupUrl = { "web": "@Url.Action("getallactivegroups", "scheduler")", "api": "/internal/items/getallactivegroups" };
        var timeFormat = "@_clientDateTimeInfo.ClientDateTime.TimeFormat";
        var isServer = @Json.Serialize(ViewBag.IsServer);
        var actionType = "@ViewBag.ActionType";
        var timeZone = "@_clientDateTimeInfo.ClientDateTime.TimeZone";
        var editScheduleItem = "@isEdit.ToString().ToLower()" == "true" ? @Html.Raw(Json.Serialize(ViewBag.ScheduleItem)) : "";
        var userList = @Html.Raw(Json.Serialize(ViewBag.UserList));
        var groupList = @Html.Raw(Json.Serialize(ViewBag.GroupList));
        var ExternalRecipient = @Html.Raw(Json.Serialize(ViewBag.ExternalRecipient));
        var GroupNameList = @Html.Raw(Json.Serialize(ViewBag.GroupName));
        var itemName = "@itemName";
        var createdItemId = "@ViewBag.DatasourceId";
        var isAdmin = @Json.Serialize(isAdmin);
        var clientDateFormat = "@_clientDateTimeInfo.ClientDateTime.DateFormat";
        var timezone = "@globalAppSettings.SystemSettings.TimeZone";
        var clientTimeZone = "@_clientDateTimeInfo.ClientDateTime.TimeZone";
        var enableApplicationEmbed =@ServerAppConfig.EnableSameTabLinkTarget.ToString().ToLower();
        var extractEngine = "@ViewBag.ExtractEngine";
    </script>
</head>
<body class="recurrence-view">
    <div id="recurrence-module" style="display:none;">
        <div class="modal-header no-margin col-sm-12">
            <div id="datasource-header">
                <span><i class="su su-nav-schedule"></i></span>
                @if (!string.IsNullOrWhiteSpace(itemName))
                {
                    @string.Concat(itemName, " — ", T["Refresh Settings"].Value)
                    <span><i class="su su-close" id="refresh-schedule-close-icon" title="@T["Close"]"></i></span>
                }
                else
                {
                    <span><i class="su su-close" id="refresh-schedule-close-icon" title="@T["Close"]"></i></span>
                    @T["Refresh Settings"]
                }
                <div id="datasource-description"></div>
            </div>
        </div>
        <div id="time-intervals-div" class="datasource-dialog-padding">
            <div class="col-sm-12 col-12 d-flex no-padding recurrence-field-row">
                <div class="col-sm-1 col-1 no-padding type-label align-center margin-issue refresh-label"><label>@T["Type"]</label></div>
                <div id="recurrence-type-container" class="col-sm-4 col-4 no-margin i-search-fields">
                    <select id="recurrence-type" class="selectpicker" title=""></select>
                </div>
            </div>
            <div class="col-sm-12 col-12 no-padding recurrence-field-row" id="frequency">

                <div class="col-sm-12 col-12 no-padding" id="hourly-schedule-option">
                    <div class="col-sm-12 col-12 no-padding d-flex">
                        <div class="col-sm-1 col-1 no-padding recurs-label align-center margin-issue refresh-label"><label>@T["Recurs"]</label></div>
                        <div class="col-10" id="daily-schedule">
                            <div class="float-start">
                                <div class="float-start">
                                    @Html.Label("every-x-hours", T["Every"].Value, new { @class = "pointer normal-font notransition" })
                                </div>
                                <div class="clspad float-start top-margin"><input type="text" class="time-width float-start validation-input col-sm-4 col-4 change-event" id="every-x-hours-value" /></div>
                                <div class="clspad float-start"><label for="every-x-hours" class="pointer normal-font float-start">HH:MM</label></div>
                                <div>
                                    <span class="frequency-error">@T["Please enter minimum 5 minutes"]</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-12 no-padding recurrence-field-row" id="daily-schedule-option">
                <div class="col-sm-12 col-12 no-padding">
                    <div class="col-sm-1 col-1 no-padding recurs-label align-center margin-issue refresh-label"><label>@T["Recurs"]</label></div>
                    <div class="col-sm-10 col-10" id="daily-schedule">
                        <div class="float-start">
                            <div class="float-start">
                                @Html.RadioButton("daily-recurrence-type", " ", new { @class = "css-radio", @id = "daily-every-x-days" })
                                @Html.Label("daily-every-x-days", T["Every"].Value, new { @class = "pointer normal-font notransition" })
                            </div>
                            <div class="clspad float-start top-margin"><input type="text" for="daily-every-x-days" class="form-control float-start change-event" id="every-x-days"></div>
                            <div class="clspad float-start"><label for="daily-every-x-days" class="pointer normal-font float-start">@T["day(s)"]</label></div>
                        </div>
                        <div class="float-start clspadleft">
                            @Html.RadioButton("daily-recurrence-type", " ", new { @class = "css-radio", @id = "daily-weekdays" })
                            @Html.Label("daily-weekdays", T["Every weekday"].Value, new { @class = "pointer normal-font notransition" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-12 no-padding cls-options recurrence-field-row" id="weekly-schedule-option">
                <div class="col-sm-12 col-12 no-padding no-margin">
                    <div class="col-sm-1 col-1 recurs-label no-padding align-center margin-issue refresh-label"><label>@T["Recurs"]</label></div>
                    <div class="col-sm-10 col-10">
                        <label class="pointer normal-font float-start mar-top">@T["Every"]</label>
                        <div class="monthly-select float-start">
                            <input type="text" class="form-control float-start change-event" id="every-x-weeks">
                        </div>
                        <label class="pointer normal-font button-left float-start mar-top">@T["week(s)"]</label>
                    </div>
                </div>
                <div class="col-sm-12 col-12 no-padding no-margin change-event">
                    <div class="col-sm-1 col-1 margin-issue"></div>
                    <div class="col-sm-10 col-10" id="days-check-box">
                        <div id="enable-sunday" class="col-sm-2 col-2 no-padding no-margin">
                            @Html.CheckBox("sun", false, new { @class = "material-checkbox  float-start daygroup" })
                            @Html.Label("sun", T["Sunday"].Value, new { @class = "pointer normal-font" })
                        </div>
                        <div id="enable-monday" class="col-sm-2 col-2 no-padding no-margin">
                            @Html.CheckBox("mon", false, new { @class = "material-checkbox  float-start daygroup" })
                            @Html.Label("mon", T["Monday"].Value, new { @class = "pointer normal-font" })
                        </div>
                        <div id="enable-tuesday" class="col-sm-2 col-2 no-padding no-margin">
                            @Html.CheckBox("tues", false, new { @class = "material-checkbox  float-start daygroup" })
                            @Html.Label("tues", T["Tuesday"].Value, new { @class = "pointer normal-font" })
                        </div>
                        <div id="enable-wednesday" class="col-sm-2 col-3 no-padding no-margin">
                            @Html.CheckBox("wed", false, new { @class = "material-checkbox  float-start daygroup" })
                            @Html.Label("wed", T["Wednesday"].Value, new { @class = "pointer normal-font" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-12 no-padding no-margin change-event">
                    <div class="col-sm-1 col-1 margin-issue"></div>
                    <div class="col-sm-10 col-10" id="days-check-box">
                        <div id="enable-thursday" class="col-sm-2 col-2 no-padding no-margin">
                            @Html.CheckBox("thu", false, new { @class = "material-checkbox float-start daygroup" })
                            @Html.Label("thu", T["Thursday"].Value, new { @class = "pointer normal-font" })
                        </div>
                        <div id="enable-friday" class="col-sm-2 col-2 no-padding no-margin">
                            @Html.CheckBox("fri", false, new { @class = "material-checkbox float-start daygroup" })
                            @Html.Label("fri", T["Friday"].Value, new { @class = "pointer normal-font" })
                        </div>
                        <div id="enable-saturday" class="col-sm-2 col-2 no-padding no-margin">
                            @Html.CheckBox("sat", false, new { @class = "material-checkbox float-start daygroup" })
                            @Html.Label("sat", T["Saturday"].Value, new { @class = "pointer normal-font" })
                        </div>
                        <div class="col-sm-4 col-4 no-padding no-margin validate-error" id="weekly-day-error-container">
                            <div id="weekly-days-validator"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-12 no-padding cls-options recurrence-field-row" id="monthly-schedule-option">
                <div class="col-sm-12 col-12 no-padding no-margin">
                    <div class="col-sm-1 col-1 no-padding recurs-label align-center margin-issue refresh-label"><label>@T["Recurs"]</label></div>
                    <div class="col-sm-10 col-10">
                        @Html.RadioButton("monthly", " ", new { @class = "css-radio" })
                        @Html.Label("monthly", T["Day"].Value, new { @class = "pointer normal-font float-start mar-top notransition" })
                        <div class="cls-day float-start"><input type="text" class="float-start change-event" id="monthly-date"></div>
                        <label for="monthly" class="pointer normal-font float-start mar-top">@T["of every"]</label>
                        <div class="cls-day float-start">
                            <input type="text" class="change-event" id="monthly-every-x-months" />
                        </div>
                        <label for="monthly" class="pointer normal-font float-start">@T["month(s)"]</label>
                    </div>
                </div>
                <div class="col-sm-12 col-12 no-padding">
                    <div class="col-sm-1 col-1 margin-issue"></div>
                    <div class="col-sm-10 col-10">
                        <div class="float-start">
                            @Html.RadioButton("monthly", " ", new { @class = "css-radio", @id = "monthly-dow" })
                            @Html.Label("monthly-dow", T["The"].Value, new { @class = "pointer normal-font float-start notransition" })
                        </div>
                        <div id="monthly-dow-week-container" class="i-search-fields monthly-select no-padding small-width bs-width float-start">
                            <select id="monthly-dow-week" data-width="110px" class="selectpicker schedule float-start change-event" data-size="5"></select>
                        </div>
                        <div id="monthly-dow-day-container" class="i-search-fields monthly-select large-width float-start">
                            <select id="monthly-dow-day" data-width="160px" class="selectpicker schedule float-start change-event" data-size="5"></select>
                        </div>
                        <div class="float-start">
                            <label for="monthly-dow" class="pointer float-start normal-font button-left">@T["of every"]</label>
                            <div class="monthly-select top-margin float-start"><input type="text" id="monthly-dow-every-x-months" class="float-start change-event"></div>
                            <label for="monthly-dow" class="float-start pointer normal-font button-left">@T["month(s)"]</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-12 no-padding cls-options no-topmargin recurrence-field-row" id="yearly-schedule-option">
                <div class="col-sm-12 col-12 no-padding">
                    <div class="col-sm-1 col-1 no-padding recurs-label margin-issue refresh-label"><label>@T["Recurs"]</label></div>
                    <div class="col-sm-10 col-10">
                        <label class="float-start normal-font mar-top">@T["Every"]</label>
                        <div class="monthly-select float-start change-event"><input type="text" id="every-x-years"></div>
                        <label class="float-start button-left normal-font mar-top">@T["year(s)"]</label>
                    </div>
                </div>
                <div class="col-sm-12 col-12 no-padding">
                    <div class="col-sm-1 col-1 margin-issue"></div>
                    <div class="col-sm-10 col-10">
                        @Html.RadioButton("yearly", " ", new { @class = "css-radio", @id = "yearly" })
                        @Html.Label("yearly", T["The"].Value, new { @class = "pointer normal-font float-start notransition" })
                        <div class="monthly-select float-start large-width">
                            <select id="yearly-month" class="selectpicker small-width schedule change-event" data-width="160px" data-size="5"></select>
                        </div>
                        <div class="monthly-select float-start change-event"><input type="text" class="float-start" id="yearly-day"></div>
                    </div>
                </div>
                <div class="col-sm-12 col-12 no-padding">
                    <div class="col-sm-1 col-1 margin-issue"></div>
                    <div class="col-sm-10 col-10">
                        @Html.RadioButton("yearly", " ", new { @class = "css-radio", @id = "yearly-dow" })
                        @Html.Label("yearly-dow", T["The"].Value, new { @class = "pointer normal-font float-start notransition" })
                        <div id="yearly-dow-week-container" class="no-margin i-search-fields float-start bs-month-width">
                            <div class="monthly-select small-width bs-width">
                                <select id="yearly-dow-week" data-width="110px" class="selectpicker float-start schedule change-event" data-size="5"></select>
                            </div>
                        </div>
                        <div id="yearly-dow-day-container" class="no-margin i-search-fields float-start">
                            <div class="monthly-select large-width">
                                <select id="yearly-dow-day" data-width="160px" class="selectpicker float-start schedule change-event" data-size="5"></select>
                            </div>
                        </div>
                        <div id="yearly-dow-month-container" class="no-margin i-search-fields  float-start">
                            <label class="pointer normal-font float-start button-left" for="yearly-dow">@T["of"]</label>
                            <div class="monthly-select float-start large-width">
                                <select data-width="160px" id="yearly-dow-month" class="selectpicker float-start schedule change-event" data-size="5"></select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-12 col-12 no-padding recurrence-field-row d-flex" id="no-view-start">

                <div class="col-sm-1 col-1 no-padding starts-label align-center margin-issue refresh-label"><label class="end-label">@T["Starts on"]</label></div>
                <div class="col-sm-3 col-3 start-date-width">
                    <div class="float-start"><input type="text" class="form-control full-width" name="" id="start-date"></div>
                </div>
                <input type="hidden" />
                @if (!string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.TimeZone))
                {
                    <div class="col-sm-7 col-7 " id="system-time">(@T["Your time will be "]: - <label class="normal-font" id="zone"></label>)</div>
                }
                else
                {
                    <div class="col-sm-7 col-7 " id="system-time">(@T["Time Zone"] - <label class="normal-font" id="zone"></label>)</div>
                }
                <input type="hidden" id="hour-difference" />
                <input type="hidden" id="minute-difference" />
                <div class="col-sm-12 col-12 validate-error" id="start-date-error-container">
                    <div class="col-sm-2 col-2"></div>
                    <div class="col-sm-8 col-8 no-margin" id="start-date-validator"></div>
                </div>

            </div>
            @if (!string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.TimeZone))
            {
                <div class="col-sm-12 col-12 no-padding d-flex time-zone">
                    <div class="col-sm-1 col-1"></div>
                    <div class="col-10" id="time-zone">(@T["Application Time Zone"]: @globalAppSettings.SystemSettings.TimeZone)</div>
                </div>
             }
            <div class="col-sm-12 col-12 no-padding recurrence-field-row d-flex" id="no-view-end">
                <div class="col-sm-1 col-1 no-padding ends-label align-center margin-issue refresh-label"><label>@T["Ends"]</label></div>
                <div id="schedule-end-type" class="col-sm-10 col-10 no-padding no-margin">
                    <div class="clsnever float-start">
                        @Html.RadioButton("end-type", "never", new { @class = "css-radio", @id = "no-end-date", @checked = "checked" })
                        @Html.Label("no-end-date", T["Never"].Value, new { @class = "pointer normal-font float-start notransition" })
                    </div>
                    <div class="clsend float-start">
                        @Html.RadioButton("end-type", "endafter", new { @class = "css-radio", @id = "end-after" })
                        @Html.Label("end-after", T["After"].Value, new { @class = "pointer normal-font float-start notransition" })
                        <div class="float-start leftmargin top-margin"><input type="text" id="occurence-count" class="form-control float-start change-event"></div>
                        <label for="end-after" class="pointer normal-font button-left float-start">@T["Occurrences"]</label>
                    </div>
                    <div class="clsend float-start">
                        @Html.RadioButton("end-type", "endBy", new { @class = "css-radio", @id = "endBy" })
                        @Html.Label("endBy", T["On"].Value, new { @class = "pointer normal-font float-start notransition" })
                        <div class="monthly-select float-start"><input type="text" class="form-control full-width float-start" name="" id="end-date"></div>
                    </div>
                    <div class="clsend float-start validate-error" id="end-date-validator"></div>
                </div>
                <div class="col-sm-12 col-12 validate-error" id="end-date-error-container">
                    <div class="col-sm-1 col-1 margin-issue"></div>
                    <div class="col-sm-8 col-8 no-margin" id="end-date-validator"></div>
                </div>
            </div>
            <div class="col-sm-12 col-12 no-padding enabled-div d-flex">
                <div class="col-sm-1 col-1 no-padding align-center margin-issue">
                    @Html.Label("enable-schedule", T["Enabled"].Value, new { @class = "enabled-label" })
                </div>
                <div class="col-sm-10 col-10 float-start no-margin enabled-label-div line-removal">
                    <span class="material-switch text-left">
                        <input type="checkbox" name="Enabled" id="enable-schedule" checked="checked" />
                        <label class="label-primary" for="enable-schedule"></label>
                    </span>
                    <span class="validation-message"></span>
                </div>
            </div>
            <div class="col-sm-1 col-1 margin-issue d-flex"></div>
            <div class="col-sm-10 col-10" id="schedule-message-container"><span class="su su-info"></span><span id="schedule-message"></span></div>
            <div class="col-sm-12 col-12" id="refresh-interval-message">
                @if (minimumTime[0] == "00" && minimumTime[1] == "05")
                {
                    <span class="admin-refresh-interval-five-minutes-warning-message" id="refresh-interval-warning-message" style="display:none">
                        @string.Format(T["Your minimum data refresh interval is {0} minutes."].Value, minimumTime[1])
                    </span>
                }
                else if (minimumTime[0] == "01" && minimumTime[1] == "00")
                {
                    if (isSelfHosted && isAdmin)
                    {
                        <span class="admin-refresh-interval-hours-warning-message" id="refresh-interval-warning-message" style="display:none">
                            @Html.Raw(string.Format(T["Your minimum data refresh interval is {0} hour. Please {1}upgrade your plan{2} or {3}contact us{4} to reduce the data refresh interval."].Value, minimumTime[0], "<a href='"+manageLicenseSettingsUrl+"' target='_blank'>", "</a>", "<a target='_blank' href='https://www."+(GlobalAppSettings.BrandingDomain)+"/contact'>", "</a>"))
                        </span>
                    }
                    else if (!isSelfHosted && isAdmin)
                    {
                        <span class="admin-refresh-interval-hours-warning-message" id="refresh-interval-warning-message" style="display:none">
                             @Html.Raw(string.Format(T["Your minimum data refresh interval is {0} hour. Please {1}contact us{2} to reduce the data refresh interval."].Value, minimumTime[0], "<a class='request-concierge-support' target='_blank' href='https://www."+(GlobalAppSettings.BrandingDomain)+"/contact'>", "</a>"))
                        </span>
                    }
                    else
                    {
                        <span class="refresh-interval-hours-warning-message" id="refresh-interval-warning-message" style="display:none">
                             @string.Format(T["Your minimum data refresh interval is {0} hour. Please check with your administrator to reduce the data refresh interval."].Value, minimumTime[0])
                        </span>
                    }
                }
                else
                {
                    if (isSelfHosted && isAdmin)
                    {
                        <span class="admin-refresh-interval-warning-message" id="refresh-interval-warning-message" style="display:none">
                             @Html.Raw(string.Format(T["Your minimum data refresh interval is {0} minutes. Please {1}upgrade your plan{2} or {3}contact us{4} to reduce the data refresh interval."].Value, minimumTime[1],"<a href='"+manageLicenseSettingsUrl+"' target='_blank'>", "</a>", "<a target='_blank' href='https://www."+(GlobalAppSettings.BrandingDomain)+"/contact'>", "</a>"))
                        </span>
                    }
                    else if (!isSelfHosted && isAdmin)
                    {
                        <span class="admin-refresh-interval-warning-message" id="refresh-interval-warning-message" style="display:none">
                            @Html.Raw(string.Format(T["Your minimum data refresh interval is {0} minutes. Please {1}contact us{2} to reduce the data refresh interval."].Value, minimumTime[1], "<a class='request-concierge-support' target='_blank' href='https://www."+(GlobalAppSettings.BrandingDomain)+"/contact'>", "</a>"))
                        </span>
                    }
                    else
                    {
                        <span class="refresh-interval-minutes-warning-message" id="refresh-interval-warning-message" style="display:none">
                             @string.Format(T["Your minimum data refresh interval is {0} minutes. Please check with your administrator to reduce the data refresh interval."].Value, minimumTime[1])
                        </span>
                    }
                }
            </div>
            <div id="schedule-failure">
                <div id="failure-notification" class="col-sm-12 col-12 no-margin">
                    <div id="enable-checkbox" class="pad-enable">
                        @Html.CheckBox("enable-notification-to-owner", new { @class = "material-checkbox float-start", @id = "enable-notification-to-owner" })
                        @Html.Label("enable-notification-to-owner", T["Send failure notification to data source owner"].Value)
                    </div>
                    <div id="enable-checkbox" class="pad-enable">
                        @Html.CheckBox("enable-notification-to-recipient", new { @class = "material-checkbox ", @id = "enable-notification-to-recipient", onchange = "showDialog(this)" })
                        @Html.Label("enable-notification-to-recipient", T["Send failure notification to other application and external users"].Value)
                    </div>
                </div>
                <div id="show-shared-user-group-container" class="col-sm-12 col-12 no-margin" style="display:none">
                    <a class="show-shared-user-group-section">
                        <div class="show-shared-user-group-label">@T["Notification to :"] </div>
                        <div class="shared-user-group-name-section" style="display: inline;"></div>
                        <span class="shared-user-group-count"></span>
                    </a>
                </div>
                <div id="note-message" class="col-sm-12 col-12 note no-margin">
                    <b>@T["Note: "]</b>
                    @(String.Format(T["The application deactivates your refresh after {0} consecutive failures."].Value, ServerAppConfig.FailureOccurrence))
                    @if (!@ServerAppConfig.IsHideHelpLink)
                    {
                        <span>@Html.Raw(string.Format(T["To learn more, click {0}here{1}."].Value, "<a href='"+(ServerAppConfig.AppSettings.Documentation.BaseUri + helpSiteUrl)+" title='help' target='_blank'>", "</a>")) </span>
                    }
                </div>
            </div>
            <div id="submit-container" class="col-sm-12 col-4 no-margin">
                <input id="schedule-submit-cancel" title="@T["Cancel"]" type="button" value="@T["Cancel"]" tabindex="5" class="secondary-button app-btn-secondary leftmargin float-end button-right">
                <input id="schedule-submit" title="@T["Schedule"]" type="button" value="@T["Schedule"]" tabindex="4" class="primary-button app-btn-primary float-end button-right">
            </div>
        </div>
        <div class="col-sm-12 col-12 no-padding subscribe-popup-body" id="subscribers-panel" style=" display :none">
            <div class="col-sm-12 subscribers-panel-dropdown col-12 bottom-margin no-padding">
                <div id="user-search-container" class="col-sm-4 col-4 bottom-margin no-padding no-margin i-search-fields"
                     data-bs-toggle="tooltip" data-placement="top" title="@(string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.MailSettings.MailSettingsAddress) && isSelfHosted ? T["You cannot add users to the recipients before configuring the email settings."] : "")">
                    <div class="users-dropdown">
                        <select id="user-search" class="selectpicker" data-size="5" data-live-search="true" data-none-results-text="@T["No results match"]" data-live-search-placeholder="@T["Search"]" title='@T["Select Users"]' data-hide-disabled="true" multiple="" data-actions-box="true" @(string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.MailSettings.MailSettingsAddress) && isSelfHosted ? "disabled" : "")>
                        </select>
                    </div>
                </div>

                <div id="group-search-container" class="col-sm-4 col-4 bottom-margin no-padding no-margin i-search-fields"
                     data-bs-toggle="tooltip" data-placement="top" title="@(string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.MailSettings.MailSettingsAddress) && isSelfHosted  ? T["You cannot add groups to the recipients before configuring the email settings."] : "")">
                    <div class="groups-dropdown">
                        <select id="group-search" class="selectpicker" data-size="5" data-live-search="true" data-none-results-text="@T["No results match"]" data-live-search-placeholder="@T["Search"]" title="@T["Select Groups"]" data-hide-disabled="true" multiple="" data-actions-box="true" @(string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.MailSettings.MailSettingsAddress) && isSelfHosted ? "disabled" : "")>
                        </select>
                    </div>
                </div>
                <form id="email-form" class="col-sm-4 col-4 no-margin">
                    <div class="inner-addon right-addon has-feedback"
                         data-bs-toggle="tooltip" data-placement="top" title="@(string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.MailSettings.MailSettingsAddress) && isSelfHosted  ? T["You cannot add External User to the recipients before configuring the email settings."] : "")">
                        <input id="external-email"
                        @(string.IsNullOrWhiteSpace(globalAppSettings.SystemSettings.MailSettings.MailSettingsAddress) && isSelfHosted ? "disabled='disabled'" : "")
                               type="text" class="form-control" placeholder="@T["External Recipients (Email address)"]">
                        <span id="external-submit" class="su-add form-control-feedback" title="@T["Add external recipients"]"></span>
                    </div>
                    <span id="external-email-validation" class="alertMessages"></span>
                </form>
            </div>
            <div class="col-12 col-sm-12 no-padding" id="selected-users-container">
                <div class="col-8 col-sm-8 selected-recipients" id="selected-users"></div>
                <div id="selected-users-info" class="col-4 col-sm-4 no-margin i-search-fields"></div>
            </div>
            <div id="selected-users-validation">@T["Select a user, group, or type an email address in the external recipient to schedule"]</div>
            <div id="update-container" class="col-sm-12 col-4 no-margin">
                <input id="update-cancel" title="@T["Cancel"]" type="button" value="@T["Cancel"]" tabindex="5" class="secondary-button app-btn-secondary leftmargin float-end button-right">
                <input id="update-submit" title="@T["Update"]" type="button" value="@T["Update"]" tabindex="4" class="primary-button app-btn-primary float-end button-right">
            </div>
        </div>
     </div>
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/datasourcerecurrencepage.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/datasourcerecurrencepage.min.js"></script>
    </environment>
</body>
</html>
