@using Newtonsoft.Json
@using Microsoft.AspNetCore.Mvc.ViewFeatures;
@using Microsoft.AspNetCore.Builder;
@inject RequestLocalizationOptions _localizationOptions
@{
    var globalAppSettings = _globalAppSettings;
    var identityResponse = Context.RequestServices.GetRequiredService<ServerPrincipal>();
    var loginEmail = identityResponse.User != null ? identityResponse.User.Email : string.Empty;
    var nativeNameTitleCase = _localizationOptions.DefaultRequestCulture.Culture.NativeName.ToLower();
    var gridName = string.Empty;
    var cdnLink = globalAppSettings.SystemSettings.CDNLink;
    var url = new Uri(Context.Request.GetDisplayUrl());
    var requestUrl = url.AbsolutePath.ToString().ToLower();
    var dns = url.GetLeftPart(UriPartial.Authority);
    var isUrlInDnsList = GlobalAppSettings.IsUrlInDnsList(globalAppSettings.DisplayUri);
    var dashboardsPageUrl = Url.Action("Dashboards", "Dashboards");
    var slideshowPageUrl = Url.Action("Slideshows", "Slideshow");
    var dataSourcePageUrl = Url.Action("DataSources", "DataSources");
    var schedulePageUrl = Url.Action("Schedules", "Scheduler");
    var publishPageUrl = Url.Action("GetPublishedItems", "Publish");
    var widgetsPageUrl = Url.Action("Widgets", "Widgets");
    var homePageUrl = Url.Action("Homepages", "boards");
    //To show or hide menu for mobile devices
    var isMobile = new DeviceDetection(Context).IsMobile;
    var menuClass = isMobile ? "collapse width" : "collapse in";
    var includeMessageBox = ViewBag.MessageBox == null || ViewBag.MessageBox == true;
    var faviconLogo = globalAppSettings.SystemSettings.FavIcon;
    var isAdmin = Context.Session.GetString("IsAdmin") != null && Convert.ToBoolean(Context.Session.GetString("IsAdmin"));
    var tourCookie = Context.Request.Cookies["syncfusion.dashboards.server.tour"];
    var isEmbed = (ViewBag.isEmbed != null && ViewBag.isEmbed == "true") ? true : false;
    var isItemPageRequested = (url.AbsolutePath == "/" || url.AbsolutePath == Url.Content("~/") || url.ToString().IndexOf("/homepages", StringComparison.CurrentCultureIgnoreCase) > 0
   || url.ToString().IndexOf("/dashboards", StringComparison.CurrentCultureIgnoreCase) > 0 || url.ToString().IndexOf("/data-sources", StringComparison.CurrentCultureIgnoreCase) > 0
   || url.ToString().IndexOf("/files", StringComparison.CurrentCultureIgnoreCase) > 0 || url.ToString().IndexOf("/widgets", StringComparison.CurrentCultureIgnoreCase) > 0) &&
                                                                                           !isMobile;
    var tourObj = new TourCookie();
    if (tourCookie != null)
    {
        tourObj = JsonConvert.DeserializeObject<TourCookie>(JsonConvert.DeserializeObject(tourCookie).ToString());
    }
    var isWelcomePage = ViewBag.IsWelcomePage != null && ViewBag.IsWelcomePage;
    var showTour = (tourCookie == null || (tourObj.TourCompleted == "false" && tourObj.TourSkipped == "false")) && !isWelcomePage && !isMobile;
    var appContainerStyle = (ViewBag.HidePageLoader != null && ViewBag.HidePageLoader) ? "" : "opacity:0;";
    var helpSiteBaseUrl = ServerAppConfig.AppSettings.Documentation.BaseUri;
    var feedbackCookie = Context.Request.Cookies["feedback.visible"];
    var showFeedbackKey = ServerAppConfig.EnableCloudFeedback;
    var showFeedback = (feedbackCookie == null && tourCookie != null && !isWelcomePage && !isMobile && showFeedbackKey);
    var absolutePath = url.AbsolutePath;
    var isSelfHosted = ServerAppConfig.IsSelfHosted;
    var hideReleaseAlert = ServerAppConfig.HideReleaseAlert;
    var dashboardBIUrl = isSelfHosted ? new DashboardServerEndPoints(globalAppSettings).DashboardServerBIUrl() : string.Empty;
    var isExludeEjDialog = ViewBag.IsExludeEjDialog != null ? ViewBag.IsExludeEjDialog : false;
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var dashboardDesignerResourceUrl = globalAppSettings.SystemSettings.DesignerCdnLink.TrimEnd('/');
    var rootUrl = Context.Request.RouteValues["tenantName"] != null ? (GlobalAppSettings.HttpPathBase + "/" + ServerAppConfig.TenantIdentifierPrefix + "/" + Context.Request.RouteValues["tenantName"]).TrimEnd('/') : GlobalAppSettings.HttpPathBase.ToString();
    var isSlideshow = url.Query.ToLower().Contains("isslideshow");
    var siteIdentifier = Context.Request.RouteValues["tenantName"] != null ? Context.Request.RouteValues["tenantName"].ToString() : string.Empty;
    var adminPageUrl = siteIdentifier + "/administration";
    var profilePagesUrl = siteIdentifier + "/profile";
    var userProfilePageUrl = siteIdentifier + "/user";
    var createItemMenuStyle = string.Empty;
    var addSampleItemStyle = string.Empty;
    var addCategoryStyle = string.Empty;
    var publishDashboardStyle = string.Empty;
    var dashboardSecurityStyle = string.Empty;
    var itemVersionStyle = string.Empty;
    var createSlideshowStyle = string.Empty;
    var createDashboardStyle = string.Empty;
    var dashboardFeedbackStyle = string.Empty;
    var createSlideshowScript = string.Empty;
    var createCategoryScript = string.Empty;
    var editCategoryScript = string.Empty;
    var createItemMenuScript = string.Empty;
    var userGroupSuggestion = string.Empty;
    var itemActionScript = string.Empty;
    var dashboardCreateLimitCount = !ServerAppConfig.IsSelfHosted && !string.IsNullOrWhiteSpace(ServerAppConfig.AppSettings.DashboardCreateLimitCount) ? ServerAppConfig.AppSettings.DashboardCreateLimitCount : string.Empty;
    var dataSourceCreateLimitCount = !isSelfHosted && !string.IsNullOrWhiteSpace(ServerAppConfig.AppSettings.DataSourceCreateLimitCount) ? ServerAppConfig.AppSettings.DataSourceCreateLimitCount : string.Empty;
}
@{
    var preloadScriptsFiles = new string[]
{
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/dashboard-designer.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/dashboard-designer-bundle.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/datasource-designer.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/connection-designer.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/ej1.common.all.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/ej2.common.all.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/ej.dashboarddesigner.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/ej1.web.all.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/scripts/designer/ej2.web.all.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/signalr-bundle.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/datasourcerecurrencepage.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/datasourcerecurrencedependency.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/dashboard-feedback.min.js")
};

    var preloadStylesFiles = new string[]
    {
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/css/designer/dashboard-designer-bundle.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/css/designer/dashboard-designer.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/css/designer/datasource-designer.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardDesignerResourceUrl + "/cdn/css/designer/connection-designer.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/scheduleiframe.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/schedulerrecurrence.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/datasourcerecurrence.min.css"),
        "https://fonts.googleapis.com/css?family=Roboto:400,700"
    };
    var bannerApiEndpoint = ServerAppConfig.AppSettings.BoldBiBannerApiEndpoint;
    var currentVersion = _globalAppSettings.SystemSettings.ProductVersion;

    <environment include="Development,CloudDevelopment">
        @{
            createItemMenuStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/create-item-menu.css");
            addSampleItemStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/addsampleitem.css");
            addCategoryStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/add-category.css");
            publishDashboardStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/publish-dashboard.css");
            dashboardSecurityStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/dashboard-security.css");
            itemVersionStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/itemversion.css");
            createSlideshowStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/create-slideshow.css");
            createDashboardStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/create-dashboard.css");
            dashboardFeedbackStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/dashboard-feedback.css");
            createSlideshowScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/create-slideshow.js");
            createCategoryScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/add-category.js");
            editCategoryScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/edit-category.js");
            createItemMenuScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/create-item-menu.js");
            userGroupSuggestion = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/item-user-group-suggestion.js");
            itemActionScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/itemaction.js");
        }
    </environment>
    <environment exclude="Development,CloudDevelopment">
        @{
            createItemMenuStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/create-item-menu.min.css");
            addSampleItemStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/addsampleitem.min.css");
            addCategoryStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/add-category.min.css");
            publishDashboardStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/publish-dashboard.min.css");
            dashboardSecurityStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/dashboard-security.min.css");
            itemVersionStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/itemversion.min.css");
            createSlideshowStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/create-slideshow.min.css");
            createDashboardStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/create-dashboard.min.css");
            dashboardFeedbackStyle = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/css/dashboard-feedback.min.css");
            createSlideshowScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/create-slideshow.min.js");
            createCategoryScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/add-category.min.js");
            editCategoryScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/edit-category.min.js");
            createItemMenuScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/create-item-menu.min.js");
            userGroupSuggestion = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/item-user-group-suggestion.min.js");
            itemActionScript = this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(GlobalAppSettings.HttpPathBase, dashboardServerResourceUrl + "/cdn/scripts/itemaction.min.js");
        }
    </environment>
}
<!DOCTYPE html>
<html class="dashboard-server" lang="@globalAppSettings.SystemSettings.Language">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    @if (!isSelfHosted && !globalAppSettings.SystemSettings.IsDebug)
    {
        <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    }

    @RenderSection("meta", false)
<link rel="stylesheet" asp-append-version="true" href="@ServerAppConfig.GetCustomThemeDesignerUrl(dashboardServerResourceUrl, Context, globalAppSettings)" />
    @await Html.PartialAsync("~/Views/Shared/_ApplicationThemeStyleSheet.cshtml")
    @await Html.PartialAsync("~/Views/Shared/_BaseThemeStyleSheet.cshtml")
    @await Html.PartialAsync("~/Views/Shared/_BaseFontStyleSheet.cshtml")
    <title>
        @ViewBag.Title
    </title>
    <style>
        html, body {
            height: 100%;
            width: 100%;
        }

        #layout-body-loader-icon {
            position: absolute;
            top: 50%;
            left: 50% !important;
            margin-left: -27px;
            margin-top: -27px;
        }
    </style>
    @if ((!ServerAppConfig.IsSelfHosted && string.IsNullOrWhiteSpace(_globalAppSettings.SystemSettings.FontPreference)) || (ServerAppConfig.FontFamily == "Robotoregular" && _globalAppSettings.SystemSettings.IsInheritFromGlobalLookAndFeelSettings))
    {
        <style>
            :root {
                --designer-font: 'Roboto','Heebo','Segoes UI' !important;
            }
        </style>
    }
    else
    {
        <style>
            :root {
                --designer-font: var(--font-family) !important;
            }
        </style>
    }
    @*<link href="https://fonts.googleapis.com/css?family=Heebo:400,500,700" rel="stylesheet">*@
    @if (!isSelfHosted && isUrlInDnsList) {
        @await Html.PartialAsync("~/Views/Shared/_GoogleTag.cshtml")
    }
    @await Html.PartialAsync("~/Views/Shared/_LoaderIcon.cshtml")

    <link rel="icon" href="@faviconLogo" onerror="if (this.href !== null && this.href.toLowerCase() !== '@cdnLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@ServerAppConfig.BrandingJson.BrandingImages.FavIcon') this.href = '@cdnLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@ServerAppConfig.BrandingJson.BrandingImages.FavIcon';" />

    <!--Prefetch viewer & designer resources-->
    @if (!isSelfHosted)
    {
        <link rel="prefetch" href="@ServerAppConfig.GetServiceEndPointUrl(ServerAppConfig.InternalAppDataServiceUrl, _globalAppSettings)/health-check">
    }
    <script>
        var createItemMenuStyle = @Json.Serialize(createItemMenuStyle);
        var addSampleItemStyle = @Json.Serialize(addSampleItemStyle);
        var addCategoryStyle = @Json.Serialize(addCategoryStyle);
        var publishDashboardStyle = @Json.Serialize(publishDashboardStyle);
        var dashboardSecurityStyle = @Json.Serialize(dashboardSecurityStyle);
        var itemVersionStyle = @Json.Serialize(itemVersionStyle);
        var createSlideshowStyle = @Json.Serialize(createSlideshowStyle);
        var createDashboardStyle = @Json.Serialize(createDashboardStyle);
        var dashboardFeedbackStyle = @Json.Serialize(dashboardFeedbackStyle);
        var createSlideshowScript = @Json.Serialize(createSlideshowScript);
        var createCategoryScript = @Json.Serialize(createCategoryScript);
        var editCategoryScript = @Json.Serialize(editCategoryScript);
        var createItemMenuScript = @Json.Serialize(createItemMenuScript);
        var userGroupSuggestion = @Json.Serialize(userGroupSuggestion);
        var validateDashboardCountUrl = "@Url.Action("ValidateDashboardCreateLimit", "Items")";
        var itemActionScript = @Json.Serialize(itemActionScript);
    </script>
<script>
        var isSelfHosted = @Json.Serialize(ServerAppConfig.IsSelfHosted);
        var enableApplicationEmbed = @ServerAppConfig.EnableSameTabLinkTarget.ToString().ToLower();
        var cdnLink = "@dashboardServerResourceUrl";
        var appVersion = "@ServerAppConfig.ProductVersion";

        window.onload = function () {
            var preloadStyles = @Json.Serialize(preloadStylesFiles);
            var preloadScripts = @Json.Serialize(preloadScriptsFiles);
            PreloadResources(preloadStyles, "style");
            PreloadResources(preloadScripts, "script");
        }
</script>
</head>

<body ng-app="serverApp" class="clearfix" id="body">
    @if (!(ViewBag.HidePageLoader != null && ViewBag.HidePageLoader))
    {
        <div class="loader-blue loader-icon" id="layout-body-loader-icon">
            <svg class="circular">
                <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
            </svg>
        </div>
    }
    <script asp-append-version="true" src="~/js/localizationcontent.js?v=@ServerAppConfig.ProductVersion&c=@System.Globalization.CultureInfo.CurrentCulture"></script>
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/layout.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/layout.min.css" />
    </environment>

    @RenderSection("styles", false)
    @if (!isMobile)
    {
        if (isExludeEjDialog)
        {
            <environment include="Development,CloudDevelopment">
                <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/connector-page-layout.js"></script>
            </environment>
            <environment exclude="Development,CloudDevelopment">
                <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/connector-page-layout.min.js"></script>
            </environment>
        }
        else
        {
            <environment include="Development,CloudDevelopment">
                <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/layout.js"></script>
            </environment>
            <environment exclude="Development,CloudDevelopment">
                <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/layout.min.js"></script>
            </environment>

            @if (requestUrl.IndexOf(dashboardsPageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(dataSourcePageUrl, StringComparison.OrdinalIgnoreCase) == -1)
            {
                <environment include="Development,CloudDevelopment">
                    <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/itemaction.js"></script>
                </environment>
                <environment exclude="Development,CloudDevelopment">
                    <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/itemaction.min.js"></script>
                </environment>
            }
        }
    }
    else
    {
        <environment include="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/layout-mobile.js"></script>
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/itemaction.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/layout-mobile.min.js"></script>
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/itemaction.min.js"></script>
        </environment>
    }
    <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/ej2-dialog.min.js"></script>
    <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/ej2-dropdowntree.min.js"></script>
    <script type="text/javascript">
        $.extend(ej, Syncfusion);
        var baseUrl = "@globalAppSettings.SystemSettings.BaseUrl";
        var isAdmin = "@isAdmin";
        var manageLicenseUrl = "@(ServerAppConfig.IsSelfHosted ? globalAppSettings.SystemSettings.IDPUrl + "/" + ServerAppConfig.TenantManagementHostName + "/administration/license-settings" : Url.Action("LicenseSettings", "Administration"))";
		var contactUsUrl = "https://www.@(GlobalAppSettings.BrandingDomain)/contact";
        var getUserNotificationsPartialViewResultUrl = "@Url.Action("GetUserNotificationsPartialViewResult", "notification")";
        var paymentPageUrl = "@(ServerAppConfig.IsSelfHosted ? string.Empty : (ServerAppConfig.AppSettings.EndPoints.TenantAppUrl?.TrimEnd('/') + "/sites/" + globalAppSettings.SystemSettings.TenantId + "/subscription"))";
        var getNotificationCountUrl = "@Url.Action("GetNotificationCount", "PartialView")";
        var etlHealthyStatusUrl = "@Url.Action("CheckETLHealthStatus", "Accounts")";
        var canCheckEtlHealthStatus = isSelfHosted;
        var getTenantStatusUrl = "@Url.Action("GetTenantStatus", "PartialView")";
        var helpSiteBaseUrl = "@helpSiteBaseUrl";
        var isSessionActiveUrl = "@Url.Action("IsSessionActive", "Accounts")";
        var setPermissionUrl = "@Url.Action("SetCookieStoragePermission", "Accounts")";
        var feedbackSendUrl = "@Url.Action("AddUserFeedback", "Feedback")";
        var feedbackCookieUrl = "@Url.Action("SetUserFeedbackCookies", "FeedBack")";
        var createDatasourceIframeUrl = "@Url.Action("Connection", "DataSourceDesigner")";
        var appBranding = "@GlobalAppSettings.Branding";
        var rootUrl = "@rootUrl";
        var rootUrlAction = "@rootUrl";
        var bannerApiEndpoint = "@bannerApiEndpoint";
        var hideReleaseAlert = @Json.Serialize(hideReleaseAlert);
        var isMobile = @Json.Serialize(isMobile);
        var currentProductVersion = "@currentVersion";
        var runTimeEnvironment = "@ServerAppConfig.RunTimeEnvironment";
        var isUmsAdmin = "@identityResponse.IsUmsAdmin";
        var etlHelpLink = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ETL)";
        var charactersNotAllowedInFileName = @Json.Serialize(ServerAppConfig.CharactersNotAllowedInFileName);
        var dashboardCreateLimitCount = "@dashboardCreateLimitCount";
        var dataSourceCreateLimitCount = "@dataSourceCreateLimitCount";

        var value = {
            Locale: navigator.language,
            TimeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        };

        setTimeout(function () {
            if (cookies["boldservice.client.locale"] != JSON.stringify(value)) {
                SetHttpOnlyCookie("boldservice.client.locale", JSON.stringify(value), 365);
            }
        }, 5000);

        $(document).ready(function () {
            generateProfileAvatar();
        });
        var canCheckSession = @Json.Serialize(ServerAppConfig.IsSelfHosted);
    </script>
    @if (isMobile)
    {
     <script type="text/javascript">
        $(document).ready(function () {
            GetGridName();

            function nextEvent() {
                $(this).on('touchend', function (e) {
                    var htmlWaitingPopupTemplateId = createLoader("html");
                    $("html").ejWaitingPopup({ template: $("#" + htmlWaitingPopupTemplateId) });
                    $("html").ejWaitingPopup("show");
                    window.location.href = ($(this).attr("href"));
                    $(this).off('touchend');
                });
                $(this).on('touchmove', function (e) {
                    $(this).off('touchend');
                });
            }

            $('#main-nav a, .items a, .notification-mobile-link, .menu-options a, .notification-text-content a, .admin-page-header a, #edit-profile-heading-div a, #change-password-btn a').on('click touchstart', this, nextEvent);

            $(window).on('popstate', function (e) {
                $("html").ejWaitingPopup("hide");
            });

            $(document).on('touchend', function (e) {
                $(".tooltip").hide();
            });

            $(document).on("touchend", "#open-dashboard, .item-list-panel li, .favorite-item, .option-click", function (e) {
                if ((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/iPad/i))) {
                    $(this).click();
                }
            });

            if ($("#menu-area").hasClass("in")) {
                $('#menu-area').collapse('hide');
            }
        });

        function GetGridName() {
            gridName = $('#item-grid-container').attr("data-grid-name");

            var isScheduleGrid = $('#scheduleGrid').hasClass("schedule-grid");

            if (typeof gridName != "undefined") {
                if (gridName === "dashboards") {
                    $(".header-org-name").text("@T["DASHBOARDS"]");
                }
                else if (gridName === "widgets") {
                    $(".header-org-name").text("@T["WIDGETS"]");
                }
                else if (gridName === "datasources") {
                    $(".header-org-name").text("@T["DATA SOURCES"]");
                }
            }
            else if (isScheduleGrid) {
                $(".header-org-name").text("@T["SCHEDULES"]");
            }
            else if ($("#server-app-container #homepage-page-container").length > 0) {
                $(".header-org-name").text("@T["PINBOARDS"]");
            }
            else {
                $(".header-org-name").text($(".page-name").attr("data-content"));
            }
        }
        </script>
    }
    @if (includeMessageBox)
    {
        <script>
            $(document).ready(function () {
                $("#messageBox").ejDialog({
                    width: (window.innerWidth > 460) ? "450px" : (window.innerWidth - 10),
                    showOnInit: false,
                    allowDraggable: true,
                    enableResize: false,
                    height: "auto",
                    showHeader: false,
                    enableModal: true,
                    close: "onMessageDialogClose"
                });
            });
        </script>
    }

    @RenderSection("scripts", false)
    <div id="server-app-container" style="@appContainerStyle">
        <section id="header-area" class="mobile-visible">
            <div class="header-bar col-lg-12 col-md-12 col-sm-12">
                @if (!isWelcomePage)
                {
                    <div class="mobile-menu-icon text-center mobile-visible collapsed" data-toggle="collapse" aria-expanded="false" data-target="#menu-area">
                        <span>
                            <i class="su su-mobile-menu-icon"></i>
                        </span>
                    </div>
                }
                <div class="org-name-wrapper">
                    <h5 class="header-org-name">@globalAppSettings.SystemSettings.OrganizationName</h5>
                </div>

                <div class="pull-right" id="notification-section">
                    <a id="notification-link" class="notification-mobile-link no-padding" href="@Url.Action("getusernotifications", "notification" )">
                        <span id="notification-icon" class="su su-notification-alert">

                        </span>
                    </a>
                </div>
            </div>
        </section>
        @if (!isWelcomePage)
        {
            if (isMobile)
            {
                <section id="menu-area" class="collapse width">
                    @await Html.PartialAsync("../Shared/_Menu", globalAppSettings.SystemSettings.CDNLink, new ViewDataDictionary(ViewData) { { "helpSiteBaseUrl", helpSiteBaseUrl }, { "GlobalAppSettings", globalAppSettings }, { "ItemPermission", ViewBag.ItemAddOptions != null ? ViewBag.ItemAddOptions as Dictionary<ItemType, bool> : new Dictionary<ItemType, bool>() } })
                </section>
            }
            else if (!isSlideshow && !isEmbed)
            {
                <section id="menu-area">
                    @await Html.PartialAsync("../Shared/_Menu", globalAppSettings.SystemSettings.CDNLink, new ViewDataDictionary(ViewData) { { "helpSiteBaseUrl", helpSiteBaseUrl }, { "GlobalAppSettings", globalAppSettings }, { "ItemPermission", ViewBag.ItemAddOptions != null ? ViewBag.ItemAddOptions as Dictionary<ItemType, bool> : new Dictionary<ItemType, bool>() } })
                </section>
            }
        }
        <div id="content-area" class="clearfix col-xs-12 @(isSlideshow ? "no-padding" : string.Empty)">
            <div class="suspension-warning" style="display:none">
                <div class="warning-content"></div>
                <div class="close-warning-icons su-close"></div>
            </div>
            @if (!isMobile)
            {
                <div class="user-warning" style="display:none">
                    <div class="user-warning-content"></div>
                </div>
            }
            @RenderSection("MainSection", true)
            <div id="success-alert">
                <div id="image-container">
                    <div class="image-holder">
                        <span class="su su-tick" alt="Success Icon"></span>
                    </div>
                </div>
                <div id="message">
                    <h1 id="message-header"></h1>
                    <span id="message-content"></span>
                </div>
            </div>
            <div id="warning-alert">
                <div id="image-container">
                    <span class="su su-warning-alt" alt="Warning Icon"></span>
                </div>
                <div id="message" class="div-close">
                    <h1 id="message-header"></h1>
                    <span id="message-content"></span>
                </div>
                <div class="close-div">
                    <span id="close-content">@T["Close"]</span>
                </div>
            </div>
            <div id="mobile-alert">
                <span id="message"></span>
            </div>
            <div id="progress-alert-container">

            </div>
        </div>
        @{
            if (requestUrl.IndexOf(dashboardsPageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(adminPageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(homePageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(slideshowPageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(dataSourcePageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(schedulePageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(publishPageUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(profilePagesUrl, StringComparison.OrdinalIgnoreCase) == -1 && requestUrl.IndexOf(userProfilePageUrl, StringComparison.OrdinalIgnoreCase) == -1)
            {
                @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
            }
        }
        @if (includeMessageBox)
        {
            <div id="messageBox" style="display:none">
                <div class="message-header"></div>
                <div class="message-box-close"></div>
                <div class="message-content text-center"></div>
                <div class="message-box-btn-holder"></div>
            </div>
        }
    </div>
    <div class="preloader-wrap" style="width: 100%;height: 100%; position: fixed; top: 0; bottom: 0; background: #fff; z-index : 2; display: none">
        <div id="loader_image" align="center" style="position:relative;top:39%;">
            <div class="loader-blue loader-icon" id="loader-icon">
                <svg class="circular">
                    <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                </svg>
            </div>
        </div>
        <div id="loader_text" align="center" style="font-family:@globalAppSettings.SystemSettings.FontPreference,Segoe UI,SegoeUI,Helvetica Neue,Helvetica,Arial,sans-serif;position:relative;top: 42%;font-size:21px;font-weight:400;"></div>
    </div>
    <div class="e-dlg-overlay" id="common-overlay" style="display: none"></div>
    <div class="page-additional-navigation">
        <input id="userName" type="hidden" value="@loginEmail" />
        <input id="BaseUrlHidden" type="hidden" value="/" />
        <input id="baseurl" name="baseurl" type="hidden" value="" />
        <input id="DateFormat" name="DateFormat" type="hidden" value="@_clientDateTimeInfo.ClientDateTime.DateFormat" />
        <input id="DesignerName" name="DesignerName" type="hidden" value="@(globalAppSettings.SystemSettings.InstallationFolder + "dashboarddesigner")" />
    </div>
    <div id="alert-notification">
    </div>
    <div id="collapse-menu-backdrop" style="display: none;"></div>
    <script>
        var showFeedbackDialog = "@showFeedback";
    </script>
    @*@if (showTour)
        {
            @Styles.Render("~/bundles/styles/dashboard-server-tour")
            Html.RenderPartial("~/Views/Shared/_ServerTour.cshtml", ViewBag.ItemAddOptions as Dictionary<ItemType, bool>);
            @Scripts.Render("~/bundles/scripts/dashboard-server-tour")
        }*@
    @if (requestUrl.IndexOf(dashboardsPageUrl, StringComparison.OrdinalIgnoreCase) == -1)
    {
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/dashboard-feedback.css" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/dashboard-feedback.min.css" />
        </environment>
    }
    @if (!ServerAppConfig.IsSelfHosted)
    {
        @await Html.PartialAsync("~/Views/Shared/_GeneralFeedback.cshtml")
        <environment include="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/dashboard-feedback.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/dashboard-feedback.min.js"></script>
        </environment>
    }
    @if (!isMobile)
    {
        @await Html.PartialAsync("~/Views/Shared/_NotificationBanner.cshtml")
    }
    @await Html.PartialAsync("~/Views/DataSourceDesigner/_Connection.cshtml")
    <div id="upload-popup-container" class="no-padding" style="display:none">
        <div id="upload-popup">
            <iframe id="upload-popup-iframe"></iframe>
        </div>      
    </div>
    @if ((absolutePath == "/" ||
     absolutePath == Url.Content("~/") ||
     requestUrl.IndexOf("/pinboards", StringComparison.CurrentCultureIgnoreCase) > 0 ||
     requestUrl.IndexOf("/dashboards", StringComparison.CurrentCultureIgnoreCase) > 0 ||
     requestUrl.IndexOf("/data-sources", StringComparison.CurrentCultureIgnoreCase) > 0 ||
     requestUrl.IndexOf("/files", StringComparison.CurrentCultureIgnoreCase) > 0 ||
     requestUrl.IndexOf("/schedules", StringComparison.CurrentCultureIgnoreCase) > 0 ||
     requestUrl.IndexOf("/slideshows", StringComparison.CurrentCultureIgnoreCase) > 0 ||
     requestUrl.IndexOf("/widgets", StringComparison.CurrentCultureIgnoreCase) > 0) &&
     !isMobile || !ServerAppConfig.IsSelfHosted)
    {
        if (ViewBag.ItemAddOptions != null && requestUrl.IndexOf(adminPageUrl, StringComparison.OrdinalIgnoreCase) == -1)
        {
            await Html.RenderPartialAsync("~/Views/Items/_ItemAddOptions.cshtml", ViewBag.ItemAddOptions as Dictionary<ItemType, bool>, new ViewDataDictionary(ViewData) { { "IsDashboardsPage", requestUrl.IndexOf("/dashboards", StringComparison.CurrentCultureIgnoreCase) > 0 } });
        }
        @await Html.PartialAsync("~/Views/Items/_CreateItemMenu.cshtml", ViewBag.ItemAddOptions != null ? ViewBag.ItemAddOptions as Dictionary<ItemType, bool> : new Dictionary<ItemType, bool>());
    }
    @if (!isMobile)
    {
        @await Html.PartialAsync("~/Views/Notification/_UserNotificationPartial.cshtml")
        @await Html.PartialAsync("~/Views/Shared/_Toast.cshtml")
    }
</body>
</html>