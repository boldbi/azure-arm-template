@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@{
    var globalAppSettings = _globalAppSettings;
    ViewBag.Title = T["Custom Email"].Value + " - " + globalAppSettings.SystemSettings.OrganizationName;
    ViewBag.BackIconRedirectionUrl = ViewBag.IsEditTemplate ? (Url.Action("SpecificEventEmailTemplate", "Administration") + $"?templateId={ViewBag.TemplateId}") : (Url.Action("EmailSettings", "Administration") + "?tab=custom-email-template");
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var designerServiceUrl = ServerAppConfig.GetServiceEndPointUrl(ServerAppConfig.InternalAppDataServiceUrl, _globalAppSettings);
    var dashboardDesignerResourceUrl = globalAppSettings.SystemSettings.DesignerCdnLink.TrimEnd('/');
    var disclaimerContent = ViewBag.DisclaimerContent != null ? ViewBag.DisclaimerContent : _globalAppSettings.SystemSettings.DisclaimerContent;
    var headerContent = ViewBag.HeaderContent != null ? ViewBag.HeaderContent : string.Empty;
    var subject = ViewBag.Subject != null ? ViewBag.Subject : string.Empty;
    var sendEmailAsHTML = ViewBag.SendEmailAsHTML != null ? ViewBag.SendEmailAsHTML : false;
    var isEnabled = ViewBag.IsEnabled != null ? ViewBag.IsEnabled : false;
    var showEmailLogo = ViewBag.ShowEmailLogo != null ? ViewBag.ShowEmailLogo : false;
    var showLoginLink = ViewBag.ShowLoginLink != null ? ViewBag.ShowLoginLink : false;
    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var canShowAdminMenu = await ServerAppConfig.CanShowAdminMenu(model, _identityResponse.IsAdmin, _featureManager);
    var showFooterLogo = ViewBag.ShowFooterLogo != null ? ViewBag.ShowFooterLogo : false;
    var emailBody = ViewBag.MailBody == null ? ViewBag.DefaultBodyContent : ViewBag.MailBody;
    var templateId = ViewBag.TemplateId;
    var specificEventTemplates = ViewBag.SpecificTemplate;
    var isEditTemplate = ViewBag.IsEditTemplate;
}
@section styles {
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.min.css" />
    </environment>
}

@section scripts {
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.min.js"></script>
    </environment>
    <script>
        var emailTemplateId = @templateId;
        var updateEmailConfigureDataUrl = "@Url.Action("UpdateEmailConfigureEvent", "Administration")";
        var createNewTemplateURL = "@Url.Action("CreateNewTemplateFromExistingTemplate", "Administration")";
        var emailTemplateURL =  "@Url.Action("EmailTemplateGrid", "Administration")";
        var emailSettingsConfigUrl = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.EmailSettingsConfiguration)";
        var emailBody = @Json.Serialize(emailBody);
        var sendEmailAsHTML = @Json.Serialize(sendEmailAsHTML);
        var isEditTemplate = @Json.Serialize(isEditTemplate);
        var specificEventTemplates = @Json.Serialize(specificEventTemplates);
        var markAsDefaultUrl = "@Url.Action("MarkEmailTemplateAsDefault", "Administration")";
        var specificEventListURL = "@Url.Action("SpecificEvents", "Administration")";
        var deleteTemplateUrl = "@Url.Action("DeleteTemplate", "Administration")";
    
    </script>



    <script asp-append-version="true" src="@designerServiceUrl/scripts/designerlocalization.js?v=@ServerAppConfig.ProductVersion&c=@System.Globalization.CultureInfo.CurrentCulture"></script>
    <script asp-append-version="true" src="@dashboardDesignerResourceUrl/cdn/scripts/designer/ej1.web.all.min.js"></script>
    <script asp-append-version="true" src="@dashboardDesignerResourceUrl/cdn/scripts/designer/ej2.web.all.min.js"></script>
    <script asp-append-version="true" src="@dashboardDesignerResourceUrl/cdn/scripts/designer/ej2.calendars.all.min.js"></script>
    <script asp-append-version="true" src="@dashboardDesignerResourceUrl/cdn/scripts/designer/ej2.richtexteditor.all.min.js"></script>
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/configureemail.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/configureemail.min.js"></script>
    </environment>

    <script type="text/x-jsrender" id="isDefault">
    {{if IsDefaultTemplateString === "false"}}
    <span title=@T["No"] data-toggle="dropdown">
            <span>@T["No"]</span>
        </span>
        {{else}}
        <span title="@T["Yes"]" data-toggle="dropdown">
            <span>@T["Yes"]</span>
        </span>
        {{/if}}
</script>
    <script type="text/x-jsrender" id="templatenamefield">
        <span title="{{:EmailTemplateName}}" data-toggle="dropdown" class="emailtemplatefield">
         <span id="email-template-name"> {{:EmailTemplateName}}</span>
         {{if IsSystemDefaultString === "true"}}
         <span class="badge badge-secondary1 badge-secondary2" data-toggle="tooltip" title="@T["This is a predefined template by the application."]">@T["System"]</span>
         {{/if}}
         {{if IsDefaultTemplateString === "true" && IsSystemDefaultString !== "true" }}
          <span class="badge badge-secondary1 badge-secondary2" data-toggle="tooltip" title="@T["This is a custom template set as the default by user."]" >@T["Default"]</span>
          {{/if}}
        </span>
</script>
    <script type="text/x-jsrender" id="options">
    <div class="dropdown actions-container context-menu" style="position:absolute;">
        <span class="dropdown-toggle option-icon" data-toggle="dropdown">
            <span class="su su-options" data-toggle="tooltip" title="@T["Action"]"> </span>
        </span>
        <ul class="dropdown-menu" role="menu">
        {{if (!IsSystemDefault)}}
        <li>
            <a href="@Url.Action("EmailConfigure", "Administration")?templateId={{:TemplateId}}&id={{:Id}}" title="@T["Edit"]" data-toggle="tooltip" data-template-name="{{:EmailTemplateName}}" data-unique-id = "{{:Id}}" data-template-id="{{:TemplateId}}" target="_blank" class="configure-email">
                <i class="su su-edit"></i>
                <span>@T["Edit"]</span>
            </a>
        </li>
        {{/if}}
        <li>
            <a id="copy-template" class="configure hover" data-template-name="{{:EmailTemplateName}}" title="@T["Copy"]" data-toggle="tooltip" data-unique-id = "{{:Id}}" data-template-id="{{:TemplateId}}">
                <i class="su su-copy"></i>
                <span>@T["Copy"]</span>
            </a>
        </li>
        {{if (IsDefaultTemplateString === "false")}}
        <li>
            <a class="markasdefault hover" data-template-name="{{:EmailTemplateName}}" title="@T["Mark as default"]" data-toggle="tooltip" data-unique-id = "{{:Id}}" data-template-id="{{:TemplateId}}">
                <i class="su su-tick"></i>
                <span>@T["Mark as default"]</span>
            </a>
        </li>
        {{/if}}
        {{if (IsDefaultTemplateString === "false" && IsSystemDefaultString === "false") }}
        <li>
            <a class="delete-template hover" data-template-name="{{:EmailTemplateName}}" title="@T["Delete"]" data-toggle="tooltip" data-unique-id = "{{:Id}}" data-template-id="{{:TemplateId}}">
                <i class="su su-delete"></i>
                <span>@T["Delete"]</span>
            </a>
        </li>
                {{/if}}
        </ul>
    </div>
</script>
}

@section MainSection
{
    @await Html.PartialAsync("_AdminMenu")
    <div class="col-xs-12 no-padding no-margin @(canShowAdminMenu ? "width-alignment" : "admin-panel-full-width")">
        <div class="col-xs-12 no-padding" id="email-configure-header-section">
            @await Html.PartialAsync("../Shared/_TopHeaderSection", new ViewDataDictionary(ViewData) { { "PageHeader", @ViewBag.EmailTemplateName }, { "PageDescription", ViewBag.Description } })
        </div>

        <div id="email-setting" class="col-xs-12 bi-page-header tabs-header-padding top-nav-btn-secton">
            <div class="col-xs-12 no-padding">
                @if (!isEditTemplate)
                {
                    <div id="search-area" class="pull-left col-xs-4">
                        <input type="text" class="pull-left" id="search-template" placeholder="@T["Search Template"]"/>
                        <span class="su su-inner-close close-icon pull-left" id="clear-search" data-toggle="tooltip" title="@T["Clear search"]"></span>
                        <span class="su su-search search-user pull-left" data-toggle="tooltip" title="@T["Search"]"></span>
                    </div>
                }
                <div class="col-xs-6 no-padding button-section">
                    @if (isEditTemplate)
                    {
                        <button class="secondary-button app-btn-secondary pull-right" id="cancel-email-template">@T["Cancel"]</button>
                        <button type="button" title="" id="UpdateEmail-Configuration" name="UpdateEmailConfigure" class="primary-button app-btn-primary pull-right update-mail-configure">
                            <span>@T["Save"]</span>
                        </button>
                    }
                    else
                    {
                        <button type="button" title="" id="copy-email-template" data-template-id="@templateId" name="copytemplate" class="primary-button app-btn-primary pull-right copy-template">
                            <span>@T["Create Template"]</span>
                        </button>
                    }

                </div>
            </div>
        </div>
    </div>
    @if (!isEditTemplate)
    {

        <div class="col-xs-12 bi-page-container @(canShowAdminMenu ? string.Empty : "admin-panel-full-width")" id="specifc-templates">
            <div class="col-xs-12 bi-page-content no-padding">
                <div class="col-xs-12 bi-page-body col-lg-12">
                    <div class="col-xs-12 no-padding ">
                        <div id="specificEmailTemplateListGrid" class="col-xs-12 no-padding"></div>

                    </div>
                </div>
            </div>
            <div id="template-add-dialog-wrapper" style="display: none">
                <div class="dialog" id="template-add-dialog">
                    <form class="dialog-body col-xs-12 no-padding add-template-dialog-form" id="dialog-container" style="display: none" autocomplete="off">
                        <div id="template-name-field" class="col-xs-12 form-padding" style="padding: 0">
                            <label class="app-textbox-label text-right lable-style">@T["Template name"] *</label>
                            <div class="col-xs-8 input-container">
                                <input type="text" id="templateName" maxlength="254" class="form-control input-style" placeholder="@T["Template name"]" name="Template name" data-name="Template name" required>
                                <span style="display: none;" class="templateAdd-validation-messages validate-error" id="invalid-templatename">@T["Template name can't be empty"]"</span>
                            </div>
                        </div>
                        <div class="col-xs-12" id="mark-default-division" style=display:none>
                            <div class="col-xs-12 no-padding text-label">@T["Copy from template"] *</div>
                            <div class="col-xs-12 no-padding dropup">
                                <select id="copy-template-list" class="selectpicker" data-live-search="true" data-size="3" placeholder="@T["select a template"]">
                                </select>
                            </div>
                        </div>

                    </form>
                </div>
            </div>

            @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
        </div>


        <script type="text/javascript">
            $(function () {
                $("#search-template").val("");
                var data = ej.DataManager({
                    url:emailTemplateURL + '?templateId=' + emailTemplateId,
                    adaptor: new ej.UrlAdaptor()
                });
                $("#specificEmailTemplateListGrid").ejGrid({
                    dataSource:  data,
                    gridLines: ej.Grid.GridLines.None,
                    allowSorting: true,
                    allowPaging: true,
                    allowSearching: true,
                    allowSelection: true,
                    allowFiltering: false,
                    filterSettings: { filterType: "menu" },
                    pageSettings: { pageSize: 20 },
                    enableRowHover: true,
                    enableAltRow: false,
                    load: "fnOnUserGridLoad",
                    actionBegin: "fnOnUserGridActionBegin",
                    actionComplete: function(args) {
                        $('[data-toggle="tooltip"]').tooltip({ container: $('body') });
                        if (args.model.currentViewData.length === 0) {
                            rowBound();
                        }
                    },
                    rowDataBound: function () {
                        var height = $(".e-gridcontent").height();
                        if (height != null) {
                            rowBound();
                        }
                        $('[data-toggle="tooltip"]').tooltip({ container: $('body') });
                    },
                    dataBound: function (args) {
                        $('[data-toggle="tooltip"]').tooltip({ container: $('body') });
                        $("#checkbox-header").change(headCheckboxOnChange);
                        this.model.indexes = {};
                    },
                    columns: [
                        { type: "string",headerText: "@T["Template"]", width: 40, allowFiltering: true, allowSorting: true, template: "#templatenamefield" },
                        { field: 'LastModifiedDate', type: "string",headerText: "@T["Modified Date"]", width: 25, allowFiltering: false, allowSorting: false },
                        { field: 'LastModifiedByName', type: "string",headerText: "@T["Modified By"]", width: 25, allowFiltering: false, allowSorting: false },
                        { width: 7, allowFiltering: true, allowSorting: false, template: "#options" },
                    ],
                });

    });
        </script>
    }
    else
    {
        <div id="email-configure" class="bi-page-container @(canShowAdminMenu ? string.Empty : "admin-panel-full-width")" role="tabpanel" aria-labelledby="email-configure">
            <div class="bi-page-content col-xs-12 no-padding">
                <input type="hidden" id="defaultBodyContent" value="@ViewBag.DefaultBodyContent"/>

                <div id="email-content-container" class="col-xs-12 no-padding">
                    <div class="email-content-header">
                        <h3 class="email-content-header no-margin">@T["Email Content"]</h3>
                        <h5 class="email-content-description">
                            @T["You can customize email content, such as the subject and body here."]
                        </h5>
                    </div>
                    <div class="col-xs-12 no-padding subject-align">
                        <h4 class="name-header no-margin">@T["Template Name"]</h4>
                        <div class="form-input-field col-xs-12 no-padding name-text">
                            <input type="text" data-unique-id="@ViewBag.UniqueId" data-template-id="@ViewBag.TemplateId" id="Template-name-input" class="form-control txt-holder validation-padding subject-fields" name="name" placeholder="" value="@ViewBag.SpecificTemplateName" data-maxlength="255" @(ViewBag.IsDisableEmailContent ? "disabled" : string.Empty)/>
                            <div class="validate-error" id="name-content-validation">@T["Please enter the subject"]</div>
                        </div>
                    </div>
                    <div class="email-configure-container html-checkbox-style">
                        <div class="custom-template-label inline-align activation html-mail-checkbox-header">
                            @T["HTML Email"]
                        </div>
                        <div class="material-switch inline-align">
                            <input type="checkbox" id="sendemailashtml" @(sendEmailAsHTML ? "checked" : string.Empty) @(ViewBag.IsDisableEmailContent ? "disabled" : string.Empty)/>
                            <label for="sendemailashtml" class="label-primary"></label>
                        </div>
                        <div class="info-message">
                            @Html.Raw("Disabling this option allows the application to send emails in Rich Text format. The Rich Text format will remove all HTML styles, including branding logos, login options, footer content, disclaimer content, preheader content, and background colors.")
                        </div>
                    </div>
                    <div class="col-xs-12 no-padding subject-align">
                        <h4 class="subject-header no-margin">@T["Subject"]</h4>
                        <div class="form-input-field col-xs-12 no-padding subject-text">
                            <input type="text" id="subject-input" class="form-control txt-holder validation-padding subject-fields" name="subject" placeholder="" value="@subject" data-maxlength="255" @(ViewBag.IsDisableEmailContent ? "disabled" : string.Empty)/>
                            <div class="validate-error" id="subject-content-validation">@T["Please enter the subject"]</div>
                        </div>
                    </div>
                    <div class="col-xs-12 no-padding">
                        <h4 class="header-content-header no-margin">@T["Pre Header"]</h4>
                        <div class="form-input-field col-xs-12 no-padding header-content-text">
                            <input type="text" id="header-content-input" class="form-control txt-holder validation-padding header-content-fields" name="header-content" placeholder="" value="@headerContent" data-maxlength="255" @(ViewBag.IsDisableEmailContent ? "disabled" : string.Empty)/>
                            <div class="validate-error" id="header-content-validation"></div>
                        </div>
                    </div>
                    <div class="no-padding email-custom-editor @(ViewBag.IsDisableEmailContent ? "disabled" : string.Empty)" id="email-editor-area">
                        <div class="col-sm-12 col-xs-12 no-padding email-editor custom-bootstrap-styles" id="email-editor-panel">
                            <div class="col-sm-2 col-xs-2 no-padding align-center email-body-label"><span>@T["Body"]</span></div>
                            <div class="col-sm-12 col-xs-12 no-padding" id="email-body-container"></div>
                            <div id="email-content-validation" style="visibility: visible;"></div>
                        </div>
                    </div>

                    <div class="col-xs-12 no-padding disclaimer-content">
                        <h4 class="disclaimer-content-header no-margin">@T["Disclaimer Content"]</h4>
                        <div class="form-input-field col-xs-12 no-padding disclaimer-content-text">
                            <textarea id="disclaimer-content-input" class="form-control txt-holder validation-padding disclaimer-content-fields" name="disclaimer-content" placeholder="" data-maxlength="255" @(ViewBag.IsDisableEmailContent ? "disabled" : string.Empty)>@disclaimerContent</textarea>
                            <div class="validate-error" id="disclaimer-content-validation"></div>
                        </div>
                    </div>
                </div>
            </div>
            @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
        </div>

    }
}

@* Closing brace for the code block *@
