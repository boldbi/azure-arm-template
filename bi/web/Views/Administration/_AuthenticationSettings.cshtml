@addTagHelper *, Microsoft.FeatureManagement.AspNetCore
@using System.Runtime.InteropServices;
@{
    var globalAppSettings = _globalAppSettings;
    ViewBag.Title = T["Authentication Settings"].Value + " - " + globalAppSettings.SystemSettings.OrganizationName;
    var ldapRegEx = @"/(?:ldap|http)s?:\/\/(?:(?!.*\d[\/?:])[a-z0-9\-._~%]+|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\[[a-z0-9\-._~%!$&'()*+,;=:]+\])(?::\d+)?(?:[\/?][\-A-Z0-9+&@#\/%?=~_|$!:,.;]*)?$/i";
    var oauthRegEx = @"/(?:^|[ \t])((https?:\/\/)?(?:localhost|[\w-]+(?:\.[\w-]+)+)(:\d+)?(\/\S*)?)/";
    List<TenantAuthControl> authControl = null;
    TenantAuthControl cloudAuthControl = null;
    var loginOptions = globalAppSettings.SystemSettings.LoginOptions;
#if DashboardServerOnPremise
    authControl = ViewBag.AuthControl as List<TenantAuthControl>;
    authControl = authControl != null && authControl.Count > 0 ? authControl : null;
#else
    cloudAuthControl = ViewBag.AuthControl as TenantAuthControl;
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.DefaultAuthentication);
#endif
    var isAzureApplication = ServerAppConfig.IsAzureApplication;
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var canShowAdminMenu = await ServerAppConfig.CanShowAdminMenu(model, _identityResponse.IsAdmin, _featureManager);
    var isAdmin = _identityResponse.IsAdmin;
    var isOpenIdIdentityProviderOptionEnabled = ViewBag.OpendIdentityProviderInfo != null ? ViewBag.OpendIdentityProviderInfo.IsIdentityProviderInfoOptionEnabled : false;
    var isOAuthIdIdentityProviderOptionEnabled = ViewBag.OAuthdIdentityProviderInfo != null ? ViewBag.OAuthdIdentityProviderInfo.IsIdentityProviderInfoOptionEnabled : false;
    var isOpenIdCustomMailOptionEnabled = ViewBag.OpendIdentityProviderInfo != null ? ViewBag.OpendIdentityProviderInfo.IsCustomInviteMailOptionEnabled : false;
    var isOAuthCustomMailOptionEnabled = ViewBag.OAuthdIdentityProviderInfo != null ? ViewBag.OAuthdIdentityProviderInfo.IsCustomInviteMailOptionEnabled : false;
    var openIdIdentityProviderName = ViewBag.OpendIdentityProviderInfo != null ? ViewBag.OpendIdentityProviderInfo.IdentityProviderName : string.Empty;
    var openIdIdentityProviderURL = ViewBag.OpendIdentityProviderInfo != null ? ViewBag.OpendIdentityProviderInfo.IdentityProviderURL : string.Empty;
    var oAuthIdentityProviderName = ViewBag.OAuthdIdentityProviderInfo != null ? ViewBag.OAuthdIdentityProviderInfo.IdentityProviderName : string.Empty;
    var oAuthIdentityProviderURL = ViewBag.OAuthdIdentityProviderInfo != null ? ViewBag.OAuthdIdentityProviderInfo.IdentityProviderURL : string.Empty;
    var openIdCustomMailContent = ViewBag.OpendIdentityProviderInfo != null ? ViewBag.OpendIdentityProviderInfo.EmailContent : string.Empty;
    var oAuthCustomMailContent = ViewBag.OAuthdIdentityProviderInfo != null ? ViewBag.OAuthdIdentityProviderInfo.EmailContent : string.Empty;
    var openIdSubject = ViewBag.OpendIdentityProviderInfo != null ? ViewBag.OpendIdentityProviderInfo.Subject : string.Empty;
    var oAuthSubject = ViewBag.OAuthdIdentityProviderInfo != null ? ViewBag.OAuthdIdentityProviderInfo.Subject : string.Empty;
    var dashboardDesignerResourceUrl = globalAppSettings.SystemSettings.DesignerCdnLink.TrimEnd('/');
    var loginDisclaimerObject = ViewBag.SystemSettings.LoginDisclaimer;
    var pageDescription = T["Configure authentication/authorization providers’ information."];
    var enableSigningKeyOptions = !string.IsNullOrEmpty(ViewBag.JwtSettings.JWTSettings.SigningKey);
}
@section styles{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.css" />
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/user-database-import.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.min.css" />
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/user-database-import.css" />
    </environment>
}
@section scripts{
    <script>
        var oAuthEnabled = @Html.Raw(Json.Serialize(ViewBag.OAuthSettings.IsEnabled));
        var openIdEnabled = @Html.Raw(Json.Serialize(ViewBag.OpenIDSettings.IsEnabled));
        var jwtEnabled = @Html.Raw(Json.Serialize((ViewBag.JwtSettings.IsEnabled)));
        var azureAdB2cEnabled = @Html.Raw(Json.Serialize(ViewBag.AzureAdB2CSettings.IsEnabled));
        var singleLogout = @Html.Raw(Json.Serialize(ViewBag.AzureAdB2CSettings.AzureADB2CSettings.IsSloEnabled));
        var oAuthEnableCreateAccount = @Html.Raw(Json.Serialize(ViewBag.OAuthSettings.OAuthAuthSettings.CanCreateAccount));
        var openIdEnableCreateAccount = @Html.Raw(Json.Serialize(ViewBag.OpenIDSettings.OIDCAuthSettings.CanCreateAccount));
        serverApp.controller("adSettingsController", ["$scope", function ($scope) {
            $scope.regex = '^(?!(ftp|https?):\/\/)([a-zA-Z0-9-_]+\.)*[a-zA-Z0-9][a-zA-Z0-9-]+(\.[a-z]{2,6})?(:\d{1,5})?(\/[a-zA-Z0-9]+[a-zA-Z0-9]*(\.[a-z]{2,8})?)*?$';
            $scope.distinguishedNameRegex = /^(\w+[=]{1}[a-zA-Z0-9-_\s]+)([\,{1}]\w+[=]{1}[a-zA-Z0-9-_\s]+)*$/;
            $scope.oauthIsEnabled = oAuthEnabled;
            $scope.openidIsEnabled = openIdEnabled;
            $scope.jwtIsEnabled = jwtEnabled;
            $scope.azureADB2CIsEnabled = azureAdB2cEnabled;
            $scope.singlelogoutIsEnabled = singleLogout;
            $scope.oauthIdentityProviderInfoIsEnabled = isOAuthIdIdentityProviderOptionEnabled;
            $scope.oauthCustomMailContentIsEnabled = isOAuthCustomMailOptionEnabled;
            $scope.openIdIdentityProviderInfoIsEnabled = isOpenIdIdentityProviderOptionEnabled;
            $scope.openIdCustomMailContentIsEnabled = isOpenIdCustomMailOptionEnabled;
            $scope.oauthCreateAccount = oAuthEnableCreateAccount;
            $scope.openidCreateAccount = openIdEnableCreateAccount;
        }]);

    </script>
    <script>
        var defaultAuthentication = "";
        var addUserDirectoryLogUrl = "@Url.Action("AddSystemLogForUserDirectory", "Administration")";
        var userDirectoryAuthControl = helpSiteBaseUrl + "/site-settings/authentication-control";
        var userDirectoryOauth = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.OAuthAuthenticationSettings)";
        var userDirectoryOpenid = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.OpenIDAuthenticationSettings)";
        var userDirectoryDefaultAuth = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.DefaultAuthentication)";
        var updateauthsettingsUrl = "@Url.Action("UpdateAuthenticationSettings", "Administration")";
        var refreshSigningKeyUrl = "@Url.Action("RegenerateSigningKey", "Administration")";
        var updateauthcontrolUrl = "@Url.Action("UpdateAuthControl", "Administration")";
        var updateLoginOptionsUrl = "@Url.Action("UpdateLoginOptions", "Administration")";
        var defaultauthsettingsUrl = "@Url.Action("UpdateDefaultAuthentication", "Administration")";
        var dashboardServerResourceUrl = "@globalAppSettings.SystemSettings.CDNLink";
        var SystemSettingsProperties = @Html.Raw(Json.Serialize(ViewBag.SystemSettings));
        var isAzureApplication = @Json.Serialize(isAzureApplication);
        var isOpenIdIdentityProviderOptionEnabled = @Json.Serialize(isOpenIdIdentityProviderOptionEnabled);
        var isOAuthIdIdentityProviderOptionEnabled = @Json.Serialize(isOAuthIdIdentityProviderOptionEnabled);
        var isOpenIdCustomMailOptionEnabled = @Json.Serialize(isOpenIdCustomMailOptionEnabled);
        var isOAuthCustomMailOptionEnabled = @Json.Serialize(isOAuthCustomMailOptionEnabled);
        var openIdCustomMailContent = @Html.Raw(Json.Serialize(openIdCustomMailContent));
        var oAuthCustomMailContent = @Html.Raw(Json.Serialize(oAuthCustomMailContent));
        var IsAuthAddOnEnabled = @Json.Serialize(ViewBag.IsAuthAddOnEnabled);
        var loginDisclaimer = @Html.Raw(Json.Serialize(loginDisclaimerObject));
        var brandingName = "@ServerAppConfig.BrandingJson.BrandingName";
    </script>
    <script type="text/javascript">

        $(document)
            .ready(function () {
                var section = window.location.href;
                $(".system-settings-sidebar li").hide();

                if (section.toLowerCase().indexOf("groups") > 0 ||
                    section.toLowerCase().indexOf("users") > 0 ||
                    section.toLowerCase().indexOf("user-management") > 0) {
                    $("li[data-current-content='groups'],li[data-current-content='users']").show();
                } else {
                    $("li[data-current-content='emailsettings'],li[data-current-content='usersettings'],li[data-current-content='general'],li[data-current-content='activedirectorysettings'],li[data-current-content='notificationsettings'],li[data-current-content='usersettings'],li[data-current-content='databasesettings'],li[data-current-content='licensesettings']").show();
                }
                if (section.toLowerCase().indexOf("groups") > 0) {
                    $("li[data-current-content='groups'] a").addClass('active');
                } else if (section.toLowerCase().indexOf("users") > 0 ||
                    section.toLowerCase().indexOf("user-management") > 0) {
                    $("li[data-current-content='users'] a").addClass('active');
                } else if (section.toLowerCase().indexOf("e-mail-settings") > 0) {
                    $("li[data-current-content='emailsettings'] a").addClass('active');
                    $("#look-and-feel-container, #active-directory-container, #database-settings-container, #user-settings-container").hide();
                    $("#mail-settings-container").show();
                } else if (section.toLowerCase().indexOf("user-settings") > 0) {
                    $("li[data-current-content='usersettings'] a").addClass('active');
                    $("#look-and-feel-container, #active-directory-container, #database-settings-container, #mail-settings-container").hide();
                    $("#user-settings-container").show();
                } else if (section.toLowerCase().indexOf("authentication-settings") > 0) {
                    $("li[data-current-content='activedirectorysettings'] a").addClass('active');
                    $("#look-and-feel-container, #mail-settings-container,#database-settings-container, #user-settings-container").hide();
                    $("#active-directory-container").show();
                } else if (section.toLowerCase().indexOf("notification-settings") > 0) {
                    $("li[data-current-content='notificationsettings'] a").addClass('active');
                } else if (section.toLowerCase().indexOf("database-settings") > 0) {
                    $("li[data-current-content='databasesettings'] a").addClass('active');
                } else if (section.toLowerCase().indexOf("license-settings") > 0) {
                    $("li[data-current-content='licensesettings'] a").addClass('active');
                    $("#mail-settings-container, #active-directory-container, #user-settings-container").hide();
                } else {
                    $("li[data-current-content='general'] a").addClass('active');
                    $("#look-and-feel-container").show();
                    $("#mail-settings-container, #active-directory-container, #database-settings-container, #user-settings-container").hide();
                    addUserDirectoryLog("site");
                }
            });

        function addUserDirectoryLog(tabName) {
            var resultName = "";
            switch (tabName) {
                case "site":
                    resultName = "SiteSettings";
                    break;
                case "oauth":
                    resultName = "UserDirectory.OAuth2";
                    break;
                case "openid":
                    resultName = "UserDirectory.OpenIDConnect";
                    break;
                case "auth-control":
                    resultName = "UserDirectory.AuthControl";
                    break;
                default:
                    resultName = "";
            }

            $.ajax({
                type: "POST",
                url: addUserDirectoryLogUrl,
                data: { tabName: resultName }
            });
        }
    </script>
}

@section MainSection{
    @await Html.PartialAsync("_AdminMenu")
    @await Html.PartialAsync("_DefaultAuthenticationConfirmationDialog")
    <div ng-controller="adSettingsController" class="col-xs-12 no-padding no-margin @(canShowAdminMenu ? "width-alignment" : "admin-panel-full-width") height-100-percentage">
        <div class="col-xs-12 no-padding no-margin">
            <div class="col-xs-12 no-padding">
                @await Html.PartialAsync("../Shared/_TopHeaderSection", new ViewDataDictionary(ViewData) { { "PageHeader", @T["Authentication Settings"] }, { "PageDescription", @pageDescription } })
            </div>
            <div class="col-xs-12 bi-page-header @(((ServerAppConfig.IsSelfHosted || isAdmin) || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))) ? "tabs-header-padding" : string.Empty) top-nav-btn-secton">
                <div class="col-xs-12 no-padding">
                    <div class="col-xs-6 no-padding button-section">
                        @if (ViewBag.ThirdPartyLogins)
                        {
                            <a href="@Url.Action("Index","Home")" class="secondary-button app-btn-secondary pull-right" id="cancel-active-dir-settings" title="">@T["Cancel"]</a>
                            @if (ServerAppConfig.IsSelfHosted)
                            {
                                <button type="submit" id="update-defaultauthlogin-settings" class="primary-button app-btn-primary pull-right update-defaultauth-settings">@T["Save"]</button>
                            }
                            <button type="submit" id="update-auth-control" class="primary-button app-btn-primary pull-right">@T["Save"]</button>
                            <button type="submit" id="update-azure-b2c-settings" class="primary-button app-btn-primary pull-right update-auth-settings" ng-disabled="azureADB2cSettingsForm.$invalid">@T["Save"]</button>
                            <button type="submit" id="update-oauth-settings" class="primary-button app-btn-primary pull-right update-auth-settings" ng-disabled="oauthSettingsForm.$invalid">@T["Save"]</button>
                            <button type="submit" id="update-openid-settings" class="primary-button app-btn-primary pull-right update-auth-settings" ng-disabled="openidSettingsForm.$invalid">@T["Save"]</button>
                            <button type="submit" id="update-jwt-settings" class="primary-button app-btn-primary pull-right update-auth-settings" ng-disabled="jwtSettingsForm.$invalid">@T["Save"]</button>
                        }
                    </div>
                </div>
            </div>
            <div class="col-xs-12 no-padding bi-page-nav-bar">
                <ul id="ad-tab-nav" class="nav nav-tabs" role="tablist">
                    @if (ServerAppConfig.IsSelfHosted && (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))))
                    {
                        <li role="presentation" class="active">
                            <a href="#general" id="general-settings-tab" aria-controls="general-tab" role="tab" data-toggle="tab">@T["General"]</a>
                        </li>
                    }
                    @*@if (!ServerAppConfig.IsSelfHosted && (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))))
                {
                <li role="presentation" class="active">
                <a href="#auth-control" id="auth-control-tab" aria-controls="auth-control-tab" role="tab" data-toggle="tab">@T["General"]</a>
                </li>
                }*@
                    @if (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings])))
                    {
                        <li role="presentation" class="@(!ServerAppConfig.IsSelfHosted ? "active" : string.Empty)">
                            <a href="#auth-control" id="auth-control-tab" aria-controls="auth-control-tab" role="tab" data-toggle="tab">@T["Authentication Control"]</a>
                        </li>
                    }

                    @if (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings])))
                    {
                         <li role="presentation">
                              <a href="#oauth-settings" id="oauth-settings-tab" aria-controls="oauth-settings-tab" role="tab" data-toggle="tab">OAuth 2.0</a>
                         </li> 
                    }

                    @if (ServerAppConfig.IsSelfHosted && (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))))
                    {
                        <li role="presentation">
                            <a href="#openid-settings" id="openid-settings-tab" aria-controls="openid-settings-tab" role="tab" data-toggle="tab">OpenID Connect</a>
                        </li>
                    }

                    @if (ServerAppConfig.IsSelfHosted && (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))))
                    {
                    <li role="presentation">
                        <a href="#jwt-settings" id="jwt-settings-tab" aria-controls="jwt-settings-tab" role="tab" data-toggle="tab">JWT</a>
                    </li>
                    }
                    @*@if (!ServerAppConfig.IsSelfHosted && (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))))
                {
                <li role="presentation">
                <a href="#azure-b2c-settings" id="azure-ad-control-tab" aria-controls="azure-ad-control-tab" role="tab" data-toggle="tab">Azure AD B2C</a>
                </li>
                }*@

                </ul>
            </div>
        </div>
        <div id="active-directory-container" role="tabpanel" class="bi-page-container bi-page-container-with-tab @(ViewBag.ThirdPartyLogins ? string.Empty : "unlock-enterprise-features blur-content") admin-panel-full-width" aria-labelledby="active-directory-settings-link">
            <div class="bi-page-content col-xs-12 no-padding">
                <div class="tab-content col-xs-12 no-padding">
                    @if (ServerAppConfig.IsSelfHosted && (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))))
                    {
                        @await Html.PartialAsync("_DefaultAuthentication")
                    }

                    @if (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings])))
                    {
                        @if (ServerAppConfig.IsSelfHosted)
                        {
                            <div role="tabpanel" class="tab-pane col-xs-12 no-padding" id="auth-control">
                                <div id="auth-control-body" class="col-xs-12 bi-page-body">
                                    <form id="auth-control-form" name="authControlForm" class="form-top-margin col-xs-12 no-padding" method="post" enctype="multipart/form-data" autocomplete="off">
                                        <div class="col-xs-12 checkbox-bottom no-padding">
                                            @Html.CheckBox("enable-global-default", (authControl != null && authControl.Where(x => x.AuthType == AuthType.DefaultAuth).FirstOrDefault().IsEnabled), new { @class = "material-checkbox" })
                                            <input type="hidden" id="default-control-type" value="@AuthType.DefaultAuth">
                                            <label for="enable-global-default">
                                                <span>
                                                    @T["Enable Global Default Authentication"]
                                                </span>
                                            </label>
                                            <div class="info-message">
                                                @string.Format(T["Enabling the global default authentication allows you to inherit the {0}'s default authentication settings. The application will automatically redirect to the {0}'s default authentication provider’s login page instead of the application’s login page."].Value, "UMS")
                                            </div>
                                        </div>
                                        <div class="col-xs-12 checkbox-bottom no-padding ">
                                            @Html.CheckBox("enable-global-oauth", (authControl != null && authControl.Where(x => x.AuthType == AuthType.OAuth).FirstOrDefault().IsEnabled), new { @class = "material-checkbox" })
                                            <input type="hidden" id="oauth-control-type" value="@AuthType.OAuth">
                                            <label for="enable-global-oauth">
                                                <span>
                                                    @string.Format(T["Enable Global {0} Settings"].Value, "OAuth")
                                                </span>
                                            </label>
                                            <div class="info-message">
                                                @string.Format(T["Enabling the global {0} settings allows you to display the globally configured {0} provider login button on the login page."].Value, "OAuth")
                                            </div>
                                        </div>
                                        <div class="col-xs-12 final-checkbox-bottom no-padding">
                                            @Html.CheckBox("enable-global-openid", (authControl != null && authControl.Where(x => x.AuthType == AuthType.OIDC).FirstOrDefault().IsEnabled), new { @class = "material-checkbox" })
                                            <input type="hidden" id="openid-control-type" value="@AuthType.OIDC">
                                            <label for="enable-global-openid">
                                                <span>
                                                    @string.Format(T["Enable Global {0} Settings"].Value, "OpenID Connect")
                                                </span>
                                            </label>
                                            <div class="info-message">
                                                @string.Format(T["Enabling the global {0} settings allows you to display the globally configured {0} provider login button on the login page."].Value, "OpenID Connect")
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div role="tabpanel" class="tab-pane col-xs-12 active no-padding" id="auth-control">
                                <div id="auth-control-body" class="col-xs-12 bi-page-body">
                                    <form id="auth-control-form" name="authControlForm" class="form-top-margin col-xs-12 no-padding" method="post" enctype="multipart/form-data" autocomplete="off">
                                        <div class="col-xs-12 default-authentication-select no-padding">
                                            @Html.Label("default-authentication", T["Allowed login providers"].Value, new { @class = "app-textbox-label col-xs-12 no-margin no-padding" })
                                            <div class="info-message no-padding">
                                                @T["Select the login providers that need to be shown in the login page. These login providers will be displayed in the login page even if they are disabled here, if a user from the respective providers is present in this site."]
                                            </div>
                                            <div class="col-xs-8 default-auth-dropdown login-option-dropdown no-padding">
                                                <select id="login-options" class="selectpicker" title="@T["Choose login providers"].Value" multiple="" style="display:none">
                                                    <option data-hidden="true" id="choose-providers" value="" selected="">@T["Choose login providers"]</option>
                                                    <option class="no-margin-dropdown-ul" value="AzureAD" selected="@(!loginOptions.HideAzureADLogin)">Azure AD</option>
                                                    <option class="no-margin-dropdown-ul" value="SyncfusionLogin" selected="@(!loginOptions.HideSyncfusionLogin)">@string.Format(T["{0} Login"].Value, "Syncfusion")</option>
                                                    <option class="no-margin-dropdown-ul" value="LinkedIn" selected="@(!loginOptions.HideLinkedInLogin)">LinkedIn</option>
                                                    <option class="no-margin-dropdown-ul" value="Google" selected="@(!loginOptions.HideGoogleLogin)">Google</option>
                                                    <option class="no-margin-dropdown-ul" value="OAuth2.0" selected="@(!loginOptions.HideOAuthLogin)">OAuth2.0</option>
                                                </select>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        }

                        <div role="tabpanel" class="tab-pane" id="oauth-settings">
                            <div id="oauth-page-body" class="col-xs-12 bi-page-body">
                                <form id="oauth-setting" name="oauthSettingsForm" class="auth-settings-form form-top-margin no-padding" method="post" enctype="multipart/form-data" autocomplete="off">
                                    <input type="hidden" name="oauthAuthenticationProvider" value="@ViewBag.OAuthSettings.AuthProvider">
                                    <input type="hidden" name="oauthLogo" value="@ViewBag.OAuthSettings.OAuthAuthSettings.Logo">
                                    <div class="col-xs-12 separator-margin">
                                        <div class="col-md-12 no-padding">
                                            <div class="col-xs-12 no-padding ">
                                                @Html.CheckBox("oauthIsEnabled", new { @class = "material-checkbox", ng_model = "oauthIsEnabled", ng_change = "hideValidationMessage(oauthIsEnabled, 'oauth')" })
                                                @Html.Hidden("oauthIsEnabled")
                                                <label for="oauthIsEnabled">
                                                    <span>
                                                        @string.Format(T["Enable {0}"].Value, "OAuth 2.0")
                                                    </span>
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 first-auth-field no-padding">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Provider Name"]</label>
                                            </div>
                                            <div class="auth-input-display" ng-class="(oauthSettingsForm.oauthProviderName.$dirty && oauthSettingsForm.oauthProviderName.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="oauthProviderName" ng-init="oauthProviderName='@ViewBag.OAuthSettings.OAuthAuthSettings.ProviderName'" name="oauthProviderName" placeholder="@T["Provider Name"]" id="oauth-provider-name" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="validation-message" ng-show="oauthSettingsForm.oauthProviderName.$error.required && oauthSettingsForm.oauthProviderName.$dirty && oauthIsEnabled">@string.Format(T["Please enter the {0} provider name"].Value, "OAuth")</span>
                                            </div>
                                            <div class="info-message no-padding">@T["Name of the authentication provider to be displayed in the login page."]</div>
                                        </div>
                                        <div class="col-xs-12 logo-align no-padding">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Provider Logo"]</label>
                                            </div>
                                            <div class="col-xs-12 no-padding logo-container">
                                                <div id="oauth-image-upload-box" class="auth-image-upload-box validation-padding">
                                                    <div class="js-image-preview" style="background-image:{{oauthLogoUrl}}"></div>
                                                    <div class="upload-options">
                                                        <label>
                                                            <span>@T["Change logo"]</span>
                                                            <input type="file" class="image-upload" accept="image/png,image/jpeg,image/svg+xml" ng-model="oauthLogoUrl" ng-init="oauthLogoUrl='@ViewBag.OAuthSettings.LogoUrl'" name="oauthLogoUrl" data-ng-disabled="!oauthIsEnabled" ng-required="oauthIsEnabled" />
                                                        </label>
                                                    </div>
                                                </div>
                                                <span class="validation-message" ng-show="!oauthSettingsForm.isValidOAuthLogoUrl && oauthIsEnabled"></span>
                                            </div>
                                            <div class="info-message no-padding">@T["Logo of the authentication provider to be displayed in the login page."]</div>
                                        </div>
                                        <div class="col-xs-12 no-padding auth-fields-margin">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Authorization Endpoint"]</label>
                                            </div>
                                            <div class="auth-input-display" ng-class="(oauthSettingsForm.oauthAuthorizationEP.$dirty && oauthSettingsForm.oauthAuthorizationEP.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="oauthAuthorizationEP" ng-init="oauthAuthorizationEP='@ViewBag.OAuthSettings.OAuthAuthSettings.AuthorizationEndPoint'" ng-pattern="@oauthRegEx" name="oauthAuthorizationEP" placeholder="@T["Authorization Endpoint"]" id="oauth-authorization-endpoint" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="validation-message" ng-show="oauthSettingsForm.oauthAuthorizationEP.$error.required && oauthSettingsForm.oauthAuthorizationEP.$dirty && oauthIsEnabled">@T["Please enter the authorization endpoint"]</span>
                                                <span class="validation-message" ng-show="oauthSettingsForm.oauthAuthorizationEP.$error.pattern && oauthSettingsForm.oauthAuthorizationEP.$dirty && oauthIsEnabled">@T["Please enter a valid authorization endpoint"]</span>
                                            </div>
                                            <div class="info-message no-padding">@string.Format(T["An authorization {0} where the resource owner grants authorization to the {1} client to access protected resources."].Value, "URL", "OAuth")</div>
                                        </div>
                                        <div class="col-xs-12 form-fields-top-margin no-padding">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Token Endpoint"]</label>
                                            </div>
                                            <div class="col-xs-12 no-padding" ng-class="(oauthSettingsForm.oauthTokenEP.$dirty && oauthSettingsForm.oauthTokenEP.$invalid) ? 'has-error' : ''">
                                                <select id="token-method-type" class="selectpicker method-type oauth-group-import">
                                                    <option class="no-margin-dropdown-ul" value="POST" selected="@(ViewBag.OAuthSettings.OAuthAuthSettings.TokenEndPointMethod == "POST")">POST</option>
                                                    <option class="no-margin-dropdown-ul" value="GET" selected="@(ViewBag.OAuthSettings.OAuthAuthSettings.TokenEndPointMethod == "GET")">GET</option>
                                                </select>
                                                <input type="text" class="form-control method-type-input validation-padding" ng-model="oauthTokenEP" ng-init="oauthTokenEP='@ViewBag.OAuthSettings.OAuthAuthSettings.TokenEndPoint'" ng-pattern="@oauthRegEx" name="oauthTokenEP" placeholder="@T["Token Endpoint"]" id="oauth-token-endpoint" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="validation-message col-xs-12 no-padding" ng-show="oauthSettingsForm.oauthTokenEP.$error.required && oauthSettingsForm.oauthTokenEP.$dirty && oauthIsEnabled">@T["Please enter a token endpoint"]</span>
                                                <span class="validation-message col-xs-12 no-padding" ng-show="oauthSettingsForm.oauthTokenEP.$error.pattern && oauthSettingsForm.oauthTokenEP.$dirty && oauthIsEnabled">@T["Please enter a valid token endpoint"]</span>
                                            </div>
                                            <div class="info-message no-padding">@string.Format(T["A token request {0} where the {1} client exchanges an authorization grant for an access token."].Value, "URL", "OAuth")</div>
                                        </div>
                                        <div class="col-xs-12 form-fields-top-margin no-padding">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["User Information Endpoint"]</label>
                                            </div>
                                            <div class="col-xs-12 no-padding" ng-class="(oauthSettingsForm.oauthUserInfoEP.$dirty && oauthSettingsForm.oauthUserInfoEP.$invalid) ? 'has-error' : ''">
                                                <select id="user-info-method-type" class="selectpicker method-type oauth-group-import">
                                                    <option class="no-margin-dropdown-ul" value="GET" selected="@(ViewBag.OAuthSettings.OAuthAuthSettings.UserInfoEndPointMethod == "GET")">GET</option>
                                                    <option class="no-margin-dropdown-ul" value="POST" selected="@(ViewBag.OAuthSettings.OAuthAuthSettings.UserInfoEndPointMethod == "POST")">POST</option>
                                                </select>
                                                <input type="text" class="form-control method-type-input validation-padding" ng-model="oauthUserInfoEP" ng-init="oauthUserInfoEP='@ViewBag.OAuthSettings.OAuthAuthSettings.UserInfoEndPoint'" ng-pattern="@oauthRegEx" name="oauthUserInfoEP" placeholder="@T["User Information Endpoint"]" id="oauth-userinfo-endpoint" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="validation-message col-xs-12 no-padding" ng-show="oauthSettingsForm.oauthUserInfoEP.$error.required && oauthSettingsForm.oauthUserInfoEP.$dirty && oauthIsEnabled">@T["Please enter the user information endpoint"]</span>
                                                <span class="validation-message col-xs-12 no-padding" ng-show="oauthSettingsForm.oauthUserInfoEP.$error.pattern && oauthSettingsForm.oauthUserInfoEP.$dirty && oauthIsEnabled">@T["Please enter a valid user information endpoint"]</span>
                                            </div>
                                            <div class="info-message no-padding">@string.Format(T["{0} to retrieve the user information based on the token."].Value, "URL")</div>
                                        </div>
                                        <div class="col-xs-12 form-fields-top-margin no-padding">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Client ID"]</label>
                                            </div>
                                            <div class="col-xs-12 no-padding" ng-class="(oauthSettingsForm.oauthClientId.$dirty && oauthSettingsForm.oauthClientId.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="oauthClientId" ng-init="oauthClientId='@ViewBag.OAuthSettings.OAuthAuthSettings.ClientId'" name="oauthClientId" placeholder="@T["Client ID"]" id="oauth-client-id" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="validation-message" ng-show="oauthSettingsForm.oauthClientId.$error.required && oauthSettingsForm.oauthClientId.$dirty && oauthIsEnabled">@T["Please enter the client ID"]</span>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 form-fields-top-margin no-padding">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Client Secret"]</label>
                                            </div>
                                            <div class="col-xs-12 no-padding" ng-class="(oauthSettingsForm.oauthClientSecret.$dirty && oauthSettingsForm.oauthClientSecret.$invalid) ? 'has-error' : ''">
                                                <input type="password" class="form-control txt-holder validation-padding" ng-model="oauthClientSecret" ng-init="oauthClientSecret" name="oauthClientSecret" placeholder="@T["Client Secret"]" id="oauth-client-secret" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="show-hide-password su su-eye"></span>
                                                <span class="validation-message" ng-show="oauthSettingsForm.oauthClientSecret.$error.required && oauthSettingsForm.oauthClientSecret.$dirty && oauthIsEnabled">@T["Please enter the client secret"]</span>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 form-fields-top-margin no-padding">
                                            <div class="col-md-12 no-padding">
                                                <label class="app-textbox-label">@T["Scopes"]</label>
                                            </div>
                                            <div class="col-md-12 no-padding" ng-class="(oauthSettingsForm.oauthScopes.$dirty && oauthSettingsForm.oauthScopes.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="oauthScopes" ng-init="oauthScopes='@ViewBag.OAuthSettings.OAuthAuthSettings.Scopes'" name="oauthScopes" placeholder="@T["Comma separated scopes"]" id="oauth-scopes" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="validation-message" ng-show="oauthSettingsForm.oauthScopes.$error.required && oauthSettingsForm.oauthScopes.$dirty && oauthIsEnabled">@T["Please enter comma separated scopes"]</span>
                                            </div>
                                            <div class="info-message no-padding">@string.Format(T["Scope is a mechanism in {0} to limit an application's access to a user's account. An application can request one or more scopes. This information is then presented to the user in the consent screen, and the access token issued to the application will be limited to the scopes granted."].Value, "OAuth 2.0")</div>
                                        </div>
                                        <div class="col-md-12 form-fields-top-margin no-padding">
                                            <div class="col-md-12 no-padding">
                                                <label class="app-textbox-label">@T["Logout Endpoint"]</label>
                                            </div>
                                            <div class="col-md-12 no-padding" ng-class="(oauthSettingsForm.oauthLogoutEndpoint.$dirty && oauthSettingsForm.oauthLogoutEndpoint.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="oauthLogoutEndpoint" ng-init="oauthLogoutEndpoint='@ViewBag.OAuthSettings.OAuthAuthSettings.LogoutEndPoint'" ng-pattern="@oauthRegEx" name="oauthLogoutEndpoint" placeholder="@T["Logout Endpoint (Optional)"]" id="oauth-logout-endpoint" data-ng-disabled="!oauthIsEnabled" />
                                                <span class="validation-message" ng-show="oauthSettingsForm.oauthLogoutEndpoint.$error.pattern && oauthSettingsForm.oauthLogoutEndpoint.$dirty && oauthIsEnabled">@T["Please enter a valid logout endpoint"]</span>
                                            </div>
                                            <div class="info-message no-padding">@T["We support logout endpoints that have static request parameters."]</div>
                                        </div>
                                        <div class="col-md-12 form-fields-top-margin no-padding">
                                            <label class="app-textbox-label col-xs-12 no-padding">@string.Format(T["Redirect {0}"].Value, "URI")</label>
                                            <div class="col-xs-12 no-padding">
                                                <input class="form-control" onClick="this.setSelectionRange(0, this.value.length)" id="oauth-callback-link" value="@(_globalAppSettings.SystemSettings.IDPUrl + AuthenticationConfig.OAuthCallabckUrl)" readonly />
                                                <div class="form-control su su-copy text focus" id="oauth-callback-link-copy" readonly="" data-toggle="tooltip" data-original-title="@T["Click to copy"]"></div>
                                            </div>
                                            <div class="info-message col-xs-12 no-padding">
                                            @T["This URI is used to receive the response from the authorization server. When setting up your OAuth 2.0 application, it's essential to register the redirect URI using only lowercase characters."]</div>
                                        </div>
                                        <feature name=@FeatureManagement.EnableNavigateToCustomUserDirectory negate="true">
                                            <div class="col-md-12 auth-fields-margin no-padding">
                                                <label class="app-textbox-label col-xs-12 no-padding">@string.Format(T["Mobile App Redirect {0}"].Value, "URI")</label>
                                                <div class="col-xs-12 no-padding">
                                                    <input class="form-control" onClick="this.setSelectionRange(0, this.value.length)" id="oauth-mobile-callback-link" value="com.boldbi.dashboard://auth" readonly />
                                                    <div class="form-control su su-copy text focus" id="oauth-mobile-callback-link-copy" readonly="" data-toggle="tooltip" data-original-title="@T["Click to copy"]"></div>
                                                </div>
                                            </div>
                                        </feature>
                                        <div class="col-md-12 form-fields-top-margin no-padding">
                                            <div class="col-xs-12 no-padding ">
                                                @Html.CheckBox("oauthCreateAccount", new { @class = "material-checkbox", ng_model = "oauthCreateAccount", ng_checked = "oauthCreateAccount" })
                                                @Html.Hidden("oauthCreateAccount")
                                                <label for="oauthCreateAccount">
                                                    <span>
                                                        @T["Enable User Account Creation"]
                                                    </span>
                                                </label>
                                                <span id="user-account-creation-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@T["Create a new user account if doesn't exist."]"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-xs-12 separator-margin">
                                        <div class="col-xs-12 auth-sub-title no-padding">
                                            <div class="section-title">
                                                @T["User data"]
                                            </div>
                                            <div class="col-md-12 info-message no-padding">
                                                @string.Format(T["The user information endpoint returns claims about the authenticated user. These claims are normally represented by a {0} object that contains a collection of name and value pairs for each claim. Fill {0} keys with respect to the required details to identify the exact values."].Value, "JSON")
                                            </div>
                                        </div>
                                        <div class="col-md-12 auth-fields-margin no-padding">
                                            <label class="app-textbox-label col-xs-12 no-padding">@T["Email"]</label>
                                            <div class="col-xs-12 no-padding" ng-class="(oauthSettingsForm.userInfoEmail.$dirty && oauthSettingsForm.userInfoEmail.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="userInfoEmail" ng-init="userInfoEmail='@ViewBag.OAuthSettings.OAuthAuthSettings.UserInfoEmail'" name="userInfoEmail" placeholder="@T["Email"]" id="user-info-email" data-ng-disabled="!oauthIsEnabled" required />
                                                <span class="validation-message" ng-show="oauthSettingsForm.userInfoEmail.$error.required && oauthSettingsForm.userInfoEmail.$dirty && oauthIsEnabled">@T["Please enter the value for email"]</span>
                                            </div>
                                        </div>
                                        <div class="col-md-12 form-fields-top-margin no-padding">
                                            <div class="col-md-6 no-padding">
                                                <label class="app-textbox-label col-xs-12 no-padding">@T["First Name"]</label>
                                                <div class="col-md-12 no-padding" ng-class="(oauthSettingsForm.userInfoFirstname.$dirty && oauthSettingsForm.userInfoFirstname.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder" ng-model="userInfoFirstname" ng-init="userInfoFirstname='@ViewBag.OAuthSettings.OAuthAuthSettings.UserInfoFirstname'" name="userInfoFirstname" placeholder="@T["First Name"]" id="user-info-firstname" data-ng-disabled="!oauthIsEnabled" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-12 auth-fields-margin no-padding">
                                            <label class="app-textbox-label col-xs-12 no-padding">@T["Last Name"]</label>
                                            <div class="col-xs-12 no-padding" ng-class="(oauthSettingsForm.userInfoLastname.$dirty && oauthSettingsForm.userInfoLastname.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder" ng-model="userInfoLastname" ng-init="userInfoLastname='@ViewBag.OAuthSettings.OAuthAuthSettings.UserInfoLastname'" name="userInfoLastname" placeholder="@T["Last Name"]" id="user-info-lastname" data-ng-disabled="!oauthIsEnabled" />
                                            </div>
                                        </div>
                                    </div>

                                    @if (ServerAppConfig.IsSelfHosted)
                                    {
                                        <div class="col-xs-12 separator-margin">
                                            <div id="oauth-group-import" class="group-import">
                                                @await Html.PartialAsync("_AuthenticationGroupImportSettings", (AuthGroupImportSettings)ViewBag.OAuthSettings.OAuthAuthSettings.GroupImportSettings, new ViewDataDictionary(ViewData) { { "AuthType", AuthType.OAuth } })
                                            </div>
                                        </div>
                                    }
                                    <feature name=@FeatureManagement.EnableNavigateToCustomUserDirectory>
                                        <div class="col-xs-12 separator-margin yokogawa-top-margin">
                                            <div class="col-xs-12 no-padding ">
                                                @Html.CheckBox("configure-oauth-identity-provider-info", new { @class = "material-checkbox", ng_model = "oauthIdentityProviderInfoIsEnabled", ng_disabled = "!oauthIsEnabled" })
                                                @Html.Hidden("configure-oauth-identity-provider-info")
                                                <label for="configure-oauth-identity-provider-info">
                                                    <span>
                                                        @T["Configure identity provider info to add users"]
                                                    </span>
                                                </label>
                                            </div>
                                            <div id="oauth-identity-provider-info-section" class="col-xs-12 no-padding">
                                                <div class="col-xs-12 auth-fields-margin no-padding ">
                                                    <label class="app-textbox-label col-md-12 no-padding">@T["Provider Name"]</label>
                                                    <div class="col-xs-12 no-padding" id="oauth-identity-provider-name" ng-class="(oauthIdentityProviderInfoIsEnabled && oauthSettingsForm.oauthIdentityProviderName.$dirty && oauthSettingsForm.oauthIdentityProviderName.$invalid) ? 'has-error' : ''">
                                                        <input type="text" class="form-control txt-holder validation-padding" placeholder="@T["Provider Name"]" name="oauthIdentityProviderName" ng-model="oauthIdentityProviderName" ng-init="oauthIdentityProviderName='@oAuthIdentityProviderName'" data-ng-disabled="!(oauthIsEnabled && oauthIdentityProviderInfoIsEnabled)" ng-required="oauthIdentityProviderInfoIsEnabled" />
                                                        <span class="validation-message" id="oauthIPN-validation-message" ng-show="oauthSettingsForm.oauthIdentityProviderName.$error.required && oauthSettingsForm.oauthIdentityProviderName.$dirty && oauthIsEnabled">@T["Please enter the identity provider name"]</span>
                                                    </div>
                                                </div>
                                                <div class="col-xs-12 form-fields-top-margin no-padding ">
                                                    <label class="app-textbox-label col-md-12 no-padding">@string.Format(T["Provider {0}"].Value, "URL")</label>
                                                    <div class="col-xs-12 no-padding" id="oauth-identity-provider-url" ng-class="(oauthIdentityProviderInfoIsEnabled && oauthSettingsForm.oauthIdentityProviderUrl.$dirty && oauthSettingsForm.oauthIdentityProviderUrl.$invalid) ? 'has-error' : ''">
                                                        <input type="text" class="form-control txt-holder validation-padding" placeholder="@string.Format(T["Provider {0}"].Value, "URL")" name="oauthIdentityProviderUrl" ng-model="oauthIdentityProviderUrl" ng-init="oauthIdentityProviderUrl='@oAuthIdentityProviderURL'" ng-pattern="@oauthRegEx" data-ng-disabled="!(oauthIsEnabled && oauthIdentityProviderInfoIsEnabled)" ng-required="oauthIdentityProviderInfoIsEnabled" />
                                                        <span class="validation-message" id="oauthIPU-validation-message" ng-show="oauthSettingsForm.oauthIdentityProviderUrl.$error.required && oauthSettingsForm.oauthIdentityProviderUrl.$dirty && oauthIsEnabled">@string.Format(T["Please enter the identity provider {0}"].Value, "URL")</span>
                                                        <span class="validation-message" ng-show="oauthSettingsForm.oauthIdentityProviderUrl.$error.pattern && oauthSettingsForm.oauthIdentityProviderUrl.$dirty && oauthIsEnabled">@string.Format(T["Please enter a valid identity provider {0}"].Value, "URL")</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 separator-margin yokogawa-top-margin">
                                            <div id="custom-mail-content" class="col-xs-12 no-padding ">
                                                @Html.CheckBox("configure-oauth-custom-mail-content", new { @class = "material-checkbox", ng_model = "oauthCustomMailContentIsEnabled", ng_disabled = "!oauthIsEnabled" })
                                                @Html.Hidden("configure-oauth-custom-mail-content")
                                                <label for="configure-oauth-custom-mail-content">
                                                    <span>
                                                        @T["Configure custom invite email"]
                                                    </span>
                                                </label>
                                            </div>
                                            <div id="oauth-custom-mail-content-section">
                                                <div class="col-xs-12 auth-fields-margin no-padding ">
                                                    <label class="app-textbox-label col-md-12 no-padding">@T["Subject"]</label>
                                                    <div class="col-xs-12 no-padding" id="oauth-identity-provider-url" ng-class="(oauthIdentityProviderInfoIsEnabled && oauthSettingsForm.oauthMailSubject.$dirty && oauthSettingsForm.oauthMailSubject.$invalid) ? 'has-error' : ''">
                                                        <input type="text" class="form-control txt-holder validation-padding" placeholder="@T["Subject"]" name="oauthMailSubject" ng-model="oauthMailSubject" ng-init="oauthMailSubject='@oAuthSubject'" data-ng-disabled="!(oauthIsEnabled && oauthCustomMailContentIsEnabled)" ng-required="oauthCustomMailContentIsEnabled" />
                                                        <span class="validation-message" id="oauthIPU-validation-message" ng-show="oauthSettingsForm.oauthMailSubject.$error.required && oauthSettingsForm.oauthMailSubject.$dirty && oauthIsEnabled">@T["Please enter a subject"]</span>
                                                    </div>
                                                </div>
                                                <div class="col-xs-12 form-fields-top-margin no-padding">
                                                    <label class="app-textbox-label col-md-12 no-padding">@T["Custom invite mail content"]</label>
                                                    <div class="col-xs-12 no-padding" id="oauth-email-editor">
                                                        <textarea class="col-sm-12 col-xs-12 no-padding" id="oauth-custom-mail-content"></textarea>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </feature>
                                </form>
                            </div>
                        </div>
                        
                        <div role="tabpanel" class="tab-pane" id="jwt-settings">
                            <div id="jwt-page-body" class="col-xs-12 bi-page-body">
                                <form id="jwt-setting" name="jwtSettingsForm" class="auth-settings-form form-top-margin no-padding" method="post" enctype="multipart/form-data" autocomplete="off">
                                    <input type="hidden" name="jwtAuthenticationProvider" value="@ViewBag.JwtSettings.AuthProvider">
                                    <input type="hidden" name="jwtLogo" value="">
                                    <div class="col-xs-12 no-padding separator-margin">
                                        <div class="col-md-12 no-padding">
                                            <div class="col-xs-12 no-padding ">
                                                @Html.CheckBox("jwtIsEnabled", new { @class = "material-checkbox", ng_model = "jwtIsEnabled", ng_change = "hideValidationMessage(jwtIsEnabled, 'jwt')" })
                                                @Html.Hidden("jwtIsEnabled")
                                                <label for="jwtIsEnabled">
                                                    <span>
                                                        @string.Format(T["Enable {0}"].Value, "JWT")
                                                    </span>
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 no-padding first-auth-field">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Name"]</label>
                                            </div>
                                            <div class="auth-input-display" ng-class="(jwtSettingsForm.jwtName.$dirty && jwtSettingsForm.jwtName.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="jwtName" ng-init="jwtName='@ViewBag.JwtSettings.JWTSettings.Name'" name="jwtName" placeholder="@T["Name"]" id="jwt-provider-name" data-ng-disabled="!jwtIsEnabled" required/>
                                                <span class="validation-message" ng-show="jwtSettingsForm.jwtName.$error.required && jwtSettingsForm.jwtName.$dirty && jwtIsEnabled">@string.Format(T["Please enter the {0} name."].Value, "JWT")</span>
                                            </div>
                                            <div class="info-message no-padding">@T["Name of the authentication provider to be displayed in the login page."]</div>
                                        </div>
                                        <div class="col-xs-12 logo-align no-padding">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Provider Logo"]</label>
                                            </div>
                                            <div class="col-md-12 no-padding logo-container">
                                                <div id="jwt-image-upload-box" class="auth-image-upload-box validation-padding">
                                                    <div class="js-image-preview" style="background-image:{{jwtLogoUrl}}"></div>
                                                    <div class="upload-options">
                                                        <label>
                                                            <span>@T["Change logo"]</span>
                                                            <input type="file" class="image-upload" accept="image/png,image/jpeg,image/svg+xml" ng-model="jwtLogoUrl" ng-init="jwtLogoUrl='@ViewBag.JwtSettings.LogoUrl'" name="jwtLogoUrl" data-ng-disabled="!jwtIsEnabled" ng-required="jwtIsEnabled" required/>
                                                        </label>
                                                    </div>
                                                </div>
                                                <span class="validation-message" ng-show="!jwtSettingsForm.isValidJwtLogoUrl && jwtIsEnabled"></span>
                                            </div>
                                            <div class="info-message no-padding">@T["Logo of the authentication provider to be displayed in the login page."]</div>
                                        </div>
                                        <div class="col-xs-12 no-padding auth-fields-margin">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Remote Login URL"]</label>
                                            </div>
                                            <div class="auth-input-display" ng-class="(jwtSettingsForm.jwtLoginUrl.$dirty && jwtSettingsForm.jwtLoginUrl.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="jwtLoginUrl" ng-init="jwtLoginUrl='@ViewBag.JwtSettings.JWTSettings.LoginUrl'" ng-pattern="@oauthRegEx" name="jwtLoginUrl" placeholder="@T["Remote Login URL"]" id="jwt-authority" data-ng-disabled="!jwtIsEnabled" required />
                                                <span class="validation-message top-padding" ng-show="jwtSettingsForm.jwtLoginUrl.$error.required && jwtSettingsForm.jwtLoginUrl.$dirty && jwtIsEnabled">@T["Please enter the login url."]</span>
                                                <span class="validation-message top-padding" ng-show="jwtSettingsForm.jwtLoginUrl.$error.pattern && jwtSettingsForm.jwtLoginUrl.$dirty && jwtIsEnabled">@T["Please enter a valid login url."]</span>
                                            </div>
                                            <div class="info-message no-padding">@string.Format(T["An remote login {0} where the resource owner grants authorization to the {1} client to access protected resources."].Value, "URL", "JWT")</div>
                                        </div>
                                        <div class="col-xs-12 no-padding auth-fields-margin">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Remote Logout URL"]</label>
                                            </div>
                                            <div class="auth-input-display" ng-class="(jwtSettingsForm.jwtLogOutUrl.$dirty && jwtSettingsForm.jwtLogOutUrl.$invalid) ? 'has-error' : ''">
                                                <input type="text" class="form-control txt-holder validation-padding" ng-model="jwtLogOutUrl" ng-init="jwtLogOutUrl='@ViewBag.JwtSettings.JWTSettings.LogOutUrl'" ng-pattern="@oauthRegEx" name="jwtLogOutUrl" placeholder="@T["Remote Logout URL(Optional)"]" id="jwt-client-id" data-ng-disabled="!jwtIsEnabled" />
                                                <span class="validation-message top-padding" ng-show="jwtSettingsForm.jwtLogOutUrl.$error.pattern && jwtSettingsForm.jwtLogOutUrl.$dirty && jwtIsEnabled">@T["Please enter a valid logout url."]</span>
                                            </div>
                                            <div class="info-message no-padding">@T["We support logout endpoints that have static request parameters."]</div>
                                        </div>
                                        <div class="col-xs-12 no-padding auth-fields-margin">
                                            <div class="col-xs-12 no-padding">
                                                <label class="app-textbox-label">@T["Signing Key"]</label>
                                            </div>
                                            <div class="col-xs-12 no-padding" ng-class="(jwtSettingsForm.jwtSigningKey.$dirty && jwtSettingsForm.jwtSigningKey.$invalid) ? 'has-error' : ''">
                                                <input type="password" id="jwt-signing-key" readonly="" class="form-control txt-holder validation-padding signing-key-values @(!enableSigningKeyOptions ? "signing-key-width" : string.Empty)" name="jwtSigningKey" placeholder="&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;" value="@ViewBag.JwtSettings.JWTSettings.SigningKey" />
                                                
                                                <div class="su su-eye form-control show-hide-password copy-signing-key-values @(enableSigningKeyOptions ? string.Empty : "display-none")" id="show-signing-key" data-toggle="tooltip" data-original-title="@T["Click to view"]"></div>
                                                <div class="su su-copy form-control copy-signing-key-values @(enableSigningKeyOptions ? string.Empty : "display-none")" id="copy-signing-key" data-toggle="tooltip" data-original-title="@T["Click to copy"]"></div>
                                                <div class="su su-synchronize form-control text focus copy-signing-key-values @(enableSigningKeyOptions ? string.Empty : "display-none")" id="generate-signing-key" data-toggle="tooltip" data-original-title="@T["Click to Regenerate"]" data-trigger="hover"></div>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>

                        @if (ServerAppConfig.IsSelfHosted)
                        {
                            <div role="tabpanel" class="tab-pane" id="openid-settings">
                                <div id="openid-page-body" class="col-xs-12 col-md-12 col-sm-12 bi-page-body">
                                    <form id="openid-setting" name="openidSettingsForm" class="auth-settings-form form-top-margin col-xs-12 col-md-12 col-sm-12 no-padding" method="post" enctype="multipart/form-data" autocomplete="off">
                                        <input type="hidden" name="openidAuthenticationProvider" value="@ViewBag.OpenIDSettings.AuthProvider">
                                        <input type="hidden" name="openidLogo" value="@ViewBag.OpenIDSettings.OIDCAuthSettings.Logo">
                                        <div class="col-xs-12 separator-margin">
                                            <div class="col-md-12 no-padding">
                                                <div class="col-xs-12 no-padding ">
                                                    @Html.CheckBox("openidIsEnabled", new { @class = "material-checkbox", ng_model = "openidIsEnabled", ng_change = "hideValidationMessage(openidIsEnabled, 'openid')" })
                                                    @Html.Hidden("openidIsEnabled")
                                                    <label for="openidIsEnabled">
                                                        <span>
                                                            @string.Format(T["Enable {0}"].Value, "OpenID Connect")
                                                        </span>
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 first-auth-field no-padding">
                                                <div class="col-xs-12 no-padding">
                                                    <label class="app-textbox-label">@T["Provider Name"]</label>
                                                </div>
                                                <div class="auth-input-display" ng-class="(openidSettingsForm.openidProviderName.$dirty && openidSettingsForm.openidProviderName.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="openidProviderName" ng-init="openidProviderName='@ViewBag.OpenIDSettings.OIDCAuthSettings.ProviderName'" name="openidProviderName" placeholder="@T["Provider Name"]" id="openid-provider-name" data-ng-disabled="!openidIsEnabled" required />
                                                    <span class="validation-message" ng-show="openidSettingsForm.openidProviderName.$error.required && openidSettingsForm.openidProviderName.$dirty && openidIsEnabled">@string.Format(T["Please enter the {0} provider name"].Value, "OpenID")</span>
                                                </div>
                                                <div class="info-message no-padding">@T["Name of the authentication provider to be displayed in the login page."]</div>
                                            </div>
                                            <div class="col-md-12 logo-align no-padding">
                                                <div class="col-md-12 no-padding">
                                                    <label class="app-textbox-label">@T["Provider Logo"]</label>
                                                </div>
                                                <div class="col-md-12 no-padding logo-container">
                                                    <div id="openid-image-upload-box" class="auth-image-upload-box validation-padding">
                                                        <div class="js-image-preview" style="background-image:{{openidLogoUrl}}"></div>
                                                        <div class="upload-options">
                                                            <label>
                                                                <span>@T["Change logo"]</span>
                                                                <input type="file" class="image-upload" accept="image/png,image/jpeg,image/svg+xml" ng-model="openidLogoUrl" ng-init="openidLogoUrl='@ViewBag.OpenIDSettings.LogoUrl'" name="openidLogoUrl" data-ng-disabled="!openidIsEnabled" ng-required="openidIsEnabled" />
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <span class="validation-message" ng-show="!openidSettingsForm.isValidOpenIdLogoUrl && openidIsEnabled"></span>
                                                </div>
                                                <div class="info-message no-padding">@T["Logo of the authentication provider to be displayed in the login page."]</div>
                                            </div>
                                            <div class="col-md-12 no-padding auth-fields-margin">
                                                <div class="col-md-12 no-padding">
                                                    <label class="app-textbox-label">@T["Authority"]</label>
                                                </div>
                                                <div class="auth-input-display" ng-class="(openidSettingsForm.openidAuthority.$dirty && openidSettingsForm.openidAuthority.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="openidAuthority" ng-init="openidAuthority='@ViewBag.OpenIDSettings.OIDCAuthSettings.Authority'" ng-pattern="@oauthRegEx" name="openidAuthority" placeholder="@T["Authority"]" id="openid-authority" data-ng-disabled="!openidIsEnabled" required />
                                                    <span class="validation-message" ng-show="openidSettingsForm.openidAuthority.$error.required && openidSettingsForm.openidAuthority.$dirty && openidIsEnabled">@string.Format(T["Please enter the Authority {0}"].Value, "URL")</span>
                                                    <span class="validation-message" ng-show="openidSettingsForm.openidAuthority.$error.pattern && openidSettingsForm.openidAuthority.$dirty && openidIsEnabled">@string.Format(T["Please enter a valid Authority {0}"].Value, "URL")</span>
                                                </div>
                                                <div class="info-message no-padding">@T["Endpoint to authenticate the user and grant access to the protected resource. It returns the claims about the authenticated user."]</div>
                                            </div>
                                            <div class="col-md-12 form-fields-top-margin no-padding">
                                                <div class="col-md-12 no-padding">
                                                    <label class="app-textbox-label">@T["Client ID"]</label>
                                                </div>
                                                <div class="col-md-12 no-padding" ng-class="(openidSettingsForm.openidClientId.$dirty && openidSettingsForm.openidClientId.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="openidClientId" ng-init="openidClientId='@ViewBag.OpenIDSettings.OIDCAuthSettings.ClientId'" name="openidClientId" placeholder="@T["Client ID"]" id="openid-client-id" data-ng-disabled="!openidIsEnabled" required />
                                                    <span class="validation-message" ng-show="openidSettingsForm.openidClientId.$error.required && openidSettingsForm.openidClientId.$dirty && openidIsEnabled">@T["Please enter the Client ID"]</span>
                                                </div>
                                            </div>
                                            <div class="col-md-12 form-fields-top-margin no-padding">
                                                <div class="col-md-12 no-padding">
                                                    <label class="app-textbox-label">@T["Client Secret"]</label>
                                                </div>
                                                <div class="col-md-12 no-padding" ng-class="(openidSettingsForm.openidClientSecret.$dirty && openidSettingsForm.openidClientSecret.$invalid) ? 'has-error' : ''">
                                                    <input type="password" class="form-control txt-holder validation-padding" ng-model="openidClientSecret" ng-init="openidClientSecret" name="openidClientSecret" placeholder="@T["Client Secret"]" id="openid-client-secret" data-ng-disabled="!openidIsEnabled" required />
                                                    <span class="validation-message" ng-show="openidSettingsForm.openidClientSecret.$error.required && openidSettingsForm.openidClientSecret.$dirty && openidIsEnabled">@T["Please enter the client secret"]</span>
                                                    <div class="show-hide-password su su-eye"></div>
                                                </div>
                                            </div>
                                            <div class="col-md-12 form-fields-top-margin no-padding">
                                                <div class="col-md-12 no-padding">
                                                    <label class="app-textbox-label">@T["Identifier"]</label>
                                                </div>
                                                <div class="col-md-12 no-padding" ng-class="(openidSettingsForm.openidIdentifier.$dirty && openidSettingsForm.openidIdentifier.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="openidIdentifier" ng-init="openidIdentifier='@ViewBag.OpenIDSettings.OIDCAuthSettings.Identifier'" name="openidIdentifier" placeholder="@T["Identifier"]" id="openid-identifier" data-ng-disabled="!openidIsEnabled" required />
                                                    <span class="validation-message" ng-show="openidSettingsForm.openidIdentifier.$error.required && openidSettingsForm.openidIdentifier.$dirty && openidIsEnabled">@T["Please enter the Identifier"]</span>
                                                </div>
                                                <div class="info-message no-padding">@string.Format(T["These claims are normally represented by a {0} object that contains a collection of name and value pairs for each claim. Provide the {0} key to identify the unique identity (email) of the user."].Value, "JSON")</div>
                                            </div>
                                            <div class="col-md-12 form-fields-top-margin no-padding">
                                                <div class="col-md-12 no-padding">
                                                    <label class="app-textbox-label">@T["Response Type"]</label>
                                                </div>
                                                <div class="response-type-width no-padding">
                                                    <select id="response-type-dropdown" class="selectpicker no=padding" data-ng-disabled="!openidIsEnabled">
                                                        <option class="no-margin-dropdown-ul" value="id_token" selected="@(ViewBag.OpenIDSettings.OIDCAuthSettings.ResponseType  == "id_token")">@T["id_token"]</option>
                                                        <option class="no-margin-dropdown-ul" value="code" selected="@(ViewBag.OpenIDSettings.OIDCAuthSettings.ResponseType  == "code")">@T["code"]</option>
                                                    </select>
                                                </div>
                                                <div class="info-message col-md-12 no-padding">@T["Select the response type for OpenID authentication. The default type is id_token."] </div>
                                            </div>
                                            <div class="col-md-12 form-fields-top-margin no-padding">
                                                <div class="col-md-12 no-padding">
                                                    <label class="app-textbox-label">@T["Logout Endpoint"]</label>
                                                </div>
                                                <div class="col-md-12 no-padding" ng-class="(openidSettingsForm.openidLogoutUrl.$dirty && openidSettingsForm.openidLogoutUrl.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="openidLogoutUrl" ng-init="openidLogoutUrl='@ViewBag.OpenIDSettings.OIDCAuthSettings.LogoutUrl'" ng-pattern="@oauthRegEx" name="openidLogoutUrl" placeholder="@T["Logout Endpoint (Optional)"]" id="openid-logout-url" data-ng-disabled="!openidIsEnabled" />
                                                    <span class="validation-message" ng-show="openidSettingsForm.openidLogoutUrl.$error.pattern && openidSettingsForm.openidLogoutUrl.$dirty && openidIsEnabled">@T["Please enter a valid logout endpoint"]</span>
                                                </div>
                                                <div class="info-message no-padding">@T["We support logout endpoints that have static request parameters."]</div>
                                            </div>
                                            <div class="col-md-12 form-fields-top-margin no-padding">
                                                <label class="app-textbox-label col-xs-12 no-padding">@string.Format(T["Redirect {0}"].Value, "URI")</label>
                                                <div class="col-xs-12 no-padding">
                                                    <input onClick="this.setSelectionRange(0, this.value.length)" id="openid-callback-link" value="@(_globalAppSettings.SystemSettings.IDPUrl + AuthenticationConfig.OidcCallabckUrl)" class="form-control" readonly />
                                                    <div class="form-control su su-copy text focus" id="openid-callback-link-copy" readonly="" data-toggle="tooltip" data-original-title="@T["Click to copy"]"></div>
                                                </div>
                                                <div class="info-message col-xs-12 no-padding">@T["This URI is used to receive the response from the authorization server. When setting up your OpenID Connect application, it's essential to register the redirect URI using only lowercase characters."]</div>
                                            </div>
                                            <feature name=@FeatureManagement.EnableNavigateToCustomUserDirectory negate="true">
                                                <div class="col-md-12 auth-fields-margin no-padding">
                                                    <label class="app-textbox-label col-xs-12 no-padding">@string.Format(T["Mobile App Redirect {0}"].Value, "URI")</label>
                                                    <div class="col-xs-12 no-padding">
                                                        <input onClick="this.setSelectionRange(0, this.value.length)" id="openid-mobile-callback-link" value="com.boldbi.dashboard://auth" class="form-control" readonly />
                                                        <div class="form-control su su-copy text focus" id="openid-mobile-callback-link-copy" readonly="" data-toggle="tooltip" data-original-title="@T["Click to copy"]"></div>
                                                    </div>
                                                </div>
                                            </feature>
                                            <div class="col-md-12 form-fields-top-margin no-padding">
                                                <div class="col-xs-12 no-padding ">
                                                    @Html.CheckBox("openidCreateAccount", new { @class = "material-checkbox", ng_model = "openidCreateAccount", ng_checked = "openidCreateAccount" })
                                                    @Html.Hidden("oauthCreateAccount")
                                                    <label for="openidCreateAccount">
                                                        <span>
                                                            @T["Enable User Account Creation"]
                                                        </span>
                                                    </label>
                                                    <span id="user-account-creation-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@T["Create a new user account if doesn't exist."]"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-xs-12 separator-margin">
                                            <div id="openid-group-import" class="group-import">
                                                @await Html.PartialAsync("_AuthenticationGroupImportSettings", (AuthGroupImportSettings)ViewBag.OpenIDSettings.OIDCAuthSettings.GroupImportSettings, new ViewDataDictionary(ViewData) { { "AuthType", AuthType.OIDC } })
                                            </div>
                                        </div>
                                        <feature name=@FeatureManagement.EnableNavigateToCustomUserDirectory>
                                            <div class="col-xs-12 separator-margin yokogawa-top-margin">
                                                <div class="col-xs-12 no-padding ">
                                                    @Html.CheckBox("configure-openid-identity-provider-info", new { @class = "material-checkbox", ng_model = "openIdIdentityProviderInfoIsEnabled", ng_disabled = "!openidIsEnabled" })
                                                    @Html.Hidden("configure-openid-identity-provider-info")
                                                    <label for="configure-openid-identity-provider-info">
                                                        <span>
                                                            @T["Configure identity provider info to add users"]
                                                        </span>
                                                    </label>
                                                </div>
                                                <div id="openid-identity-provider-info-section" class="col-xs-12 no-padding">
                                                    <div class="col-xs-12 auth-fields-margin no-padding ">
                                                        <label class="app-textbox-label col-md-12 no-padding">@T["Provider Name"]</label>
                                                        <div class="col-xs-12 no-padding" ng-class="(openidSettingsForm.openIdIdentityProviderName.$dirty && openidSettingsForm.openIdIdentityProviderName.$invalid) ? 'has-error' : ''">
                                                            <input type="text" class="form-control txt-holder validation-padding" name="openIdIdentityProviderName" ng-model="openIdIdentityProviderName" ng-init="openIdIdentityProviderName='@openIdIdentityProviderName'" placeholder="@T["Provider Name"]" data-ng-disabled="!(openidIsEnabled && openIdIdentityProviderInfoIsEnabled)" ng-required="openIdIdentityProviderInfoIsEnabled" />
                                                            <span class="validation-message" id="opendidIPN-validation-message" ng-show="openidSettingsForm.openIdIdentityProviderName.$error.required && openidSettingsForm.openIdIdentityProviderName.$dirty && openidIsEnabled">@T["Please enter the identity provider name"]</span>
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12 form-fields-top-margin no-padding ">
                                                        <label class="app-textbox-label col-md-12 no-padding">@string.Format(T["Provider {0}"].Value, "URL")</label>
                                                        <div class="col-xs-12 no-padding" ng-class="(openidSettingsForm.openIdIdentityProviderURL.$dirty && openidSettingsForm.openIdIdentityProviderURL.$invalid) ? 'has-error' : ''">
                                                            <input type="text" class="form-control txt-holder validation-padding" name="openIdIdentityProviderURL" ng-model="openIdIdentityProviderURL" ng-init="openIdIdentityProviderURL='@openIdIdentityProviderURL'" ng-pattern="@oauthRegEx" placeholder="@string.Format(T["Provider {0}"].Value, "URL")" data-ng-disabled="!(openidIsEnabled && openIdIdentityProviderInfoIsEnabled)" ng-required="openIdIdentityProviderInfoIsEnabled" />
                                                            <span class="validation-message" id="opendidIPU-validation-message" ng-show="openidSettingsForm.openIdIdentityProviderURL.$error.required && openidSettingsForm.openIdIdentityProviderURL.$dirty && openidIsEnabled">@string.Format(T["Please enter the identity provider {0}"].Value, "URL")</span>
                                                            <span class="validation-message" ng-show="openidSettingsForm.openIdIdentityProviderURL.$error.pattern && openidSettingsForm.openIdIdentityProviderURL.$dirty && openidIsEnabled">@string.Format(T["Please enter a valid identity provider {0}"].Value, "URL")</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 separator-margin yokogawa-top-margin">
                                                <div id="custom-mail-content" class="col-xs-12 no-padding ">
                                                    @Html.CheckBox("configure-openid-custom-mail-content", new { @class = "material-checkbox", ng_model = "openIdCustomMailContentIsEnabled", ng_disabled = "!openidIsEnabled" })
                                                    @Html.Hidden("configure-openid-custom-mail-content")
                                                    <label for="configure-openid-custom-mail-content">
                                                        <span>
                                                            @T["Configure custom invite email"]
                                                        </span>
                                                    </label>
                                                </div>
                                                <div id="openid-custom-invite-mail-content-section">
                                                    <div class="col-xs-12 auth-fields-margin no-padding ">
                                                        <label class="app-textbox-label col-md-12 no-padding">@T["Subject"]</label>
                                                        <div class="col-xs-12 no-padding" ng-class="(openidSettingsForm.openidMailSubject.$dirty && openidSettingsForm.openidMailSubject.$invalid) ? 'has-error' : ''">
                                                            <input type="text" class="form-control txt-holder validation-padding" name="openidMailSubject" ng-model="openidMailSubject" ng-init="openidMailSubject='@openIdSubject'" placeholder="@T["Subject"]" data-ng-disabled="!(openidIsEnabled && openIdCustomMailContentIsEnabled)" ng-required="openIdCustomMailContentIsEnabled" />
                                                            <span class="validation-message" id="opendidIPU-validation-message" ng-show="openidSettingsForm.openidMailSubject.$error.required && openidSettingsForm.openidMailSubject.$dirty && openidIsEnabled">@T["Please enter a subject"]</span>
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12 form-fields-top-margin no-padding">
                                                        <label class="app-textbox-label col-md-12 no-padding">@T["Custom invite mail content"]</label>
                                                        <div class="col-xs-12 no-padding" id="openid-email-editor">
                                                            <textarea class="col-sm-12 col-xs-12 no-padding" id="openid-custom-mail-content"></textarea>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </feature>
                                    </form>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div role="tabpanel" class="tab-pane" id="azure-b2c-settings">
                                <div id="azure-b2c-page-body" class="col-xs-12 col-md-12 col-sm-12 bi-page-body">
                                    <input type="hidden" name="azureAdB2cAuthenticationProvider" value="@ViewBag.AzureAdB2CSettings.AuthProvider">
                                    <input type="hidden" name="azureAdB2cLogo" value="@ViewBag.AzureAdB2CSettings.AzureADB2CSettings.Logo">
                                    <input type="hidden" name="azureAdB2cAuthType" value="@AuthType.AzureADB2C">
                                    <form id="azure-ad-b2c-setting" name="azureADB2cSettingsForm" class="auth-settings-form form-top-margin no-padding" method="post" enctype="multipart/form-data" autocomplete="off">
                                        <div class="col-xs-12 separator-margin">
                                            <div class="col-md-12 no-padding">
                                                <div class="col-xs-12 no-padding ">
                                                    @Html.CheckBox("azureADB2CIsEnabled", new { @class = "material-checkbox", ng_model = "azureADB2CIsEnabled", ng_change = "hideValidationMessage(azureADB2CIsEnabled, 'azure')" })
                                                    @Html.Hidden("azureADB2CIsEnabled")
                                                    <label for="azureADB2CIsEnabled">
                                                        <span>
                                                            @string.Format(T["Enable {0}"].Value, "Azure AD B2C")
                                                        </span>
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 first-auth-field no-padding">
                                                <div class="col-xs-12 no-padding">
                                                    <label class="app-textbox-label">@T["Organization Name"]</label>
                                                    <span id="organisation-name-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@T["Name of the organization to be displayed in the login page"]"></span>
                                                </div>
                                                <div class="auth-input-display" ng-class="(azureADB2cSettingsForm.organisationName.$dirty && azureADB2cSettingsForm.organisationName.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="organisationName" ng-init="organisationName='@ViewBag.AzureAdB2CSettings.AzureADB2CSettings.ProviderName'" name="organisationName" placeholder="@T["Organization Name"]" id="azure-B2C-organisation-name" data-ng-disabled="!azureADB2CIsEnabled" ng-pattern="regex" required />
                                                    <span class="validation-message" ng-show="azureADB2cSettingsForm.organisationName.$error.required && azureADB2cSettingsForm.organisationName.$dirty  && azureADB2CIsEnabled">@T["Please enter the organization name"]</span>
                                                    <span class="validation-message" ng-show="azureADB2cSettingsForm.organisationName.$error.pattern && azureADB2CIsEnabled ">@string.Format(T["Please enter the valid {0}"].Value, "URL")</span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 logo-align no-padding">
                                                <div class="col-xs-12 no-padding">
                                                    <label class="app-textbox-label">@T["Organization Logo"]</label>
                                                    <span id="azure-B2C-logo-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@T["Logo of the organization to be displayed in the login page."]"></span>
                                                </div>
                                                <div class="col-xs-12 no-padding logo-container">
                                                    <div id="azure-B2C-image-upload-box" class="auth-image-upload-box validation-padding">
                                                        <div class="js-image-preview" style="background-image:{{azureB2CLogoUrl}}"></div>
                                                        <div class="upload-options">
                                                            <label>
                                                                <span>@T["Change logo"]</span>
                                                                <input type="file" class="image-upload" accept="image/png,image/jpeg,image/svg+xml" ng-model="azureB2CLogoUrl" ng-init="azureB2CLogoUrl='@ViewBag.AzureAdB2CSettings.LogoUrl'" name="azureB2CLogoUrl" data-ng-disabled="!azureADB2CIsEnabled" ng-required="azureADB2CIsEnabled" />
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <span class="validation-message" ng-show="!azureADB2cSettingsForm.isValidazureB2CLogoUrl && azureADB2CIsEnabled"></span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 first-auth-field no-padding">
                                                <div class="col-xs-12 no-padding">
                                                    <label class="app-textbox-label">@T["Application id"]</label>
                                                    <span id="application-id-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@string.Format(T["A unique identifier used to register the {0} web app in {1}."].Value, "Embedded BI", "azure AD B2C")"></span>
                                                </div>
                                                <div class="auth-input-display" ng-class="(azureADB2cSettingsForm.applicationID.$dirty && azureADB2cSettingsForm.applicationID.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="applicationID" ng-init="applicationID='@ViewBag.AzureAdB2CSettings.AzureADB2CSettings.ApplicationId'" name="applicationID" placeholder="@T["Application ID"]" id="azure-B2C-application-id" data-ng-disabled="!azureADB2CIsEnabled" required />
                                                    <span class="validation-message" ng-show="azureADB2cSettingsForm.applicationID.$invalid && azureADB2cSettingsForm.applicationID.$dirty && azureADB2CIsEnabled">@T["Please enter the application id"]</span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 first-auth-field no-padding">
                                                <div class="col-xs-12 no-padding">
                                                    <label class="app-textbox-label">@T["Tenant Name"]</label>
                                                    <span id="tenant-name-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@string.Format(T["A dedicated instance of {0} service."].Value, "azure AD B2C")"></span>
                                                </div>
                                                <div class="auth-input-display" ng-class="(azureADB2cSettingsForm.tenantName.$dirty && azureADB2cSettingsForm.tenantName.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="tenantName" ng-init="tenantName='@ViewBag.AzureAdB2CSettings.AzureADB2CSettings.TenantName'" name="tenantName" placeholder="@T["Tenant Name"]" id="azure-B2C-tenant-name" data-ng-disabled="!azureADB2CIsEnabled" ng-pattern="regex" required />
                                                    <span class="validation-message" ng-show="azureADB2cSettingsForm.tenantName.$error.required && azureADB2cSettingsForm.tenantName.$dirty  && azureADB2CIsEnabled">@T["Please enter the tenant name"]</span>
                                                    <span class="validation-message" ng-show="azureADB2cSettingsForm.tenantName.$error.pattern && azureADB2CIsEnabled ">@string.Format(T["Please enter the valid {0}"].Value, "URL")</span>
                                                </div>
                                            </div>
                                            <div class="col-xs-12 first-auth-field no-padding">
                                                <div class="col-xs-12 no-padding">
                                                    <label class="app-textbox-label">@T["Sign in Policy"]</label>
                                                    <span id="sign-in-policy-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@string.Format(T["The Name of the Sign in/Sign up user flow created in {0}"].Value, "Azure B2C")"></span>
                                                </div>
                                                <div class="auth-input-display" ng-class="(azureADB2cSettingsForm.SigninPolicy.$dirty && azureADB2cSettingsForm.SigninPolicy.$invalid) ? 'has-error' : ''">
                                                    <input type="text" class="form-control txt-holder validation-padding" ng-model="SigninPolicy" ng-init="SigninPolicy='@ViewBag.AzureAdB2CSettings.AzureADB2CSettings.SigninPolicy'" name="SigninPolicy" placeholder="@T["Sign in Policy"]" id="azure-B2C-sign-in-policy" data-ng-disabled="!azureADB2CIsEnabled" required />
                                                    <span class="validation-message" ng-show="azureADB2cSettingsForm.SigninPolicy.$invalid && azureADB2cSettingsForm.SigninPolicy.$dirty && azureADB2CIsEnabled">@T["Please enter the sign in policy"]</span>
                                                </div>
                                            </div>
                                            <div class="col-md-12 no-padding" id="singlelogout">
                                                <div class="col-xs-12 no-padding ">
                                                    @Html.CheckBox("singlelogoutIsEnabled", new { @class = "material-checkbox", ng_model = "singlelogoutIsEnabled" })
                                                    @Html.Hidden("singlelogoutIsEnabled")
                                                    <label for="singlelogoutIsEnabled">
                                                        <span>
                                                            @string.Format(T["Enable {0}"].Value, "Single Logout")
                                                        </span>
                                                    </label>
                                                    <span id="single-logout-info" class="su su-info info-popup" data-toggle="popover" data-placement="right" data-html="true" data-content="@string.Format(T["User can logout of both the application and {0} using single Logout {1}."].Value, "Azure AD B2C", "(SLO)")"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
            @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
        </div>
    </div>
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.min.js"></script>
    </environment>
    <div id="dialog" class="custom-template"></div>
    <div id="dlgContent" style="visibility: hidden" class="dialogContent">
            <span class="dialogText">
                <span class="su su-warning-alt" id="warning-icon"></span>
                <span class="dialog-text-text">@T["Beware! Any script or application using this signing key need to be updated."]</span>
            </span>
    </div>
}
