@{
    var globalAppSettings = _globalAppSettings;
    ViewBag.Title = T["Email Settings"].Value +" - " + globalAppSettings.SystemSettings.OrganizationName;
    var mailAuthenticationTypes = new List<SelectListItem>
    {
        new SelectListItem { Value = "0", Text = T["Anonymous authentication"].Value, Selected = globalAppSettings.SystemSettings.MailSettings?.MailSettingsAuthType == MailSettingsAuthType.Anonymous },
        new SelectListItem { Value = "1", Text = T["Basic authentication"].Value, Selected = globalAppSettings.SystemSettings.MailSettings?.MailSettingsAuthType == MailSettingsAuthType.Basic }
    };
    var mailAuthenticationTypesOffice365 = new List<SelectListItem>
    {
        new SelectListItem { Value = "3", Text = T["OAuth"].Value, Selected = globalAppSettings.SystemSettings.MailSettings?.MailSettingsAuthType == MailSettingsAuthType.OAuth },
    };
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var isEnableSSL = ViewBag.SystemSettings.MailSettings?.MailSettingsIsSecureAuthentication;
    var loginUserEmail = _identityResponse.User.Email;
    var isLogsTab = (Context.Request.Query["tab"].ToString().ToLower() == "logs") ? "active" : string.Empty;
    var isCustomEmailTab = (Context.Request.Query["tab"].ToString().ToLower() == "custom-email-template") ? "active" : string.Empty;
    var isSettingsTab = (string.IsNullOrWhiteSpace(Context.Request.Query["tab"]) || Context.Request.Query["tab"].ToString().ToLower() == "email-settings") || (!string.IsNullOrWhiteSpace(Context.Request.Query["tab"]) && string.IsNullOrWhiteSpace(isLogsTab)) ? "active" : string.Empty;
    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var canShowAdminMenu = await ServerAppConfig.CanShowAdminMenu(model, _identityResponse.IsAdmin, _featureManager);
    var pageDescription = T["Configuration for sending emails from application."];
    var mailAccount = new List<SelectListItem>
    {
        new SelectListItem { Value = "0", Text = T["SMTP"].Value, Selected = globalAppSettings.SystemSettings.MailSettings?.MailSettingsAccount == MailAccount.SMTP },
        new SelectListItem { Value = "1", Text = T["Microsoft 365"].Value, Selected = globalAppSettings.SystemSettings.MailSettings?.MailSettingsAccount == MailAccount.Microsoft365 }
    };
    var isUMSEmailSettingsInherited = globalAppSettings.GlobalUMSSettings != null && globalAppSettings.GlobalUMSSettings.UseGlobalSettings && globalAppSettings.GlobalUMSSettings.GlobalSettingsInfo.Contains(GlobalSettingsInfo.Email);
}

@section styles{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.min.css" />
    </environment>
}
@section scripts {
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.min.js"></script>
    </environment>
    <script>
        var dashboardServerResourceUrl = "@globalAppSettings.SystemSettings.CDNLink";
        var SystemSettingsProperties = @Html.Raw(Json.Serialize(ViewBag.SystemSettings));
        var updateEmailSettingsUrl = "@Url.Action("UpdateEmailSettings", "Administration")";
        var sentTestMail = "@Url.Action("SentTestMail", "Administration")";
        var loginUserEmail = "@loginUserEmail";
        var updateEmailConfigureDataUrl = "@Url.Action("UpdateEmailConfigureEvent", "Administration")";
        var emailSettingsConfigUrl = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.EmailSettingsConfiguration)";
        var emailSettingsLogUrl = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.EmailSettingsLogs)";
        var isUMSEmailSettingsInherited = @Json.Serialize(isUMSEmailSettingsInherited);
        var brandingName = "@ServerAppConfig.BrandingJson.BrandingName";
    </script>
}

@section MainSection{
    @await Html.PartialAsync("_AdminMenu")
    <div class="col-xs-12 no-padding no-margin @(canShowAdminMenu ? "width-alignment" : "admin-panel-full-width")">
        <div class="col-xs-12 no-padding">
            @await Html.PartialAsync("../Shared/_TopHeaderSection", new ViewDataDictionary(ViewData) { { "PageHeader", @T["Email Settings"] }, { "PageDescription", @pageDescription } })
        </div>
        <div id="email-setting" class="col-xs-12 bi-page-header tabs-header-padding top-nav-btn-secton">
            <div class="col-xs-12 no-padding">
                <div class="col-xs-6 no-padding button-section">
                    <a href="@Url.Action("Index","Home")" class="secondary-button app-btn-secondary pull-right" id="UpdateSystemSettingsCancel-bottom" title="">@T["Cancel"]</a>
                    <button type="button" title="" id="UpdateSystemSettings-bottom" name="UpdateSystemSettings" class="primary-button app-btn-primary pull-right update-mail-settings ums-inherit-email-settings">
                        <span>@T["Save"]</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="col-xs-12 no-padding bi-page-nav-bar">
            <ul id="email-settings-tab-nav" class="nav nav-tabs" role="tablist">
                <li role="presentation" class="@isSettingsTab">
                    <a href="#email-settings" id="email-settings-tab" aria-controls="email-settings-tab" role="tab" data-toggle="tab">@T["Settings"]</a>
                </li>
                <li role="presentation" class="">
                    <a href="#custom-email-template" id="custom-email" aria-controls="custom-email-template" role="tab" data-toggle="tab">@T["Template"]</a>
                </li>
                <li role="presentation" class="@isLogsTab">
                    <a href="#logs" id="email-logs-tab" aria-controls="email-activity-logs-tab" role="tab" data-toggle="tab">@T["Logs"]</a>
                </li>
            </ul>
        </div>
    </div>
    <div id="mail-settings-container" class="bi-page-container bi-page-container-with-tab @(canShowAdminMenu ? string.Empty : "admin-panel-full-width")" role="tabpanel" aria-labelledby="email-settings">
        <div class="bi-page-content col-xs-12 no-padding">
            @if (isUMSEmailSettingsInherited)
            {
                <div class="col-xs-12 no-margin inherit-description">
                    <span class="su su-info"></span>
                    <label>@T["Email settings have been inherited from the UMS settings. Please contact the UMS admin to disable the inheritance."]</label>
                </div>
            }
            <div class="tab-content col-xs-12 no-padding">
                <div role="tabpanel" class="tab-pane bi-page-body @isSettingsTab" id="email-settings">
                    <div id="email-setting-body" class="col-xs-12 no-padding">
                        <form id="email-setting-form" class="row admin-page-form email-settings-section no-margin" autocomplete="off">
                            <div class="form-group col-xs-12 no-padding">
                                @Html.Label("mail-account", T["Email Account"].Value, new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding ums-inherit-email-settings-dropdown" })
                                <div class="form-input-field dropdown-margin col-xs-12 no-padding ums-inherit-email-settings-dropdown">
                                    @Html.DropDownList("mail_account_type", mailAccount, new { @class = "selectpicker", id = "mail-account" })
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding smtp-field">
                                @Html.Label("smtp-address", string.Format(T["{0} Server"].Value, "SMTP"), new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    <input type="text" id="smtp-address" class="form-control txt-holder validation-padding mail-settings-fields" name="smtp_address" placeholder="@string.Format(T["{0} server"].Value,"SMTP")" value="@ViewBag.SystemSettings.MailSettings.MailSettingsHost.TrimEnd(' ')" />
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding smtp-field">
                                @Html.Label("port-number", string.Format(T["{0} Port"].Value, "SMTP"), new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    <input type="text" id="port-number" class="form-control txt-holder validation-padding mail-settings-fields" name="port_number" placeholder="@string.Format(T["{0} Port"].Value,"SMTP")" value="@ViewBag.SystemSettings.MailSettings.MailSettingsPort" />
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding smtp-field">
                                @Html.Label("mail-display-name", T["Sender Name"].Value, new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    <input type="text" id="mail-display-name" class="form-control txt-holder validation-padding mail-settings-fields" name="mail_display_name" placeholder="@T["Sender name"]" value="@ViewBag.SystemSettings.MailSettings.MailSettingsSenderName.TrimEnd(' ')" />
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding">
                                @Html.Label("mail-user-name", T["Sender Email Address"].Value, new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    <input type="text" id="mail-user-name" class="form-control txt-holder validation-padding mail-settings-fields" name="mail_user_name" placeholder="@T["Sender email address"]" value="@ViewBag.SystemSettings.MailSettings.MailSettingsAddress.TrimEnd(' ')" />
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding">
                                @Html.Label("mail-authentication-type", T["Authentication Type"].Value, new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding ums-inherit-email-settings-dropdown" })
                                <div class="form-input-field dropdown-margin col-xs-12 no-padding smtp-field ums-inherit-email-settings-dropdown">
                                    @Html.DropDownList("auth_type", mailAuthenticationTypes, new { @class = "selectpicker", id = "mail-authentication-type" })
                                    <span class="validation-errors"></span>
                                </div>
                                <div class="form-input-field dropdown-margin col-xs-12 no-padding oauth-field ums-inherit-email-settings-dropdown">
                                    @Html.DropDownList("auth_type", mailAuthenticationTypesOffice365, new { @class = "selectpicker mail-pswd-auth-type", id = "mail-authentication-type" })
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding smtp-field">
                                @Html.Label("sender-user-name", T["Username"].Value, new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    @if (globalAppSettings.SystemSettings.MailSettings.MailSettingsAuthType == MailSettingsAuthType.Basic)
                                    {
                                        <input type="text" id="sender-user-name" class="form-control txt-holder validation-padding mail-settings-fields mail-credentials" name="sender_user_name" placeholder="@T["Username"]" value="@ViewBag.SystemSettings.MailSettings.MailSettingsUserName.TrimEnd(' ')" />
                                    }
                                    else
                                    {
                                        <input type="text" id="sender-user-name" class="form-control txt-holder validation-padding mail-settings-fields mail-credentials" name="sender_user_name" placeholder="@T["Username"]" disabled="disabled" />
                                    }
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="col-xs-12 no-padding smtp-field secrets-field-pwsd">
                                @Html.Label("mail-password", T["Password"].Value, new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    <input type="text" class="hidden-input" style="display: none;">
                                    <input style="visibility: hidden; position: absolute; left: -99999px" class="hidden-input" type="password" name="fake_passwordfield_to_turnoff_autocomplete">
                                    @if (globalAppSettings.SystemSettings.MailSettings.MailSettingsAuthType == MailSettingsAuthType.Basic)
                                    {
                                        <input type="password" id="mail-password" class="form-control txt-holder validation-padding mail-settings-fields mail-credentials" name="mail_password" placeholder="&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;" />
                                    }
                                    else
                                    {
                                        <input type="password" id="mail-password" class="form-control txt-holder validation-padding mail-settings-fields mail-credentials" name="mail_password" placeholder="&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;" disabled="disabled" />
                                    }
                                    <div class="show-hide-password su su-eye"></div>
                                    <span class="validation-errors"></span>
                                </div>
                            </div>

                            <div class="col-xs-12 no-padding ssl-checkbox smtp-field">
                                <div id="enable-checkbox" class="col-xs-12 no-padding">
                                    @Html.CheckBox("secure-mail-authentication", (bool)isEnableSSL, new { @class = "material-checkbox ums-inherit-email-settings", @id = "secure-mail-authentication" })
                                    @Html.Hidden("secure-mail-authentication")
                                    @Html.Label("secure-mail-authentication", string.Format(T["Enable {0}"].Value, "SSL"), new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding oauth-field">
                                @Html.Label("tenant-id", string.Format(T["Tenant ID"].Value, "Tenant ID"), new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    <input type="text" id="tenant-id" class="form-control txt-holder validation-padding mail-settings-fields" name="tenant_id" placeholder="@string.Format(T["Tenant ID"].Value,"Tenant ID")" value="@ViewBag.SystemSettings.MailSettings.MailSettingsTenantId" />
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding oauth-field">
                                @Html.Label("client-id", string.Format(T["Client ID"].Value, "Client ID"), new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding">
                                    <input type="text" id="client-id" class="form-control txt-holder validation-padding mail-settings-fields" name="client_id" placeholder="@string.Format(T["Client ID"].Value,"Client ID")" value="@ViewBag.SystemSettings.MailSettings.MailSettingsClientId" />
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 no-padding oauth-field oauth-field-client-secret">
                                @Html.Label("client-secret", T["Client Secret"].Value, new { @class = "app-textbox-label col-lg-2 col-md-2 col-sm-3 col-xs-4 no-padding" })
                                <div class="form-input-field col-xs-12 no-padding secrets-field">
                                    <input type="text" class="hidden-input" style="display: none;">
                                    <input style="visibility: hidden; position: absolute; left: -99999px" class="hidden-input" type="password" name="fake_passwordfield_to_turnoff_autocomplete">
                                    <input type="password" id="client-secret" class="form-control txt-holder validation-padding mail-settings-fields" name="client_secret" placeholder="&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;" />
                                    <div class="show-hide-password su su-eye"></div>
                                    <span class="validation-errors"></span>
                                </div>
                            </div>
                        </form>
                        <div class="col-xs-12 no-padding">
                            <button id="test-mail-connection" class="primary-button app-btn-primary test-connection ums-inherit-email-settings" data-container="body" title="@T["Test Email Settings Connection"]">@T["Test Connection"]</button>
                        </div>
                        <div id="test-mail-box" style="display: none;">
                            <div class="test-mail-info">@string.Format(T["Enter an email address and then click Send to verify that there are no issues with the {0} configuration."].Value, "SMTP")</div>
                            <form id="test-mail-form" class="row" autocomplete="off">
                                <div class="update-form-input-field col-xs-12 no-padding">
                                    @Html.Label("Email", T["Email Address"].Value, new { @class = "col-xs-12 no-padding" })
                                    <div class="form-input-field col-xs-12 no-padding">
                                        <input type="text" id="test-mail" class="form-control txt-holder validation-padding mail-settings-fields" maxlength="85" name="test-mail" placeholder="@T["To Email"]" />
                                        <span id="test-mail-validate" class="validation-message"></span>
                                    </div>
                                </div>
                            </form>
                            <div class="success-box" style="display: none;">
                                <img src="@(GlobalAppSettings.CdnDomain)/success-toast.svg" class="toast-image-container">
                                <div>@T["Email sent successfully"]</div>
                            </div>
                            <div class="mail-error-description">
                                <span id="copy-test-main-error-message" class="pull-right app-hyperlink" data-original-title="@T["Click to copy"]"><span class="su su-copy"></span></span>
                                <textarea id="test-main-error-message" class="form-control" name="text" readonly></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div role="tabpanel" class="tab-pane col-md-12 col-xs-12 col-sm-12 bi-page-body @isLogsTab" id="logs">
                    @await Html.PartialAsync("_EmailActivityLog")
                </div>
                @await Html.PartialAsync("_EmailLogInfo")
                <div role="tabpanel" class="tab-pane col-md-12 col-xs-12 col-sm-12 bi-page-body @isCustomEmailTab" id="custom-email-template">
                    @await Html.PartialAsync("_CustomizeEmailContent")
                </div>
            </div>
        </div>
        @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
    </div>
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/emailConfiguration.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/emailConfiguration.min.js"></script>
    </environment>
}