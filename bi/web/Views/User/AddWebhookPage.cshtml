@using Newtonsoft.Json
@{
    var globalAppSettings = _globalAppSettings;

    ViewBag.Title = (ViewBag.IsEdit ? T["Edit Webhook"].Value : T["Add Webhook"].Value) + " - " + globalAppSettings.SystemSettings.OrganizationName;
    @model WebhookInfo
    var jsondata = JsonConvert.SerializeObject(Model);
    var serverApiUrl = new DashboardServerApiEndPoints(globalAppSettings, true).DashboardServerApiUrl();
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var dashboardDesignerResourceUrl = globalAppSettings.SystemSettings.DesignerCdnLink.TrimEnd('/');
    var isEdit = ViewBag.IsEdit;
    var isRequestFromSettingsPage = ViewBag.IsRequestFromSettingsPage;
    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var canShowAdminMenu = await ServerAppConfig.CanShowAdminMenu(model, _identityResponse.IsAdmin, _featureManager);
    ViewBag.PageDescription = ViewBag.IsEdit ? T["Edit your webhooks here"].Value : T["Add your webhooks here"].Value;
}
@section scripts{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/webhooks.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/webhooks.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/webhooks.min.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/webhooks.min.js"></script>
    </environment>
    @if (isRequestFromSettingsPage)
    {
        <script type="text/javascript">
        var webhooksPagesUrl = "@Url.Action("WebhookSettings", "Administration")";
        var editWebhookDetailsUrl = "@Url.Action("EditWebhook", "Administration")";
        </script>
    }
    else
    {
        <script type="text/javascript">
        var webhooksPagesUrl = "@Url.Action("Webhooks", "User")";
        var editWebhookDetailsUrl = "@Url.Action("EditWebhook", "User")";
        </script>
    }

<script type="text/javascript">
        var addWebhookDetailsUrl = "@Url.Action("AddWebhook", "User")";
        var checkWebhookNameExistsUrl = "@Url.Action("IsWebhookNameExist", "User")";
        var getPayloadUrl = "@Url.Action("GetEventPayloads", "User")";
        var webhookDetails = @Html.Raw(Json.Serialize(jsondata));
        var webhookDetailsJson = typeof webhookDetails === "string" ? JSON.parse(webhookDetails) : webhookDetails;
        var isEdit = @(isEdit ? "true" : "false");
        var allPayloadsObj = JSON.parse(@Html.Raw(Json.Serialize(ViewBag.AllPayloads)));
</script>
}

@section MainSection{
    @{
        if (isRequestFromSettingsPage)
        {
            @await Html.PartialAsync("_AdminMenu")
        }
        else
        {
            @await Html.PartialAsync("_ProfileMenu")
        }
    }

    <div class="col-12 no-padding no-margin @(ViewBag.IsRequestFromSettingsPage ? canShowAdminMenu ? "width-alignment" : "admin-panel-full-width" : "width-alignment"  )">
        <div class="col-12 no-padding">
            @await Html.PartialAsync("../Shared/_TopHeaderSection", new ViewDataDictionary(ViewData) { { "PageHeader", @T["Webhooks"] } })
        </div>
        <div id="user-header" class="col-12 bi-page-header tabs-header-padding top-nav-btn-secton">
            <div class="col-12 no-padding">
                <div class="col-6 no-padding button-section">
                    @if (isRequestFromSettingsPage)
                    {
                        <a href="@Url.Action("WebhookSettings", "Administration")" class="secondary-button app-btn-secondary float-end" id="cancel-webhook-settings" title="">@T["Cancel"]</a>

                    }
                    else
                    {
                        <a href="@Url.Action("Webhooks", "User")" class="secondary-button app-btn-secondary float-end" id="cancel-webhook-settings" title="">@T["Cancel"]</a>

                    }
                    <button type="button" title="" id="update-webhook-settings" name="UpdateWebhookSettings" class="primary-button app-btn-primary float-end">
                        @T["Save"]
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="add-webhook-container" class="bi-page-container @(ViewBag.IsRequestFromSettingsPage ? canShowAdminMenu ? string.Empty : "admin-panel-full-width" : string.Empty  )">
        <div class="bi-page-content col-12 no-padding">
            <div class="bi-page-body col-md-12">
                <form class="col-12 no-padding add-webhook-form-container" id="add-webhook-form" autocomplete="off">
                    <div class="webhook-info-section add-webhook-section">
                        <div class="form-group webhook-name-field-div">
                            <label class="col-12 app-textbox-label section-label">@T["Name"]<span class="mandatory">*</span></label>
                            <div class="no-padding">
                                <input type="text" id="webhook-name-field" placeholder="@T["Enter a name here"]" data-maxlength="255" class="form-control validation select-override-input" name="webhook-name-field" />
                                <span class="validation-errors"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-12 app-textbox-label section-label">@T["Description"]</label>
                            <div class="no-padding">
                                <textarea id="webhook-description-field" name="webhook_description" placeholder="@T["Enter the description here"]" class="form-control validation select-override-description" data-maxlength="1024"></textarea>
                                <span class="validation-errors"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-12 app-textbox-label section-label">@T["Event"]<span class="mandatory">*</span></label>
                            <div class="no-padding select-event-div">
                                @Html.DropDownList("select-event", ViewBag.eventType as IEnumerable<SelectListItem>, new { id = "select-event", @class = "selectpicker form-control", title = T["Select event"].Value })
                                <span id="select-event-validations" style="display:none" class="display validation-errors">@T["Please select the event"]</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-12 app-textbox-label section-label">@string.Format(T["Destination {0}"].Value, "URL")<span class="mandatory">*</span></label>
                            <div class="no-padding">
                                <input type="text" id="destination-url" placeholder="http://" class="form-control validation select-override-input" name="destination-url" />
                                <span class="validation-errors"></span>
                            </div>
                        </div>
                        <div id="" class="form-group">
                            <label class="col-12 app-textbox-label section-label">@T["Content Type"]<span class="mandatory">*</span></label>
                            <div class="no-padding content-type">
                                @Html.DropDownList("select-content-type", ViewBag.contentType as IEnumerable<SelectListItem>, new { id = "select-content-type", @class = "selectpicker form-control", title = T["Select the content type"].Value })
                                <span id="content-type-validations" style="display:none" class="display validation-errors">@T["Please select the content type"]</span>
                            </div>
                        </div>
                    </div>
                    <div class="authentication-section add-webhook-section col-12 no-padding">
                        <div class="col-12 no-padding ">
                            <div id="enable-authentication">
                                @Html.CheckBox("enableauthentication", new { @class = "material-checkbox", @id = "enableauthentication" })
                                @Html.Hidden("enableauthentication")
                                @Html.Label("enableauthentication", T["Enable Authentication"].Value, new { @class = "app-textbox-label section-label enable-authentication" })
                            </div>
                        </div>
                        <div class="col-12 no-padding auth-radio-btn">
                            <div class="password-auth select-auth">
                                <input type="radio" id="password-auth" class="css-radio" name="authType" value="0" checked="checked">
                                <label for="password-auth" class="radio-btn-label app-textbox-label"><span class="text">@T["Password"]</span></label>
                            </div>
                            <div class="api-key-auth select-auth">
                                <input type="radio" id="api-key-auth" class="css-radio" name="authType" value="1">
                                <label for="api-key-auth" class="radio-btn-label app-textbox-label"><span class="text">@string.Format(T["{0} Key"].Value, "API")</span></label>
                            </div>
                        </div>
                        <div col-12 no-padding>
                            <label class="col-3 app-textbox-label section-label password-auth-div">@T["UserName"]<span class="mandatory">*</span></label>
                            <label class="col-3 app-textbox-label section-label password-auth-div">@T["Password"]<span class="mandatory">*</span></label>
                        </div>
                        <div class="form-group col-12 no-padding">
                            <div class="no-padding col-3 password-auth-div">
                                <input type="text" id="webhook-username" class="form-control validation user-name-field" name="webhook-username" placeholder="@T["Enter the username here"]" />
                                <span class="validation-errors"></span>
                            </div>
                            <div class="no-padding col-3 password-auth-div">
                                <input type="password" id="webhook-password" class="form-control validation password-field" name="webhook-password" placeholder="&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;" />
                                <span class="validation-errors"></span>
                                <div class="show-hide-password su su-eye"></div>
                            </div>
                            <div class="info-message col-12 no-padding password-info-message password-auth-div">
                                @string.Format(T["{0} encoded credentials (Username:Password) will be sent in the authorization header {1}."].Value, "Base64", "(Authorization: Basic <Credential>)")
                            </div>
                            <div class="hide api-auth-field">
                                <label class="col-12 app-textbox-label section-label">@string.Format(T["{0} Key"].Value, "API")<span class="mandatory">*</span></label>
                                <div class="no-padding">
                                    <input type="text" id="webhook-api-key" class="form-control  validation select-override-input" name="webhook-api-key" placeholder="@string.Format(T["Enter the {0} key here"].Value, "API")" />
                                    <span class="validation-errors"></span>
                                </div>
                                <div class="info-message col-12 no-padding api-info-message">
                                    @string.Format(T["{0} encoded {1} key will be sent in Authorization header {2}."].Value, "Base64", "API", "(Authorization: Basic <Credential>)")
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="signing-section add-webhook-section">
                        <div class="col-12 no-padding">
                            <div id="enable-signing">
                                @Html.CheckBox("enablesigning", new { @class = "material-checkbox", @id = "enablesigning" })
                                @Html.Hidden("enablesigning")
                                @Html.Label("enablesigning", T["Enable Signing"].Value, new { @class = "app-textbox-label section-label enable-signing" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-12 app-textbox-label section-label secret-key-label">@T["Secret Key"]<span class="mandatory">*</span></label>
                            <div class="no-padding secret-key-div">
                                <input type="text" id="secret-key" data-maxlength="100" class="form-control validation select-override-input" name="secret-key" placeholder="@T["Secret Key"]" />
                                <span class="validation-errors"></span>
                            </div>
                            <div class="info-message">
                                @string.Format(T["The secret key is used to sign the payload {0}. It generates a signature, which is sent in the header {1} with the {2} encoding. This can be used to verify the integrity of the payload at the receiver’s end {3}."].Value, "(HMAC-SHA256)", "(x-signature)", "Base64", "(x-signature: <signature>)")
                            </div>
                        </div>
                    </div>
                    <div class="custom-header-section  add-webhook-section">
                        <div class="col-12 no-padding">
                            <div id="enable-custom-header">
                                @Html.CheckBox("enablecustomheader", new { @class = "material-checkbox", @id = "enablecustomheader" })
                                @Html.Hidden("enablecustomheader")
                                @Html.Label("enablecustomheader", T["Custom Header"].Value, new { @class = "app-textbox-label section-label enable-custom-header" })
                            </div>
                            <div class="info-message col-12 no-padding header-info">
                                @string.Format(T["Custom headers are used to send extra data to the destination {0}"].Value, "URL")
                            </div>
                        </div>
                        <div class="form-group col-12 no-padding">
                            <div class="col-3 no-padding custom-header">
                                <input type="text" id="custom-header-key" class="form-control validation header-key" name="custom-header-key" placeholder="@T["Key"]" />
                                <span class="validation-errors"></span>
                            </div>
                            <div class="col-3 no-padding custom-header">
                                <input type="text" id="custom-header-value" class="form-control validation header-value" name="custom-header-value" placeholder="@T["Value"]" />
                                <span class="validation-errors"></span>
                            </div>
                            <span class="col-1 input-group-btn no-padding" id="add-headers">
                                <button class="btn btn-default" type="button" data-placement="right" title="@T["Add Headers"]" data-bs-toggle="tooltip"><span class="su-add"></span></button>
                            </span>
                            <span class="col-12 no-padding validation-errors" id="custom-header-validation-message"></span>
                        </div>
                        <table id="custom-header-table" class="hide table table-custom-header">
                            <thead class='thead-default'>
                                <tr>
                                    <th class="header-key">Key</th>
                                    <th class="header-value">Value</th>
                                    <th class="header-plus-icon"></th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <div class="col-12 no-padding">
                            <div id="enable-all-payload-fields">
                                @Html.CheckBox("enableAllPayloadFields", new { @class = "material-checkbox", @id = "enableAllPayloadFields" })
                                @Html.Hidden("enableAllPayloadFields")
                                @Html.Label("enableAllPayloadFields", T["Include all fields in the payload"].Value, new { @class = "app-textbox-label section-label enable-all-payload-fields" })
                            </div>
                            <div class="info-message col-12 no-padding all-payload-info">
                                @T["The selected fields are sent as a payload. You can send all of them or just the required fields by selecting the following options."]
                            </div>
                        </div>
                        <div class="form-group select-payload-div">
                            <label class="col-12 app-textbox-label section-label">@T["Payload"]</label>
                            <div class="no-padding select-payload">
                                <select class="selectpicker form-control" id="payload-option" title="@T["Select payload"]" multiple="">
                                    <option value="" id="select-payload-option" data-hidden="true" selected="selected" disabled="disabled">@T["Select payload"]</option>
                                </select>
                                <span id="payload-select-validations" style="display:none" class="display validation-errors">@T["Please select the payload"]</span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
    </div>
}

