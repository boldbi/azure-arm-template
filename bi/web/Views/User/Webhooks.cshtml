@using Newtonsoft.Json

@{
    var globalAppSettings = _globalAppSettings;

    ViewBag.Title = T["Webhooks"].Value + " - " + globalAppSettings.SystemSettings.OrganizationName;
    ViewBag.MessageBox = true;
    var serverApiUrl = new DashboardServerApiEndPoints(globalAppSettings, true).DashboardServerApiUrl();
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var dashboardDesignerResourceUrl = globalAppSettings.SystemSettings.DesignerCdnLink.TrimEnd('/');
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ManageWebhook);
    var pageDescription = T["Manage all your webhooks here."];
}
@section scripts{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/webhooks.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/webhooks.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/webhooks.min.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/webhooks.min.js"></script>
    </environment>

    <script type="text/x-jsrender" id="webhook-name-template">
        <span class="grid-content" title="{{:Name}}" data-bs-toggle="tooltip">{{:Name}}</span>
    </script>
    <script type="text/x-jsrender" id="event-type-template">
        <span class="grid-content" title="{{:EventDescription}}" data-bs-toggle="tooltip">{{:EventDescription}}</span>
    </script>
    <script type="text/x-jsrender" id="modified-by-template">
        <span class="grid-content" title="{{:ModifiedByName}}" data-bs-toggle="tooltip">{{:ModifiedByName}}</span>
    </script>
    <script type="text/x-jsrender" id="options">
        <div class="dropdown">
            <span class="dropdown-toggle option-icon" data-bs-toggle="dropdown">
                <span class="su su-options"> </span>
            </span>
            <ul class="dropdown-menu" role="menu">
                <li>
                    <a href="@Url.Action("EditWebhookPage", "User")?webhookId={{:Id}}" class="edit-webhook">
                        <i class="su su-edit"></i>
                        <span>@T["Edit"]</span>
                    </a>
                </li>
                <li>
                    {{if IsEnable}}
                    <a href="javascript:void(0);" class="deactivate-webhook" data-item-id="{{:Id}}">
                        <i class="su su-enable"></i>
                        <span>@T["Deactivate"]</span>
                    </a>
                    {{else}}
                    <a href="javascript:void(0);" class="activate-webhook" data-item-id="{{:Id}}" data-name="{{:Name}}">
                        <i class="su su-disable"></i>
                        <span>@T["Activate"]</span>
                    </a>
                    {{/if}}
                </li>
                <li>
                    <a id="delete-webhook" class="delete-class delete-webhook" href="javascript:void(0);" data-item-id="{{:Id}}" data-name="{{:Name}}">
                        <i class="su su-delete"></i>
                        <span>@T["Delete"]</span>
                    </a>
                </li>
            </ul>
        </div>
    </script>
    <script type="text/x-jsrender" id="webhook-status">
        {{if IsEnable}}
        <span class="active su su-schedule-status"></span>
        @T["Active"]
        {{else}}
        <span class="inactive su su-schedule-status"></span>
        @T["Inactive"]
        {{/if}}
    </script>

    <script type="text/javascript">
        var isEdit = false;
        var deleteWebhookConfirmationUrl = "@Url.Action("DeleteWebhook", "User")";
        var deleteWebhookDetailsUrl = "@Url.Action("DeleteWebhookDetails", "User")";
        var activateWebhookUrl = "@Url.Action("ActivateWebhook", "User")";
        var deactivateWebhookUrl = "@Url.Action("DeactivateWebhook", "User")";
        var allPayloadsObj = JSON.parse(@Html.Raw(Json.Serialize(ViewBag.AllPayloads)));
        var allEventsObj = JSON.parse(@Html.Raw(Json.Serialize(ViewBag.AllEvents)));
        $(function () {
            GridLocalization();
            $("#search-webhooks").val("");
            $("#webhooksGrid").ejGrid({
                dataSource: ej.DataManager({ url: "@Url.Action("GetWebhooks", "User")", adaptor: "UrlAdaptor" }),
                gridLines: ej.Grid.GridLines.None,
                allowSorting: true,
                allowSearching: true,
                allowPaging: true,
                allowSelection: true,
                allowFiltering: true,
                filterSettings: { filterType: "menu" },
                pageSettings: { pageSize: 20 },
                enableRowHover: true,
                enableAltRow: false,
                load: "fnOnGridLoad",
                actionBegin: "fnActionBegin",
                actionComplete: function (args) {
                    $('[data-bs-toggle="tooltip"]').tooltip({ container: $('body') });
                    showOrHideGridPager("#webhooksGrid");
                    if (args.model.currentViewData.length === 0) {
                        this.getContentTable().find("tbody .emptyrecord").html(window.Server.App.Localization.NoWebhookRecords);
                        rowBound();
                    }
                },
                rowDataBound: function () {
                    var height = $(".e-gridcontent").height();
                    if (height != null) {
                        rowBound();
                    }
                    $('[data-bs-toggle="tooltip"]').tooltip({ container: $('body') });
                },
                dataBound: function (args) {
                    $('[data-bs-toggle="tooltip"]').tooltip({ container: $('body') });
                },
                columns: [
                    {
                        templateID: "#webhook-name-template",
                        allowSorting: true,
                        headerText: "@T["Name"]",
                        width: 115,
                        field: "Name",
                        type: "string",
                        allowSorting: true,
                        allowFiltering: true
                    },
                    {
                        templateID: "#event-type-template",
                        field: "EventDescription",
                        headerText: "@T["Event Type"]",
                        type: "string",
                        width: 80,
                        allowSorting: true,
                        allowFiltering: false
                    },
                    {
                        templateID: "#modified-by-template",
                        field: "ModifiedByName",
                        headerText: '@T["Modified By"]',
                        width: 115,
                        allowSorting: true,
                        allowFiltering: false
                    },
                    {
                        field: "ModifiedDateString",
                        headerText: '@T["Modified On"]',
                        width: 100,
                        allowSorting: true,
                        allowFiltering: false
                    },
                    {
                        template: true,
                        templateID: "#webhook-status",
                        headerText: "@T["Status"]",
                        width: 75,
                        allowSorting: false,
                        allowFiltering: false
                    },
                    {
                        template: true,
                        templateID: "#options",
                        width: 40,
                        allowSorting: false,
                        allowFiltering: false
                    }
                ]

            });
        });
    </script>
}

@section MainSection{

    @await Html.PartialAsync("_ProfileMenu")

    <div class="col-12 no-padding no-margin width-alignment">
        @await Html.PartialAsync("../Shared/_TopHeaderSection", new ViewDataDictionary(ViewData) { { "PageHeader", @T["Webhooks"] }, { "PageDescription", @pageDescription } })
        <div class="bi-page-header col-12 top-nav-btn-secton">
            <div class="col-12 no-padding">
                <div id="search-area" class="float-start col-4">
                    <input type="text" class="float-start" id="search-webhooks" placeholder="@T["Search"]" />
                    <span class="su su-inner-close close-icon float-start" id="clear-search" title="@T["Clear search"]"></span>
                    <span class="su su-search search-accounts float-start" title="@T["Search"]"></span>
                </div>
                <div class="col-xs-6 no-padding button-section">
                    <a href="@Url.Action("AddWebhookPage", "User")" class="primary-button app-btn-primary float-end" title="@T["Add Webhook"]" data-bs-toggle="tooltip" data-placement="bottom">@T["Add Webhook"]</a>
                </div>
            </div>
        </div>
    </div>

    <div id="webhooks-container" class="bi-page-container col-12 bg-grid">
        <div class="bi-page-content col-12 no-padding">
            <div class="bi-page-body col-md-12">
                <div class="col-12 no-padding ">
                    <div id="webhooksGrid"></div>
                </div>
            </div>
        </div>
        @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
    </div>
    @await Html.PartialAsync("../Items/_AddItems")
}