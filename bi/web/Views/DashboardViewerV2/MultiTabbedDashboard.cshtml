@{
    Layout = null;
    var globalAppSettings = ViewBag.GlobalSettings as GlobalAppSettings;
    var requestUrl = new Uri(Context.Request.GetDisplayUrl());
    var dashboardUrls = ViewBag.UrlList as List<string>;
    var isMobile = new DeviceDetection(Context).IsMobile;
    var selectedId = ViewBag.SelectedId == Guid.Empty ? string.Empty : ViewBag.SelectedId;
    var childCount = ViewBag.childIdList == null ? 0 : ViewBag.childIdList.Count;
    bool isSelfHosted = ServerAppConfig.IsSelfHosted;
    var dashboardServerApiUrl = new DashboardServerApiEndPoints(globalAppSettings).DashboardServerApiUrl();
    var dashboardServerApiUrlForServerEmbed = new DashboardServerApiEndPoints(globalAppSettings, true).DashboardServerApiUrl();
    var dashboardBIUrl = new DashboardServerEndPoints(globalAppSettings).DashboardServerBIUrl();
    var embedConfig = ViewBag.EmbedConfig as EmbedConfig;
    var filterQuery = ViewBag.FilterQuery;
    var isUserAuthenticatedInCurrentTenant = ViewBag.IsUserAuthenticatedInCurrentTenant;
    var isUserAuthenticated = "false";
    var isAdmin = Context.Session.GetString("IsAdmin") != null && Convert.ToBoolean(Context.Session.GetString("IsAdmin"));
    var isOwner = ViewBag.IsOwner;
    var userId = ViewBag.UserId;
    var multiTabUrl = Url.Action("Dashboards", "Dashboards") + "/" + ViewBag.MultiDashboardDetails.Id + "/" + ViewBag.MultiDashboardDetails.CategoryName + "/" + ViewBag.MultiDashboardDetails.Name;
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var dashboardDesignerResourceUrl = globalAppSettings.SystemSettings.DesignerCdnLink.TrimEnd('/');
    var userName = ViewBag.UserName;
    var isUsageAnalytics = false;
    var enableComment = "false";
    var emailAddress = Context.Session.GetString("emailaddress") != null ? Context.Session.GetString("emailaddress") : string.Empty;
    var isSlideshow = false;
    var isViewNotFound = (ViewBag.ViewNotFound != null && ViewBag.ViewNotFound) ? true : false;
    var isCommentNotFound = (ViewBag.CommentNotFound != null && ViewBag.CommentNotFound) ? true : false;
    var isInvalidComment = (ViewBag.InValidCommentId != null && ViewBag.InValidCommentId) ? true : false;
    var designerServiceUrl = ServerAppConfig.GetServiceEndPointUrl(ServerAppConfig.InternalAppDataServiceUrl, _globalAppSettings);
    var isPublic = globalAppSettings.SystemSettings.IsMarkItemsPublic && ViewBag.MultiDashboardDetails.IsPublic;
    var dashboardCutomTheme = string.Empty;
    var embedThemeEnabled = false;
    var applyURLFilterAlone = ViewBag.ApplyURLFilterAlone != null;
    var isEmbedSignature = requestUrl.Query.ToLower().Contains("embed_signature") && globalAppSettings.GetLicenseSettings().EnterpriseFeatures.Embed;
    var themeInViewer = await _featureManager.IsEnabledAsync(FeatureManagement.ThemeInViewer);
    var canShowSession = ServerAppConfig.IsSelfHosted && (ViewBag.CanHideSessionInEmbed == null ? true : (ViewBag.CanHideSessionInEmbed != null && ViewBag.CanHideSessionInEmbed == true) ? false : true) && !isSlideshow;
    var isAuthenticated = Context.User.Identity.IsAuthenticated;
    if (((Context.Request.Query["isembed"].ToString() != null && Context.Request.Query["isembed"].ToString().ToLower() == "true") || isEmbedSignature) && !string.IsNullOrWhiteSpace(Context.Request.Query["embed_theme"]))
    {
        dashboardCutomTheme = Context.Request.Query["embed_theme"];
        embedThemeEnabled = true;
    }
    else
    {
        dashboardCutomTheme = ServerAppConfig.IsSelfHosted && globalAppSettings.SystemSettings.IsInheritFromGlobalLookAndFeelSettings ? ServerAppConfig.Theme.DashboardTheme : globalAppSettings.SystemSettings.CustomDashboardTheme;
    }
}
<html>
<head>
    <title>@ViewBag.Title</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" charset="utf-8" />
    <link rel="stylesheet" class="dashboard-custom-theme-file" asp-append-version="true" href="@ServerAppConfig.GetCustomThemeDesignerUrl(dashboardServerResourceUrl, Context, globalAppSettings, true)" />

    <link rel="icon" href="@globalAppSettings.SystemSettings.FavIcon" onerror="if (this.href !== null && this.href.toLowerCase() !== '@globalAppSettings.SystemSettings.CDNLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon') this.href = '@globalAppSettings.SystemSettings.CDNLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon';" />

    <meta name="designer_service:url" content="@(!string.IsNullOrWhiteSpace(ServerAppConfig.ViewerServiceUrl) ? ServerAppConfig.ViewerServiceUrl : ServerAppConfig.InternalAppDataServiceUrl)" />
    <meta name="dashboard_server:url" content="@dashboardServerApiUrl" />
    <meta name="designer_service:url" content="@designerServiceUrl" />
    <meta name="designer_service:access_token" content="@ViewBag.AccessToken" />
    <meta name="data_service:url" content="@designerServiceUrl" />
    <meta name="data_service_host:url" content="@designerServiceUrl.TrimEnd('/')" />
    <meta name="datasource:id" content="@ViewBag.DatasourceId" />
    <meta name="user:culture" content="@ViewBag.Culture" />
    <meta name="globalization:date_format" content="@_clientDateTimeInfo.ClientDateTime.DateFormat" />
    <meta name="globalization:time_format" content="@_clientDateTimeInfo.ClientDateTime.TimeFormat" />
    <link rel="icon" href="@globalAppSettings.SystemSettings.FavIcon" onerror="if (this.href !== null && this.href.toLowerCase() !== '@globalAppSettings.SystemSettings.CDNLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon') this.href = '@globalAppSettings.SystemSettings.CDNLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon';" />

    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/ej2-tab.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/ej2-tab.min.js"></script>
    </environment>

    @if ((!ServerAppConfig.IsSelfHosted && string.IsNullOrWhiteSpace(_globalAppSettings.SystemSettings.FontPreference)) || (ServerAppConfig.FontFamily == "Robotoregular" && _globalAppSettings.SystemSettings.IsInheritFromGlobalLookAndFeelSettings))
    {
        <style>
            :root {
                --designer-font: 'Roboto','Heebo','Segoes UI' !important;
            }
        </style>
    }
    else
    {
        <style>
            :root {
                --designer-font: var(--font-family) !important;
            }
        </style>
    }
    <script>
            @{
                if (Context.User.Identity.IsAuthenticated && Context.User != null && Context.User.Identity != null && isUserAuthenticatedInCurrentTenant || (embedConfig.IsEmbedCode && !isPublic))
                {
                    enableComment = (isSlideshow || !(embedConfig.HasDashboardComments || embedConfig.HasWidgetComments)) ? "false" : "true";
                    isUserAuthenticated = embedConfig.IsEmbedCode ? "false" : "true";
                    userName = embedConfig.IsEmbedCode ? embedConfig.UserInfo.Email.ToString() : emailAddress.ToLower();
                }
                else
                {
                    enableComment = "false";
                    isUserAuthenticated = "false";
                }
            }
            var userName = "@userName";
            var isAdmin = @Json.Serialize(isAdmin);
            var selectedId = "@selectedId";
            var showBackButton = @Json.Serialize(ViewBag.ShowMyDashboards);
            var isMobileView = @Json.Serialize(isMobile);
            var iframeUrls = @Html.Raw(Json.Serialize(dashboardUrls));
            var multiTabDashboardDetails = @Html.Raw(Json.Serialize(ViewBag.MultiTabDashboardDetails));
            var childIds = @Html.Raw(Json.Serialize(ViewBag.childIdList));
            var cdnPath = "@dashboardDesignerResourceUrl/cdn/scripts/designer/";
            var dashboardTheme = "@(!ServerAppConfig.IsSelfHosted ? "" : ViewBag.Theme)";
            var baseUrl = "@globalAppSettings.SystemSettings.BaseUrl";
            var embedConfig = @Html.Raw(Json.Serialize(embedConfig));
            var exportFormat = @Html.Raw(Json.Serialize(ViewBag.ExportFormat));
            var multiTabId = "@ViewBag.MultiTabId";
            var showMyDashboards = @Json.Serialize(Convert.ToBoolean(ViewBag.ShowMyDashboards));
            var myDashboardsUrl = encodeURI("@Url.Action("Dashboards", "Dashboards")" + "?view=all");
            var modelLanguage = "@ViewBag.ModelLanguage";
            var firstDayOfWeek = "@ViewBag.FirstDayOfWeek"
            var isSelfHosted = @Json.Serialize(isSelfHosted);
            var filterQuery = @Html.Raw(Json.Serialize(filterQuery));
            var isUserAuthenticatedInCurrentTenant = @Json.Serialize(isUserAuthenticatedInCurrentTenant);
            var hasDefaultView = @Json.Serialize(ViewBag.HasDefaultView);
            var autosaveFilter = @Json.Serialize(globalAppSettings.SystemSettings.IsEnableAutosaveFilter);
            var isUserAutosaveFilter = @Html.Raw(Json.Serialize(ViewBag.IsUserAutosaveFilter));
            var triggerDashboardRenderComplete = "@Url.Action("DashboardOptions", "FileRender")";
            var isUserAuthenticated = "@isUserAuthenticated";
            var viewDashboardUrlAction = "@Url.Action("Dashboards", "Dashboards")";
            var IsDashboardSessionActive = "@Url.Action("IsSessionActive", "Accounts")";
            var addViewUrl = { "web": "@Url.Action("onfiltersave", "DashboardViews")", "api": "/items/views/add" };
            var getSavedViewUrl = { "web": "@Url.Action("GetViews", "DashboardViews")", "api": "/items/views/get-by-item-id" };
            var getViewParameterUrl = "@Url.Action("GetDashboardViewParameter", "DashboardViews")";
            var deleteViewUrl = { "web": "@Url.Action("DeleteView", "DashboardViews")", "api": "/items/views/delete" };
            var updateViewUrl = { "web": "@Url.Action("UpdateView", "DashboardViews")", "api": "/items/views/edit" };
            var saveViewPopup = "@Url.Action("SaveView", "DashboardViews")";
            var dashboardItemDetail = "";
            var userId = "@userId";
            var pageurl = "@requestUrl.LocalPath";
            var viewUrl = "@Url.Action("Dashboards", "Dashboards")";
            var multiTabUrl = "@multiTabUrl";
            var dashboardServerResourceUrl = "@globalAppSettings.SystemSettings.CDNLink";
            var isWidgetRequest = false;
            var isSlideshow = false;
            var enableComment = "@enableComment";
            var canEdit = false;
            var isUsageAnalytics = false;
            var isDefaultView =  @Json.Serialize(ViewBag.IsDefaultView);
            var emptyGuid = "@Guid.Empty";
            var dashboardSettingsUrl = "@Url.Action("DashboardSettings", "Administration")";
            var commentPageUrl = "@Url.Action("CommentPartialView", "Comments")";
            var Commentswidgets = "@Url.Action("WidgetCommentPartialView", "Comments")";
            var isMultiTab = true;
            var parentItemId = "@ViewBag.ParentItemId";
            var dashboardServerApiUrl = "@dashboardServerApiUrl";
            var dashboardServerApiUrlForServerEmbed = "@dashboardServerApiUrlForServerEmbed";
            var isViewNotFound = @Html.Raw(Json.Serialize(isViewNotFound));
            var isCommentNotFound = @Html.Raw(Json.Serialize(isCommentNotFound));
            var isInvalidComment = @Html.Raw(Json.Serialize(isInvalidComment));
            var cdnLink = "@dashboardServerResourceUrl";
            var theming = @(!ServerAppConfig.IsSelfHosted ? "false" : themeInViewer ? Json.Serialize(globalAppSettings.SystemSettings.Theming) : "false");
            var dashboardCustomThemename = "@dashboardCutomTheme";
            var customThemeAppearance = "@(ServerAppConfig.IsSelfHosted && globalAppSettings.SystemSettings.IsInheritFromGlobalLookAndFeelSettings ? ServerAppConfig.Theme.Appearance : globalAppSettings.SystemSettings.ThemeAppearance)";
            var applicationTheme = "@(ServerAppConfig.IsSelfHosted && globalAppSettings.SystemSettings.IsInheritFromGlobalLookAndFeelSettings ? ServerAppConfig.Theme.ApplicationTheme : globalAppSettings.SystemSettings.CustomApplicationTheme)";
            var enableApplicationEmbed =@ServerAppConfig.EnableSameTabLinkTarget.ToString().ToLower();
            var appVersion = "@ServerAppConfig.ProductVersion";
            var canCheckSessionInActive = @Html.Raw(Json.Serialize(canShowSession));
            var isPublic = @Html.Raw(Json.Serialize(isPublic));
            var embedThemeEnabled = @Json.Serialize(embedThemeEnabled);
            var isAuthenticated = @Html.Raw(Json.Serialize(isAuthenticated));
            var applyURLFilterAlone = @Json.Serialize(applyURLFilterAlone);
    </script>
    @await Html.PartialAsync("~/Views/Shared/_LoaderIcon.cshtml")
</head>
    <body id="body" ng-app="serverApp" style="overflow: hidden; position: static; margin: 0; padding: 0; height: 100%; width: 100%;">
        <div class="preloader-wrap viewer-blue-loader" style="width: 100%;height: 100%; position: fixed; top: 0; bottom: 0; background: white; z-index : 2;">
            <div id="loader_image" align="center" style="position:relative;top:45%;">
                <div class="loader-blue loader-icon" id="loader-icon">
                    <svg class="circular">
                        <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                    </svg>
                </div>
            </div>
        </div>

        @if (ViewBag.ShowMyDashboards && !isMobile)
        {
            <a class="multi-tab-back" href="@Url.Action("dashboards", "dashboards" )" title="Back to all dashboards" ng-show="@embedConfig.HideTabHeader"><i class="su su-arrow-back"></i></a>
            <div class="sf-nav-separator" ng-show="@embedConfig.HideTabHeader"></div>
        }
        else if (isMobile)
        {
            <div id="multi-tab-mobile-menu" data-action="multi-tab-header">
                <i class="su su-mobile-menu-icon"></i>
            </div>
        }

        <div id="multi-tab-dashboard">
            <div class="e-tab-header" ng-show="@embedConfig.HideTabHeader">
                @for (var i = 0; i < ViewBag.childDashboardNames.Count; i++)
                {
                    if (ViewBag.childDashboardNames[i].TabName != "null" && ViewBag.childDashboardNames[i].TabName != null)
                    {
                        <div>@ViewBag.childDashboardNames[i].TabName</div>
                    }
                    else
                    {
                        <div>@ViewBag.childDashboardNames[i].ItemInfo.Name</div>
                    }
                }
            </div>
            <div class="e-content" id="multi-tab-content">
                @for (var i = 0; i < ViewBag.MultiTabDashboardDetails.Count; i++)
                {
                    <div data-designer-id="@("dashboard" + i)" class="tab-dashboard" style="width:100%;height:100%">
                        <div id="@("dashboard" + i)"></div>
                    </div>
                }
            </div>
        </div>
        <input id="is_mobile" type="hidden" value="@isMobile.ToString().ToLower()">

        @await Html.PartialAsync("~/Views/DashboardViewerV2/_DashboardViewerScripts.cshtml", new ViewDataDictionary(ViewData) {{ "PinWidget", false }})
        @await Html.PartialAsync("~/Views/DashboardViewerV2/_DashboardViews.cshtml", new ViewDataDictionary(ViewData))

        @if (isUserAuthenticatedInCurrentTenant)
        {
            @await Html.PartialAsync("~/Views/Items/_ItemInfo.cshtml")
        }

        <div id="save-view-popup" class="displayNone" data-item-id="" data-widget-id="" data-widget-name="">
            <iframe id="save-view-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
        </div>

        <div id="progress-alert-container" class="custom-bootstrap-styles"></div>

        <div id="success-alert" class="custom-bootstrap-styles">
            <div id="image-container">
                <div class="image-holder">
                    <span class="su su-tick" alt="Success Icon"></span>
                </div>
            </div>
            <div id="message">
                <h1 id="message-header"></h1>
                <span id="message-content"></span>
            </div>
        </div>
        <div id="warning-alert" class="custom-bootstrap-styles">
            <div id="image-container">
                <span class="su su-warning-alt" alt="Warning Icon"></span>
            </div>
            <div id="message" class="div-close">
                <h1 id="message-header"></h1>
                <span id="message-content"></span>
            </div>
            <div class="close-div">
                <span id="close-content">@T["Close"]</span>
            </div>
        </div>

        @if (isMobile)
        {
            <div class="blur-container" style="display: none"></div>
            <div id="multi-tab-header-container" style="display: none">
                <ul class="multi-tab-header-list-container">
                    @for (var i = 0; i < ViewBag.MultiTabDashboardDetails.Count; i++)
                    {
                        <li class="multi-tab-header-list" id="e-item-multi-tab-dashboard_@i">
                            <div class="multi-tab-header-names">@ViewBag.MultiTabDashboardDetails[i].Name</div>
                        </li>
                    }
                </ul>
            </div>
        }

        @if (Context.User.Identity.IsAuthenticated && Context.User != null && Context.User.Identity != null && isUserAuthenticatedInCurrentTenant || embedConfig.IsEmbedCode)
        {
            <div id="commentModuleContainer" class="displayNone" style="background-color: #fff;">
                <iframe id="commentModuleContainer_iframe" class="comment-popup-frame" data-item-id="@ViewBag.ParentItemId" style="height: 100%; width: 100%;"></iframe>
                <div class="loader-blue loader-icon " id="comment-module-container-loader-icon">
                    <svg class="circular">
                        <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                    </svg>
                </div>
            </div>

            <div id="widgetCommentModuleContainer" class="displayNone" style="background-color:  #fff; z-index: 1000001;">
                <iframe id="widgetCommentModuleContainer_iframe" class="comment-popup-frame" style="height: 100%; width: 100%;"></iframe>
                <div class="loader-blue loader-icon " id="widget-comment-module-container-loader-icon">
                    <svg class="circular">
                        <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                    </svg>
                </div>
            </div>
        }

        @if (isMobile)
        {
            if (!isUsageAnalytics && (!embedConfig.IsEmbedDashboard || embedConfig.HasViews || embedConfig.HasDashboardComments))
            {
                <nav id="server-mobile-navbar" class="navbar navbar-inverse custom-bootstrap-styles">
                    <div class="container-fluid">
                        <ul class="nav navbar-nav col-xs-12 no-padding no-margin">
                            <li class="@(enableComment.ToLower() == "true" && embedConfig.HasViews && embedConfig.HasDashboardComments ? "col-xs-4":"col-xs-6") icon">
                                <a href="javascript:void(0)" class="su su-nav-dashboard active">
                                    <span class="nav-menu-label">@T["Dashboard"]</span>
                                </a>
                            </li>
                            @if (enableComment.ToLower() == "true" && (!embedConfig.IsEmbedDashboard || embedConfig.HasDashboardComments))
                            {
                                <li class="@(embedConfig.HasViews ? "col-xs-4":"col-xs-6") icon" id="comment-li">
                                    <a href="javascript:void(0)" class="su su-without-comment server-comment">
                                        <span class="nav-menu-label">@T["Comment"]</span>
                                    </a>
                                </li>
                            }

                            @if (!embedConfig.IsEmbedDashboard || embedConfig.HasViews)
                            {
                                <li class="@(embedConfig.HasDashboardComments && enableComment.ToLower() == "true" ? "col-xs-4":"col-xs-6") icon" id="view-li">
                                    <a href="javascript:void(0)" class="su-view">
                                        <span class="nav-menu-label">@T["Views"]</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </nav>
            }
        }
        @await Html.PartialAsync("~/Views/Shared/_BaseFontStyleSheet.cshtml")
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/multi-tabbed-dashboard.css" />
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/designer/multitab-dashboard-options.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/multi-tabbed-dashboard.min.css" />
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/designer/multitab-dashboard-options.min.js"></script>
        </environment>

    </body>
</html>