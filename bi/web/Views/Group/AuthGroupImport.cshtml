@using Newtonsoft.Json;
@{
    var globalAppSettings = _globalAppSettings;

    var authType = (AuthType)ViewBag.AuthType;
    var authTypeInfo = authType == AuthType.OAuth ? "OAuth" : "OpenID Connect";
    ViewBag.Title = String.Format(T["{0} Groups Import"].Value, authTypeInfo) + " - " + globalAppSettings.SystemSettings.OrganizationName;
    ViewBag.MessageBox = null;
    ViewBag.HelpSiteUrl = authType == AuthType.OAuth ? GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ImportOAuthGroups) : GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ImportOpenIDGroups);

    var authSettingsList = ViewBag.AuthSettingsList as List<AuthSettings>;
    var serializedAuthSettingsList = new List<string>();
    foreach (var setting in authSettingsList)
    {
        serializedAuthSettingsList.Add(JsonConvert.SerializeObject(setting));
    }

    var localSettingsBaseUrl = Url.Action("administration", "administration") + "/authentication-settings";
    var globalSettingsBaseUrl = _globalAppSettings.SystemSettings.IDPUrl + "/" + ServerAppConfig.TenantManagementHostName + "/administration/authentication";
    var initialModifyLink = (authSettingsList[0].TenantId != Guid.Empty ? localSettingsBaseUrl : globalSettingsBaseUrl) + "?tab=" + (authSettingsList[0].AuthType == AuthType.OAuth ? "oauth-settings" : "openid-settings");
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    ViewBag.PageHeader = @String.Format(T["Import Groups — {0}"].Value, authTypeInfo);
    ViewBag.PageDescription = @String.Format(T["Import users from {0}."].Value, authTypeInfo);
    ViewBag.BackIconRedirectionUrl = Url.Action("group", "group");
    ViewBag.BackIconTitle = T["Groups"];
}
}

@section scripts{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/authentication-group-import.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/authentication-group-import.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/authentication-group-import.min.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/authentication-group-import.min.js"></script>
    </environment>
    <script>
        var saveSelectedAuthGroupsUrl = "@Url.Action("SaveSelectedAuthGroups", "group")";
        var getAuthGroupsUrl = "@Url.Action("GetAuthenticationGroups", "group")";
        var authSettingsList = @Html.Raw(Json.Serialize(authSettingsList));
        var serializedAuthSettingsList = @Html.Raw(Json.Serialize(serializedAuthSettingsList));
        var authType = "@authType";
        var localSettingsBaseUrl = "@localSettingsBaseUrl";
        var globalSettingsBaseUrl = "@globalSettingsBaseUrl";
        var guidEmpty = "@Guid.Empty";
    </script>
}

@section MainSection{
    @await Html.PartialAsync("../Administration/_AdminMenu")

    <script type="text/x-jsrender" id="user-detail-validation">
        {{if IsDuplicated}}
        <span class="su su-login-error group-import-validation" title="{{:DisplayMessage}}" data-html="true" data-bs-toggle="tooltip" data-placement="left"></span>
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="group-name-template">
        <span title="{{:~renderDoubleQuotes(GroupName)}}" class="grid-content" data-bs-toggle="tooltip">
            {{:GroupName}}
        </span>
    </script>

    <script type="text/x-jsrender" data-bs-toggle="tooltip" id="group-description-template">
        <span title="{{:~renderDoubleQuotes(GroupDescription)}}" class="grid-content" data-bs-toggle="tooltip">
            {{:GroupDescription}}
        </span>
    </script>
    <script type="text/x-jsrender" id="checkbox-row-template">
        {{if IsDuplicated}}
        <input disabled type="checkbox" class="checkbox-row-disabled material-checkbox" name="checkbox-row-disabled" data-checked-id="{{:GroupId}}" id="row-check{{:GroupId}}" />
        <input name="row-check{{:GroupId}}" type="hidden" value="false">
        <label for="row-check{{:GroupId}}"> </label>
        {{else}}
        <input type="checkbox" class="checkbox-row material-checkbox" name="checkbox-row" data-checked-id="{{:GroupId}}" id="row-check{{:GroupId}}" />
        <input name="row-check{{:GroupId}}" type="hidden" value="false">
        <label for="row-check{{:GroupId}}"> </label>
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="checkbox-header-template">
        @Html.CheckBox("checkbox-header", new { @class = "material-checkbox" })
        @Html.Label("checkbox-header", " ", new { @class = "checkbox-header-label" })
    </script>

    <script type="text/x-jsrender" id="name-header">
        <div class="item-header">@T["Name"]</div>
    </script>
    <script type="text/x-jsrender" id="description-header">
        <div class="item-header">@T["Description"]</div>
    </script>
    <script type="text/x-jsrender" id="group-id-header">
        <div class="item-header">@T["Group Id"]</div>
    </script>

    <script type="text/x-jsrender" id="custom-paging">
        <button id="prev-page" disabled><i class="su su-angle-left"></i></button>
        <input type="hidden" id="current-page-value" value="1" />
        <label id="current-page-label">1</label>
        <button id="next-page"><i class="su su-angle-right"></i></button>
    </script>

    <script type="text/javascript">
        var customAdaptor = new ej.UrlAdaptor().extend({
            processResponse: function (data, dataManagerObj, query, xhr, request, changes) {
                processAuthGroupResponse(data);
                return ej.UrlAdaptor.prototype.processResponse(data, dataManagerObj, query, xhr, request, changes);
            }
        });

        var data = ej.DataManager({
            url: getAuthGroupsUrl,
            adaptor: new customAdaptor(),
        });

        ej.support.stableSort = false;
        GridLocalization(window.Server.App.Localization.GroupResourceEmpty);
        $(function () {
            $("#Grid").ejGrid({
                dataSource: data,
                gridLines: ej.Grid.GridLines.None,
                allowPaging: true,
                enableAltRow: false,
                enableRowHover: true,
                allowSorting: false,
                allowSelection: true,
                allowScrolling: false,
                allowFiltering: false,
                allowSearching: true,
                locale: "en-US",
                selectionType: ej.Grid.SelectionType.Multiple,
                filterSettings: { filterType: "menu" },
                pageSettings: {
                    enableTemplates: true,
                    template: "#custom-paging"
                },
                selectionSettings: { selectionMode: ["row"] },
                actionComplete: "fnActionComplete",
                create: "fnCreate",
                recordClick: "fnRecordClick",
                actionBegin: "fnOnAuthGroupGridActionBegin",
                rowDataBound: function () {
                    $("input.checkbox-row-disabled").parents("tr").addClass("row-disabled");
                },
                dataBound: function (args) {
                    $("#checkbox-header").change(headCheckboxOnChange);
                    $('[data-bs-toggle="tooltip"]').tooltip({ container: $('body') });
                    this.model.indexes = {}; /* Additional property*/
                },
                columns: [
                    { headerTemplateID: "#checkbox-header-template", template: true, templateID: "#checkbox-row-template", textAlign: ej.TextAlign.Center, width: 5 },
                    { field: "GroupName", cssClass: "group-name", headerText: "@T["Name"]", templateID: "#group-name-template", headerTemplateID: "#name-header", width: 30, type: "string" },
                    { field: "GroupDescription", cssClass: "desc", headerText: "@T["Description"]", templateID: "#group-description-template", headerTemplateID: "#description-header", width: 50, type: "string" },
                    { field: "GroupId", cssClass: "item-id", headerText: "@T["Group Id"]", headerTemplateID: "#group-id-header", width: 10, visible: false },
                    { field: "", width: 5, templateID: "#user-detail-validation", allowFiltering: false }
                ]
            });
            $.views.helpers({
                renderDoubleQuotes: function (inputString) {
                    return inputString.replace(new RegExp("\"", 'g'), '&quot;');
                }
            });
        });
    </script>
    <div class="col-12 no-padding no-margin width-alignment">
        <div class="col-12 no-padding">
            @await Html.PartialAsync("../Shared/_TopHeaderSection")
        </div>
        <div class="col-12 bi-page-header tabs-header-padding top-nav-btn-secton import-users">
            <div class="col-12 no-padding">
                <div class="col-xs-6 no-padding button-section">
                    <input type="button" disabled="" value="@T["Import groups"]" title="@T["Import the selected groups from the list"]" onclick="SaveAuthGroups()" id="import-button" class="primary-button app-btn-primary float-end float-end" />
                </div>
            </div>
        </div>
    </div>
    <div class="auth-group-container bi-page-container col-12 @(ViewBag.ThirdPartyLogins ? string.Empty : "unlock-enterprise-features blur-content") bg-grid">
        <div class="col-12 bi-page-content no-padding">
            <div class="import-auth-group">
                <div class="col-md-12 col-12 bi-page-body">
                    <div class="col-md-12 col-12 no-padding no-margin">
                        <div class="col-md-8 col-xs-8 no-padding">
                            <div class="col-md-12 directory-path no-padding">
                                <label class="provider-name-label">
                                    @T["Provider"] :
                                </label>
                                <select id="auth-provider-list" class="selectpicker auth-provider-list col-md-4 no-padding">
                                    @for (int i = 0; i < authSettingsList.Count; i++)
                                    {
                                        <option class="no-margin-dropdown-ul" value="@(i)" selected="@(i==0)">@(authType == AuthType.OAuth ? authSettingsList[i].OAuthAuthSettings.ProviderName : authSettingsList[i].OIDCAuthSettings.ProviderName)</option>
                                    }
                                </select>
                                <a id="modify-button-link" class="link-text link-button app-btn-link" href="@initialModifyLink" title="@T["Update Authentication settings"]">@T["Modify"]</a>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 no-padding user-data-grid">
                        <span class="import-message">
                            @T["Please select the groups from the following list to import"]
                        </span>
                        <div class="col-12 no-padding no-margin">
                            <div class="list" id="grid-validation-messages float-start">
                                <div class="col-12">
                                    <span id="empty-validation" class="validation-message float-end empty-validation no-padding">@T["Please select group(s) to import"]</span>
                                </div>
                            </div>
                        </div>

                        <div id="grid-container" class="col-12 no-padding">
                            <div class="col-md-12 no-padding ">
                                <div id="Grid" class="grid">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xs-5 no-padding"></div>
            <div class="col-xs-7 no-padding"></div>
        </div>
        @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
    </div>

    @await Html.PartialAsync("../UserManagement/_LimitUserCreation")
    @if (!ViewBag.ThirdPartyLogins)
    {
        @await Html.PartialAsync("~/Views/UnlockFeatures/UnlockFeatures.cshtml")
    }
}
