/*!
*  filename: ej1.grid.all.js
*  version : 8.1.41
*  Copyright Syncfusion Inc. 2001 - 2024. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardPager", "BoldBIDashboard.Pager", {
        _rootCSS: "e-pager",
        validTags: ["div"],
        // default model
        defaults: {
            pageSize: 12,
            pageCount: 10,
            currentPage: 1,
            enableExternalMessage: false,
            externalMessage:"",
            enableQueryString:false,
            locale: "en-US",
            masterObject: null,
            click: null,
            enableRTL: false,
            totalRecordsCount: null,
            totalPages: null,
            customText:"",
            isResponsive: false
        },

        // constructor function
        _init: function () {
            this._initPrivateProperties();
            this.model.enableQueryString && this._queryStringValue();
            this.renderPager();
            if(this.model.isResponsive) this._reSizeHandler();
            this._wireResizing();
            this._wireEvents();
        },
        _initPrivateProperties: function () {
            this._links = [];
            this._bbdesigner$prev = null;
            this._bbdesigner$first = null;
            this._bbdesigner$PP = null;
            this._bbdesigner$NP = null;
            this._lastNP = false;
            this._lastpageCount = null;
            this._bbdesigner$last = null;
            this._bbdesigner$next = null;
            this._prevPageNo = null;
            this.localizedLabels = this._getLocalizedLabels();
        },
        _wireEvents: function () {
            if (this.model.click != undefined)
                this._on(this.element, "click", this._pagerClickHandler);

        },
        _wireResizing: function () {
            (this.model.isResponsive) ? bbdesigner$(window).bind('resize', bbdesigner$.proxy(this._reSizeHandler, this)) : this._unWireResizing();
        },
        _unWireResizing: function () {
            bbdesigner$(window).unbind('resize', bbdesigner$.proxy(this._reSizeHandler, this));
        },
        _reSizeHandler: function () {
            if (this.element.outerWidth() - bbdesigner$(this.element.contents()[0]).outerWidth() < 40) {
                this._flag = true;
                this._fillScreen();
            }
            if (this.element.outerWidth() - bbdesigner$(this.element.contents()[0]).outerWidth() > 40) {
                this.option("pageCount", this._maxPageCount);
                if (this.element.outerWidth() - bbdesigner$(this.element.contents()[0]).outerWidth() < 40) {
                    this._flag = true;
                    this._fillScreen();
                }
            }
        },
        renderPager: function () {
            var bbdesigner$pagerContainer = BoldBIDashboard.buildTag('div.e-pagercontainer', "", {}, { unselectable: "on" });
            var bbdesigner$parentMsgBar = BoldBIDashboard.buildTag('div.e-parentmsgbar');
            this._renderPagerContainer(bbdesigner$pagerContainer);
            this._renderMsgBar(bbdesigner$parentMsgBar);
            this.element.append(bbdesigner$pagerContainer).append(bbdesigner$parentMsgBar).addClass(this.model.enableRTL ? "e-pager e-rtl" : "e-pager");
            this.model.enableExternalMessage && this._renderPagerMessage();
            if (this.model.enableRTL) this.element.addClass("e-rtl");
        },
        _queryStringValue: function () {
            var results = new RegExp('[\\?&]page=([^&#]*)').exec(window.location.href);
            !results ? this.model.currentPage = 1 : this.model.currentPage = parseInt(results[1] || 1);
        },
        _renderPagerMessage: function () {
            var bbdesigner$messageDiv = BoldBIDashboard.buildTag('div.e-pagermessage');
            if (this.model.externalMessage.toString().length)
                bbdesigner$messageDiv.html(this.model.externalMessage);
            else
                bbdesigner$messageDiv.hide();
            this.element.append(bbdesigner$messageDiv);
        },
        _renderPagerContainer: function (bbdesigner$pagerContainer) {
            //Update pager styles here for next versions
            this._renderBackwardButton(bbdesigner$pagerContainer);
            this._renderpreviousPager(bbdesigner$pagerContainer);
            this._renderNumericItem(bbdesigner$pagerContainer);
            this._renderForwardPager(bbdesigner$pagerContainer);
            this._renderForwardButton(bbdesigner$pagerContainer);
        },
        _renderMsgBar: function (bbdesigner$ParentMsgBar) {
            var bbdesigner$msgBar = BoldBIDashboard.buildTag('span.e-pagermsg', String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
            bbdesigner$ParentMsgBar.append(bbdesigner$msgBar);
            bbdesigner$ParentMsgBar.css("text-align", BoldBIDashboard.TextAlign.Right);
        },
        _renderpreviousPager: function (bbdesigner$pagerContainer) {
            this._bbdesigner$PP = BoldBIDashboard.buildTag('a.e-link e-nextprevitemdisabled e-disable e-spacing e-PP', "...", {}, { title: this.localizedLabels.previousPagerTooltip, role: "link" });
            bbdesigner$pagerContainer.append(this._bbdesigner$PP);
        },
        _renderForwardPager: function (bbdesigner$pagerContainer) {
            this._bbdesigner$NP = BoldBIDashboard.buildTag('a.e-link e-NP e-numericitem e-spacing e-default', "...", {}, { title: this.localizedLabels.nextPagerTooltip, role: "link" });
            bbdesigner$pagerContainer.append(this._bbdesigner$NP);
        },
        _renderBackwardButton: function (bbdesigner$pagerContainer) {
            this._bbdesigner$first = BoldBIDashboard.buildTag('div.e-first e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, { unselectable: "on", title: this.localizedLabels.firstPageTooltip });
            this._bbdesigner$prev = BoldBIDashboard.buildTag('div.e-prev e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, { unselectable: "on", title: this.localizedLabels.previousPageTooltip });
            bbdesigner$pagerContainer.append(this._bbdesigner$first);
            bbdesigner$pagerContainer.append(this._bbdesigner$prev);
        },
        _renderNumericItem: function (bbdesigner$pagerContainer) {
            var bbdesigner$numericContainer = BoldBIDashboard.buildTag('div.e-numericcontainer e-default', "", {}, { unselectable: "on", id: "NumericContainer" });
            this._renderNumericLinks(bbdesigner$numericContainer,this.model.pageCount);
            bbdesigner$pagerContainer.append(bbdesigner$numericContainer);
            this._maxPageCount = this.model.pageCount;
        },
        _renderNumericLinks: function (bbdesigner$numericContainer) {
            bbdesigner$numericContainer.empty();
            this.model.pageCount = Math.round(this.model.pageCount);
            for (var page = 1; page <= this.model.pageCount; page++) {
                var bbdesigner$link = BoldBIDashboard.buildTag('a.e-link', this.model.customText + page, {}, { role: "link" }).addClass("e-numericitem e-spacing e-default").data("index",page);
                if (page == this.model.currentPage)
                    bbdesigner$link.removeClass("e-default").addClass("e-currentitem e-active");
                bbdesigner$numericContainer.append(bbdesigner$link);
            }
            this._links = bbdesigner$numericContainer.children();
        },
        _renderForwardButton: function (bbdesigner$pagerContainer) {
            this._bbdesigner$next = BoldBIDashboard.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, { unselectable: "on", title: this.localizedLabels.nextPageTooltip });
            this._bbdesigner$last = BoldBIDashboard.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, { unselectable: "on", title: this.localizedLabels.lastPageTooltip });
            bbdesigner$pagerContainer.append(this._bbdesigner$next);
            bbdesigner$pagerContainer.append(this._bbdesigner$last);

        },
        _applyCss: function () {
            if (this.model.currentPage > 1) {
                this._bbdesigner$prev.removeClass("e-prevpagedisabled").removeClass("e-disable").addClass("e-prevpage e-default");
                this._bbdesigner$first.removeClass("e-firstpagedisabled").removeClass("e-disable").addClass("e-firstpage e-default");
            } else {
                this._bbdesigner$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
                this._bbdesigner$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
            }
            (this.model.currentPage > this.model.pageCount) ?
                 (this._bbdesigner$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default")) : (this._bbdesigner$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default"));

            if (this._links.length && parseInt(this._links[0].innerHTML.replace(this.model.customText,""), 10) + this.model.pageCount > this.model.totalPages)
                this._lastNP = true;
            else
                this._lastNP = false;

            if (this._lastNP == false)
                this._bbdesigner$NP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
            else
                this._bbdesigner$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");

            this._lastpageCount = this.model.totalPages % this.model.pageCount;
            if (this._lastpageCount == 0)
                this._lastpageCount = this.model.pageCount;
            if (this.model.currentPage > (this.model.totalPages - this._LastpageCount)) {
                this._bbdesigner$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
                this._bbdesigner$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            }
            if (this.model.currentPage == this.model.totalPages || this.model.totalRecordsCount == 0) {
                this._bbdesigner$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
                this._bbdesigner$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
                this._bbdesigner$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            } else {
                this._bbdesigner$last.addClass("e-lastpage e-default").removeClass("e-lastpagedisabled").removeClass("e-disable");
                this._bbdesigner$next.addClass("e-nextpage e-default").removeClass("e-nextpagedisabled").removeClass("e-disable");
            }
            if (this._links.length) {
                this._links.removeClass("e-currentitem").removeClass("e-active").addClass("e-default");
                bbdesigner$(this._links[(this.model.currentPage - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-currentitem e-active");
                bbdesigner$(this._links[(this._prevPageNo - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-numericitem");
            }
            if (this.model.pageSize >= (this.model.totalRecordsCount / this.model.pageCount) && this._bbdesigner$PP != null && this._bbdesigner$PP.length != 0) {
                this._bbdesigner$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                this._bbdesigner$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            }
        },
        _SetTotalPages: function () {
            this.model.totalPages = (this.model.totalRecordsCount % this.model.pageSize == 0) ? (this.model.totalRecordsCount / this.model.pageSize) : (parseInt(this.model.totalRecordsCount / this.model.pageSize, 10) + 1);
        },
        _refreshNumericItem: function () {
            if (this._links.length != 0 && this._links != null) {
                this.model.currentPage = this.model.totalPages == 1 ? 1 : this.model.currentPage;
                if (this.model.currentPage > this.model.totalPages && this.model.totalPages != 0)
                    this.model.currentPage = this.model.totalPages;
                var _pagerTarget = parseInt(this.model.currentPage / this.model.pageCount, 10);
                if (this.model.currentPage % this.model.pageCount == 0)
                    if (_pagerTarget > 0)
                        _pagerTarget = _pagerTarget - 1;
                this._links.css("display", "none");
                for (var i = 0; i < this.model.pageCount; i++) {
                    var start = (_pagerTarget * this.model.pageCount) + 1 + i;
                    if (start <= this.model.totalPages) {
                        this._links[i].style.display = '';
						bbdesigner$(this._links[i]).data('index', start);
                        bbdesigner$(this._links[i]).html(this.model.customText + start);
                    }
                }
            }
        },
        _refreshPagerInfo: function () {
            if (this.model.totalRecordsCount == 0)
                this.model.currentPage = 0;
            this.element.find(".e-pagermsg").text(String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
        },
        _refreshExternalMessage: function () {
            if (this.model.externalMessage.toString().length)
                this.element.find(".e-pagermessage").empty().html(this.model.externalMessage).show();
            else
                this.element.find(".e-pagermessage").hide();
        },
        refreshPager: function () {
            this._SetTotalPages();
            this._refreshNumericItem();
            this._refreshPagerInfo();
            this._applyCss();
            this.model.enableExternalMessage && this._refreshExternalMessage();
            if (this.model.enableRTL)
                this.element.addClass("e-rtl");
            else
                this.element.removeClass("e-rtl");
        },

        _kDownHandler: function (e) {
            var code;
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            e.target = null;
            if (this.model.masterObject.checkKey("firstPage", code, e))
                e.target = this._bbdesigner$first;
            else if (this.model.masterObject.checkKey("previousPager", code, e))
                e.target = this._bbdesigner$PP;
            else if (this.model.masterObject.checkKey("previousPage", code, e))
                e.target = this._bbdesigner$prev;
            else if (this.model.masterObject.checkKey("lastPage", code, e))
                e.target = this._bbdesigner$last;
            else if (this.model.masterObject.checkKey("nextPager", code, e))
                e.target = this._bbdesigner$NP;
            else if (this.model.masterObject.checkKey("nextPage", code, e))
                e.target = this._bbdesigner$next;
            else
                return false;
            this._pagerClickHandler(e);
        },

        _pagerClickHandler: function (e) {
            this._prevPageNo = this.model.currentPage;
            var bbdesigner$target = bbdesigner$(e.target);
            if (bbdesigner$.inArray(e.target, this._links) != -1) {
				this.model.currentPage = parseInt(bbdesigner$(e.target).data("index"), 10);
            }
            else if (bbdesigner$target.hasClass("e-nextpage") && bbdesigner$target.hasClass("e-nextpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 0) {
                    this.model.currentPage++;
                    if (this._links != undefined && this._links.length != 0)
                        this.model.currentPage = parseInt(bbdesigner$(this._links[0]).data("index"), 10) + this.model.pageCount;
                    if (parseInt(this._links[this.model.pageCount - 1].innerHTML, 10) + this.model.pageCount >= this.model.totalPages)
                        this._lastNP = true;
                }
                else
                    this.model.currentPage++;
            }
            else if (bbdesigner$target.hasClass("e-prevpage") && bbdesigner$target.hasClass("e-prevpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 1)
                    this._lastNP = false;
                this.model.currentPage--;
                if (this.model.currentPage < 0) { this.model.currentPage = 0; }
            }
            else if (bbdesigner$target.hasClass("e-lastpage") && bbdesigner$target.hasClass("e-lastpagedisabled") != true) {
                this._LastpageCount = this.model.totalPages % this.model.pageCount;
                (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                this.model.currentPage = this.model.totalPages;
                this._lastNP = true;
            }
            else if (bbdesigner$target.hasClass("e-firstpage") && bbdesigner$target.hasClass("e-firstpagedisabled") != true) {
                this.model.currentPage = 1;
                this._lastNP = false;
            }
            else if (bbdesigner$target.hasClass("e-NP") && bbdesigner$target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt(bbdesigner$(this._links[0]).data("index"), 10) + this.model.pageCount;
                if (parseInt(this._links[this.model.pageCount - 1].innerHTML.replace(this.model.customText,""), 10) + this.model.pageCount >= this.model.totalPages) {
                    this._lastNP = true;
                    if ((this.model.totalRecordsCount - this.model.pageSize) < this.model.pageSize)
                        this._LastpageCount = this.model.totalRecordsCount - this.model.pageSize;
                    else
                        this._LastpageCount = ((this.model.totalRecordsCount / this.model.pageSize) % this.model.pageCount);
                    (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                    if (this._links != undefined)
                        this.model.currentPage = parseInt(bbdesigner$(this._links[this.model.pageCount - 1]).data("index"), 10) + 1;
                }
            }
            else if (bbdesigner$target.hasClass("e-PP") && bbdesigner$target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt(bbdesigner$(this._links[0]).data("index"), 10) - this.model.pageCount;
                this._lastNP = false;
            }
            this.goToPage(this.model.currentPage,e);
            return false;
        },
        goToPage: function (pageIndex,event) {
            if (pageIndex != this.model.currentPage)
                this._prevPageNo = this.model.currentPage;
            if (this._prevPageNo !== pageIndex && (pageIndex >= 1 && pageIndex <= this.model.totalPages)) {
                this.model.currentPage = pageIndex;
                this.model.enableQueryString && this._updateQueryString(this.model.currentPage);
                this._trigger("click", { "currentPage": pageIndex, "event": event });
            }
            else
                this._trigger("click", { "currentPage": pageIndex, "event": event });

        },
        _updateQueryString: function (value) {
            var _newUrl = this._getUpdatedURL(window.location.href, "page", value);
            if (history.pushState) {
                window.history.pushState({ path: _newUrl }, '', _newUrl);
            }
            else
                window.location.href = _newUrl;
        },

        _getUpdatedURL: function (uri, key, value) {
            var re = new RegExp("([?|&])" + key + "=.*?(&|#|$)", "i");
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                var hash = '';
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                if (uri.indexOf('#') !== -1) {
                    hash = uri.replace(/.*#/, '#');
                    uri = uri.replace(/#.*/, '');
                }
                return uri + separator + key + "=" + value + hash;
            }
        },
        _getLocalizedLabels: function (property) {
            return BoldBIDashboard.getLocalizedConstants(this.sfType, this.model.locale);
        },
        _fillScreen: function () {
            var numLen = this.element.find('.e-pagercontainer').outerWidth() - (this._bbdesigner$first.outerWidth() + this._bbdesigner$last.outerWidth() + this._bbdesigner$next.outerWidth() + this._bbdesigner$prev.outerWidth())
            numLen -= this._bbdesigner$NP.hasClass('e-disable') ? 0 : this._bbdesigner$NP.outerWidth();
            numLen -= this._bbdesigner$PP.hasClass('e-disable') ? 0 : this._bbdesigner$PP.outerWidth();
            if (this.element.outerWidth() - bbdesigner$(this.element.contents()[0]).outerWidth() < 40) {
                if (Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth()) - 1 < 1) this._flag? this.option("pageCount", 1) : this.model.pageCount = 1;
                else this._flag ? this.option("pageCount", Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth()) - 1) : this.model.pageCount = Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth()) - 1;
            }
        },
        _setFirst: true,
        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "pageCount":
                        this._renderNumericLinks(this.element.find("#NumericContainer"));
                        if (this.model.isResponsive && !this._flag) {
                            this._maxPageCount = this.model.pageCount;
                            this._fillScreen();
                        }
                        this._flag = false;
                        break;
                    case "isResponsive":
                        this._wireResizing();
                        if (!options[prop]) this.option("pageCount", this._maxPageCount);
                        else if (this.model.isResponsive && !this._flag) {
                            this._maxPageCount = this.model.pageCount; this._fillScreen();
                        }
                        this._flag = false;
                        break;
                }
            }
            this.refreshPager();
        },

        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this.element.empty().removeClass("e-pager");
            this._unWireResizing();
        }
    });
    BoldBIDashboard.Pager.Locale = BoldBIDashboard.Pager.Locale || {};

    BoldBIDashboard.Pager.Locale["default"] = BoldBIDashboard.Pager.Locale["en-US"] = {
        pagerInfo: "{0} of {1} pages ({2} items)",
        firstPageTooltip: "Go to first page",
        lastPageTooltip: "Go to last page",
        nextPageTooltip: "Go to next page",
        previousPageTooltip: "Go to previous page",
        nextPagerTooltip: "Go to next Pager",
        previousPagerTooltip: "Go to previous Pager"
    };

})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    BoldBIDashboard.gridFeatures.common = {
        
        refreshContent: function (refreshTemplate) {
            if (refreshTemplate) {
                this.refreshTemplate();
                this._refreshHeader();
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                this._renderFilterBarTemplate();
            var args = {};
            this._initialRenderings();
            args.requestType = BoldBIDashboard.Grid.Actions.Refresh;
            this._processBindings(args);
        },

        
        rowHeightRefresh: function () {
            if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(this.model.currentViewData) && this.model.currentViewData.length) {
                var frozenRows = this.getContentTable().get(0).rows;
                var movableRows = this.getContentTable().get(1).rows, height = 0;
                if (this.getContent().find(".e-frozencontentdiv").is(":visible"))
                    for (var i = 0; i < frozenRows.length; i++) {
                        if (bbdesigner$(frozenRows[i]).css("display") == "none")
                            continue;
                        height = BoldBIDashboard.max([frozenRows[i].getClientRects()[0].height, movableRows[i].getClientRects()[0].height]);
                        bbdesigner$(frozenRows[i]).height(height); bbdesigner$(movableRows[i]).height(height);
                        if (i && (i == this.model.scrollSettings.frozenRows - 1 || i == frozenRows.length - 1))
                            height = height + 1;
                        if (!this.model.allowTextWrap) {
                            if (!i || i == this.model.scrollSettings.frozenRows - 1)
                                height = height - 1;
                        }
                        if (this.model.isEdit && bbdesigner$(frozenRows[i]).find("#" + this._id + "EditForm").length && i)
                            bbdesigner$(frozenRows[i]).find("#" + this._id + "EditForm td").css("height", height); bbdesigner$(movableRows[i]).find("#" + this._id + "EditForm td").css("height", height);
                    }
                this._getRowHeights()
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getScrollObject().isVScroll() ) {
                    var scroller = this.getScrollObject()._vScrollbar;
                    if (scroller.value() != scroller.model.maximum)
						this._scrollObject.refresh(this.model.scrollSettings.frozenColumns > 0);                        
                }

            }
        },
                
        dataSource: function (dataSource, templateRefresh) {
            if (templateRefresh)
                this._templateRefresh = true;
            this._dataSource(dataSource);
			if(!this.model.scrollSettings.enableVirtualization){
				if (dataSource.length > 0)
					this._currentPage(1);
				else
					this._currentPage(0);
			}
            this._refreshDataSource(dataSource);
            var model = this._refreshVirtualPagerInfo();
            if (this.model.allowPaging || this.model.scrollSettings.allowVirtualScrolling) 
                this._showPagerInformation(model)
            if (this.model.scrollSettings.allowVirtualScrolling) {
				if(this.model.scrollSettings.enableVirtualization && this._isLocalData)
					this._refreshVirtualView(); 
				else
					this._refreshVirtualContent(); 
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getContent().BoldBIDashboardScroller("isHScroll"))
                    this.getContent().BoldBIDashboardScroller("scrollX", 0, true);
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) &&this.getContent().BoldBIDashboardScroller("isVScroll")) {
					if(!this.model.scrollSettings.enableVirtualization)
						this.getContent().BoldBIDashboardScroller("scrollY", 0, true);
                    this.element.find(".e-gridheader").addClass("e-scrollcss");
                }
                else
                    this.element.find(".e-gridheader").removeClass("e-scrollcss");
            }
			if(!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount)
				this._addLastRow();
        },
        _refreshDataSource: function (dataSource) {
            if (dataSource instanceof BoldBIDashboard.DataManager)
                this._dataManager = dataSource;
            else
                this._dataManager = BoldBIDashboard.DataManager(dataSource);
            this._isLocalData = (!(this._dataSource() instanceof BoldBIDashboard.DataManager) || (this._dataManager.dataSource.offline || this._isRemoteSaveAdaptor));
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
				this._refreshVirtualViewData();
				this._virtualDataRefresh = true;	
			}
            this.refreshContent(true);
            if (!BoldBIDashboard.isNullOrUndefined(this.getPager())) {
                this.getPager().BoldBIDashboardPager("model.currentPage", 1);
                this._refreshGridPager();
            }
        },
        
        hideColumns: function (c) {
            var i, count = 0, args = {}, index, colIndex, newHideCol = []; var htext, field, hiddenFrozenCount = 0;
            htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
            field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);
            
			this._showHideColumns = true;
            var duparr = this._isDuplicate(bbdesigner$.merge(bbdesigner$.merge([], this._visibleColumns), this._hiddenColumns));
            var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
            var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
            if (!duparr && field != null) {
                if (bbdesigner$.isArray(c)) {
                    for (var i = 0; i < c.length; i++) {
                        var cfield = this.getColumnByField(c[i]);
                        c[i] = cfield != null ? cfield.headerText : c[i];
                    }
                }
                else
                    c = field.headerText;
            }
            if (bbdesigner$.isArray(c)) {
                for (i = 0; i < c.length; i++) {
                    index = bbdesigner$.inArray(c[i], this[visible]);
                    
                    if (index != -1) {
                        this[hidden].push(c[i]);
                        this[visible].splice(index, 1);
                    }
					else if(index==-1 && visible=="_visibleColumnsField" && bbdesigner$.inArray(c[i],this[hidden])==-1 && BoldBIDashboard.isNullOrUndefined(this.getColumnByField(c[i]))){
						this[hidden].push(this.getColumnByHeaderText(c[i]).field) && this["_hiddenColumns"].push(this.getColumnByHeaderText(c[i]).field)
						this[visible].splice(bbdesigner$.inArray(this.getColumnByHeaderText(c[i]).field, this[visible]),1) && this["_visibleColumns"].splice(bbdesigner$.inArray(c[i], this["_visibleColumns"]),1)
					}
                }
            } else {
                index = bbdesigner$.inArray(c, this[visible]);
                if (index != -1) {
                    this[hidden].push(c);
                    this[visible].splice(index, 1);
                }
				else if(index==-1 && visible=="_visibleColumnsField" && bbdesigner$.inArray(c,this[hidden])==-1 && BoldBIDashboard.isNullOrUndefined(this.getColumnByField(c))){
						this[hidden].push(this.getColumnByHeaderText(c).field) && this["_hiddenColumns"].push(this.getColumnByHeaderText(c).field)
						this[visible].splice(bbdesigner$.inArray(this.getColumnByHeaderText(c).field, this[visible]),1) && this["_visibleColumns"].splice(bbdesigner$.inArray(c, this["_visibleColumns"]),1)
				}
            }
            for (i = 0; i < this.model.columns.length; i++) {
                var com = !duparr ? "headerText" : "field";
                if (bbdesigner$.inArray(BoldBIDashboard.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[hidden]) != -1) {
                    this.model.columns[i].visible && newHideCol.push(this.model.columns[i]);
                    this.model.columns[i].visible = false;
                    if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0 && this.model.columns.indexOf(this.model.columns[i]) < this.model.scrollSettings.frozenColumns)
                        hiddenFrozenCount++;
                    count++;
                }
                if (this[hidden].length == count)
                    break;
            }
            args.requestType = "refresh";
            this._hideHeaderColumn(this[hidden], duparr);
            if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
                var bbdesigner$table = this._renderGridHeader();
                this.element.find('.e-gridheader').replaceWith(bbdesigner$table[0])
                if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
                if (this.model.allowReordering)
                   this._headerCellreorderDragDrop();
            }
            this.refreshTemplate();
            if (this.model.scrollSettings.allowVirtualScrolling)
                this._virtualShowHide(args);
            this.sendDataRenderingRequest(args);
            this.rowHeightRefresh();
            if (this.model.allowScrolling) {
                if (this.model.scrollSettings.frozenColumns == 0 && this.getBrowserDetails().browser == "msie") {
                    var tableWidth = this._calculateWidth();
                    this.getHeaderTable().width(tableWidth);
                    this.getContentTable().width(tableWidth);
                }
                if (!BoldBIDashboard.isNullOrUndefined(this._scrollObject))
                this.getScrollObject().refresh();
            }
            if (this.model.showColumnChooser)
                this._refreshColumnChooserList();
             if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
				if(hiddenFrozenCount == this.model.scrollSettings.frozenColumns){
					this.getContent().find(".e-frozencontentdiv").css("display", "none");
					this.getHeaderContent().find(".e-frozenheaderdiv").css("display", "none");
					this.getHeaderContent().find(".e-movableheader")[0].style["margin-left"] = "";
					this.getContent().find(".e-movablecontent")[0].style["margin-left"] = "";
					var movableWidth = this.model.scrollSettings.width - this._scrollObject._vScrollbar["e-vscroll"].width() - 1;
					if(this.model.scrollSettings.width > this.getContent().find(".e-movablecontentdiv").width()){
						this.getContent().find(".e-movablecontentdiv").width(movableWidth);				
						this.getHeaderContent().find(".e-movableheaderdiv").width(movableWidth);		
					}
					this._scrollObject.option("scrollLeft", 0);
                 }
                 if (!BoldBIDashboard.isNullOrUndefined(this._scrollObject))
                 this.getScrollObject().refresh();
             }
			this._showHideColumns = false;
        },
        
        showColumns: function (c) {
            var i, count = 0, args = {}, index, colIndex, column, newVisColumns = []; var htext, field;
            htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
            field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);
            
			this._showHideColumns = true;
            var duparr = this._isDuplicate(bbdesigner$.merge(bbdesigner$.merge([], this._visibleColumns), this._hiddenColumns));//updated for
            var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
            var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
            if (!duparr && field != null) {
                if (bbdesigner$.isArray(c)) {
                    for (var i = 0; i < c.length; i++) {
                        var cfield = this.getColumnByField(c[i]);
                        c[i] = cfield != null ? cfield.headerText : c[i];
                    }
                }
                else
                    c = field.headerText;
            }
            if (bbdesigner$.isArray(c)) {
                for (i = 0; i < c.length; i++) {
                    index = bbdesigner$.inArray(c[i], this[hidden]);
                    
                    if (index != -1) {
                        this[hidden].splice(index, 1);
                        this[visible].push(c[i]);
                    }
					else if(index==-1 && hidden=="_hiddenColumnsField" && bbdesigner$.inArray(c[i],this[visible])==-1 && BoldBIDashboard.isNullOrUndefined(this.getColumnByField(c[i]))){
						this[visible].push(this.getColumnByHeaderText(c[i]).field) && this["_visibleColumns"].push(c[i])
						this[hidden].splice(bbdesigner$.inArray(this.getColumnByHeaderText(c[i]).field, this[hidden]),1) && this["_hiddenColumns"].splice(bbdesigner$.inArray(c[i], this["_hiddenColumns"]),1)
					}
                }
            } else {
                index = bbdesigner$.inArray(c, this[hidden]);
                if (index != -1) {
                    this[hidden].splice(index, 1);
                    this[visible].push(c);
                }
				else if(index==-1 && hidden=="_hiddenColumnsField" && bbdesigner$.inArray(c,this[visible])==-1 && BoldBIDashboard.isNullOrUndefined(this.getColumnByField(c))){
					this[visible].push(this.getColumnByHeaderText(c).field) && this["_visibleColumns"].push(c)
					this[hidden].splice(bbdesigner$.inArray(this.getColumnByHeaderText(c).field, this[hidden]),1) && this["_hiddenColumns"].splice(bbdesigner$.inArray(c, this["_hiddenColumns"]),1)
				}
            }
            for (i = 0; i < this.model.columns.length; i++) {
                var com = !duparr ? "headerText" : "field";
                if (bbdesigner$.inArray(BoldBIDashboard.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[visible]) != -1) {
                    !this.model.columns[i].visible && newVisColumns.push(this.model.columns[i])
                    this.model.columns[i].visible = true;
                    count++;
                }
                if (this[visible].length == count)
                    break;
            }


            if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
                var frozenHide = false;
                for (var i = 0; i < newVisColumns.length; i++) {
                    var index = this.model.columns.indexOf(newVisColumns[i]);
                    if (index < this.model.scrollSettings.frozenColumns)
                        frozenHide = true;
                }
                if (frozenHide) {
					for(var i = 0; i < this.model.columns.length; i++){
						if(bbdesigner$.inArray(this.model.columns[i].headerText, this["_hiddenColumns"]) != -1)
							this.model.columns[i].visible = false;
						else if(bbdesigner$.inArray(this.model.columns[i].headerText, this["_visibleColumns"]) != -1)
							this.model.columns[i].visible = true;
					}
                    var bbdesigner$table = this._renderGridHeader();
                    this.element.find('.e-gridheader').replaceWith(bbdesigner$table[0])
                    if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
                    if (this.model.allowReordering)
                        this._headerCellreorderDragDrop();
                }
            }

            args.requestType = "refresh";
            this._showHeaderColumn(this[visible], duparr);

            this.refreshTemplate();
            if (this.model.scrollSettings.allowVirtualScrolling)
                this._virtualShowHide(args);
            this.sendDataRenderingRequest(args);
            this.rowHeightRefresh();
            if (this.model.allowScrolling && !BoldBIDashboard.isNullOrUndefined(this._scrollObject)) {
                this.getScrollObject().refresh();
            }
            if (this.model.showColumnChooser)
                this._refreshColumnChooserList();
			this._showHideColumns = false;
        },
        _virtualShowHide: function (args) {
            this._currentPage(1);
            this.model.query = this.model.enablePersistence ? new BoldBIDashboard.Query() : this.commonQuery.clone();
            this._ensureDataSource(args);
            this._loadedJsonData = [];
            this._prevPage = this._currentPage();
        },
        
        resizeColumns: function (column, width) {
            if (column instanceof Array) {
                for (var i = 0; i < column.length; i++) {
                    var colWidth = width instanceof Array ? width[i] : width;
                    this._setWidthColumnCollection(column[i], colWidth);
                }
            }
            else
                this._setWidthColumnCollection(column, width);
            this.setWidthToColumns();
            if (this.model.scrollSettings.frozenColumns){
                this._frozenAlign();
                this.rowHeightRefresh();
            }
        },
        _setWidthColumnCollection: function (column, width) {
            var col = this.getColumnByHeaderText(column) || this.getColumnByField(column);
            col.width = width;
            if (bbdesigner$.inArray(col.field, this._disabledResizingColumns) == -1)
                this.columnsWidthCollection[bbdesigner$.inArray(col, this.model.columns)] = width;
        },
        
        refreshTemplate: function () {
            this.addInitTemplate();
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.editMode == "normal")
                    this.addEditingTemplate();
                else if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ||
                    this.model.editSettings.editMode == "inlineform")
                    this.addDialogEditingTemplate();
                else if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" ||
                    this.model.editSettings.editMode == "inlineformtemplate")
                    this.addExternalDialogEditingTemplate();
            }
            if (this.model.allowGrouping) this.addGroupingTemplate();
        },
        _refreshHeader: function () {
            var bbdesigner$header = this.element.find(".e-gridheader");
            this.element[0].replaceChild(this._renderGridHeader()[0], bbdesigner$header[0]);
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                this._renderFiltering();
            this.model.allowGrouping && this._headerCellgDragDrop(); 
            this.model.allowReordering && this._headerCellreorderDragDrop();
            this.model.showColumnChooser && this._renderColumnChooserData(true);
			if(this.model.gridLines != "both")
				this._showHeaderGridLines();
        },
        set_dropColumn: function (from, to) {
            if (this.model.allowReordering && from != to) {
                this.model.columns.splice(to, 0, this.model.columns.splice(from, 1)[0]);
                var columns = this.model.columns;
                var bbdesigner$header = this.getHeaderTable().find(".e-columnheader:last .e-headercell").not(".e-stackedHeaderCell");
                var bbdesigner$headerCell = bbdesigner$header.find(".e-headercelldiv");
                if (!this.model.scrollSettings.frozenColumns)
                    this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
                (this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());

                //Remove and Returns name/value pair of element attributes
                var removeAttr = function (ele) {
                    var names = []; if (ele == undefined) return;
                    if (["", undefined].indexOf(ele.value) == -1) {
                        names.push({ name: "value", value: ele.value }); ele.value = "";
                    }
                    for (var e = 0, eAttr = ele.attributes, eLen = eAttr.length; e < eLen; e++) {
                        var regex = /^jQuery[0-9]+$/;
                        !eAttr[e].name.match(regex) && names.push({ name: eAttr[e].name, value: eAttr[e].value });
                    }
                    for (var a = 0, aLen = names.length; a < aLen; a++) {
                        bbdesigner$(ele).removeAttr(names[a].name);
                    }
                    return names;
                };
                //Add attributes to the ele
                var addAttr = function (coll, ele) {
                    if (ele == undefined) return;
                    for (var e = 0, eLen = coll.length; e < eLen; e++) {
                        if (coll[e].name == "value") ele.value = coll[e].value;
                        bbdesigner$(ele).attr(coll[e].name, coll[e].value);
                    }
                };

                if (this.getHeaderTable().find(".e-filterdiv").length > 0)
                    var bbdesigner$filterCell = this.getHeaderTable().find(".e-filterdiv input");
                var bbdesigner$fState = BoldBIDashboard.isNullOrUndefined(bbdesigner$filterCell);
                var bbdesigner$attributeCollection = { "cellattributes": [], "headerattributes": [], "filtercellattributes": [], "filterThattributes": [] };
                var fromIndex = from < to ? from : to;
                var toIndex = from < to ? to : from;
                
                for (var i = fromIndex, j = 0; i <= toIndex; i++) {
                    var hIndx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
                    bbdesigner$attributeCollection.headerattributes[j] = removeAttr(bbdesigner$header[hIndx]);
                    bbdesigner$attributeCollection.cellattributes[j] = removeAttr(bbdesigner$headerCell[i]);
                    bbdesigner$attributeCollection.filtercellattributes[j] = !bbdesigner$fState ? removeAttr(bbdesigner$filterCell[i]) : [];
                    bbdesigner$attributeCollection.filterThattributes[j] = !bbdesigner$fState ? removeAttr(bbdesigner$(bbdesigner$filterCell[i]).closest("th")[0]) : [];
                    j++;
                }

                var spliceFrom = from < to ? bbdesigner$attributeCollection.cellattributes.length - 1 : 0;
                var spliceTo = from < to ? 0 : bbdesigner$attributeCollection.cellattributes.length - 1;

                for (var prop in bbdesigner$attributeCollection)
                    bbdesigner$attributeCollection[prop].splice(spliceFrom, 0, bbdesigner$attributeCollection[prop].splice(spliceTo, 1)[0]);

                
                for (var i = fromIndex, j = 0; i <= toIndex; i++) {
                    var indx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
                    addAttr(bbdesigner$attributeCollection.headerattributes[j], bbdesigner$header[indx]);
                    addAttr(bbdesigner$attributeCollection.cellattributes[j], bbdesigner$headerCell[i]);
                    !bbdesigner$fState && addAttr(bbdesigner$attributeCollection.filtercellattributes[j], bbdesigner$filterCell[i]);
                    !bbdesigner$fState && addAttr(bbdesigner$attributeCollection.filterThattributes[j], bbdesigner$(bbdesigner$filterCell[i]).closest("th")[0]);
                    j++;
                }
                if (this.model.allowFiltering && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1) {
                    var col = this.model.columns;
                    bbdesigner$header.find(".e-filtericon").remove();
                    for (var i = 0; i < col.length; i++) {
                        if (col[i]["allowFiltering"] || BoldBIDashboard.isNullOrUndefined(col[i]["allowFiltering"])) {
                            var filterHeader = bbdesigner$header.find(".e-headercelldiv[ej-mappingname=" + col[i].field + "]").closest(".e-headercell")
                            filterHeader.append(BoldBIDashboard.buildTag('div.e-filtericon e-icon e-filterset'));
                        }
                    }
                    this._refreshFilterIcon();
                }

                this.columnsWidthCollection.splice(to, 0, this.columnsWidthCollection.splice(from, 1)[0]);
                var headerCell;
                this._fieldColumnNames = this._headerColumnNames = [];
                for (var count = 0; count < columns.length; count++) {
                    this._fieldColumnNames[columns[count].headerText] = columns[count].field;
                    this._headerColumnNames[columns[count].field] = columns[count].headerText;
                    headerCell = bbdesigner$(bbdesigner$headerCell[count]);
                    if (!BoldBIDashboard.isNullOrUndefined(columns[count].headerTemplateID))
                        headerCell.html(bbdesigner$(columns[count]["headerTemplateID"]).html());
                    else
                    columns[count].disableHtmlEncode ? headerCell.text(columns[count].headerText) : headerCell.html(columns[count].headerText);
                    if (this.model.groupSettings.showToggleButton && (BoldBIDashboard.isNullOrUndefined(columns[count].allowGrouping) || columns[count].allowGrouping)) {
                        if (bbdesigner$.inArray(columns[count].field, this.model.groupSettings.groupedColumns) != -1)
                            headerCell.append(this._getToggleButton().addClass("e-toggleungroup"));
                        else
                            headerCell.append(this._getToggleButton().addClass("e-togglegroup"));
                    }
                }
                if (this.model.allowGrouping && this.model.allowSorting != true) {
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                        this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
                }
                if (this.model.allowSorting) {
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                        var opacity = 1;
                        var bbdesigner$sCol = this.model.sortSettings.sortedColumns[i];
                        var sortcolumn = this.getsortColumnByField(bbdesigner$sCol.field);
                        var index = this.getColumnIndexByField(bbdesigner$sCol.field);
                        var sortindex = bbdesigner$.inArray(sortcolumn, this.model.sortSettings.sortedColumns);
                        imageDirection = bbdesigner$sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
                        if (this.model.allowMultiSorting) {
                            for (var j = 1; j <= sortindex; j++) {
                                opacity = opacity + 1;
                            }
                            if (bbdesigner$headerCell.eq(index).css("text-align") == "right") {
                                if(this.model.sortSettings.sortedColumns.length > 1)
                                    bbdesigner$headerCell.eq(index).prepend(this._createSortNumber(opacity, bbdesigner$headerCell.eq(index)).addClass("e-sortnumber"));
                                bbdesigner$headerCell.eq(index).append(this._createSortElement().addClass("e-" + (bbdesigner$sCol.direction || "ascending") + " " + imageDirection));
                            }
                            else {
                                bbdesigner$headerCell.eq(index).append(this._createSortElement().addClass("e-" + (bbdesigner$sCol.direction || "ascending") + " " + imageDirection));
                                if (this.model.sortSettings.sortedColumns.length > 1)
                                    bbdesigner$headerCell.eq(index).append(this._createSortNumber(opacity, bbdesigner$headerCell.eq(index)).addClass("e-sortnumber"));
                            }
                        }
                        else {
                            imageDirection = bbdesigner$sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
                            bbdesigner$headerCell.eq(index).append(this._createSortElement().addClass("e-" + (bbdesigner$sCol.direction || "ascending") + " " + imageDirection));
                        }
                    }
                }
                var args = {};
                args.requestType = BoldBIDashboard.Grid.Actions.Reorder;
                this._isReorder = true;
                this.refreshTemplate();
				if(this._isAddNew && this.model.isEdit){
					this.model.query = this.commonQuery.clone();
					this._ensureDataSource(args);
					this._isAddNew = false;
				}
                this.sendDataRenderingRequest(args);
                this._isReorder = false;
            }
        },
        
        getPager: function () {
            return this._gridPager;
        },
        
        getFooterTable: function () {
            return this._gridFooterTable;
        },

        setGridFooterTable: function (value) {
            this._gridFooterTable = value;
        },
        
        getFooterContent: function () {
            return this._gridFooterContent;
        },

        setGridFooterContent: function (value) {
            this._gridFooterContent = value;
        },
        
        getScrollObject: function () {
            if (this._scrollObject == null || BoldBIDashboard.isNullOrUndefined(this._scrollObject.model))
                this._scrollObject = this.getContent().BoldBIDashboardScroller("instance");
            return this._scrollObject;
        },
        setGridPager: function (value) {
            this._gridPager = value;
        },
        
        getRowHeight: function () {
            var rowHeight = -1;
			if (this.getContentTable() != null) {
				var trColl = this.getContentTable().find('tr:not(.e-virtualrow)'), index = trColl.length > 2 ? 1 : 0;
				if(trColl.length)
					var bbdesigner$trBound = trColl[index].getBoundingClientRect();
				if (trColl.length > 1) {
					if (bbdesigner$trBound && bbdesigner$trBound.height) {
						rowHeight = bbdesigner$trBound.height;
					} else
						rowHeight = trColl[index].offsetHeight;
				}
			}
            return rowHeight == -1 ? 32 : rowHeight;
        },
        
        getCurrentIndex: function () {
            return ((this._currentPage() - 1) * (this.model.pageSettings.pageSize));
        },
        
        getColumnByIndex: function (index) {
            if (index < this.model.columns.length)
                return this.model.columns[index];
            return null;
        },
        set_currentPageIndex: function (val) {
            var pageSetting = this.model.pageSettings;
            var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            if (pageSetting.totalPages == null)
                pageSetting.totalPages = Math.ceil(recordCount / pageSetting.pageSize);
            if (val > pageSetting.totalPages || val < 1 || val == this._currentPage())
                return false;
            if (BoldBIDashboard.isNullOrUndefined(this._prevPageNo))
                this._prevPageNo = this._currentPage();
            this._currentPage(val);
            if (this._currentPage() != this._prevPageNo) {
                var args = {};
                args.requestType = "paging";
                this.gotoPage(this._currentPage(), args);
                return true;
            }
            else
                return false;
        },
        set_currentVirtualIndex: function (currentViewIndex) {                          
            if (currentViewIndex < 1 || (currentViewIndex != 1 && currentViewIndex != this._totalVirtualViews && currentViewIndex == this._currentVirtualIndex && this._checkCurrentVirtualView(this._virtualLoadedRows, currentViewIndex)))
                return false;                      
            this._prevVirtualIndex = this._currentVirtualIndex;							
            this._currentVirtualIndex = currentViewIndex;
			var currentPage = this._calculateCurrentViewPage();
			if(currentPage <= this.model.pageSettings.totalPages && !this._checkCurrentVirtualView(this._virtualLoadedRecords, this._currentVirtualIndex)){				
				if(this._prevVirtualIndex < currentViewIndex && currentViewIndex != 1){
					var setPage = this._isThumbScroll && currentPage != 1 ? currentPage : currentPage + 1;
                    if(!this._virtualPageRecords[setPage] && setPage <= this.model.pageSettings.totalPages)
                        this._setCurrentViewPage(setPage); 
					else	
						this._renderVirtulViewContent(currentPage);	
				}
				else if(this._prevVirtualIndex > currentViewIndex){
					var setPage = this._isThumbScroll ? currentPage : currentPage - 1;
                    if(this._virtualPageRecords[setPage] && !this._virtualLoadedRecords[currentViewIndex - 1])
                        setPage = currentPage - 1;
                    if(!this._virtualPageRecords[setPage] && setPage >= 1)
                        this._setCurrentViewPage(setPage);                                                     
				}                                                
                else 
                    this._renderVirtulViewContent(currentPage);
            }
            else 
                this._renderVirtulViewContent(currentPage);
            return true;            
        },
		_setCurrentViewPage: function(currentPage){
			this._needPaging = true;                
			this._prevPageNo = this._currentPage();             
            this.gotoPage(currentPage);
		},
		_renderVirtulViewContent: function(currentPage){
            this._needPaging = false;                      
            this._refreshVirtualView(this._currentVirtualIndex);
            this.element.BoldBIDashboardWaitingPopup("hide");
        },
        _checkCurrentVirtualView: function(virtualContent, viewIndex){
            var virtualRowCount = this._virtualRowCount;            
            var prevView = viewIndex - 1, nextView = viewIndex + 1;
			if(virtualContent instanceof Array){
				if(virtualContent.length){
					if(((prevView == 0 || nextView == this._totalVirtualViews + 1) && bbdesigner$.inArray(viewIndex, virtualContent) != -1) || (bbdesigner$.inArray(prevView, virtualContent) != -1 && 
					bbdesigner$.inArray(viewIndex, virtualContent) != -1 && bbdesigner$.inArray(nextView, virtualContent) != -1))
						return true;					
				}				
			}
			else{
				var nextViewData = nextView == this._totalVirtualViews ? this._lastViewData : virtualRowCount;
				if((!this.initialRender && (viewIndex == 1 && this._virtualLoadedRows[viewIndex]) || viewIndex == this._totalVirtualViews && virtualContent == this._virtualLoadedRows && virtualContent[viewIndex]) ||
					((prevView == 0  && virtualContent[viewIndex] && virtualContent[viewIndex].length == virtualRowCount) || (nextView == this._totalVirtualViews + 1 && virtualContent[viewIndex] && virtualContent[viewIndex].length == this._lastViewData)) ||
					(virtualContent[prevView] && virtualContent[prevView].length == virtualRowCount && virtualContent[viewIndex] && virtualContent[viewIndex].length == virtualRowCount && virtualContent[nextView] && virtualContent[nextView].length == nextViewData))
						return true;								
			}
			return false;
        },
        expandCollapse: function (bbdesigner$target) {
            if (bbdesigner$target.prop("tagName") == "DIV" && (bbdesigner$target.parent().hasClass("e-recordplusexpand") || bbdesigner$target.parent().hasClass("e-recordpluscollapse") || bbdesigner$target.parent().hasClass("e-detailrowcollapse") || bbdesigner$target.parent().hasClass("e-detailrowexpand")))
                bbdesigner$target = bbdesigner$target.parent();
            var index = -1, fieldName, fieldvalue, parentGroup, collapsed;
            if (this.model.allowGrouping && (BoldBIDashboard.isOnWebForms || this.initialRender)) {
                fieldName = bbdesigner$target.attr("ej-mappingname");
                fieldValue = bbdesigner$target.attr("ej-mappingvalue");
                if (bbdesigner$target.parents(".e-tabletd").length)
                    parentGroup = bbdesigner$target.parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand").attr("ej-mappingvalue");
                collapsed = this.model._groupingCollapsed;
                for (var i = 0; i < collapsed.length; i++) {
                    if (collapsed[i].key == fieldName && collapsed[i].value == fieldValue && (collapsed[i].parent == undefined || collapsed[i].parent == parentGroup)) {
                        index = i;
                        break;
                    }
                }
            }
            if (!(bbdesigner$target.hasClass("e-recordplusexpand") || bbdesigner$target.hasClass("e-recordpluscollapse") || bbdesigner$target.hasClass("e-detailrowcollapse") || bbdesigner$target.hasClass("e-detailrowexpand")))
                return;
            if (bbdesigner$target.hasClass("e-recordplusexpand") && this.model.groupSettings.groupedColumns.length) {
                var cellIndex = bbdesigner$target.index();
                var bbdesigner$rows = bbdesigner$target.closest('tr').next();
                bbdesigner$rows.hide();
                bbdesigner$target.removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                if ((BoldBIDashboard.isOnWebForms || this.initialRender) && index == -1)
                    this.model._groupingCollapsed.push({ key: fieldName, value: fieldValue, parent: parentGroup })
            } else if (bbdesigner$target.hasClass("e-recordpluscollapse") && this.model.groupSettings.groupedColumns.length) {
                var cellIndex = bbdesigner$target.index();
                var bbdesigner$rows = bbdesigner$target.closest('tr').next();
                var toExpandRows = [];
                var bbdesigner$row = bbdesigner$rows;
                if (bbdesigner$(bbdesigner$row[0].cells[cellIndex]).hasClass("e-indentcell")) {
                    if (bbdesigner$row.children(".e-indentcell").length == (bbdesigner$target.parent().children('.e-indentcell').length) + 1) {
                        bbdesigner$row.show();
                        var bbdesigner$expand = bbdesigner$row.children(".e-recordplusexpand");
                        if (bbdesigner$expand != null && bbdesigner$expand.length > 0) {
                            toExpandRows.push(bbdesigner$expand);
                        }
                    }
                }
                bbdesigner$target.removeClass("e-recordpluscollapse").addClass("e-recordplusexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                for (var i = 0; i < toExpandRows.length; i++) {
                    toExpandRows[i].removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                    this.expandCollapse(toExpandRows[i]);
                }
                if ((BoldBIDashboard.isOnWebForms || this.initialRender) && index != -1)
                    this.model._groupingCollapsed.splice(index, 1);
            } else if (bbdesigner$target.hasClass("e-detailrowexpand")) {
                var cellIndex = bbdesigner$target.index(), proxy = this;
                var rowIndexValue;
                if (this.model.groupSettings.groupedColumns.length > 0)
                    rowIndexValue = this.getIndexByRow(bbdesigner$target.closest('tr')) - bbdesigner$target.closest('tr').parents('tr').prevAll('tr').find('td.e-summaryrow').parent().length;
                else
                    rowIndexValue = this.getIndexByRow(bbdesigner$target.closest('tr'));
                var bbdesigner$rows = bbdesigner$target.closest('tr').next();
                bbdesigner$rows.hide(0, function () {
                    var args = { masterRow: bbdesigner$target.closest('tr'), detailsRow: bbdesigner$rows, masterData: proxy._currentJsonData[rowIndexValue] };
                    var foreignKeyData = proxy._getForeignKeyData(args.masterData);
                    if (!BoldBIDashboard.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    proxy._trigger("detailsCollapse", args);
                    proxy.model.childGrid != null && proxy.model.allowScrolling && proxy._refreshScroller({ requestType: "refresh" });
                });
                bbdesigner$target.removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").addClass("e-gnextforward").removeClass("e-gdiagonalnext");
            } else if (bbdesigner$target.hasClass("e-detailrowcollapse")) {
                var cellIndex = bbdesigner$target.index(), proxy = this;
                var rowIndexValue;
                if (this.model.groupSettings.groupedColumns.length > 0)
                    rowIndexValue = this.getIndexByRow(bbdesigner$target.closest('tr')) - bbdesigner$target.closest('tr').parents('tr').prevAll('tr').find('td.e-summaryrow').parent().length;
                else
                    rowIndexValue = this.getIndexByRow(bbdesigner$target.closest('tr'));
                var detailrow = bbdesigner$target.closest('tr').next();
                if (detailrow.hasClass("e-detailrow"))
                    bbdesigner$rows = detailrow;
                else {
                    var detailtr = BoldBIDashboard.buildTag("tr.e-detailrow", "", { 'display': 'none' }, {});
                    var indenttd = BoldBIDashboard.buildTag("td.e-detailindentcell");
                    var hideGroupColumnCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                    var detailstd = BoldBIDashboard.buildTag("td.e-detailcell", "", {}, { colspan: this._visibleColumns.length - hideGroupColumnCount });
                    var detaildiv = BoldBIDashboard.buildTag("div");
                    var count = bbdesigner$(bbdesigner$target.closest('tr')).parents('.e-grid').length;
                    detaildiv.attr("id", "child" + count + "_grid" + rowIndexValue);
                    bbdesigner$(detailtr).append(indenttd);
                    bbdesigner$(detailtr).append(detailstd);
                    var rowData = this._currentJsonData[rowIndexValue];
                    if (this.model.detailsTemplate)
                        bbdesigner$(detailtr).append(detailstd.append(this._renderEjTemplate(this.model.detailsTemplate, rowData)));

                    bbdesigner$(bbdesigner$target.closest('tr')).after(detailtr);
                    if (this.model.childGrid) {
                        var temp = this.model.childGrid.queryString, ftemp = this.model.childGrid.foreignKeyField;
                        var val = (rowData[temp] === undefined) ? "undefined" : rowData[temp];
                        this.model.childGrid.query = BoldBIDashboard.Query().where(BoldBIDashboard.isNullOrUndefined(ftemp) ? temp : ftemp, "equal", val, true);
                        this.model.childGrid["parentDetails"] = {
                            parentID: this._id,
                            parentPrimaryKeys: this.getPrimaryKeyFieldNames(),
                            parentKeyField: temp,
                            parentKeyFieldValue: rowData[temp],
                            parentRowData: rowData
                        }
                        bbdesigner$(detailtr).append(detailstd.append(detaildiv));
                    }
                    bbdesigner$rows = detailtr;
                }
                this._showGridLines();
                var toExpandRows = [];
                var bbdesigner$row = bbdesigner$rows;
                if (bbdesigner$(bbdesigner$row[0].cells[cellIndex]).hasClass("e-detailindentcell")) {
                    bbdesigner$row.show(0, function () {
                        var args = { masterRow: bbdesigner$target.closest('tr'), detailsRow: bbdesigner$rows, masterData: proxy._currentJsonData[rowIndexValue] };
                        var foreignKeyData = proxy._getForeignKeyData(args.masterData);
                        if (!BoldBIDashboard.isNullOrUndefined(foreignKeyData))
                            args.foreignKeyData = foreignKeyData;
                        proxy._trigger("detailsExpand", args);
                        proxy.model.childGrid != null && proxy.model.allowScrolling && proxy._refreshScroller({ requestType: "refresh" });
                    });					
				    if (!detailrow.hasClass("e-detailrow")) {
                        this._trigger("detailsDataBound", { detailsElement: detailtr, data: rowData }); // bbdesigner$(tbody).append(trchild);
                       this._trigger("refresh");
                    }
                    this.model.childGrid && !BoldBIDashboard.isNullOrUndefined(detaildiv) && detaildiv.BoldBIDashboardGrid(this.model.childGrid);
                    var bbdesigner$expand = bbdesigner$row.children(".e-detailrowexpand");
                    if (bbdesigner$expand != null && bbdesigner$expand.length > 0) {
                        toExpandRows.push(bbdesigner$expand);
                    }
                }
                bbdesigner$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").addClass("e-gdiagonalnext").removeClass("e-gnextforward");
                for (var i = 0; i < toExpandRows.length; i++) {
                    toExpandRows[i].removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                    this.expandCollapse(toExpandRows[i]);
                }
            }
            if (this.model.allowScrolling && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && !BoldBIDashboard.isNullOrUndefined(this._scrollObject && this._scrollObject.model) && !bbdesigner$target.closest(".e-hscroll").length)
                this.getScrollObject().refresh();
        },
        _refreshGridPager: function () {
            if (this.getPager() != null) {
                var pagerModel = this.getPager().BoldBIDashboardPager("model"), model = {};
                model.currentPage = this._currentPage();
                if (this._filteredRecordsCount == 0 && this.model.currentViewData.length == 0 && (BoldBIDashboard.isNullOrUndefined(this._prevPageNo) || this._prevPageNo)) {
                    model.currentPage = 0;
                    this._prevPageNo = pagerModel.currentPage;
                    this.model.pageSettings.currentPage = 0;
                } else if (pagerModel.currentPage == 0 && (BoldBIDashboard.isNullOrUndefined(this._prevPageNo) || this._prevPageNo))
                    model.currentPage = this._prevPageNo;
                var excludeTr = this.model.editSettings.showAddNewRow ? 1 : 0;
                model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount - excludeTr : this._searchCount : this._filteredRecordsCount;
                if (BoldBIDashboard.util.isNullOrUndefined(model.currentPage))
                    model.currentPage = this._currentPage();
                this.getPager().BoldBIDashboardPager("option", model).BoldBIDashboardPager("refreshPager");
                this.model.pageSettings.totalPages = pagerModel.totalPages;
            }
        },
        _showHeaderColumn: function (showColumns, field) {
            var bbdesigner$head = this.getHeaderTable().find("thead");
            var bbdesigner$headerCell = bbdesigner$head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
            var bbdesigner$filterBarCell = bbdesigner$head.find(".e-filterbar").find(".e-filterbarcell");
            var bbdesigner$col = this.getHeaderTable().find("colgroup").find("col"), column;
            for (var i = 0; i < showColumns.length; i++) {
                if (field)
                    column = BoldBIDashboard.isNullOrUndefined(this.getColumnByField(showColumns[i])) ? this.getColumnByHeaderText(showColumns[i], BoldBIDashboard.isNullOrUndefined(this.getColumnByField(showColumns[i]))) : this.getColumnByField(showColumns[i]);
                else
                    column = this.getColumnByHeaderText(showColumns[i]);
                var index = bbdesigner$.inArray(column, this.model.columns);
                index = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
                var frznCol = this.model.scrollSettings.frozenColumns;
                if (frznCol != 0 && index >= frznCol)
                    var thIndex = bbdesigner$headerCell.eq(index).removeClass("e-hide").index() + frznCol;
                else
                    var thIndex = bbdesigner$headerCell.eq(index).removeClass("e-hide").index();
                bbdesigner$filterBarCell.eq(thIndex).removeClass("e-hide");
				 if (bbdesigner$col.length > this.model.columns.length && this.model.groupSettings.groupedColumns.length){
					var len = bbdesigner$col.length - this.model.columns.length;
					bbdesigner$col = bbdesigner$col.slice((this.model.detailsTemplate || this.model.childGrid) ? len + 1 : len);				
				}
                bbdesigner$col.eq(index).css("display", "");
            }
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
        },
        _hideHeaderColumn: function (hiddenColumns, field) {
            var bbdesigner$head = this.getHeaderTable().find("thead");
            var bbdesigner$headerCell = bbdesigner$head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
            var bbdesigner$filterBarCell = bbdesigner$head.find(".e-filterbar").find(".e-filterbarcell");
            var bbdesigner$col = this.getHeaderTable().find("colgroup").find("col"), column;
            for (var i = 0; i < hiddenColumns.length; i++) {
                if (field)
                    column = BoldBIDashboard.isNullOrUndefined(this.getColumnByField(hiddenColumns[i])) ? this.getColumnByHeaderText(hiddenColumns[i], BoldBIDashboard.isNullOrUndefined(this.getColumnByField(hiddenColumns[i]))) : this.getColumnByField(hiddenColumns[i]);
                else
                    column = this.getColumnByHeaderText(hiddenColumns[i]);
                var index = bbdesigner$.inArray(column, this.model.columns);
                var dindex = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
                var frznCol = this.model.scrollSettings.frozenColumns;
                if (frznCol != 0 && index >= frznCol)
                    var thIndex = bbdesigner$headerCell.eq(dindex).addClass("e-hide").index() + frznCol;
                else
                    var thIndex = bbdesigner$headerCell.eq(dindex).addClass("e-hide").index();
                bbdesigner$filterBarCell.eq(thIndex).addClass("e-hide");
                if (bbdesigner$col.length > this.model.columns.length)
                    bbdesigner$col = bbdesigner$col.slice(bbdesigner$col.length - this.model.columns.length);
                bbdesigner$col.eq(index).css("display", "none");
            }
            if (this.model.showStackedHeader) {
                this._refreshStackedHeader();
                this._colgroupRefresh();
            }
        },
        _refreshStackedHeader: function () {
			if(!this.model.showStackedHeader)
				return;
            var stackedRows = this.model.stackedHeaderRows;
            for (var i = 0; i < stackedRows.length; i++) {
                if (this.model.scrollSettings.frozenColumns != 0) {
                    var frznHeader = bbdesigner$(this.getHeaderContent().find(".e-frozenheaderdiv"));
                    var movHeader = bbdesigner$(this.getHeaderContent().find(".e-movableheader"));
                    var newFrzn = this._createStackedRow(stackedRows[i], true);
                    var newMov = this._createStackedRow(stackedRows[i], false);
                    bbdesigner$(frznHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newFrzn);
                    bbdesigner$(movHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newMov);
                }
                else {
                    var stackedTR = this._createStackedRow(stackedRows[i], false);
                    if (this.getHeaderTable().find("tr.e-stackedHeaderRow")[i])
                        bbdesigner$(this.getHeaderTable().find("tr.e-stackedHeaderRow")[i]).replaceWith(stackedTR);
                    else
                        stackedTR.insertBefore(this.getHeaderTable().find("tr.e-columnheader:last"));
                }
            }
            var args = {};
            args.requestType = "refresh";
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0) {
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    this.getHeaderTable().find(".e-stackedHeaderRow").prepend(this._getGroupTopLeftCell());
            }
            this.model.allowScrolling && this._refreshScroller(args);
        },
        _getStackedColumnByTarget: function (target) {
            var cls = (target.get(0) || {}).className, match = /e-row([0-9])-column([0-9])/.exec(cls),
                rIndx = match[1], cIndx = match[2], key = [rIndx, "stackedHeaderColumns", cIndx].join(".");

            return BoldBIDashboard.getObject(key, this.model.stackedHeaderRows);
        },
        _checkSkipAction: function (args) {
            switch (args.requestType) {
                case BoldBIDashboard.Grid.Actions.Save:
                case BoldBIDashboard.Grid.Actions.Delete:
                    return true;
            }
            return false;
        },
        _unboundTemplateRendering: function (unboundTemplateId) {
            return bbdesigner$("#" + unboundTemplateId).html();
        },
        _processBindings: function (args) {
            this._requestType = args.requestType;
            this.model.query = this.model.enablePersistence ? new BoldBIDashboard.Query() : this.commonQuery.clone();
            if (!this._checkSkipAction(args) && this._trigger("actionBegin", args))
                return true;
            if (this.model.editSettings.editMode == "batch" && args.requestType != "batchsave" && args.requestType != "cancel" && !this._confirmedValue && this._bulkChangesAcquired() && this.model.editSettings.showConfirmDialog) {
                this._confirmDialog.find(".e-content").html(this.localizedLabels.BatchSaveLostChanges);
                this._confirmDialog.BoldBIDashboardDialog("open");
                this._requestArgs = args;
                return false;
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.model.dataSource) && args.requestType == "refresh" && this.model.scrollSettings.allowVirtualScrolling) {
                this._currentPage(1);
                this._scrollValue = 0;
                this._loadedJsonData = [];
                this._prevPage = this._currentPage();
            }
            this._ensureDataSource(args);
            if (this.model.scrollSettings.allowVirtualScrolling) {
                if (args.requestType == "virtualscroll") {
                    this._loadedJsonData.push({ pageIndex: this._prevPage, data: this._currentJsonData });
                    this._prevPage = this._currentPage();
                }
                else if(!this.model.scrollSettings.enableVirtualization)
                    this._virtualLoadedRecords[this._currentPage()] = this.model.currentViewData;
                if (args.requestType == "filtering") {
                    this._loadedJsonData = [];
                    this._prevPage = this._currentPage();
                }
            }
            if (this.model.scrollSettings.allowVirtualScrolling && args.requestType == "filtering" && this.model.filterSettings.filteredColumns.length > 0 && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) 
                this.getScrollObject().scrollY(0);
            if (this.model.enableRTL) {
                !this.element.hasClass("e-rtl") && this.element.addClass("e-rtl");
            } else {
                this.element.hasClass("e-rtl") && this.element.removeClass("e-rtl")
            }
            if (args.requestType == BoldBIDashboard.Grid.Actions.Delete && this.model.groupSettings.groupedColumns.length == 0) {
                if (this.model.editSettings.showAddNewRow)
                    this.getContentTable().find(".e-addedrow").remove();
                args.tr.remove();
            }
            this._editForm = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : bbdesigner$("#" + this._id + "EditForm");
			if (!(this.model.editSettings.showAddNewRow && args.requestType == "beginedit") && this._editForm.length != 0) {
                if(this._editForm.length > 1 && (args.requestType == "save" && args.action == "edit" || args.requestType == "cancel"))
					this._editForm = this.model.editSettings.rowPosition == "top" ? this._editForm[1] : this._editForm[0];
                bbdesigner$(this._editForm).find("select.e-dropdownlist").BoldBIDashboardDropDownList("destroy");
                bbdesigner$(this._editForm).find(".e-datepicker").BoldBIDashboardDatePicker("destroy");
                bbdesigner$(this._editForm).find(".e-datetimepicker").BoldBIDashboardDateTimePicker("destroy");
                bbdesigner$(this._editForm).find(".e-numerictextbox").ejNumericTextbox("destroy");
            }
            if (this._dataSource() instanceof BoldBIDashboard.DataManager && !this._isRemoteSaveAdaptor && args.requestType != BoldBIDashboard.Grid.Actions.BeginEdit && args.requestType != BoldBIDashboard.Grid.Actions.Cancel && args.requestType != BoldBIDashboard.Grid.Actions.Add) {
                if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage && !BoldBIDashboard.isNullOrUndefined(this.virtualLoadedPages) && this.virtualLoadedPages.indexOf(((this.model.pageSettings.currentPage - 2) * (this.model.pageSettings.pageSize))) == -1) {
                    var pageQuery = BoldBIDashboard.pvt.filterQueries(this.model.query.queries, "onPage");
                    this.model.query.queries.splice(bbdesigner$.inArray(pageQuery[0], this.model.query.queries), 1);
                    this.model.query.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
                    var lastQueryPromise = this._dataSource().executeQuery(this.model.query);
                    this.model.query.queries.splice(bbdesigner$.inArray(pageQuery[0], this.model.query.queries), 1);
                    this.model.query.page(this._currentPage(), this.model.pageSettings.pageSize);
                }
                if (this._virtualSelectedRows && this._virtualSelectedRows.length > 0) {
                    this.model.query.addParams('virtualSelectRecords', this._virtualSelectedRows)
                }
                if (this._isExcelFilter) {
                    for (var i = 0; i < this.model.query.queries.length; i++) {
                        var queries = this.model.query.queries;
                        if (queries[i].fn === 'onWhere') {
                            this.model.query.queries[i].e.predicates = [args.predicated];
                            break;
                        }
                    }
                }
                var queryPromise = this._queryPromise = this._dataSource().executeQuery(this.model.query);
                var waitingPopup = this.element.BoldBIDashboardWaitingPopup("instance");
                var proxy = this;
                this.element.BoldBIDashboardWaitingPopup("show");
                if (proxy._dataSource().ready) {
                    proxy._dataSource().ready.done(function () {
                        proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
                    });
                }
                else {
                    proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
                }
            } else {
                if (this._isRelationalRendering(args))
                    this._setForeignKeyData(args);
                else
                    this.sendDataRenderingRequest(args);
            }
        },
        _processDataRequest: function (proxy, args, queryPromise, lastQueryPromise) {
            queryPromise.done(BoldBIDashboard.proxy(function (e) {
                if (lastQueryPromise && !proxy._previousPageRendered) {
                    proxy._processLastPageData(proxy, args, e, lastQueryPromise);
                    if (proxy._currentPage() == proxy.model.pageSettings.totalPages)
                        return;
                }
                else if (proxy._remoteLastPageRendered && proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1 && !proxy.model.scrollSettings.enableVirtualization) {
                    var count = proxy.model.pageSettings.pageSize - proxy._previousPageLength;
                    for (var dupRow = 0; dupRow < count; dupRow++) {
                        var removeEle = proxy.getRows()[proxy.getRows().length - (proxy.model.pageSettings.pageSize - dupRow)];
                        removeEle.remove();
                    }
                    proxy._tempPageRendered = true;
                    proxy.model.currentViewData = e.result;
                    proxy._relationalColumns.length == 0 && proxy.element.BoldBIDashboardWaitingPopup("hide");
                }
                else {
                    if (proxy._identityKeys.length && args.action == "add" && this.adaptor instanceof BoldBIDashboard.ODataAdaptor)
                        proxy._processIdentityField(e.result, args);
                    if (proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1 && !proxy._remoteLastPageRendered)
                        proxy._previousPageRendered = true;
                    proxy.model.currentViewData = e.result == null ? [] : e.result;
                    if (proxy._bbdesigner$fkColumn && proxy.model.filterSettings.filterType == "excel" && proxy.model.filterSettings.filteredColumns.length > 0)
                        proxy._fkParentTblData = e.result;
                    proxy._relationalColumns.length == 0 && proxy.element.BoldBIDashboardWaitingPopup("hide");
                }
				if(proxy.model.allowScrolling && proxy.model.scrollSettings.allowVirtualScrolling && proxy.model.scrollSettings.enableVirtualization){
					if(args.requestType == "filtering"){
						proxy._gridRecordsCount = proxy._filteredRecordsCount = e.count;
						proxy._refreshVirtualViewDetails();
					}
					if(e.result.length){
						if(proxy._isInitNextPage || proxy._isLastVirtualpage){					
							proxy._setInitialCurrentIndexRecords(e.result, proxy._currentPage());							
							proxy._isInitNextPage = proxy._isLastVirtualpage = false;
						}
						else
							proxy._setVirtualLoadedRecords(e.result, proxy._currentPage());					
						if(proxy._isThumbScroll && !proxy._checkCurrentVirtualView(proxy._virtualLoadedRecords, proxy._currentVirtualIndex))
							proxy._checkPrevNextViews();																										
						proxy._remoteRefresh = true;
					}
					else
						proxy.getContent().find(".e-virtualtop, .e-virtualbottom").remove();					
				}
                if (!BoldBIDashboard.isNullOrUndefined(e.aggregates))
                    proxy._remoteSummaryData = e.aggregates;
                if (BoldBIDashboard.isNullOrUndefined(lastQueryPromise) || (BoldBIDashboard.isNullOrUndefined(proxy._previousPageRendered) || proxy._previousPageRendered))
                    proxy._processData(e, args);
				if (!BoldBIDashboard.isNullOrUndefined(proxy._unboundRow) && args.selectedRow != proxy._unboundRow && args.requestType == "save") {
                    proxy._unboundRow.find(".e-editbutton").trigger("click");
                    proxy._unboundRow = null;
                }
            }));
            queryPromise.fail(BoldBIDashboard.proxy(function (e) {
                proxy.element.BoldBIDashboardWaitingPopup("hide");
                args.error = e.error;
                e = [];
                proxy.model.currentViewData = [];
                proxy._processData(e, args);
                proxy._trigger("actionFailure", args);
            }));
        },
        _processIdentityField: function (result, args) {
            var _pKey = this._primaryKeys[0];
            var resultPK = BoldBIDashboard.distinct(result, _pKey);
            var curPK = BoldBIDashboard.distinct(this.model.currentViewData, _pKey);
            var addPK = bbdesigner$.grep(resultPK, function (value) {
                if (bbdesigner$.inArray(value, curPK) == -1)
                    return true;
                return false;
            });
            args.data = BoldBIDashboard.DataManager(result).executeLocal(new BoldBIDashboard.Query().where(_pKey, "equal", addPK))[0];
        },
        _processLastPageData: function (proxy, args, currentData, lastQueryPromise) {
             lastQueryPromise.done(BoldBIDashboard.proxy(function (e) {
                proxy.element.BoldBIDashboardWaitingPopup("hide");
                proxy.model.previousViewData = e.result;
                if (proxy.model.previousViewData && proxy.model.previousViewData.length != 0) {
                    proxy._previousPageLength = currentData.result.length;
                    proxy._currentPageData = currentData.result;
                    BoldBIDashboard.merge(proxy.model.previousViewData, currentData.result);
                    proxy.model.currentViewData = proxy.model.previousViewData;
                    proxy._remoteLastPageRendered = true;
                }
                proxy._processData(currentData, args);
            }));
            lastQueryPromise.fail(BoldBIDashboard.proxy(function (e) {
                proxy.element.BoldBIDashboardWaitingPopup("hide");
                args.error = e.error;
                e = [];
                proxy.model.previousViewData = [];
                proxy._processData(e, args);
                proxy._trigger("actionFailure", args);
            }));
        },
        _createUnboundElement: function (column) {
            var divElement = document.createElement("div");
            column.headerText = BoldBIDashboard.isNullOrUndefined(column.headerText) ? column.field : column.headerText;
            if (!BoldBIDashboard.isNullOrUndefined(column.headerText))
            divElement.id = this._id + column.headerText.replace(/[^a-z0-9|s_]/gi, '') + "_UnboundTemplate";
            var bbdesigner$div = BoldBIDashboard.buildTag("div.e-unboundcelldiv"), commands = column["commands"];
            for (var unbounType = 0; unbounType < commands.length; unbounType++) {
                var bbdesigner$button = BoldBIDashboard.buildTag("button.e-" + commands[unbounType].type.replace(/\s+/g, "") + "button", "", {}, { type: "button" });
                bbdesigner$button.val(commands[unbounType].type);
                bbdesigner$div.append(bbdesigner$button);
            }
            bbdesigner$("body").append(bbdesigner$(divElement).html(bbdesigner$div).hide());
            return divElement;
        },
        _refreshUnboundTemplate: function (bbdesigner$target) {
            if (this._isUnboundColumn) {
                var index = 0;
                for (var column = 0; column < this.model.columns.length; column++) {
                    if (this.model.columns[column]["commands"]) {
                        var bbdesigner$unboundDivs = bbdesigner$target.find(".e-unboundcell.e-" + this.model.columns[column]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+column).find(".e-unboundcelldiv");
                        var commands = bbdesigner$.extend(true, [], this.model.columns[column].commands);
                        for (var j = 0; j < commands.length; j++) {
                            var width = BoldBIDashboard.isNullOrUndefined(commands[j].buttonOptions.width) ? "52" : commands[j].buttonOptions.width;
                            var height = BoldBIDashboard.isNullOrUndefined(commands[j].buttonOptions.height) ? "30" : commands[j].buttonOptions.height;
                            commands[j].buttonOptions.width = BoldBIDashboard.isNullOrUndefined(commands[j].buttonOptions.width) ? "52" : commands[j].buttonOptions.width;
                            commands[j].buttonOptions.height = BoldBIDashboard.isNullOrUndefined(commands[j].buttonOptions.height) ? "28" : commands[j].buttonOptions.height;
                            commands[j].buttonOptions.cssClass = BoldBIDashboard.isNullOrUndefined(commands[j].buttonOptions.cssClass) ? this.model.cssClass : commands[j].buttonOptions.cssClass;
                            commands[j].buttonOptions.enableRTL = this.model.enableRTL;
                            var bbdesigner$buttons = bbdesigner$unboundDivs.find(".e-" + commands[j].type.replace(/\s+/g, "") + "button");
                            if (!this.model.isEdit || this._requestType == "cancel") {
								if (bbdesigner$target.closest(".e-editcell").length) {
									if (commands[j].type == "save" || commands[j].type == "cancel")
										bbdesigner$buttons.show();
									else {
										bbdesigner$buttons.hasClass("e-deletebutton") && bbdesigner$buttons.hide();
										bbdesigner$buttons.hasClass("e-editbutton") && bbdesigner$buttons.hide();
									}
								} else {
									if (commands[j].type == "save" || commands[j].type == "cancel")
										bbdesigner$buttons.hide();
									else {
										bbdesigner$buttons.hasClass("e-deletebutton") && bbdesigner$buttons.show();
										bbdesigner$buttons.hasClass("e-editbutton") && bbdesigner$buttons.show();
									}
								}
							}
                            if (bbdesigner$(bbdesigner$buttons[0]).data("BoldBIDashboardButton"))
                                bbdesigner$buttons.filter(".e-button").BoldBIDashboardButton("destroy");
                            bbdesigner$buttons.BoldBIDashboardButton(commands[j].buttonOptions);
                        }
                    } else
                        continue;
                }
            }
        },
        _gridTemplate: function (self, templateId, index) {
            var bbdesigner$column = self.model.columns[index];
            if (self._isGrouping)
                this.index = self._currentJsonData.indexOf(this.data);
            return self._renderEjTemplate("#" + templateId, this.data, this.index, bbdesigner$column);
        },
        _createTemplateElement: function (column, appendTo /* container to append */, text) {
            var tmpl = column["templateID" in column ? "templateID" : "template"], quickReg = /^#([\w-]*)/,
                match = quickReg.exec(tmpl), scriptReg = /^<script/i, appendTo = appendTo || bbdesigner$("body"), scripEle,
                idText = text ? "Pager" : (column.headerText + bbdesigner$.inArray(column, this.model.columns) + "_") + "Template";

            var options = {
                name: "SCRIPT",
                type: "text/x-template",
                text: tmpl,
                id: (this._id + idText).replace(/[^0-9A-z-_]/g, "")
            };

            if ( match && match[1] )
                scripEle = document.getElementById(match[1]);
            else {
                if (scriptReg.test(tmpl)) // branch here to handle tmpl string with SCRIPT. 
                    scripEle = bbdesigner$(tmpl).get(0);
                else
                    scripEle = BoldBIDashboard.buildTag(options.name, options.text).get(0);
            }

            scripEle.id = scripEle.id || options.id; // Update Id and type if not in scriptElement template string.
            scripEle.type = scripEle.type || options.type;

            appendTo.append(text ? scripEle.innerHTML : scripEle); //if `text` then append innerHTML instead of element.

            return scripEle;
        },
        _renderGridPager: function () {
            var bbdesigner$div = bbdesigner$(document.createElement('div'));
            var pagerModel = {};
            this.model.pageSettings.click = this._gPagerClickHandler;
            this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
            this.model.pageSettings.enableRTL = this.model.enableRTL;
            this.model.pageSettings.locale = this.model.locale;
            this.model.pageSettings.enableQueryString = this.model.pageSettings.enableQueryString;
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                pagerModel.enableExternalMessage = this.model.filterSettings.showFilterBarStatus;
            bbdesigner$.extend(pagerModel, this.model.pageSettings);
            pagerModel.currentPage = this._currentPage();
            pagerModel.masterObject = this;
            this.setGridPager(bbdesigner$div);
            bbdesigner$div.BoldBIDashboardPager(pagerModel);
            bbdesigner$div.BoldBIDashboardPager("refreshPager");
            pagerModel = bbdesigner$div.BoldBIDashboardPager("model");
            this.model.pageSettings.totalPages = pagerModel.totalPages;
            if (this._currentPage() !== pagerModel.currentPage)
                this._currentPage(pagerModel.currentPage);
            this._renderPagerTemplate(bbdesigner$div);
            return bbdesigner$div;
        },
        _renderPagerTemplate: function (pager, showDefaults) {
            var model = this.model.pageSettings, defaults = pager.find(".e-pagercontainer").not(".e-template").length == 0;            
            pager.find(".e-pagercontainer.e-template").remove();

            if ((showDefaults || !model.enableTemplates) && defaults) //Used to enable default pager from disabled
                pager.BoldBIDashboardPager("renderPager");

            if (model.enableTemplates) {                

                if (!model.showDefaults)
                    pager.children().remove();               

                var bbdesigner$customDiv = BoldBIDashboard.buildTag('div', null, null, { "class": "e-pagercontainer e-template" });                
                this._createTemplateElement(this.model.pageSettings, bbdesigner$customDiv, true);                
                pager.append(bbdesigner$customDiv)
            }          
           
        },
        _renderContext: function (e) {
            var menuitems = this.model.contextMenuSettings.contextMenuItems;
            var item, item2, i = 0;
            var ul = BoldBIDashboard.buildTag('ul', "", {}, { id: this._id + '_Context' });
            if (!this.model.contextMenuSettings.disableDefaultItems) {
                for (i; i < menuitems.length; i++) {
                    item = menuitems[i];
                    item2 = this._items(item, "contextMenuItem");
                    ul.append(item2);
                }
            }
            var customitems = this.model.contextMenuSettings.customContextMenuItems;
            var subMenuItems = this.model.contextMenuSettings.subContextMenu;
            var custom, custom2, j = 0;
            for (j; j < customitems.length; j++) {
                custom = customitems[j];
                custom2 = this._items(custom, "customContextMenuItem");                
                for (var k = 0 ; k < subMenuItems.length; k++)
                    if ((typeof custom == "string" && custom ==  subMenuItems[k].contextMenuItem) || (typeof custom == "object" && custom.id ==  subMenuItems[k].contextMenuItem )) {
                        var ul1 = BoldBIDashboard.buildTag('ul', "", {}, { id: this._id + '_subMenuContext' + k });
                        for (var l = 0; l < subMenuItems[k].subMenu.length; l++) {
                            menuItem = subMenuItems[k].subMenu[l];
                            menuItem1 = this._items(menuItem, "subMenuItems");
                            ul1.append(menuItem1);
                        }
                        custom2.append(ul1);
                    }
                ul.append(custom2);
            }
            if (ul.find("li").length > 0) {
                this.element.append(ul);
                var parentControl = this.element.parents("div.e-grid");
                var native = BoldBIDashboard.Menu.prototype._showContextMenu;
                BoldBIDashboard.Menu.prototype._showContextMenu = function (locationX, locationY, target, evt) {
                    bbdesigner$(this.model.contextMenuTarget).hasClass("e-grid") && (++locationX, ++locationY)
                    native.apply(this, [locationX, locationY, target, evt]);
                };
                bbdesigner$(ul).BoldBIDashboardMenu({
                    menuType: BoldBIDashboard.MenuType.ContextMenu,
                    openOnClick: false,
                    contextMenuTarget: "#" + this._id,
                    click: bbdesigner$.proxy(this._clickevent, this),
                    width: "auto",
                    beforeOpen: bbdesigner$.proxy(this._menu, this)
                });
                if (parentControl.length) {
                    var parentElement = bbdesigner$("#" + parentControl[0].id + '_Context');
                    var target = parentElement.BoldBIDashboardMenu("model.excludeTarget");
                    parentElement.BoldBIDashboardMenu({ excludeTarget: !BoldBIDashboard.isNullOrUndefined(target) && target.length != 0 ? target.concat(",#" + this._id) : "#" + this._id });
                }
                this._conmenu = ul.data("BoldBIDashboardMenu");
            }
        },
        _clickevent: function (sender) {
            var args = sender.events.text;
            var tr = bbdesigner$(this._contexttarget.parentNode);
            var c = bbdesigner$(this._contexttarget);
            if (c.hasClass("e-filterset"))
                c = c.siblings();
            else if (c.hasClass("e-icon") || c.hasClass("e-number"))
                c = c.parent();
            var columnName = c.attr("ej-mappingname")|| c.find(".e-headercelldiv").attr("ej-mappingname");
            if (this._trigger("contextClick", sender))
                return;
            switch (args) {
                case this.localizedLabels.AddRecord: this._startAdd();
                    break;
                case this.localizedLabels.EditRecord:
                    if (this.model.editSettings.editMode == "batch") {
                        var colindex = bbdesigner$(this._contexttarget.parentNode).find(".e-rowcell").index(c), index = this._excludeDetailRows().index(tr), fieldName = this.model.columns[colindex]["field"];
                        this.editCell(index, fieldName);
                    }
                    else
                        this.startEdit(tr);
                    break;
                case this.localizedLabels.DeleteRecord:
                    if (this.model.editSettings.showDeleteConfirmDialog)
                        this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().BoldBIDashboardDialog("open");
                    else
                    this.deleteRow(tr);
                    break;
                case this.localizedLabels.Save: this.endEdit();
                    break;
                case this.localizedLabels.Cancel: this.cancelEdit();
                    break;
                case this.localizedLabels.SortInDescendingOrder: var columnSortDirection = BoldBIDashboard.sortOrder.Descending;
                    this.sortColumn(columnName, columnSortDirection);
                    break;
                case this.localizedLabels.SortInAscendingOrder: var columnSortDirection = BoldBIDashboard.sortOrder.Ascending;
                    this.sortColumn(columnName, columnSortDirection);
                    break;
                case this.localizedLabels.Grouping: this.groupColumn(columnName);
                    break;
                case this.localizedLabels.Ungrouping: this.ungroupColumn(columnName);
                    break;
                case this.localizedLabels.NextPage:
                case this.localizedLabels.PreviousPage:
                case this.localizedLabels.LastPage:
                case this.localizedLabels.FirstPage: this._page(sender);
                    break;
            }

        },

        _menu: function (sender) {
            var context = this._conmenu.element;
            this._contexttarget = sender.target;
            var targetelement = bbdesigner$(sender.target), element, value;
            var td = bbdesigner$(this._contexttarget);
            if (td.hasClass("e-rowcell") && this.model.allowSelection)
                if (!this.model.isEdit)
                    this.selectRows(this.getIndexByRow(td.parent()), null, td, sender);
            if ((targetelement.hasClass("e-ascending") || targetelement.hasClass("e-descending")) && !targetelement.parent().hasClass("e-headercelldiv"))
                return false;
            if (targetelement.hasClass("e-filtericon") || targetelement.hasClass("e-headercelldiv"))
                element = sender.target.parentNode.getAttribute("aria-sort");
			else if (targetelement.hasClass("e-headercell"))
				element = sender.target.getAttribute("aria-sort");
            else
                element = targetelement.parent().parent().attr("aria-sort");
            var target = sender.target.className;
            var sorting = bbdesigner$(context);
            if (targetelement.hasClass("e-filterset"))
                value = targetelement.siblings().attr("ej-mappingname");
            else if (targetelement.hasClass("e-icon") || targetelement.hasClass("e-number"))
                value = targetelement.parent().attr("ej-mappingname");
            else if(targetelement.hasClass("e-headercell"))
				value=targetelement.find(".e-headercelldiv").attr("ej-mappingname");
			else
                value = targetelement.attr("ej-mappingname");            
            context.css("visibility", "visible");            
            var index = targetelement.closest("tr").hasClass("e-insertedrow") ? this.model.groupSettings.groupedColumns.length : 0;
            var rowCell = targetelement.closest(".e-rowcell");
            var headerCell = targetelement.closest(".e-headercell");
            var tempIndex = rowCell.index() != -1 ? rowCell.index() : headerCell.index() - this.model.groupSettings.groupedColumns.length;
            var columnIndex = targetelement.hasClass("e-rowcell") ? targetelement.index() - index : tempIndex - index;
            columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? columnIndex - 1 : columnIndex;
            var col = this.model.columns[columnIndex];
            var mapObj = {
                "allowGrouping": ".e-contextgrouping",
                "allowSorting": ".e-contextascending, .e-contextdescending",
                "editSettings.allowAdding": ".e-contextadd",
                "editSettings.allowEditing": ".e-contextedit",
                "editSettings.allowDeleting": ".e-contextdelete",
            };         
            for (var prop in mapObj) {
                var ele = context.find(mapObj[prop]).parent();
                if (BoldBIDashboard.getObject(prop, this.model) == false || (BoldBIDashboard.getObject(prop, col) === false))
                    ele.css("display", "none");
                else if (ele.css("display") == "none")
                    ele.css("display", "block");
           }
            if (targetelement.closest(".e-grid").attr("id") !== this._id || targetelement.is("input")) {
                context.css("visibility", "hidden");
                return;
            }
            else if (this.getHeaderTable().find(targetelement).length > 0) {
                if (!(headerCell.length != 0 && headerCell.children().hasClass("e-headercelldiv"))) {
                    context.css("visibility", "hidden");
                    return;
                }
                var a = bbdesigner$(context.find(".e-head"));
                context.find(".e-page").css("display", "none");
                context.find(".e-content").css("display", "none");
                context.find(".e-savcan").css("display", "none");
                a.css("display", "block");                
                if(BoldBIDashboard.isNullOrUndefined(col.field) || col.field == "") {
                     a.css("display","none");
                     if (context.find(".e-customitem").length == 0)
                        context.css("visibility", "hidden")
               }
             }
            else if (this.getContentTable().find(targetelement).length > 0) {
                if (rowCell.length == 0) {
                    context.css("visibility", "hidden");
                    return;
                }
                var a = bbdesigner$(context.find(".e-content"));
                context.find(".e-head").css("display", "none");
                context.find(".e-page").css("display", "none");
                context.find(".e-savcan").css("display", "none");
                a.css("display", "block");                
                if ((BoldBIDashboard.isNullOrUndefined(col.field) || col.field == "") && this.model.editSettings.editMode == "batch") {
                    a.css("display","none");
                    if (context.find(".e-customitem").length == 0)
                       context.css("visibility", "hidden")
               }
            }
            else if (this.getPager().find(targetelement).length > 0 || targetelement.hasClass("e-pager")) {
                var a = bbdesigner$(context.find(".e-page"));
                context.find(".e-head").css("display", "none");
                context.find(".e-content").css("display", "none");
                context.find(".e-savcan").css("display", "none");
                a.css("display", "block");
            }
            else {
                var a = bbdesigner$(context);
                context.css("visibility", "hidden");
                return false;
            }
            switch (element) {
                case "ascending": sorting.find(".ascending").parent().css("display", "none");
                    break;
                case "descending": sorting.find(".descending").parent().css("display", "none");
                    break;
            }
            if (this.model.isEdit && targetelement.hasClass("e-rowcell")) {
                var a = bbdesigner$(context.find(".e-savcan"));
                context.find(".e-head").css("display", "none");
                context.find(".e-content").css("display", "none");
                context.find(".e-page").css("display", "none");
                a.css("display", "block");
            }
            if (this.model.pageSettings.totalPages == 1 && a.hasClass("e-page")) {
                if (context.find(".e-customitem").length == 0)
                    context.css("visibility", "hidden");
                else
                    context.find(".e-page").css("display", "none");
            }            
            else if (this.model.pageSettings.currentPage == 1) {
                sorting.find(".previous").parent().css("display", "none");
                sorting.find(".first").parent().css("display", "none");
            }
            else if (this.model.pageSettings.currentPage == this.model.pageSettings.totalPages) {
                sorting.find(".last").parent().css("display", "none");
                sorting.find(".nextpage").parent().css("display", "none");
            }
            if (this.model.groupSettings.groupedColumns.indexOf(value) != -1)
                a.find(".group").parent().css("display", "none");
            else if (this.model.groupSettings.groupedColumns.indexOf(value) == -1)
                a.find(".ungroup").parent().css("display", "none");
            if (this.model.contextOpen)
                this._trigger("contextOpen", sender);
        },

        _items: function (item, type) {
            if (item == "")
                return false;
            if (type == "contextMenuItem") {
                if (item.indexOf("Record") != -1) {
                    var li = BoldBIDashboard.buildTag('li', "", {}, { "class": "e-content" });
                    li.css("display", "none");
                }
                else if (item.indexOf("Page") != -1) {
                    var li = BoldBIDashboard.buildTag('li', "", {}, { "class": "e-page" });
                    if (item.indexOf("Next") != -1)
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "nextpage" });
                    else if (item.indexOf("Previous") != -1)
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "previous" });
                    else if (item.indexOf("Last") != -1)
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "last" });
                    else if (item.indexOf("First") != -1)
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "first" });
                    li.css("display", "none");
                }
                else if (item == "Save" || item == "Cancel") {
                    var li = BoldBIDashboard.buildTag('li', "", {}, { "class": "e-savcan" });
                    li.css("display", "none");
                }
                else if (item.indexOf("Order") != -1 || item == "Grouping" || item == "Ungrouping") {
                    var li = BoldBIDashboard.buildTag('li', "", {}, { "class": "e-head" });
                    if (item.indexOf("Ascending") != -1)
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "ascending" });
                    else if (item.indexOf("Descending") != -1)
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "descending" });
                    else if (item == "Grouping")
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "group" });
                    else if (item == "Ungrouping")
                        var div = BoldBIDashboard.buildTag('div', "", {}, { "class": "ungroup" });
                    li.css("display", "none");
                }
            }
            if (BoldBIDashboard.isNullOrUndefined(li)) {
                var li = BoldBIDashboard.buildTag('li', "", {}, { "class": "e-customitem" });
                li.css("display", "block");
            }
            li.append(div);
            var a = document.createElement("a"), classElement = "";
            if (typeof item == "string") {
                if (item.indexOf("Ascending") != -1)
                    classElement = "ascending";
                else if (item.indexOf("Descending") != -1)
                    classElement = "descending";
                else
                    classElement = item.split(" ")[0].toLowerCase();
                a.innerHTML = !BoldBIDashboard.isNullOrUndefined(this.localizedLabels[item.replace(/\s+/g, '')]) ? this.localizedLabels[item.replace(/\s+/g, '')] : item;
            }
            if (typeof item == "object") {
                if (item.id == "Ascending")
                    classElement = "ascending";
                else if (item.id == "Descending")
                    classElement = "descending";
                else
                    classElement = item.id.split(" ")[0].toLowerCase();
                a.innerHTML = !BoldBIDashboard.isNullOrUndefined(this.localizedLabels[item.text.replace(/\s+/g, '')]) ? this.localizedLabels[item.text.replace(/\s+/g, '')] : item.text;
                li.attr('id', item.id);
            }
			bbdesigner$(a).append(BoldBIDashboard.buildTag('span', "", {}, { "class": "e-gridcontext e-icon e-context" + classElement }));
            li.append(a);
            return li;
        },

        _page: function (send) {
            if (send.events.text == "Next Page") {
                var b = this.model.pageSettings.currentPage;
                ++b;
                this.gotoPage(b);
            }
            else if (send.events.text == "Previous Page") {
                var b = this.model.pageSettings.currentPage;
                if (b > 1) {
                    --b;
                    this.gotoPage(b);
                }
                else
                    this.gotoPage(b);
            }
            else if (send.events.text == "Last Page") {
                var b = this.model.pageSettings.totalPages
                this.gotoPage(b);
            }
            else
                this.gotoPage(1);


        },

        
        gotoPage: function (pageIndex) {
            if (!this.model.allowPaging && (!this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling))
                return;
            var args = {}, returnValue;
            args.previousPage = this._currentPage();
            this._currentPage(pageIndex);
            args.endIndex = ((this._currentPage() * this.model.pageSettings.pageSize) > this._gridRecordsCount) ? (this._gridRecordsCount) : (this._currentPage() * this.model.pageSettings.pageSize);
            args.startIndex = (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
            args.currentPage = pageIndex;
            if (this.model.allowPaging) {
                //this.model.pageSettings.currentPage = pageIndex;
                //this. getPager().BoldBIDashboardPager("refreshPager");
                args.requestType = BoldBIDashboard.Grid.Actions.Paging;
            }
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
                this._isVirtualRecordsLoaded = false;
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
                args.requestType = BoldBIDashboard.Grid.Actions.VirtualScroll;
            }
            returnValue = this._processBindings(args);
            if (returnValue)
                this._currentPage(args.previousPage);
            this._primaryKeyValues = [];
        },
        _gPagerClickHandler: function (sender) {
            if (this._prevPageNo == sender.currentPage)
                return;
            this.model.masterObject.gotoPage(sender.currentPage);
            return false;
        },
        _processData: function (e, args) {
            if (e.count == 0 && this.model.currentViewData.length)
                this._gridRecordsCount = e.result.length;
            else
                this._gridRecordsCount = e.count;
            if (this.getPager() != null)
                this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
            if ((args.requestType == BoldBIDashboard.Grid.Actions.Filtering || BoldBIDashboard.Grid.Actions.Save || (this.model.filterSettings.filteredColumns.length > 0 && args.requestType == BoldBIDashboard.Grid.Actions.Refresh)))
                this._filteredRecordsCount = e.count;
            this._setForeignKeyData(args);
            this._relationalColumns.length == 0 && this.sendDataRenderingRequest(args);
        },

        _frozenCell: function (rowIndex, cellIndex) {
            var currentIndex = cellIndex, frozenDiv = 0, row = this.getRowByIndex(rowIndex), cell;
            if (cellIndex >= this.model.scrollSettings.frozenColumns) {
                frozenDiv = 1;
                currentIndex = currentIndex - this.model.scrollSettings.frozenColumns;
            }
            cell = bbdesigner$(row.eq(frozenDiv).find(".e-rowcell:eq(" + currentIndex + ")"));
            return cell;
        },
        _frozenColumnSelection: function (gridRows, columnIndex, endIndex) {
            var currentIndex = columnIndex, frozenDiv = 0;
            if (endIndex) {
                for (var i = columnIndex; i < endIndex; i++) {
                    currentIndex = i;
                    if (i >= this.model.scrollSettings.frozenColumns) {
                        frozenDiv = 1;
                        currentIndex = i - this.model.scrollSettings.frozenColumns;
                    }
                    for (var j = 0; j < gridRows[frozenDiv].length; j++) {
                        bbdesigner$(gridRows[frozenDiv][j].cells[currentIndex]).addClass("e-columnselection");
                    }
                    bbdesigner$(this.getHeaderTable().find("th.e-headercell")[i]).addClass("e-columnselection");
                    this.selectedColumnIndexes.push(i);
                }
            }
            else {
                if (columnIndex >= this.model.scrollSettings.frozenColumns) {
                    frozenDiv = 1;
                    currentIndex = columnIndex - this.model.scrollSettings.frozenColumns;
                }
                for (var i = 0; i < gridRows[frozenDiv].length; i++) {
                    bbdesigner$(gridRows[frozenDiv][i].cells[currentIndex]).addClass("e-columnselection");
                }
            }

        },
        _renderGridFooter: function () {
            if (this.model.summaryRows.length > 0) {
                var showTotalSummaryItems = BoldBIDashboard.DataManager(this.model.summaryRows).executeLocal(BoldBIDashboard.Query().where("showTotalSummary", BoldBIDashboard.FilterOperators.equal, false));
                var _$gridFooter = BoldBIDashboard.buildTag("div.e-gridfooter");
                var $innerDiv = BoldBIDashboard.buildTag('div');
                if (this.model.allowScrolling)
                    $innerDiv.addClass("e-footercontent");
                var $table = BoldBIDashboard.buildTag("table.e-gridsummary");
                this.setGridFooterContent(_$gridFooter);
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var $frozenFooterDiv = BoldBIDashboard.buildTag("div.e-frozenfooterdiv"), $movableFooter = BoldBIDashboard.buildTag("div.e-movablefooter")
                        , $tableClone = $table.clone(), $movableFooterDiv = BoldBIDashboard.buildTag("div.e-movablefooterdiv");
                    $movableFooter.append($movableFooterDiv);
                    $table.append(this.getHeaderTable().first().find('colgroup').clone());
                    $tableClone.append(this.getHeaderTable().last().find('colgroup').clone());
                    $frozenFooterDiv.append($table);
                    $movableFooterDiv.append($tableClone);
                    this.setGridFooterTable($table.add($tableClone));
                    this._createSummaryRows(this.getFooterTable());
                    _$gridFooter.append($frozenFooterDiv.add($movableFooter));
                    _$gridFooter.find(".e-frozenfooterdiv").outerWidth(this.getHeaderContent().find(".e-frozenheaderdiv").width())
                          .end().find(".e-movablefooterdiv").outerWidth(this.getContent().find(".e-movablecontentdiv").width());
                }
                else {
                    $table.append(this.getHeaderTable().find('colgroup').clone());
                    this.setGridFooterTable($table);
                    this._createSummaryRows(this.getFooterTable());
                    $innerDiv.append($table);
                    _$gridFooter.html($innerDiv);
                }
                if (this.model.summaryRows.length == showTotalSummaryItems.length)
                    return;
                return _$gridFooter;
            } else
                throw "summary row collection is missing";
        },
        _setSummaryAggregate: function (queryManager) {
            var rows = this.model.summaryRows, scolumns, sCol = [];
            for (var row = 0, rlen = rows.length; row < rlen; row++) {
                scolumns = rows[row].summaryColumns;
                for (var col = 0, clen = scolumns.length; col < clen; col++) {
                    queryManager.aggregate(scolumns[col].summaryType, scolumns[col].dataMember);
                }
            }
        },
        _createSummaryRows: function (table, summaryData, aggregates, item, showGroup) {
            var col = table.find("col");
            if (table.find("tbody").length > 0)
                table.find("tbody").remove();
            var bbdesigner$tBody = BoldBIDashboard.buildTag('tbody'), proxy = this, bbdesigner$tBodyClone = bbdesigner$tBody.clone();
            var summaryCol = this.model.summaryRows;
            if (!BoldBIDashboard.isNullOrUndefined(summaryData) && this._isCaptionSummary)
                summaryCol = this._captionSummary(showGroup);
            bbdesigner$.each(summaryCol, function (indx, row) {
                if (row.showTotalSummary === false && BoldBIDashboard.isNullOrUndefined(summaryData)) return true;
                if (row.showGroupSummary === false && showGroup && !BoldBIDashboard.isNullOrUndefined(summaryData)) return true;
                var bbdesigner$tr = BoldBIDashboard.buildTag('tr.e-gridSummaryRows');
                if (BoldBIDashboard.isNullOrUndefined(item && item.level)) {
                    for (var i = 0; i < proxy.model.groupSettings.groupedColumns.length; i++) {
                        bbdesigner$tr.prepend(BoldBIDashboard.buildTag('td').addClass("e-indentcell"));
                    }
                }
                var gc = showGroup ? " e-gcsummary" : "";
                if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
                    if (proxy.model.groupSettings.groupedColumns.length != 0)
                        bbdesigner$tr.children("td.e-indentcell").last().after("<td class='e-summaryrow" + gc + "'></td>");
                    else
                        bbdesigner$tr.prepend("<td class='e-summaryrow'></td>");
                }
                var bbdesigner$cells = proxy.getHeaderTable().find('td').clone().addClass("e-summaryrow" + gc + ""), count = 0;
                var index = 0;
                if (!BoldBIDashboard.isNullOrUndefined(row.titleColumn)) {
                    var index = proxy.getColumnIndexByField(row.titleColumn);
                    if (index >= proxy.model.columns.length)
                        index = proxy.getColumnIndexByHeaderText(row.titleColumn);
                }
                bbdesigner$cells = proxy._assignTitleColumn(index, row.title, bbdesigner$cells, count);
                proxy._hideSummaryColumn(bbdesigner$cells, col);
                if (proxy.model.scrollSettings.frozenColumns > 0) {
                    var bbdesigner$trClone = bbdesigner$tr.clone();
                    bbdesigner$tBody.append(bbdesigner$tr.append(bbdesigner$cells.slice(0, proxy.model.scrollSettings.frozenColumns)));
                    bbdesigner$tBodyClone.append(bbdesigner$trClone.append(bbdesigner$cells.slice(proxy.model.scrollSettings.frozenColumns)));
                }
                else {
                    if ((!proxy._isCaptionSummary || showGroup) && !BoldBIDashboard.isNullOrUndefined(item && item.level)) {
                        var level = proxy.model.groupSettings.groupedColumns.length - item.level + 1, tableClone = table.clone().addClass("e-groupsummary"), captionData = {};
                        captionData["data"] = { items: item };
                        bbdesigner$tr.prepend("<td class='e-summaryrow" + gc + "' colspan=" + proxy._colSpanAdjust(null, null, captionData) + " style = 'padding:0;' ></td>");
                        bbdesigner$(bbdesigner$tr[0].cells).filter(".e-summaryrow").html(tableClone.append(BoldBIDashboard.buildTag("tr", bbdesigner$cells)));
                        var len = tableClone.find("col").length - (proxy.model.columns.length + level);
                        for (var i = 0; i < len; i++) {
                            tableClone.find("col").first().remove();
                        }
                        for (var i = 0; i < level; i++) {
                            bbdesigner$(tableClone[0].rows).prepend("<td class='e-indentcell'></td>");
                            bbdesigner$(tableClone.find("col")[i]).addClass("e-summary");
                        }
                        bbdesigner$tBody.append(bbdesigner$tr);
                    }
                    else
                        bbdesigner$tBody.append(bbdesigner$tr.append(bbdesigner$cells));
                }
                bbdesigner$.each(row.summaryColumns, function (cindx, col) {
                    var value;
                    if (col.summaryType != "custom")
                        value = aggregates ? aggregates[col.dataMember + " - " + col.summaryType] : proxy._remoteSummaryData[col.dataMember + " - " + col.summaryType];
                    else
                        value = proxy.getSummaryValues(col, summaryData);
                    prefix = col.prefix ? col.prefix : "";
                    var index = proxy.getColumnIndexByField(col.displayColumn), suffix = col.suffix ? col.suffix : "";
                    if (proxy.model.allowScrolling)
                        bbdesigner$(bbdesigner$cells[index]).addClass("e-scroller");
                    if (bbdesigner$(bbdesigner$cells[index]).html() != "" && prefix == "")
                        prefix = bbdesigner$(bbdesigner$cells[index]).html();
                    if (!BoldBIDashboard.isNullOrUndefined(col.template)) {
                        var obj = {
                            summaryValue: col.format ? proxy.formatting(col.format, value, proxy.model.locale) : value,
							summaryColumn: col
                        };
                        sTemplate = obj.summaryColumn.template,
                        ngType = !BoldBIDashboard.isNullOrUndefined(proxy.model.ngTemplateId) && (sTemplate.startsWith("#") || sTemplate.startsWith(".") || typeof sTemplate === "object") ? proxy.model.ngTemplateId + "gridsummarytemplate" : null;
                        proxy._summaryContextIndex = proxy._summaryContextIndex + 1;
                        bbdesigner$(bbdesigner$cells[index]).html(proxy._renderEjTemplate(obj.summaryColumn.template, obj, proxy._summaryContextIndex, null, ngType)).css("text-align", proxy.model.columns[index].textAlign)
                        bbdesigner$(bbdesigner$cells[index]).addClass("e-summarytemplate")
                    }
                    else if (index != -1)
                        bbdesigner$(bbdesigner$cells[index]).html(prefix + (col.format ? proxy.formatting(col.format, value, proxy.model.locale) : value) + suffix).css("text-align", proxy.model.columns[index].textAlign);
                });
            });
            if (this.model.scrollSettings.frozenColumns > 0) {
                table.first().append(bbdesigner$tBody);
                table.last().append(bbdesigner$tBodyClone);
            }
            else
                table.append(bbdesigner$tBody);
        },
        _assignTitleColumn: function (index, title, bbdesigner$cells, count) {
            for (var i = index; i < this.model.columns.length; i++) {
                var colindex = this.model.columns[i];
                if (count == 0 && colindex.visible != false) {
                    bbdesigner$cells.eq(i).html(title);
                    break;
                }
            }
            return bbdesigner$cells;
        },
        getSummaryValues: function (summaryCol, summaryData) {
            var bbdesigner$value, jsonData;
            if (!BoldBIDashboard.isNullOrUndefined(summaryData))
                jsonData = summaryData;
            else if (this.model.filterSettings.filteredColumns.length > 0)
                jsonData = this._filteredRecords;
            else
                jsonData = this._dataSource();

            var dbMgr;
            if (jsonData instanceof BoldBIDashboard.DataManager) {
                dbMgr = jsonData;
                jsonData = jsonData.dataSource.json;
            } else
                dbMgr = BoldBIDashboard.DataManager(jsonData);

            switch (summaryCol.summaryType) {
                case BoldBIDashboard.Grid.SummaryType.Maximum:
                    var obj = BoldBIDashboard.max(jsonData, summaryCol.dataMember);
                    bbdesigner$value = BoldBIDashboard.getObject(summaryCol.dataMember, obj);
                    break;
                case BoldBIDashboard.Grid.SummaryType.Minimum:
                    var obj = BoldBIDashboard.min(jsonData, summaryCol.dataMember);
                    bbdesigner$value = BoldBIDashboard.getObject(summaryCol.dataMember, obj);
                    break;
                case BoldBIDashboard.Grid.SummaryType.Average:
                    bbdesigner$value = BoldBIDashboard.avg(jsonData, summaryCol.dataMember);
                    break;
                case BoldBIDashboard.Grid.SummaryType.Sum:
                    bbdesigner$value = BoldBIDashboard.sum(jsonData, summaryCol.dataMember);
                    break;
                case BoldBIDashboard.Grid.SummaryType.Count:
                    bbdesigner$value = jsonData.length;
                    break;
                case BoldBIDashboard.Grid.SummaryType.TrueCount:
                    var predicate = BoldBIDashboard.Predicate(summaryCol.dataMember, "equal", true);
                    bbdesigner$value = dbMgr.executeLocal(BoldBIDashboard.Query().where(predicate)).length;
                    break;
                case BoldBIDashboard.Grid.SummaryType.FalseCount:
                    var predicate = BoldBIDashboard.Predicate(summaryCol.dataMember, "equal", false);
                    bbdesigner$value = dbMgr.executeLocal(BoldBIDashboard.Query().where(predicate)).length;
                    break;
                case BoldBIDashboard.Grid.SummaryType.Custom:
                    var fn = summaryCol.customSummaryValue;
                    if (fn) {
                        if (typeof fn === "string")
                            fn = BoldBIDashboard.util.getObject(fn, window);
                        if (bbdesigner$.isFunction(fn))
                            bbdesigner$value = fn.call(this, summaryCol, jsonData);
                    }
                    break;
            }
            return bbdesigner$value;
        },
        _hideCaptionSummaryColumn: function () {
            var headerColumn = this.getHeaderTable().find('.e-headercelldiv[ej-mappingname]').first();
            var captionTd = this.getContentTable().find('.e-groupcaption').clone();
            var groupCaptionParent = this.getContentTable().find('.e-groupcaption').parent();
            var colLength = this.model.columns.length - 1;
            if (this._isCaptionSummary) {
                this.getContentTable().find('.e-summaryrow:not(.e-gcsummary)').remove();
                this.getFooterTable().find("tbody td").slice(-colLength).removeClass("e-groupcaptionsummary").addClass("e-summaryrow");
                if (this.getFooterTable() != null) {
                    this.getContentTable().find('.e-recordplusexpand').parent().children('.e-indentcell').remove();
                }
                if (!this.model.groupSettings.showGroupedColumn && this.getContentTable().find(".e-groupcaptionsummary").not(".e-hide").length) {
                    var sumColumn = +this.getContentTable().find(".e-recordtable:first").parents("tbody:first").find(".e-groupcaption").attr("colspan");
                    if (this._hiddenColumnsField.length == this.model.columns.length - 1 && headerColumn.parent().hasClass("e-hide") || !sumColumn) {
                        for (i = 0; i < captionTd.length; i++) {
                            groupCaptionParent.eq(i).children().not('.e-hide,.e-recordplusexpand').filter('td.e-groupcaptionsummary:first').addClass("e-hide");
                            var caption = groupCaptionParent.eq(i).find(".e-groupcaption");
                            var colspan = parseInt(caption.attr("colspan"));
                            caption.attr("colspan", ++colspan)
                        }
                    }
                }
            }
            this.getContentTable().find('.e-recordtable').find('.e-indentcell').remove();
        },
        _hideSummaryColumn: function (td, col) {
            if (col.length > this.model.columns.length)
                col = col.slice(col.length - this.model.columns.length);
            if (!this.model.groupSettings.showGroupedColumn && this.model.showSummary) {
                for (i = 0; i < this.model.columns.length; i++) {
                    for (j = 0; j < this.model.groupSettings.groupedColumns.length || j < this._hiddenColumnsField.length; j++) {
                        var headerColumn = this.getHeaderTable().find('.e-headercelldiv:not(.e-emptyCell)');
                        if (!headerColumn.eq(i).is(':visible')) {
                            col.eq(i).css("display", "none");
                            bbdesigner$(td[i]).addClass("e-hide");
                            break;
                        }
                        else {
                            if (col.eq(i).css("display") == "none")
                                col.eq(i).css("display", "");
                        }
                    }
                }
            }
            else {
                for (i = 0; i < this.model.columns.length; i++) {
                    if (!this.model.columns[i]["visible"]) {
                        col.eq(i).css("display", "none");
                        bbdesigner$(td[i]).addClass("e-hide");
                    }
                    else {
                        if (col.eq(i).css("display") == "none")
                            col.eq(i).css("display", "");
                    }
                }
            }
        },

        _initScrolling: function () {
            var frozen = [], unfrozen = [], hideColumns = 0;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if (this.model.columns[columnCount].visible === false && columnCount < this.model.scrollSettings.frozenColumns)
                    hideColumns++;
                if (this.model.columns[columnCount]["isFrozen"] === true)
                    frozen.push(this.model.columns[columnCount]);
                else
                    unfrozen.push(this.model.columns[columnCount]);
            }            
            if (frozen.length > 0) {
                var freeze = this.model.scrollSettings.frozenColumns;
                this.model.columns = bbdesigner$.merge(bbdesigner$.merge([], frozen), unfrozen);
                this.model.scrollSettings.frozenColumns = frozen.length;
                if (frozen.length != freeze && freeze != 0)
                    this.model.scrollSettings.frozenColumns = freeze;
            }
            if ((this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && (this.model.allowGrouping || this.model.rowTemplate != null || this.model.detailsTemplate != null || this.model.childGrid != null || this.model.scrollSettings.allowVirtualScrolling || this.model.editSettings.editMode == "batch")) {
                this._renderAlertDialog();
                this._alertDialog.find(".e-content").text(this._getLocalizedLabels()["FrozenNotSupportedException"]);
                this._alertDialog.BoldBIDashboardDialog("open");
                return;
            }
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
				if(!this.model.scrollSettings.enableVirtualization){
					this.model.pageSettings.pageSize = this.model.pageSettings.pageSize == 12 ? Math.round(this.model.scrollSettings.height / 32) + 1 : this.model.pageSettings.pageSize;
					this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
				}
				else{					
					this._vRowHeight = Math.floor(this.getRowHeight() + 1);
					this._virtualRowCount = Math.round(this.model.scrollSettings.height / this._vRowHeight) + 1; 					
					if(this.model.pageSettings.pageSize < this._virtualRowCount * 5)
						this.model.pageSettings.pageSize = this._virtualRowCount * 5;
				}
            }
            if (this.model.width || this.model.height) {
                this.model.allowScrolling = true;
                if (this.model.width) this.model.scrollSettings.width = this.model.width;
                if (this.model.height) this.model.scrollSettings.height = this.model.height;
            }
            this._originalScrollWidth = BoldBIDashboard.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) ? this.model.scrollSettings.width : this.model.scrollSettings.previousStateWidth;
        },
        _checkScrollActions: function (requestType) {
            if ((!this.model.scrollSettings.allowVirtualScrolling && (requestType == BoldBIDashboard.Grid.Actions.Sorting || requestType == BoldBIDashboard.Grid.Actions.Reorder)) || requestType == BoldBIDashboard.Grid.Actions.Grouping || requestType == BoldBIDashboard.Grid.Actions.Ungrouping || requestType == BoldBIDashboard.Grid.Actions.Add || requestType == BoldBIDashboard.Grid.Actions.Cancel
                || requestType == BoldBIDashboard.Grid.Actions.Save || requestType == BoldBIDashboard.Grid.Actions.BatchSave || requestType == BoldBIDashboard.Grid.Actions.Delete || requestType == BoldBIDashboard.Grid.Actions.Filtering || requestType == BoldBIDashboard.Grid.Actions.Paging || requestType == BoldBIDashboard.Grid.Actions.Refresh || requestType == BoldBIDashboard.Grid.Actions.Search)
                return true;
            return false;
        },
        _frozenAlign: function () {
             var gridContent = this.getContent().first(), browserDetails = this.getBrowserDetails(), direction;
             direction = this.model.enableRTL ? "margin-right" : "margin-left";
             gridContent.find(".e-movablecontent").css(direction, browserDetails.browser === "safari" ? "auto" : gridContent.find(".e-frozencontentdiv").width() + "px");
             this.getHeaderContent().find(".e-movableheader").removeAttr("style").css(direction, browserDetails.browser === "safari" ? "auto" : this.getHeaderContent().find(".e-frozenheaderdiv").width() + "px");
          },
        _refreshScroller: function (args) {
            var gridContent = this.getContent().first(), temp;
            if (BoldBIDashboard.isNullOrUndefined(gridContent.data("BoldBIDashboardScroller")))
                return;
            if (this.model.scrollSettings.frozenColumns > 0) {
                this._frozenAlign();
                this.refreshScrollerEvent();
                gridContent.find(".e-movablecontent").scrollLeft(this.getHeaderContent().find(".e-movableheader").scrollLeft());
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && !BoldBIDashboard.isNullOrUndefined(this.getScrollObject()._vScrollbar) && this.getScrollObject()._vScrollbar.value() > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.model.scrollSettings.frozenRows > 0 && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) {
                this._initFrozenRows();
                var temp = this.getScrollObject().model.scrollTop;
                if (!BoldBIDashboard.isNullOrUndefined(this.getScrollObject()._vScrollbar) && temp > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
                if ((args.requestType == "cancel" || args.requestType == "save") && temp > this._editFormHeight && this.model.editSettings.editMode.indexOf("inlineform") != -1)
                    temp = temp - this._editFormHeight;
                if (args.requestType == BoldBIDashboard.Grid.Actions.Add)
                    this.getScrollObject().scrollY(0, true);
                if (!BoldBIDashboard.isNullOrUndefined(this.getScrollObject()._vScrollbar) && !BoldBIDashboard.isNullOrUndefined(this.getScrollObject()._vScrollbar._scrollData))
                    this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && args.requestType == "beginedit") {
                var temp = this.getScrollObject().model.scrollTop;
                this.getScrollObject().scrollY(0, true);
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.model.dataSource) && (args.requestType == "refresh" || args.requestType=="searching") && this.model.scrollSettings.allowVirtualScrolling) {
                if(this.model.scrollSettings.enableVirtualization && this._isLocalData && this._gridRecordsCount > 0)
					this._refreshVirtualView(this._currentVirtualIndex);
				else
					this._refreshVirtualContent(1);
                if (this._currentVirtualIndex == 1 && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")))
					this.getScrollObject().scrollY(0);
            }            
			if(this.model.scrollSettings.frozenColumns > 0 && args.requestType !="filtering")
				this.rowHeightRefresh();
            else
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")))
				this.getScrollObject().refresh();
            gridContent.BoldBIDashboardScroller("model.enableRTL", this.model.enableRTL);
            if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.model.isResponsive && (args.requestType == 'searching' || args.requestType == "filtering")) {
                var scrollObj = this.getScrollObject();
                var height = scrollObj.isHScroll() ? this.getContentTable().height() + scrollObj.model.buttonSize : this.getContentTable().height();
                if (height > this.model.scrollSettings.height)
                    height = this.model.scrollSettings.height;
                var scrollWidth= typeof (this.model.scrollSettings.width) == "string" ? this.element.width()-scrollObj.model.buttonSize:this.model.scrollSettings.width;
                width = scrollWidth;
                this.getContent().BoldBIDashboardScroller({ height: height, width: width });
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && gridContent.BoldBIDashboardScroller("isVScroll") && !this.getScrollObject().model.autoHide) {
                this.getHeaderContent().addClass("e-scrollcss");
                !this.getHeaderContent().find(".e-headercontent").hasClass("e-hscrollcss") && this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
            }
            else
                this._showHideScroller();
            this._getRowHeights();
            if (temp && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && !BoldBIDashboard.isNullOrUndefined( this.getScrollObject()._vScrollbar) && args.requestType != BoldBIDashboard.Grid.Actions.Add) {
                this._currentTopFrozenRow = 0;
                if (temp > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
                this.getScrollObject()._vScrollbar.scroll(temp);
            }
            if (args.requestType == "virtualscroll" && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) {
                var top = this.getScrollObject().model.scrollTop + this.getScrollObject().model.height - (this.getScrollObject().model.height * .3);
                this.getScrollObject().scrollY(top, true);
            }
            if (args.requestType == "sorting" && this.model.scrollSettings.virtualScrollMode == "continuous" && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) {
                this.getScrollObject().scrollY(0, true);
            }
        },
         _renderScroller: function () {
            if (!this.model.scrollSettings)
                this.model.scrollSettings = {};
            if (this.model.enablePersistence && (BoldBIDashboard.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) || !this.model.scrollSettings.previousStateWidth) && this.model.isResponsive)
                this.model.scrollSettings.previousStateWidth = this.model.scrollSettings.width;
            if (typeof (this._originalScrollWidth) == "string" && !this.model.isResponsive) {
                this.element.css("width", "auto");
                var width = this.element.width();
                if (this.model.scrollSettings.width == "auto" || this._originalScrollWidth == "auto")
                    this._originalScrollWidth = "100%";
                this.model.scrollSettings.width = width * (parseFloat(this._originalScrollWidth) / 100)
            }

            if (typeof (this.model.scrollSettings.height) == "string" && !this.model.isResponsive) {
                var height = this.element.height();
                if (this.model.scrollSettings.height == "auto")
                    this.model.scrollSettings.height = "100%";
                this.model.scrollSettings.height = height * (parseFloat(this.model.scrollSettings.height) / 100)
            }

            if ((this.model.scrollSettings.width || this.model.width) && !this._mediaQuery) {
                var width = this.model.scrollSettings.width || this.model.width;
                if (typeof width == "string")
                    this.element.css("width", this.model.scrollSettings.width || this.model.width);
                else
                    this.element.width(this.model.scrollSettings.width || this.model.width);
            }

            var bbdesigner$content = this.getContent().attr("tabindex", "0"), staticWidth, direction, gridRows = this.getRows();

            if (this.model.scrollSettings.frozenColumns > 0) {
                for (var i = 0 ; i < this.getRows().length ; i++) {
                                       bbdesigner$(this.getRows()[i]).filter(":hidden").css("display", "table-row");
                                   }
                var scrollWidth = this.getContent().find(".e-frozencontentdiv").width() + 20;
                if (scrollWidth > this.model.scrollSettings.width) {
                    this.getContent().remove();
                    this.getHeaderTable().eq(1).remove();
                    this._alertDialog.find(".e-content").text(this.localizedLabels.FrozenColumnsViewAlert);
                    this._alertDialog.BoldBIDashboardDialog("open");
                    return;
                }
                staticWidth = this.getContent().find(".e-frozencontentdiv").width();
                direction = this.model.enableRTL ? "margin-right" : "margin-left";
                this.getContent().find(".e-movablecontent").css(direction, staticWidth + "px");
                this.getHeaderContent().find(".e-movableheader").css(direction, staticWidth + "px");
                if(!BoldBIDashboard.isNullOrUndefined(this.getFooterContent()))
                    this.getFooterContent().find(".e-movablefooter").css(direction, staticWidth + "px");
                this.model.scrollSettings["targetPane"] = ".e-movablecontent";
            }
            this._initFrozenRows();
            if (this.model.scrollSettings.autoHide)
                this.model.scrollSettings["show"] = bbdesigner$.proxy(this._showHideScroller, this);
			if(!this.model.scrollSettings.allowVirtualScrolling && this.model.currentIndex > 0 && !this.model.scrollSettings.scrollTop){
				var sTop = this.model.currentIndex * this.getRowHeight();
				this.model.scrollSettings["scrollTop"] = sTop;
			}
			bbdesigner$content.BoldBIDashboardScroller(this.model.scrollSettings);
			if (this.model.allowRowDragAndDrop && this.model.allowScrolling && BoldBIDashboard.gridFeatures.dragAndDrop)
			    bbdesigner$content.BoldBIDashboardScroller({ thumbStart: function () { return false } });
             if (this.model.rowTemplate != null && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && ((!BoldBIDashboard.isIOSWebView()) && (this.getBrowserDetails().browser == "msie" || this.getBrowserDetails().browser == "safari")))
                this.getScrollObject().refresh();            
             if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenRows == 0 && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getScrollObject()._vScrollbar && this.getScrollObject()._hScrollbar)
                this.getScrollObject()._vScrollbar._scrollData.skipChange = this.getScrollObject()._hScrollbar._scrollData.skipChange = true;
            if (!this.model.scrollSettings.autoHide)
                this._showHideScroller();
            if ((!BoldBIDashboard.isIOSWebView() && this.getBrowserDetails().browser == "safari") && this.model.scrollSettings.frozenColumns > 0)
                this.getHeaderContent().find(".e-movableheader").add(this.getContent().find(".e-movablecontent")).css(direction, "auto");
            this.refreshScrollerEvent();
            if (this.model.scrollSettings.frozenColumns > 0 && !this._isFrozenColumnVisible())
                this._frozenPaneRefresh();
            if (this.model.scrollSettings.allowVirtualScrolling) {
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
                this.refreshScrollerEvent();
            }
        },
		_checkScroller: function(e, scrollObj){
			var scrollLeft = e.scrollLeft > 0 ? e.scrollLeft : Math.abs(e.scrollLeft);
			if(e.source == "thumb" && (scrollObj.content()[0].scrollWidth - scrollLeft == scrollObj.content()[0].clientWidth || scrollLeft == 0)){
				if(this.model.enableRTL){
					var hLeft = scrollLeft == 0 ? e.scrollData.scrollable: 0;
					e.scrollData.sTop = e.model.scrollLeft = hLeft;
					scrollObj.content().scrollLeft(hLeft);	
				}
				scrollObj.refresh();
			}
		},
        _showHideScroller: function () {
            if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getContent().BoldBIDashboardScroller("isVScroll")) {
                this.getHeaderContent().find("div").first().addClass("e-headercontent");
                !this.model.scrollSettings.autoHide && this.getHeaderContent().addClass("e-scrollcss")
            } else
                this.element.find(".e-gridheader").removeClass("e-scrollcss");
            if (this.getBrowserDetails().browser != "msie" && this.model.scrollSettings.frozenColumns == 0 && !this._mediaQuery) {
                if (!this.element.find(".e-gridheader").hasClass("e-scrollcss") && (this.model.filterSettings.filteredColumns.length || this._hiddenColumns.length)) {
                    this.getHeaderTable().removeAttr('style');
                    this.getContentTable().removeAttr('style');
                }
                else {
                    this.getHeaderContent().find("div table").first().width(this.getContentTable().width());
                    this.getContent().find("div table").first().width(this.getContentTable().width());
                    this.getHeaderTable().width(this.getContentTable().width());
                }
            }
            if (this.getBrowserDetails().browser == "msie" && this.model.scrollSettings.frozenColumns == 0)
                !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && !this.getContent().BoldBIDashboardScroller("isVScroll") ? this.getContent().width(this.getHeaderContent().width()) : this.getContent().width(this.getHeaderContent().width() + 18);
            this._isHscrollcss();
        },
        _isHscrollcss: function () {
            var scroller = !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getContent().data("BoldBIDashboardScroller"), css = scroller && (scroller.isHScroll() || scroller.isVScroll()) ? "addClass" : "removeClass";
            this.getHeaderContent().find(".e-headercontent")[css]("e-hscrollcss")
        },
        _initFrozenRows: function () {
            var gridRows = this.getRows();
            if (!this.model.currentViewData || this.model.currentViewData.length == 0)
                return;
            if (this.model.scrollSettings.frozenRows > 0 && gridRows != null) {
                this.model.scrollSettings["scroll"] = bbdesigner$.proxy(this._scroll, this);
                this.getContent().find(".e-frozeny").removeClass("e-frozeny")
                    .end().find(".e-frozenrow").removeClass("e-frozenrow");
                if (!BoldBIDashboard.isNullOrUndefined(gridRows[0][this.model.scrollSettings.frozenRows - 1]) && !BoldBIDashboard.isNullOrUndefined(gridRows[1][this.model.scrollSettings.frozenRows - 1]) && this.model.scrollSettings.frozenColumns > 0)
                    bbdesigner$(gridRows[0][this.model.scrollSettings.frozenRows - 1].cells).add(gridRows[1][this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
                else
                    bbdesigner$(gridRows[this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
                this.model.scrollSettings.height = this._rowHeightCollection[Math.floor(this.model.scrollSettings.height / this._rowHeightCollection[1])] + 18;
            }
            else
                delete this.model.scrollSettings["scroll"];            
        },
          refreshScrollerEvent: function () {
            var proxy = this;
            var bbdesigner$content = this.getContent().attr("tabindex", "0");
            var scroller = bbdesigner$content.data("BoldBIDashboardScroller");
            if (!BoldBIDashboard.isNullOrUndefined(scroller) && scroller.model.scroll == null) {
                bbdesigner$content.BoldBIDashboardScroller({
                    scroll: function (e) {
                        if (!BoldBIDashboard.isNullOrUndefined(e.scrollData) && e.scrollData.scrollVal == "scrollLeft") {
                            if (proxy.model.scrollSettings.targetPane || (!BoldBIDashboard.isNullOrUndefined(proxy.getHeaderContent()) && proxy.getHeaderContent().find(".e-movableheader").length)) {
                                proxy.getHeaderContent().find(".e-movableheader").scrollLeft(e.scrollLeft);
                            }
                            else
                                proxy.getHeaderContent().find("div").first().scrollLeft(e.scrollLeft);
                            if (proxy.model.scrollSettings.frozenRows > 0 && proxy.model.editSettings.editMode.indexOf("inlineform") != -1 && proxy.model.isEdit) {
                                var scrollTop = e.scrollTop;
                                proxy.getContent().find(".e-content").scrollTop(0);
                                this.scrollY(this.model.scrollTop + scrollTop, true);
                            }
                        };
                        if (proxy.model.scrollSettings.frozenRows > 0 && proxy.getRows() != null) {
                            if (e.scrollData != null && e.scrollData.dimension != "width") {
                                e.cancel = true;
                                var rows = proxy.getRows(), indexes = proxy._getTopRow(e.scrollTop), currentTopRow = indexes.imaginaryIndex, frozenRows;
                                if (currentTopRow > proxy._currentTopFrozenRow)
                                    proxy._showHideRow(proxy.model.scrollSettings.frozenRows, currentTopRow, "hide", e.scrollTop);
                                else if (currentTopRow < proxy._currentTopFrozenRow)
                                    proxy._showHideRow(currentTopRow, proxy._currentTopFrozenRow + 1, "show", e.scrollTop);
                                var movableContent = proxy.getContentTable().last().find("tr");
                                var border = (parseInt(movableContent.last().find("td:first").css("border-top-width")) * 2) + 1;
                                if (e.scrollTop == this._vScrollbar.model.maximum && ((movableContent.last()[0].offsetTop + movableContent.last().height() - border) > proxy.element.find(".e-content").height())) {
                                    var totalHeight = movableContent.last().prev()[0].offsetTop + movableContent.last().prev().height();
                                    var count = 1;
                                    for (var i = (movableContent.length - 2) ; totalHeight - border > proxy.element.find(".e-content").height() ; i++) {
                                        totalHeight = movableContent[i].offsetTop + movableContent.eq(i).height();
                                        count++;
                                        break;
                                    }
                                    proxy._showHideRow(proxy.model.scrollSettings.frozenRows, currentTopRow + count, "hide", e.scrollTop);
                                }
                                e.model.scrollTop = e.scrollTop;
                            }
                            else {
                                if (!BoldBIDashboard.isNullOrUndefined(this._vScrollbar) && !BoldBIDashboard.isNullOrUndefined(this._vScrollbar._scrollData))
                                    this._vScrollbar._scrollData.skipChange = true;
                            }
                        }
                        if (proxy.model.scrollSettings.allowVirtualScrolling) {
                            if (proxy.model.scrollSettings.enableVirtualization && e.scrollData != null && e.scrollData.handler != "e-hhandle") {
                                e["reachedEnd"] = e.scrollData.scrollable - e.scrollTop == 0;
                                if (e.source == "thumb") {
                                    var keys = BoldBIDashboard._getObjectKeys(proxy._virtualLoadedRows);
                                    var index = (proxy._currentVirtualIndex + 2).toString();
                                    if (proxy.model.scrollSettings.virtualScrollMode == "continuous" && bbdesigner$.inArray(index, keys) == -1 && index < proxy._totalVirtualViews)
                                        proxy._isContinuous = true;
                                    else {
                                        e.model.scrollTop = e.scrollTop;
                                        proxy._isContinuous = false;
                                        e.cancel = true;
                                    }
                                }
                                if (e.source == "button" || e.source == "key" || e.source == "wheel") {
                                    if (bbdesigner$("#" + proxy._id + "_WaitingPopup").is(":visible"))
                                        e.cancel = true;
                                    else {
                                        proxy._isThumbScroll = false;
                                        proxy._virtualViewScroll(e);
                                    }
                                    if (proxy.model.scrollSettings.virtualScrollMode == "continuous" && e["reachedEnd"])
                                        this.refresh();
                                }
                                proxy.model.currentIndex = e.scrollTop == 0 ? e.scrollTop : Math.floor(e.scrollTop / proxy._vRowHeight);
                            }
                            else {
                                if (!BoldBIDashboard.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle" && proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter))
                                    !proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();
                                    if(this._hScroll) {
                                      e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollTop + e.model.scrollerSize == this.content()[0].clientHeight;
                                    }
                                    else{
                                      e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollTop  == this.content()[0].clientHeight;
                                    }
                                if ((e.source == "button" || e.source == "key" || e.source == "wheel") && proxy.model != null)
                                    proxy._virtualScroll(e);
                                if (e.source == "wheel" && e.scrollTop != proxy._scrollValue)
                                    e.scrollTop = proxy._scrollValue;
                                proxy._checkScroller(e, this);
                            }
                        }
                        if (!proxy.model.scrollSettings.frozenRows && !proxy.model.scrollSettings.frozenColumns)
                            if (!BoldBIDashboard.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle") {
                                if (proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter))
                                    !proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();
                                proxy._checkScroller(e, this);
                            }
                            else {
                                proxy._scrollValue = e.scrollTop;
                                proxy.model.currentIndex = e.scrollTop == 0 ? e.scrollTop : Math.floor(e.scrollTop / proxy._vRowHeight);
                            }
                    },
                    thumbEnd: function (e) {
                        if (proxy.model.scrollSettings.allowVirtualScrolling) {
                            if (proxy.model.scrollSettings.enableVirtualization && proxy.model.scrollSettings.virtualScrollMode == "continuous")
                                e["reachedEnd"] = e.scrollData.scrollable - e.model.scrollTop == 0;
                                else if (e.originalEvent && (!bbdesigner$(e.originalEvent.target).hasClass("e-rowcell") || e.originalEvent.type == "touchend")) {
                                    if (e.originalEvent.type == "touchend")
                                        e["reachedEnd"] = Math.ceil(parseFloat(this._vScrollbar.element.find(".e-vhandle").css('top'))) + Math.ceil(parseFloat(this._vScrollbar.element.find(".e-vhandle").height())) >= this._vScrollbar.element.find(".e-vhandlespace").height() - 2;
                                    else
                                        e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollData.sTop == this.content()[0].clientHeight;
                                }  
                            if (e.scrollData.handler == "e-hhandle")
                                return;
                            if (proxy.model != null && e.originalEvent) {
                                if (proxy.model.scrollSettings.enableVirtualization) {
                                    proxy._isThumbScroll = true;
								proxy._virtualViewScroll(e);
								if(proxy.model.scrollSettings.virtualScrollMode == "continuous" && e["reachedEnd"])
									this.refresh();
							}
							else
								proxy._virtualScroll(e);
                            }
                        }
                    },
                    scrollEnd: function (e) {
                        if (proxy.model.scrollSettings.allowVirtualScrolling) {
                            if (e.scrollData.type == "mousewheel" || (e.scrollData.model != null && e.scrollData.model.orientation == "horizontal")) return;
                            var currentViewIndex = proxy._calculateCurrentVirtualIndex(e);
							if(!proxy._checkCurrentVirtualView(proxy._virtualLoadedRows, currentViewIndex))	return;	
						    if (proxy.model.scrollSettings.enableVirtualization && !proxy._isContinuous) {
                                var currentPage = proxy._calculateCurrentViewPage(e.model);
                                var isVirtualPage = bbdesigner$.inArray(currentPage, proxy._virtualLoadedPages) != -1;
                                if (isVirtualPage) {
                                    proxy._isThumbScroll = true;
                                    proxy._virtualViewScroll(e);
                                    proxy.element.BoldBIDashboardWaitingPopup("hide");
								if(proxy._totalVirtualViews <= proxy._maxViews * 3)
									this._content[0].scrollTop = e.scrollData.scrollTop;															
							}
							else {                             						
								e.cancel = true;
							}
						}						
                        }
                    }
                });
            }
            this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader").scroll(BoldBIDashboard.proxy(function (e) {
                var bbdesigner$currentTarget = bbdesigner$(e.currentTarget);
                if (this.model.scrollSettings.targetPane) {
                    this.getContent().find(".e-movablecontent").scrollLeft(bbdesigner$currentTarget.scrollLeft());
                    (this.model.showSummary && !BoldBIDashboard.isNullOrUndefined(this.getFooterContent())) && this.getFooterContent().find(".e-movablefooter").scrollLeft(bbdesigner$currentTarget.scrollLeft());;
                }
                else {
                    (this.model.showSummary && !BoldBIDashboard.isNullOrUndefined(this.getFooterContent())) && this.getFooterContent().find("div").first().scrollLeft(bbdesigner$currentTarget.scrollLeft());
                    this.getContent().find(".e-content").first().scrollLeft(bbdesigner$currentTarget.scrollLeft());
                }
            }, this));
        },
		clearFiltering: function(field){
			if(field)
				this._clearFilter(field);					
			else{
				var fltrCols = this.model.filterSettings.filteredColumns, i=0;				
				while(i < fltrCols.length){
					this._clearFilter(fltrCols[i].field);					
				}
				if(this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel")
					this.getHeaderTable().find(".e-filtericon").removeClass("e-filteredicon e-filternone");
			}
            this._closeFDialog();
		},
		_clearFilter: function (field) {
		    var filterType = this.model.filterSettings.filterType;
		    if (!BoldBIDashboard.isNullOrUndefined(this.getColumnByField(field).filterType))
		        filterType = this.getColumnByField(field).filterType;
		    switch (filterType) {
		        case BoldBIDashboard.Grid.FilterType.FilterBar:
		            if (bbdesigner$.inArray(this.getColumnByField(field), this.filterColumnCollection) != -1) {
		                this.getHeaderTable().find("#" + field + "_filterBarcell").val("");
		                this._currentFilterbarValue = "";
		                var index = bbdesigner$.inArray(field, this.filterColumnCollection);
		                this._currentFilterColumn = this.getColumnByField(field);
		                this._showFilterMsg();
		            }
		            break;
		        case BoldBIDashboard.Grid.FilterType.Menu:
					var id = "#" + this._id + "_" + this._bbdesigner$colType + "Dlg";
					if (this._bbdesigner$colType == "boolean")
						bbdesigner$(id).find('.e-value .e-js').BoldBIDashboardCheckBox("model.checked", false);
					else
						if (this._bbdesigner$colType == "number")
							bbdesigner$(id).find('.e-numerictextbox').ejNumericTextbox("model.value", "");
						else
							bbdesigner$(id).find(".e-value input").val("");					
					if (this._excelFilterRendered || this._isExcelFilter)
					    delete (!BoldBIDashboard.isNullOrUndefined(this._excelFilter) && this._excelFilter._predicates.length > 0) ? this._excelFilter._predicates[0][field] : field;
					this._bbdesigner$curFieldName = field;
                    this._closeFilterDlg();
					break;
				case BoldBIDashboard.Grid.FilterType.Excel:
					delete this._excelFilter._predicates.length > 0 ? this._excelFilter._predicates[0][field] : field;						
					this._excelFilter.closeXFDialog();
					this._bbdesigner$curFieldName = field;
					break;
			}
			this.filterColumn(field, "", "", "or");							
		},
		clearSearching: function(){
			this.element.find(".e-gridtoolbar #" + this._id + "_search").val("");
			this.search("");
			bbdesigner$.extend(this.model.searchSettings, this.defaults.searchSettings);
		},
        _renderByFrozenDesign: function () {
            var bbdesigner$div = bbdesigner$(document.createElement('div')), col = this._getMetaColGroup().find("col"), colgroups = {};
            colgroups["colgroup1"] = bbdesigner$div.append(BoldBIDashboard.buildTag("colgroup").append(col.splice(0, this.model.scrollSettings.frozenColumns))).html();
            colgroups["colgroup2"] = bbdesigner$div.html(BoldBIDashboard.buildTag("colgroup").append(col)).html();
            this.getContent().find("div").first().get(0).innerHTML = bbdesigner$.render[this._id + "_FrozenTemplate"]({ datas: this.model.currentViewData }, colgroups);
            this.setGridContentTable(this.getContent().find(".e-table").attr("role", "grid"));
        },
        addFrozenTemplate: function () {
            var template = "<div class='e-frozencontentdiv'>"
            + "<table cellspacing='0.25px' class='e-table'>{{:~colgroup1}}<tbody>"
            + "{{for datas tmpl='" + this._id + "_JSONFrozenTemplate'/}}"
            + "</tbody></table></div>"
            + "<div class='e-movablecontent'><div class='e-movablecontentdiv'><table cellspacing='0.25px' class='e-table'>{{:~colgroup2}}<tbody>"
            + "{{for datas tmpl='" + this._id + "_JSONTemplate'/}}"
            + "</tbody></table></div></div>", templates = {};
            templates[this._id + "_FrozenTemplate"] = template;
            bbdesigner$.templates(templates);
        },
        _getTopRow: function (offsetTop) {
            var currentTopRow = this.model.scrollSettings.frozenRows, i = 0;
            if (offsetTop > 10) {
                for (var i = 0; i < this._rowHeightCollection.length; i++) {
                    if (this._rowHeightCollection[i] > offsetTop) {
                        currentTopRow = this.model.scrollSettings.frozenRows + i - 1;
                        break;
                    }
                }
            }
            return { imaginaryIndex: currentTopRow, actualIndex: i };
        },
        _showHideRow: function (from, to, action, scrollPosition) {
            var rows = this.getRows();
            if (this.model.scrollSettings.frozenColumns > 0)
                bbdesigner$(rows[0]).slice(from, to).add(bbdesigner$(rows[1]).slice(from, to).toArray())[action]();
            else
                bbdesigner$(rows).slice(from, to)[action]();
            this._currentTopFrozenRow = action == "show" ? from : to;
            if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")))
            this.getScrollObject()._changevHandlerPosition(scrollPosition);
        },
        _scroll: function (args) {
            if (args.scrollData != null && args.scrollData.dimension != "width") {
                args.cancel = true;
                var rows = this.getRows(), indexes = this._getTopRow(args.scrollTop), currentTopRow = indexes.imaginaryIndex, frozenRows;
                if (currentTopRow > this._currentTopFrozenRow)
                    this._showHideRow(this.model.scrollSettings.frozenRows, currentTopRow, "hide", args.scrollTop);
                else if (currentTopRow < this._currentTopFrozenRow)
                    this._showHideRow(currentTopRow, this._currentTopFrozenRow + 1, "show", args.scrollTop);
                var movableContent = this.getContentTable().last().find("tr");
                var border = (parseInt(movableContent.last().find("td:first").css("border-top-width")) * 2) + 1;
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && args.scrollTop == this.getScrollObject()._vScrollbar.model.maximum && ((movableContent.last()[0].offsetTop + movableContent.last().height() - border) > this.element.find(".e-content").height())) {
                    var totalHeight = movableContent.last().prev()[0].offsetTop + movableContent.last().prev().height();
                    var count = 1;
                    for (var i = (movableContent.length - 2) ; totalHeight - border > this.element.find(".e-content").height() ; i++) {
                        totalHeight = movableContent[i].offsetTop + movableContent.eq(i).height();
                        count++;
                        break;
                    }
                    this._showHideRow(this.model.scrollSettings.frozenRows, currentTopRow + count, "hide", args.scrollTop);
                }
                args.model.scrollTop = args.scrollTop;
            }
            else {
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && !BoldBIDashboard.isNullOrUndefined(this.getScrollObject()._vScrollbar) && !BoldBIDashboard.isNullOrUndefined(this.getScrollObject()._vScrollbar._scrollData))
                    this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
            }
        },
        _renderAlertDialog: function () {
            var bbdesigner$contentDiv = BoldBIDashboard.buildTag('div.e-content', this._getLocalizedLabels()["frozenColumnsMessage"])
                , bbdesigner$buttons = BoldBIDashboard.buildTag('span.e-buttons', "<input type='button' id=" + this._id + 'ConfirmDialogOK' + " value='" + this._getLocalizedLabels()["OkButton"] + "'/>");
            this._alertDialog = BoldBIDashboard.buildTag('div#' + this._id + 'AlertDialog');
            this._alertDialog.append(bbdesigner$contentDiv).append(bbdesigner$buttons);
            this.element.append(this._alertDialog);
            bbdesigner$buttons.find("input").BoldBIDashboardButton({
                cssClass: this.model.cssClass,
                showRoundedCorner: true,
                size: "mini",
                click: bbdesigner$.proxy(function (args) {
                    this._alertDialog.BoldBIDashboardDialog("close");
                }, this)
            });
            this._renderFDialog(this._id + 'AlertDialog');
            this._alertDialog.BoldBIDashboardDialog({ width: "auto", enableModal: true });
        },
        _renderFDialog: function (id) {
            bbdesigner$("#" + id).BoldBIDashboardDialog({ showOnInit: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, "showHeader": false, width: 260, enableResize: false, allowKeyboardNavigation: false, content: "#" + this._id });
        },
        _virtualScroll: function (e) {
            if (e != null) {
                var flag = 0;
                var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
                var pageInfo = this.model.pageSettings;
                var tbody = this.getContentTable()[0].tBodies[0];
                var virtualRows = bbdesigner$(tbody).find('tr.e-virtualrow');
                pageInfo.totalPages = Math.ceil(recordCount / pageInfo.pageSize);
                if (e.scrollTop !== undefined)
                    e.model.scrollTop = e.scrollTop;
                if (e.reachedEnd != undefined) e.model.reachedEnd = e.reachedEnd;
                var currentPageNo = this._calculateCurrenPage(virtualRows, this.getContentTable(), e.model);
                if (currentPageNo > pageInfo.totalPages)
                    currentPageNo = pageInfo.totalPages;
                if (pageInfo.currentPage != currentPageNo && bbdesigner$.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                    this._isVirtualRecordsLoaded = false;
                }
                if (!this._isVirtualRecordsLoaded) {
                    if (bbdesigner$.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                        if (this.model.scrollSettings.virtualScrollMode == "continuous" && !e.reachedEnd)
                            return
                        if (currentPageNo == pageInfo.totalPages && bbdesigner$.inArray((currentPageNo - 2) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                            flag++;
                            this.set_currentPageIndex(currentPageNo);
                        }
                        if (flag == 1) this._lastRow = true;
                        this.set_currentPageIndex(currentPageNo);
                    }
                    pageInfo.currentPage = currentPageNo;
                }
                else
                    pageInfo.currentPage = currentPageNo;
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
            }
        },
		_virtualViewScroll: function (e) {
            if (e != null) {                
                if (e.scrollTop !== undefined)
                    e.model.scrollTop =  Math.round(e.scrollData.sTop);
                if (e.reachedEnd != undefined) e.model.reachedEnd = e.reachedEnd;
                var currentVirtualIndex = this._calculateCurrentVirtualIndex(e);									
                if (bbdesigner$.inArray(currentVirtualIndex, this._currentLoadedIndexes) == -1)
                    this._isVirtualRecordsLoaded = false;                               
                if (!this._isVirtualRecordsLoaded)                     
                    this.set_currentVirtualIndex(currentVirtualIndex);                							
            }
		},
        _createPagerStatusBar: function () {
            var bbdesigner$statusBar = this.element.find(".e-pagerstatusbar");
            if (bbdesigner$statusBar.length)
                bbdesigner$statusBar.remove();
            var bbdesigner$pagermsgDiv = BoldBIDashboard.buildTag('div.e-pagermsgdiv');
            this.bbdesigner$pagerStatusBarDiv = BoldBIDashboard.buildTag('div.e-pagerstatusbar').append(bbdesigner$pagermsgDiv);
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
                var bbdesigner$messageDiv = BoldBIDashboard.buildTag('div.e-pagerfiltermsg').css("display", "none");;
                this.bbdesigner$pagerStatusBarDiv.append(bbdesigner$messageDiv);
            }
            this.bbdesigner$pagerStatusBarDiv.appendTo(this.element);
            this.bbdesigner$pagerStatusBarDiv.css("display", "none");
        },
        _refreshVirtualContent: function (currentPage) {
            var rowHeight = this.getRowHeight();
            var recordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            if (currentPage != null) {
                this._currentPage(currentPage);
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
            }
            var currentData = this.model.currentViewData;
            if (!this.model.scrollSettings.enableVirtualization)
                this._virtualLoadedRecords[currentPage] = currentData;
            var currentIndex = this.getCurrentIndex();
            var tbody = this.getContentTable()[0].tBodies[0];
            if (currentIndex > 0) {
                var virtualTRTop = document.createElement("tr");
                bbdesigner$(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * currentIndex).prependTo(tbody);
            } if (currentIndex + this.model.pageSettings.pageSize <= recordsCount && this.getContentTable().find("tr").last().hasClass("e-virtualrow") != true && this.model.scrollSettings.frozenColumns == 0) {
                var virtualTRBottom = document.createElement("tr");
                var virtualHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? rowHeight * (recordsCount - (currentIndex + this.model.pageSettings.pageSize)) : 1;
                bbdesigner$(virtualTRBottom).addClass("e-virtualrow").css("height", virtualHeight).appendTo(bbdesigner$(tbody));
            }
            this.virtualLoadedPages = new Array();
            this.orderedVirtualLoadedPage = [];
            this.virtualLoadedPages.push(currentIndex >= 0 ? currentIndex : 0);
            this.orderedVirtualLoadedPage.push(currentIndex >= 0 ? currentIndex : 0);
            var focusTR = bbdesigner$(tbody).find('tr:not(.e-virtualrow)').attr('name', currentIndex >= 0 ? currentIndex : 0)[0];
            if (focusTR && focusTR.previousSibling && (bbdesigner$(focusTR.previousSibling).hasClass("e-virtualrow") || focusTR.previousSibling.offsetTop > (currentIndex * this.getContent().height()))) {
                this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
                this._isVirtualRecordsLoaded = true;
            }
        },
		_refreshVirtualView: function (currentIndex) {
			if(!this._singleView){			
				var virtualRowCount = this._virtualRowCount;				
				if(currentIndex){     
					var scrollRefresh, currentPage;
					if(currentIndex > this._totalVirtualViews){						
						currentIndex = 1;					
						scrollRefresh = true;						
					}						
					this._currentVirtualIndex = currentIndex;
					if(!this._virtualLoadedRecords[currentIndex]){
						if(!this._virtualDataRefresh && this._currentVirtualIndex != this._totalVirtualViews) scrollRefresh = true;
						currentPage = Math.ceil(currentIndex * this._virtualRowCount / this.model.pageSettings.pageSize);
					}
					else				
						currentPage = Math.ceil(this.model.currentIndex / this.model.pageSettings.pageSize);
					this._refreshVirtualViewScroller(scrollRefresh);
					if(currentPage > this.model.pageSettings.totalPages) currentPage = this.model.pageSettings.totalPages;
					if(currentPage <= 0) currentPage = 1;
					if(bbdesigner$.inArray(currentPage, this._virtualLoadedPages) == -1)
						this.gotoPage(currentPage);
					else{
						this._currentPage(currentPage);
						if(!this._checkCurrentVirtualView(this._virtualLoadedRecords, currentIndex))
							this._needPaging = true;
						else
							this._needPaging = false;
						this._getVirtualLoadedRecords(this.model.query);
						this._replacingVirtualContent();				
					}
				}
				else{               					
					this._refreshVirtualViewDetails();					
					var rows = bbdesigner$(this.getContentTable()[0].rows);
					this._setVirtualTopBottom();
					if (this.initialRender){
						for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
							var currentLoadedIndex = this._currentLoadedIndexes[i]; viewIndex = (i + 1) * virtualRowCount, viewCount = i * virtualRowCount;
							bbdesigner$(rows[viewIndex - 1]).addClass("e-virtualview" + currentLoadedIndex);
							var hex = currentLoadedIndex.toString(32);
							var vRows = rows.slice(viewCount, viewCount + virtualRowCount).attr('name', hex).detach();
							this._virtualLoadedRows[currentLoadedIndex] = vRows;
							vRows.appendTo(this.getContentTable());
						}
						if(this._currentVirtualIndex > 1) 
							this._refreshVirtualViewScroller();											
					}			
					this._eventBindings();
				}
				if(bbdesigner$.inArray(this._currentPage(), this._virtualLoadedPages) == -1)
					this._virtualLoadedPages.push(this._currentPage());				
			}
			else {
				this._singleView = false;				
				this._addLastRow();	
				this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
				var hex = this._currentVirtualIndex.toString(32);				
				bbdesigner$(this._gridRows).attr('name', hex);
				this._virtualLoadedRows[this._currentVirtualIndex] = this._gridRows;				
				this._eventBindings();
			}
			if(!currentIndex && (this.model.queryCellInfo || this.model.rowDataBound)){
				for(var i = 0; i < this._currentLoadedIndexes.length; i++){					
					if(bbdesigner$.inArray(this._currentLoadedIndexes[i], this._queryCellView) == -1)
						this._queryCellView.push(this._currentLoadedIndexes[i]);						
				}
			}
			this._isThumbScroll = false;
			this._virtualDataRefresh = false;
        },
		_refreshVirtualViewData: function(){
			this._virtualLoadedRecords = {};
			this._virtualLoadedRows = {};	
			this._virtualLoadedPages = [];	
			this._virtualPageRecords = {};
			this._queryCellView	= [];									
			if(this.model.pageSettings.totalPages != null && this._currentPage() > this.model.pageSettings.totalPages){
				this._currentPage(1);
				this._currentVirtualIndex = 1;
			}			
		},
		setCurrentPageData: function(currentData){
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
				this._refreshVirtualViewData();
				this._refreshVirtualViewDetails();										
				this._setVirtualLoadedRecords(currentData, this._currentPage());
				this._refreshVirtualView(this._currentVirtualIndex);
			}
		},
		_refreshVirtualViewScroller: function(needRefresh){
			var scrollValue;
			if((this.initialRender && !this.model.scrollSettings.scrollTop) || needRefresh){
				var rowHeight = this._vRowHeight;				   
				scrollValue = this.model.currentIndex * this._vRowHeight;
			}
			else
                scrollValue = this._scrollObject.model.scrollTop;
            if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) {
                this.getContent().BoldBIDashboardScroller("model.scrollTop", scrollValue);
                this._scrollValue = scrollValue;
            }
        },
		_calculateCurrentViewPage: function (args) {
			if(!args) args = this._scrollObject.model;
            var pageSize = this.model.pageSettings.pageSize;                                
            var currentPage =  Math.ceil((args.scrollTop + this.model.scrollSettings.height) / this._vRowHeight / pageSize);
			// if(this.model.scrollSettings.virtualScrollMode == "continuous")
				// currentPage = Math.ceil(this._currentVirtualIndex * this._virtualRowCount / this.model.pageSettings.pageSize);
            if(this.model.pageSettings.totalPages == null)
                this.model.pageSettings.totalPages = Math.ceil(this._getVirtualTotalRecord() / pageSize);                         
            if(currentPage > this.model.pageSettings.totalPages)
                currentPage = this.model.pageSettings.totalPages;                                             
            return currentPage;
        },
		_calculateCurrentVirtualIndex: function (e) {
            var args = e.model, recordCount = this._getVirtualTotalRecord();
            var currentIndex, trEle, isLast, viewTr = [], cur, oTop, len, sTop = args.scrollTop;
            var index = sTop + this.model.scrollSettings.height;
            currentIndex = index / this._vRowHeight / this._virtualRowCount;                    
            if (this._prevVirtualIndex > this._currentVirtualIndex && sTop <= this._scrollValue)
                currentIndex = Math.floor(currentIndex);
            else
                currentIndex = Math.ceil(currentIndex);
            if (sTop >= this._scrollValue && args.virtualScrollMode == "continuous" && args.reachedEnd) 
                currentIndex = currentIndex + 1;                      
            if(currentIndex > this._totalVirtualViews) currentIndex = this._totalVirtualViews;
            if(currentIndex <= 0) currentIndex = 1;                
            if (bbdesigner$.inArray(currentIndex, this._currentLoadedIndexes) !== -1 && this._virtualLoadedRows[currentIndex] && sTop != e.scrollData.scrollable) {
                var viewTrs = this.getContentTable()[0].rows; len = viewTrs.length;
                var virtualTopHeight = this.getContent().find(".e-virtualtop").height();
                isLast = sTop >= this._scrollValue;
                for (var i = 0; i < len; i++) {
                    cur = viewTrs[i];
                    oTop = cur.offsetHeight + cur.offsetTop + virtualTopHeight;
                    if (oTop > sTop + this.model.scrollSettings.height) {
                        if (viewTr.length === 0 && i !== 0)
                            viewTr = [viewTrs[cur.offsetTop <= sTop + this.model.scrollSettings.height ? i : i - 1]];
                        break;
                    }
                    if (oTop >= sTop && oTop <= sTop + this.model.scrollSettings.height) {
                        viewTr.push(cur);
                        if (isLast === false && viewTr.length > 1)
                            break;
                    }
                }
                trEle = bbdesigner$(sTop >= this._scrollValue ? viewTr[viewTr.length - 1] : viewTr[0]);
                if(trEle.length)
                    currentIndex = parseInt(trEle.attr("name"), 32);
            }						
            this._scrollValue = sTop;           
            return currentIndex;
        },
        _calculateCurrenPage: function (virtualRows, target, args) {
            var pageSize = this.model.pageSettings.pageSize;
            var currentPage, tempCPage, diff, proxy = this, trEle, isLast, viewTr = [], cur, oTop, len,currentRowValue,bbdesigner$currentRow;
            var rowHeight = this.getRowHeight();
            var scrollTop = args.reachedEnd ? this.getRowHeight() * this.getRows().length : args.scrollTop;
            currentPage = (scrollTop + this.model.scrollSettings.height) / rowHeight / pageSize;
            currentRowValue = (this.model.pageSettings.pageSize * (this.model.pageSettings.currentPage -1 ));
			 bbdesigner$currentRow = this.getContentTable().find("tr[name="+currentRowValue+"]").eq(0);
			if (bbdesigner$currentRow.length && bbdesigner$currentRow.offset().top > 0 && currentPage >= 1 &&  args.scrollTop < this._scrollValue && this.virtualLoadedPages.indexOf(Math.ceil(currentPage - 1) * pageSize) !== -1)
                currentPage = Math.floor(currentPage);
            else
                currentPage = Math.ceil(currentPage);

            if (Math.ceil(args.scrollTop) >= Math.ceil(this._scrollValue) && args.virtualScrollMode == "continuous" && args.reachedEnd) {
                currentPage = this.virtualLoadedPages[this.virtualLoadedPages.length - 1] / pageSize + 2;
            }

            if (bbdesigner$.inArray((currentPage - 1) * pageSize, this.virtualLoadedPages) !== -1) {
                var viewTrs = this.getContentTable().children("tbody").children("tr"); len = viewTrs.length;
                isLast = args.scrollTop >= this._scrollValue;
                for (var i = 0; i < len; i++) {
                    cur = viewTrs[i];
                    oTop = cur.offsetHeight + cur.offsetTop;
                    if (oTop > args.scrollTop + proxy.model.scrollSettings.height) {
                        if (viewTr.length === 0 && i !== 0)
                            viewTr = [viewTrs[cur.offsetTop <= args.scrollTop + proxy.model.scrollSettings.height ? i : i - 1]];
                        break;
                    }
                    if (oTop >= args.scrollTop && oTop <= args.scrollTop + proxy.model.scrollSettings.height) {
                        viewTr.push(cur);
                        if (isLast === false && viewTr.length > 1)
                            break;
                    }
                }
                trEle = bbdesigner$(args.scrollTop >= this._scrollValue ? viewTr[viewTr.length - 1] : viewTr[0]);
                if (trEle.hasClass('e-virtualrow')) {
                    if (viewTr.length === 1) {
                        currentPage++;
                    }
                }
                else
                    currentPage = parseInt(trEle.attr("name"), 10) / pageSize + 1;
            }
            this._scrollValue = args.scrollTop;
            for (var index = 0; index < virtualRows.length; index++) {
                var val = virtualRows[index];
                if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
                    var prevVirtualPage = this._calculatePrevPage(virtualRows, target, args);
                    this._prevPageNo = prevVirtualPage;
                    if (currentPage == 0)
                        currentPage = 1;
                    currentPage = currentPage > this.model.pageSettings.totalPages ? this.model.pageSettings.totalPages : currentPage;
                    return currentPage;
                }
            }
            return currentPage;
        },
        _calculatePrevPage: function (virtualRows, target, args) {
            for (var i = 0; i < virtualRows.length; i++) {
                var val = virtualRows[i];
                if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
                    var trElement = bbdesigner$(val).prevAll('tr[name]')[0];
                    if (trElement != null) {
                        return Math.ceil(parseInt(bbdesigner$(trElement).attr('name'), 10) / this.model.pageSettings.pageSize) + 1;
                    }
                }
            }
            return -1;
        },
        _refreshVirtualPagerInfo: function () {
            var model = {};
            model.pageSize = this.model.pageSettings.pageSize;
            model.currentPage = this._currentPage();
            model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            model.totalPages = Math.ceil(model.totalRecordsCount / model.pageSize);

            return model;
        },
        _showPagerInformation: function (model) {
            var from = (model.currentPage - 1) * model.pageSize;
            bbdesigner$(this.bbdesigner$pagerStatusBarDiv).find("div:first").html(String.format(this.localizedLabels.PagerInfo, model.currentPage, model.totalPages, model.totalRecordsCount), from, from + model.pageSize);
            bbdesigner$(this.bbdesigner$pagerStatusBarDiv).css('display', 'block');
        },
        _cellMerging: function (args) {
            args.colMerge = function (range) {
                if (this.cell.className.indexOf("e-colmerge") == -1) {
                    this.cell.className += " e-colmerge";
                    if (this.model.columns.length - this.cell.cellIndex < range)
                        range = this.model.columns.length - this.cell.cellIndex;
                    this.cell.colSpan = range;
                    for (var i = 1; i < range; i++) {
                        if (!BoldBIDashboard.isNullOrUndefined(this.cell.parentElement.children[this.cell.cellIndex + i]))
                            this.cell.parentElement.children[this.cell.cellIndex + i].className += " e-hide";
                    }
                }
            };
            args.rowMerge = function (range) {
                if (this.cell.className.indexOf("e-rowmerge") == -1) {
                    this.cell.className += " e-rowmerge";
                    var ele = this.cell.parentNode.parentNode;
                    if (ele.rows.length - this.cell.parentElement.rowIndex < range)
                        range = ele.rows.length - this.cell.parentElement.rowIndex;
                    this.cell.rowSpan = range;
                    for (var i = 0; i < range - 1; i++) {
                        if (!BoldBIDashboard.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i].nextSibling)) {
                            if (!(bbdesigner$(".e-grid").children().is('.e-dialog')) || (bbdesigner$(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering)
                                ele.children[this.cell.parentElement.rowIndex + i].nextSibling.children[this.cell.cellIndex].className += " e-merged e-hide";
                        }
                        else
                            break;
                    }
                }
            };
            args.merge = function (col, row) {
                if (col > 1 && row > 1) {
                    if (this.cell.className.indexOf("e-colmerge") == -1) {
                        this.cell.className += " e-colmerge";
                        var ele = this.cell.parentNode.parentNode;
                        if (ele.rows.length - this.cell.parentElement.rowIndex < row)
                            row = ele.rows.length - this.cell.parentElement.rowIndex;
                        if (!(bbdesigner$(".e-grid").children().is('.e-dialog')) || (bbdesigner$(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering) {
                            for (var i = 0; i < row ; i++) {
                                if (!BoldBIDashboard.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i])) {
                                    var selectCell = ele.children[this.cell.parentElement.rowIndex + i].children[this.cell.cellIndex];
                                    if (this.model.columns.length - selectCell.cellIndex < col)
                                        col = this.model.columns.length - selectCell.cellIndex;
                                    selectCell.colSpan = col;
                                    for (var j = 1; j < col; j++) {
                                        if (!BoldBIDashboard.isNullOrUndefined(selectCell.parentElement.children[this.cell.cellIndex + j]))
                                            selectCell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        else {
                            this.cell.colSpan = col;
                            for (var j = 1; j < col; j++) {
                                if (!BoldBIDashboard.isNullOrUndefined(this.cell.nextSibling))
                                    this.cell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
                            }
                        }
                        args.rowMerge(row);
                    }
                }
                else {
                    if (col > 1)
                        args.colMerge(col);
                    if (row > 1)
                        args.rowMerge(row);
                }
            };
        },
        _replacingContent: function () {
            var temp = document.createElement('div');
            var currentIndex = this.getCurrentIndex();
            var contentTable = this.getContentTable()[0];
            var colGroup = bbdesigner$(contentTable).find("colgroup").first();
            var rowHeight = this.getRowHeight();
            colGroup.replaceWith(this._getMetaColGroup());
           (this.model.detailsTemplate != null || this.model.childGrid!=null)&& colGroup.prepend(this._getIndentCol());
            var tbody = contentTable.tBodies[0];
            var currentData = this.model.currentViewData;
            if (!BoldBIDashboard.isNullOrUndefined(this._currentPageData)) {
                this._virtualLoadedRecords[this._currentPage()] = this._currentPageData;
                this._currentPageData = null;
            }
            else
                this._virtualLoadedRecords[this._currentPage()] = currentData;
            var elementTbody = bbdesigner$("<tbody></tbody>").append(bbdesigner$.render[this._id + "_JSONTemplate"](currentData));
            var proxy = this;
            var bbdesigner$elementTbody = elementTbody.children("tr");
            if (this._allowcolumnSelection && this.selectedColumnIndexes.length > 0) {
                for (var index = 0; index < this.selectedColumnIndexes.length; index++) {
                    var ind = this.selectedColumnIndexes[index] + 1;
                    bbdesigner$elementTbody.find('td:nth-of-type(' + ind + ')').addClass("e-columnselection");
                }
            }
            this.virtualLoadedPages.push(currentIndex >= 0 ? currentIndex : 0);
            if (this._lastRow) {
                var currElementsLength = this._virtualLoadedRecords[this._currentPage()].length;
                bbdesigner$elementTbody.slice(-currElementsLength).attr('name', currentIndex);
                var prevPageElements = bbdesigner$elementTbody.slice(0, bbdesigner$elementTbody.length - currElementsLength);
                if (prevPageElements.length) {
                    var prevPage = ((this._currentPage() - 2) * (this.model.pageSettings.pageSize));
                    prevPageElements.attr('name', prevPage);
                    this.virtualLoadedPages[this.virtualLoadedPages.length - 1] = prevPage >= 0 ? prevPage : 0;
                    this.virtualLoadedPages.push(currentIndex >= 0 ? currentIndex : 0);
                }
            }
            else
                bbdesigner$(bbdesigner$elementTbody).attr('name', currentIndex);
            var orderedVirtualPages = BoldBIDashboard.dataUtil.mergeSort(BoldBIDashboard.distinct(this.virtualLoadedPages));
            var minValue = BoldBIDashboard.dataUtil.min(orderedVirtualPages);
            var maxValue = BoldBIDashboard.dataUtil.max(orderedVirtualPages);
            bbdesigner$(tbody).children(".e-virtualrow").remove();
            for (var i = 0; i < orderedVirtualPages.length; i++) {
                var val = orderedVirtualPages[i];
                var pVal = orderedVirtualPages[i - 1];
                if (val != this.orderedVirtualLoadedPage[i] || this.orderedVirtualLoadedPage[i] == undefined) {
                    if (pVal != undefined)
                        bbdesigner$elementTbody.insertAfter(bbdesigner$(tbody).children('[name=' + pVal + ']:last'));
                    else
                        bbdesigner$elementTbody.insertBefore(bbdesigner$(tbody).children('[name=' + this.orderedVirtualLoadedPage[i] + ']:first'));
                    this.orderedVirtualLoadedPage = orderedVirtualPages;
                }
                if (val != 0) {
                    var prevValue = val == minValue ? minValue : pVal;
                    var middleRows = val - prevValue - proxy.model.pageSettings.pageSize;
                    if (middleRows > 0) {
                        var virtualTRMiddle = document.createElement("tr");
                        bbdesigner$(virtualTRMiddle).addClass("e-virtualrow").css("height", rowHeight * middleRows).insertBefore(bbdesigner$(tbody).children('[name=' + val + ']:first'));
                    }
                }
                if (val == maxValue) {
                    var bottomRows = proxy._gridRecordsCount - maxValue - proxy.model.pageSettings.pageSize;
                    if (bottomRows > 0) {
                        var virtualTRBottom = document.createElement("tr");
                        bbdesigner$(virtualTRBottom).addClass("e-virtualrow").css("height", rowHeight * bottomRows).appendTo(tbody);
                    }
                }
            }
            if (minValue > 0) {
                var virtualTRTop = document.createElement("tr");
                bbdesigner$(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * minValue).prependTo(tbody);
            }
            var bbdesigner$content = this.getContent();
            var focusTR = bbdesigner$(tbody).children("tr[name=" + currentIndex + "]")[0];
            var focusPrev = focusTR.previousSibling;
            var con = bbdesigner$content.height();
            var focus = focusTR.offsetTop
            if (this._virtaulUnSel) {
                var virtualClone = bbdesigner$.extend(true, [], this._virtaulUnSel);
                for (var i = 0; i < virtualClone.length; i++) {
                    var row = virtualClone[i];
                    var page = this.model.pageSettings.currentPage;
                    var corresPage = row % this.model.pageSettings.pageSize == 0 ? parseInt(row / this.model.pageSettings.pageSize) : parseInt(row / this.model.pageSettings.pageSize) + 1;
                    if (corresPage == page) {
                        var index = row % this.model.pageSettings.pageSize;
                        var bbdesigner$row = bbdesigner$(tbody).find("tr[name=" + currentIndex + "]").eq(index);
                        bbdesigner$row.attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                        var removeIndex = this._virtaulUnSel.indexOf(row);
                        if (removeIndex != -1)
                            this._virtaulUnSel.splice(removeIndex, 1);
                    }
                }
            }
            if ((focusTR && focusPrev && ((this._virIndex || bbdesigner$(focusPrev).hasClass("e-virtualrow")) || focusPrev.offsetTop > (currentIndex * con))
            && (this._gridRecordsCount - currentIndex >= this.model.pageSettings.pageSize || focusTR.offsetParent.offsetHeight - focus < con)) || this._lastRow) {
                if (this._lastRow) this._lastRow = false;
                if (this._virIndex) this._virIndex = false;
                this._isVirtualRecordsLoaded = true;
                //this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
                bbdesigner$content.find(".e-content").scrollTop(focus);
                this._scrollValue = this.getContent()[0].firstChild.scrollTop;
            }
            var bbdesigner$contentTableTr = bbdesigner$(contentTable).get(0);
            var tFirst = temp.firstChild;
            this._currentJsonData = currentData;
            this._gridRows = bbdesigner$(contentTable).get(0).rows;
            var lastVirtualRow = bbdesigner$(contentTable).find(".e-virtualrow").last();
            var lastVirtualRowHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? (lastVirtualRow.height() - (bbdesigner$(contentTable).height() - (this._gridRecordsCount * rowHeight))) : 1;
            lastVirtualRow.css("height", lastVirtualRowHeight);
            this._eventBindings();
        },
		_replacingVirtualContent: function () {                  
            var contentTable = this.getContentTable()[0];                            
            var currentLoadedIndexes = this._currentLoadedIndexes;            
            var tempTbody = bbdesigner$("<tbody></tbody>");		                   
            if (this._checkCurrentVirtualView(this._virtualLoadedRows, this._currentVirtualIndex)) {
				var currentRows = [];
                for (var i = 0; i < currentLoadedIndexes.length; i++) {
					bbdesigner$.merge(currentRows, this._virtualLoadedRows[currentLoadedIndexes[i]]);                    					
                }
				bbdesigner$(tempTbody).append(currentRows);
            }
            else {
				var elementTbody = bbdesigner$("<tbody></tbody>"); 				
                for (var i = 0; i < currentLoadedIndexes.length; i++) {					
                    var currentIndex = currentLoadedIndexes[i], virtualRow = this._virtualLoadedRows[currentIndex];                  
                    if (!virtualRow) {
                        var elementTbody = bbdesigner$("<tbody></tbody>").append(bbdesigner$.render[this._id + "_JSONTemplate"](this._virtualLoadedRecords[currentIndex]));                        
                        var bbdesigner$elementTbody = elementTbody[0].rows, length = bbdesigner$elementTbody.length - 1;                        
                        bbdesigner$(bbdesigner$elementTbody[length]).addClass("e-virtualview" + currentIndex);
						var hex = currentIndex.toString(32);
                        var vRows = bbdesigner$(bbdesigner$elementTbody).attr('name', hex);                        
                        if (vRows.length == this._virtualRowCount || currentIndex == this._totalVirtualViews){
                            this._virtualLoadedRows[currentIndex] = vRows;
                            tempTbody.append(bbdesigner$elementTbody);
                        }
                    }
                    else {
                        if (currentIndex < this._currentVirtualIndex) {
                            var vRow = tempTbody.find(".e-virtualview" + currentIndex);
                            if (vRow.length)
                                bbdesigner$(virtualRow).insertBefore(vRow);
                            else
                                tempTbody.prepend(virtualRow);
                        }
                        else
                            bbdesigner$(virtualRow).insertAfter(tempTbody.find(".e-virtualview" + (currentIndex - 1)));
                    }					
                }				
            }						   						
            contentTable.replaceChild(tempTbody[0], contentTable.lastChild);           
            bbdesigner$(contentTable.rows).removeClass("e-hover");
			this._setVirtualTopBottom();
			if(this._isThumbScroll || this._remoteRefresh){				
				//this._scrollObject.refresh();				
				this._scrollObject._content[0].scrollTop = this._scrollObject.scrollTop();
                this._isThumbScroll = this._remoteRefresh = false;
            }
			if(this.model.allowSelection)							
				this._checkVirtualSelection();																						
			this._gridRows = contentTable.rows;
			if(!this._checkCurrentVirtualView(this._queryCellView, this._currentVirtualIndex))            
				this._eventBindings();			
			if(this.model.queryCellInfo || this.model.rowDataBound){
				for(var i = 0; i < this._currentLoadedIndexes.length; i++){
					if(bbdesigner$.inArray(this._currentLoadedIndexes[i], this._queryCellView) == -1)
						this._queryCellView.push(this._currentLoadedIndexes[i]);						
				}
			}
        },
		_setVirtualTopBottom: function(){
			var contentTable = this.getContentTable()[0];
			var rowHeight = this._vRowHeight;
			var orderedVirtualNames = BoldBIDashboard.dataUtil.mergeSort(BoldBIDashboard.distinct(this._currentLoadedIndexes));				
			var minValue = BoldBIDashboard.dataUtil.min(orderedVirtualNames);
			var maxValue = BoldBIDashboard.dataUtil.max(orderedVirtualNames);
			var recordsCount = this._getVirtualTotalRecord(), botHeight, maxViewValue;
			if(this.model.scrollSettings.virtualScrollMode == "continuous" && this._virtualLoadedRows[maxValue + 1]	){
				var keys = Object.keys(this._virtualLoadedRows);
				maxViewValue =  parseInt(BoldBIDashboard.dataUtil.max(keys), 10);
				maxValue = maxViewValue - maxValue;
			}			
			botHeight = (maxValue * this._virtualRowCount * rowHeight);
			if(bbdesigner$.inArray(this._totalVirtualViews, this._currentLoadedIndexes) != -1 && this._currentVirtualIndex != this._totalVirtualViews)
				botHeight = (recordsCount - (this._virtualRowCount - this._lastViewData)) * rowHeight;										
			var vBot = (recordsCount * rowHeight) - botHeight;	
			if(this.model.scrollSettings.virtualScrollMode == "continuous" && !this._virtualLoadedRows[maxValue + 1]){				
				vBot = maxViewValue && maxViewValue <=  maxValue + 1 ? vBot : 1;			 				
			}
			this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
			var max = 1000000;							
			if (vBot > 0 && this._getVirtualTotalRecord() > this._virtualRowCount * 2){ 
				if(Math.round(vBot).toString().length < 7)
					BoldBIDashboard.buildTag("div.e-virtualbottom", "", { height: vBot }).insertAfter(contentTable);
				else {					
					BoldBIDashboard.buildTag("div.e-virtualbottom").insertAfter(contentTable);
					var length = Math.ceil(vBot / max);
					for(var i = 0; i < length; i++){
						var divHeight = max;
						if(i == length - 1) divHeight = vBot % max;
						bbdesigner$(contentTable).next().append(BoldBIDashboard.buildTag("div", "", { height: divHeight }));
					}
				}							
			}
			if (minValue > 1) {				
				var vTop =  (minValue - 1) * this._virtualRowCount * rowHeight;																	
				if(Math.round(vTop).toString().length < 7)
					BoldBIDashboard.buildTag("div.e-virtualtop", "", { height: vTop }).insertBefore(contentTable);			
				else {					
					BoldBIDashboard.buildTag("div.e-virtualtop").insertBefore(contentTable);
					var length = Math.ceil(vTop / max);
					for(var i = 0; i < length; i++){
						var divHeight = max;
						if(i == length - 1) divHeight = vTop % max;
						bbdesigner$(contentTable).prev().append(BoldBIDashboard.buildTag("div", "", { height: divHeight }));
					}
				}								
			}      				
			if(this._scrollObject.model.scrollTop != this._scrollValue)
				this.getContent().BoldBIDashboardScroller("model.scrollTop", this._scrollValue);				
        },
		_checkVirtualSelection: function(){
			var contentTable = this.getContentTable()[0];
			for(var i = 0; i < this.selectedRowsIndexes.length; i++){
				var selectedIndex = this.selectedRowsIndexes[i];
				var viewIndex = this._getSelectedViewData(selectedIndex).viewIndex;
				if(bbdesigner$.inArray(viewIndex, this._currentLoadedIndexes) != -1){					
					var selIndex = selectedIndex % this._virtualRowCount + this._currentLoadedIndexes.indexOf(viewIndex) * this._virtualRowCount;	
					if(!bbdesigner$(contentTable.rows[selIndex].cells).hasClass("e-selectionbackground")){
						bbdesigner$(bbdesigner$(contentTable.rows[selIndex]).attr("aria-selected", "true")[0].cells).addClass("e-selectionbackground e-active");							
						this.model.selectedRecords[i] = this._virtualLoadedRecords[viewIndex][selIndex % this._virtualRowCount];
					}
				}
			}
			for(var i = 0; i < this._rowIndexesColl.length; i++){
				var selectedIndex = this._rowIndexesColl[i];
				var viewIndex = this._getSelectedViewData(selectedIndex).viewIndex;
				if((bbdesigner$.inArray(viewIndex, this._currentLoadedIndexes) != -1 && bbdesigner$.inArray(selectedIndex, this._virtualRowCellSelIndex) == -1) || this._virtualDataRefresh){
					var curIndex = bbdesigner$.inArray(selectedIndex, this._rowIndexesColl);
					var cellIndexes = this.selectedRowCellIndexes[curIndex].cellIndex;
					for(var j = 0; j < cellIndexes.length; j++)
						this._selectMultipleCells(selectedIndex, cellIndexes[j]);						
				}
			}
			var selectedRows = bbdesigner$(contentTable.rows).find(".e-active, .e-cellselectionbackground").closest("tr");
			for(var i = 0; i < selectedRows.length; i++){
				var limit = parseInt(bbdesigner$(selectedRows[i]).attr("name"), 32) * this._virtualRowCount;
				var remain = this._virtualRowCount - bbdesigner$(selectedRows[i]).index() % this._virtualRowCount;	
				var current = limit - remain;
				var rowIndex = bbdesigner$(selectedRows[i]).index();
				if(this.selectedRowsIndexes.length && bbdesigner$.inArray(current, this.selectedRowsIndexes) == -1){
					this._clearVirtualSelection = true;
					this.clearSelection(rowIndex);					
				}				
				if(this._rowIndexesColl.length && bbdesigner$.inArray(current, this._rowIndexesColl) == - 1)											
					bbdesigner$(this.getRowByIndex(rowIndex)[0].cells).removeClass("e-cellselectionbackground e-activecell");											
			}	
			bbdesigner$(contentTable.rows).find('.e-columnselection').removeClass('e-columnselection');
            for (var index = 0; index < this.selectedColumnIndexes.length; index++) {
				var ind = this.selectedColumnIndexes[index] + 1;
                bbdesigner$(contentTable.rows).find('td:nth-of-type(' + ind + ')').addClass("e-columnselection");
            }  				
			this._clearVirtualSelection = false;
		},
        _refreshPagerTotalRecordsCount: function () {
            if (this.model.filterSettings.filteredColumns.length)
                this.getPager().BoldBIDashboardPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
            else
                this.getPager().BoldBIDashboardPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
        },
        _maxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, bbdesigner$.map(bbdesigner$('body *'), function (e, n) {
                if (bbdesigner$(e).css('position') == 'absolute')
                    return parseInt(bbdesigner$(e).css('z-index')) || 1;
            }));
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },
        _keyPressed: function (action, target, e, event) {
            var bbdesigner$target = bbdesigner$(target);
            if (bbdesigner$target.hasClass('e-tooltxt') && e.code == 13) {
                var args = { currentTarget: target, target: target.firstChild }, bbdesigner$toolbar = bbdesigner$(target).closest(".e-gridtoolbar");
                bbdesigner$toolbar.BoldBIDashboardToolbar("instance")._trigger("click", args);
                return false;
            }
            if (bbdesigner$target.hasClass('e-ddl') && e.code == 13 && bbdesigner$(document.activeElement).parents('td').hasClass("e-templatecell") )
            return true;
            if (!this.model.allowKeyboardNavigation || (target.tagName == 'INPUT' && this.model.keyConfigs[action].indexOf(",") == -1 && e.code != 40 && e.code != 38 && e.code != 13 && e.code != 27 && e.code != 9) || String.fromCharCode(e.code).toLowerCase() == this.element[0].accessKey.toLowerCase())
                return true;
            if (bbdesigner$(target).prop("type") == "checkbox" && (e.code != 13 && e.code != 9 && e.code!=27))
                return true;
            if (this.model.editSettings.editMode == "batch" && (target.tagName == 'INPUT' && e.code != 13 && e.code != 9 && e.code!=27) && ((target.selectionStart != 0 && action != "moveCellRight") || (target.selectionEnd != target.value.length && action != "moveCellLeft")))
				return true;
            if (this.model.allowFiltering && (bbdesigner$target.hasClass('e-filtertext') && e.code == 13) || (bbdesigner$target.hasClass('e-fltrbtn') && e.code == 13))
                return true;
            if ((this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") && bbdesigner$(target).closest("#" + this._id + "EditForm").length)
                return true;
            else if (bbdesigner$(target).parent().siblings("#" + this._id + "EditForm").length)
                return true;
            if (e.code == 13 && bbdesigner$target.parent().hasClass("e-unboundcelldiv"))
                return true;
            if (e.code == 13 && target.tagName == 'INPUT' && bbdesigner$target.closest("#" + this._id + "_search").length)
                action = "searchRequest";
            if (e.code == 13 && bbdesigner$(target).hasClass("e-gridtoolbar")) {
                toolbarId = bbdesigner$target.find(".e-hover").attr("Id");
                action = "toolbarOperationRequest";
            }
            if (bbdesigner$(target).find("input.e-dropdownlist").attr("aria-expanded") == "true" && this.model.isEdit && action == "saveRequest")
                return true;
            if (this.getPager() != null)
                var pager = this.getPager().BoldBIDashboardPager("model"), pageIndex = pager.currentPage;
            var returnValue = false, curEl, bbdesigner$target = bbdesigner$(target);
            if (bbdesigner$target.closest(".e-grid").attr("Id") !== this._id)
                return;
            switch (action) {
                case "insertRecord":
                    if (BoldBIDashboard.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_add");
                    break;
                case "toolbarOperationRequest":
                    this._toolbarOperation(toolbarId);
                    this.element.focus();
                    break;
                case "searchRequest":
                    this.search(bbdesigner$target.val());
                    break;
                case "saveRequest":
                    if (BoldBIDashboard.gridFeatures.edit) {
                        bbdesigner$target.blur();
                        if (this.model.editSettings.editMode == "batch") {
                            var tr = bbdesigner$(this.getRowByIndex(this._bulkEditCellDetails.rowIndex))
                            if(this.model.isEdit && tr.hasClass('e-insertedrow'))
                                this._batchCellValidation(this._bulkEditCellDetails.rowIndex);
                            this._moveCurrentCell("down");
                        }
                        else
                            this._toolbarOperation(this._id + "_update");
                            event.stopPropagation();
                    }
                    break;
                case "cancelRequest":
                    if (BoldBIDashboard.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_cancel");
                    break;
                case "deleteRecord":
                    if (BoldBIDashboard.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_delete");
                    break;
                case "editRecord":
                    if (BoldBIDashboard.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_edit");
                    break;
                case "totalGroupCollapse":
                    if (BoldBIDashboard.gridFeatures.group) {
                        this.collapseAll();
                        this.element.focus();
                    }
                    break;
                case "totalGroupExpand":
                    if (BoldBIDashboard.gridFeatures.group) {
                        this.expandAll();
                        this.element.focus();
                    }
                    break;
                case "selectedGroupExpand":
                    if (BoldBIDashboard.gridFeatures.group) {
                        this._bbdesigner$currentTr = bbdesigner$(this.getRows()).eq(this._selectedRow());
                        curEl = this._bbdesigner$currentTr.parents("tr").first().prev().find(".e-recordpluscollapse");
                        this.expandCollapse(curEl);
                    }
                    break;
                case "selectedGroupCollapse":
                    if (BoldBIDashboard.gridFeatures.group) {
                        this._bbdesigner$currentTr = bbdesigner$(this.getRows()).eq(this._selectedRow());
                        curEl = this._bbdesigner$currentTr.parents("tr").first().prev().find(".e-recordplusexpand");
                        this.expandCollapse(curEl);
                    }
                    break;
                case "firstRowSelection":
                    if (BoldBIDashboard.gridFeatures.selection)
                        this.selectRows(0);
                    break;
                case "lastRowSelection":
                    if (BoldBIDashboard.gridFeatures.selection)
                        if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(this.getRows()[0]))
                            lastRow = bbdesigner$(this.getRows()[0]).length - 1;
                        else
                            lastRow = bbdesigner$(this.getRows()).length - 1;
                        this.selectRows(lastRow);
                    break;
                case "rowUpSelection":
                    this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                    var index = this._traverseRow != null ? this._traverseRow : this._selectedRow();
                    if (index > 0) {
                        this._nextRow = index;
                        this._prevRow = index - 1;
                        var bbdesigner$removeHover = bbdesigner$(this.getContent().find("tr.e-traverse")[0]);
                        bbdesigner$removeHover.removeClass("e-traverse");
                        this.getRowByIndex(this._prevRow).addClass("e-traverse");
                        var selectedRows = this.getContent().find("tr.e-traverse");
                        this._traverseRow = this.getIndexByRow(selectedRows);
                    }
                    break;
                case "rowDownSelection":
                    this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                    var index = this._traverseRow != null ? this._traverseRow : this._selectedRow();
                    if ((index + 1 < this.model.currentViewData.length) || (this.model.scrollSettings.allowVirtualScrolling)) {
                        this._prevRow = index;
                        this._nextRow = index + 1;
                        var bbdesigner$removeHover = bbdesigner$(this.getContent().find("tr.e-traverse")[0]);
                        bbdesigner$removeHover.removeClass("e-traverse");
                        this.getRowByIndex(this._nextRow).addClass("e-traverse");
                        var selectedRows = this.getContent().find("tr.e-traverse");
                        this._traverseRow = this.getIndexByRow(selectedRows);
                    }
                    break;
                case "randomSelection":
                    this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                    if (this.model.selectionType == "multiple")
                        this.multiSelectCtrlRequest = true;
                    var selectedRows = this.getContent().find("tr.e-traverse");
                    this._traverseRow = this.getIndexByRow(selectedRows);
                    if (this._traverseRow != -1) {
                        if (this.model.selectionSettings.enableToggle && this.getSelectedRecords().length == 1 && bbdesigner$.inArray(this._traverseRow, this.selectedRowsIndexes) != -1)
                            this.clearSelection(selectedIndex);
                        else
                            this.selectRows(this._traverseRow);
                    }
                    this.getRowByIndex(index).removeClass("e-traverse");
                    this.multiSelectCtrlRequest = false;
                    break;
                case "upArrow":
                    this.multiSelectCtrlRequest = false;
                    this._traverseRow = null;
					if( this.model.isEdit && bbdesigner$target.hasClass('e-ddl'))
						break;
					if (BoldBIDashboard.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined) && (document.activeElement.id == this._id) || this.model.editSettings.editMode == "batch") {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
						if (this._selectedRow() > 0 && !this.model.scrollSettings.enableVirtualization) {
                            this.selectRows(this._selectedRow() - 1);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("up");
                        }
                        if (this._previousRowCellIndex && this._previousRowCellIndex.length != 0 && this._previousRowCellIndex[0][0] != 0 && this._allowcellSelection) {
                            this.selectCells([[this._previousRowCellIndex[0][0] - 1, this._previousRowCellIndex[0][1]]]);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("down");
                        }
                    }
                    break;
                case "downArrow":
                    this.multiSelectCtrlRequest = false;
                    this._traverseRow = null;
					if( this.model.isEdit && bbdesigner$target.hasClass('e-ddl'))
						break;
					if (BoldBIDashboard.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined) && (document.activeElement.id == this._id) || this.model.editSettings.editMode == "batch") {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = this._excludeDetailRows().length - 1;
                        if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(this.getRows()[0]))
                            lastRow = this.getRows()[0].length - 1;
                        if (this._selectedRow() != lastRow && this._selectedRow() != -1 && !this.model.scrollSettings.enableVirtualization) {
                            this.selectRows(this._selectedRow() + 1);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("down");
                        }
                        if (this._previousRowCellIndex && this._previousRowCellIndex.length != 0 && this._previousRowCellIndex[0][0] != lastRow && this._allowcellSelection) {
                            this.selectCells([[this._previousRowCellIndex[0][0] + 1, this._previousRowCellIndex[0][1]]]);
                            if (this.model.editSettings.editMode == "batch")
                                this._moveCurrentCell("down");
                        }
                    }
                    break;
                case "rightArrow":
                    if (BoldBIDashboard.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = bbdesigner$(this.getRows()).length - 1;
                        if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] == this.model.columns.length - 1 && this._previousRowCellIndex[0][0] != lastRow) {
                            this.selectCells([[this._previousRowCellIndex[0][0] + 1, [0]]]);
                        } else if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] != this.model.columns.length - 1)
                            this.selectCells([[this._previousRowCellIndex[0][0], [parseInt(this._previousRowCellIndex[0][1]) + 1]]]);

                    }
                    break;
                case "leftArrow":
                    if (BoldBIDashboard.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] == 0 && this._previousRowCellIndex[0][0] != 0)
                            this.selectCells([[this._previousRowCellIndex[0][0] - 1, [this.model.columns.length - 1]]]);
                        else if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] != 0)
                            this.selectCells([[this._previousRowCellIndex[0][0], [parseInt(this._previousRowCellIndex[0][1]) - 1]]]);

                    }
                    break;
                case "firstCellSelection":
                    if (BoldBIDashboard.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = bbdesigner$(this.getRows()).length - 1;
                        lastRow > -1 && this.selectCells([[0, [0]]]);
                    }
                    break;
                case "lastCellSelection":
                    if (BoldBIDashboard.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(this.getRows()[0]))
                            var lastRow = this.getRows()[0].length - 1;
                        else
                            lastRow = bbdesigner$(this.getRows()).length - 1;
                        lastRow > -1 && this.selectCells([[lastRow, [this.model.columns.length - 1]]]);
                    }
                    break;
                case "nextPage":
                    if (this.getPager() != null)
                        pageIndex = pageIndex + 1;
                    if (this.getBrowserDetails().browser == "msie")
                        this.element.focus();
                    break;
                case "previousPage":
                    if (this.getPager() != null)
                        pageIndex = pageIndex - 1;
                    if (this.getBrowserDetails().browser == "msie")
                        this.element.focus();
                    break;
                case "lastPage":
                    if (this.getPager() != null)
                        pageIndex = pager.totalPages;
                    break;
                case "firstPage":
                    if (this.getPager() != null)
                        pageIndex = 1;
                    break;
                case "nextPager":
                    if (this.getPager() != null)
                        pageIndex = Math.ceil(pager.currentPage / pager.pageCount) * pager.pageCount + 1;
                    break;
                case "previousPager":
                    if (this.getPager() != null)
                        pageIndex = (Math.floor(pager.currentPage / pager.pageCount) - 1) * pager.pageCount + 1;
                    break;
                case "moveCellLeft":
                    if (this.model.editSettings.editMode == "batch"){
						this._tabKey = true;
                        returnValue = this._moveCurrentCell("left");
					}
                    else
                        returnValue = true;
                    break;
                case "moveCellRight":
                    if (this.model.editSettings.editMode == "batch" && bbdesigner$target){
						this._tabKey = true;
                        returnValue = this._moveCurrentCell("right");
					}
                    else
                        returnValue = true;
                    break;
                case "multiSelectionByDownArrow":
                    if (BoldBIDashboard.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
                        var lastRow = this._excludeDetailRows().length - 1, bbdesigner$target = this.element.find('.e-gridcontent').find('.e-rowcell');
                        if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(this.getRows()[0]))
                            lastRow = this.getRows()[0].length - 1;
                        if (this._selectedRow() <= lastRow && this._selectedRow() != -1) {
                            var selectedRow = this._selectedRow() + 1, fromIndex = this._previousIndex;
                            this.selectRows(fromIndex, selectedRow, bbdesigner$target, e);
                            if ((selectedRow - 1) == lastRow) {
                                this.selectRows(fromIndex, lastRow);
                                selectedRow = lastRow;
                            }
                        }
                        this._selectedRow(selectedRow);
                        this._previousIndex = fromIndex;
                    }
                    this.model.editSettings.editMode == "batch" && this.element.focus();
                    break;
                case "multiSelectionByUpArrow":
                    var firstRow = 0;
                    if (BoldBIDashboard.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
                        var lastRow = this._excludeDetailRows().length - 1, bbdesigner$target = this.element.find('.e-gridcontent').find('.e-rowcell');
                        if (this._selectedRow() >= 0 && this._selectedRow() >= -1) {

                            var selectedRow = this._selectedRow() - 1, fromIndex = this._previousIndex;
                            this.selectRows(fromIndex, selectedRow, bbdesigner$target, e);
                            if (selectedRow < 0) {
                                this.selectRows(fromIndex, firstRow);
                                selectedRow = firstRow;
                            }
                        }
                        this._selectedRow(selectedRow);
                        this._previousIndex = fromIndex;
                    }
                    this.model.editSettings.editMode == "batch" && this.element.focus();
                    break;
                default:
                    returnValue = true;
            }
            if (this.getPager() != null && pageIndex <= pager.totalPages && pager.currentPage !== pageIndex && action != "searchRequest" && action !== "deleteRecord")
                this.getPager().BoldBIDashboardPager("goToPage", pageIndex);
            return returnValue;
        },
        _findColumnsWidth: function () {
            var j = this.getHeaderTable().find(".e-headercell").not(".e-stackedHeaderCell, .e-detailheadercell"), index = 0;           
            for (var i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i]["visible"])
                    this.columnsWidthCollection[i] = j.eq(i + index).outerWidth();
            }
        },
        _calculateWidth: function () {
            var j = this.getHeaderTable().find(".e-columnheader").last().find("th:visible"), width = 0;
            for (var i = 0; i < j.length; i++)
                width += j.eq(i).outerWidth();
            return width;

        },
        _initIndicators: function () {
            var indicatorId = this._id + "_ColumnDropIndicator";
            if (bbdesigner$("#" + indicatorId).length)
                bbdesigner$("#" + indicatorId).remove();
            this._Indicator = document.createElement("DIV");
            bbdesigner$(this._Indicator).attr('id', indicatorId).addClass("e-columndropindicator").addClass("e-dropAcceptor").appendTo(document.body);
            bbdesigner$(this._Indicator).css({ "display": "none" });

        },
	_refreshGridFooterColGroup: function () {
            this.getFooterTable().find("colgroup").remove();
            this._scrollFooterColgroup();
        },
        _refreshGroupSummary: function () {
            var headerCols = this.getHeaderContent().find("colgroup col").clone();
            headerCols.splice(0, this.model.groupSettings.groupedColumns.length);
            var bbdesigner$gsColgroup = this.getContentTable().find(".e-groupsummary colgroup");
            for (var i = 0; i < bbdesigner$gsColgroup.length; i++) {
                if (!bbdesigner$(bbdesigner$gsColgroup[i]).find(".e-summary").is("visible"))
                    bbdesigner$(bbdesigner$gsColgroup[i]).find(".e-summary").show();
                bbdesigner$(bbdesigner$gsColgroup[i]).find("col:not('.e-summary')").remove();
                bbdesigner$(bbdesigner$gsColgroup[i]).append(headerCols.clone());
            }
        },
        
        reorderColumns: function (fromfname, tofname) {
            var fromindex = this.model.columns.indexOf(this.getColumnByField(fromfname));
            var toindex = this.model.columns.indexOf(this.getColumnByField(tofname));
            if (fromindex == -1 || toindex == -1) return;
            this.set_dropColumn(fromindex, toindex);
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
            if (this.model.scrollSettings.allowVirtualScrolling){
				if(this.model.scrollSettings.enableVirtualization){
					this._virtualDataRefresh = true;
					this._queryCellView = [];
					this._virtualLoadedRows = {};
					this._refreshVirtualView(this._currentVirtualIndex);								
				}
				else
					this._refreshVirtualContent(); 
			}
        },
        
        columns: function (details, action) {
            if (BoldBIDashboard.isNullOrUndefined(details)) return;
            var isString = false;
            if (typeof details === "string") {
                details = [details];
                isString = true;
            }
            else if (details instanceof Array && details.length && typeof details[0] === "string")
                isString = true;
            for (i = 0; i < details.length; i++) {
                var index = bbdesigner$.inArray(this.getColumnByField(isString ? details[i] : details[i]["field"]), this.model.columns);
                if (action == "add" || BoldBIDashboard.isNullOrUndefined(action)) {
                    if (index == -1)
                        this.model.columns.push(isString ? { field: details[i] } : details[i]);
                    else
                        this.model.columns[index] = isString ? { field: details[i] } : details[i];
                }
                else {
                    if (index != -1)
                        this.model.columns.splice(index, 1);
                }
            }            
            this.columnsWidthCollection = [], tooltip = false;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                this.columnsWidthCollection.push(this.model.columns[columnCount]["width"]);
                if (!BoldBIDashboard.isNullOrUndefined(tooltip))
                    tooltip = true;
            }
            this._enableRowHover(tooltip);
            this._refreshHeader();
			if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) 
				this._processEditing();
            this.refreshContent(true);
            if (this.model.allowScrolling && this.model.allowResizeToFit && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getContent().BoldBIDashboardScroller("isVScroll"))
				this._showHideScroller();
        },
        _enableRowHover: function (isTooltip) {
            var tooltip = true;
            if (BoldBIDashboard.isNullOrUndefined(isTooltip)) {
                for (var i = 0 ; i < this.model.columns.length; i++) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[i]['tooltip'])) {
                        tooltip = true;
                        break;
                    }
                }
            }
            else
                tooltip = isTooltip;
            if (this.model.enableRowHover || tooltip)
                this._on(this.element, "mouseenter mouseleave", ".e-gridcontent tr td", this._rowHover);
            else
                this._off(this.element, "mouseenter mouseleave", ".e-gridcontent tr td");
        },
        _rowHover: function (e) {
            var bbdesigner$target = bbdesigner$(e.target);
            if (this.model.scrollSettings.frozenColumns)
                var bbdesigner$gridRows = bbdesigner$(this.getRows());
            else
                var bbdesigner$gridRows = this.element.find(".e-row.e-hover,.e-alt_row.e-hover");
            if ((bbdesigner$target.closest("#" + this._id + "EditForm").length && bbdesigner$target.hasClass("e-rowcell")) || !bbdesigner$target.hasClass("e-rowcell"))
                return;
            if (e.type == "mouseenter" && bbdesigner$target.hasClass("e-gridtooltip"))
                this._showTooltip(bbdesigner$target);
            if (this.model.enableRowHover) {
                this.element.find(".e-traverse").removeClass("e-traverse");
                this._traverseRow=null;
                if (e.type == "mouseenter" && !this._dragActive) {
                     if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(bbdesigner$gridRows[0]) && !BoldBIDashboard.isNullOrUndefined(bbdesigner$gridRows[1]))	
					 {
						bbdesigner$gridRows = bbdesigner$(bbdesigner$gridRows[0]).add(bbdesigner$gridRows[1]);
						bbdesigner$gridRows.removeClass("e-hover");
						var index = this.getIndexByRow(bbdesigner$target.parent());
						index != -1 && this.getRowByIndex(index).addClass("e-hover");
					}
                 else {
                     bbdesigner$gridRows.removeClass("e-hover");
                     if( bbdesigner$target.parent().hasClass('e-row') ||bbdesigner$target.parent().hasClass ('e-alt_row'))
                         bbdesigner$target.parent().addClass("e-hover");
					}
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(bbdesigner$gridRows[0]) && !BoldBIDashboard.isNullOrUndefined(bbdesigner$gridRows[1]))
                        bbdesigner$gridRows = bbdesigner$(bbdesigner$gridRows[0]).add(bbdesigner$gridRows[1]);
                    bbdesigner$gridRows.removeClass("e-hover");
                }
            }
            return false;
        },
        _showTooltip: function (bbdesigner$target, isHeaderTooltip) {
            var index = bbdesigner$target.index(), isStack = bbdesigner$target.hasClass("e-stackedHeaderCell"), data = {};
            if (bbdesigner$target.hasClass("e-headercelldiv"))
                index = bbdesigner$target.parent(".e-headercell").index() - this.model.groupSettings.groupedColumns.length;
            if (!isStack && (this.model.childGrid || this.model.detailsTemplate))
                index--;
            if (this.model.scrollSettings.frozenColumns > 0 && (bbdesigner$target.closest(".e-movableheaderdiv").length || bbdesigner$target.closest(".e-movablecontentdiv").length))
                index = index + this.model.scrollSettings.frozenColumns;
            var col =  !isStack ? this.getColumnByIndex(index) : this._getStackedColumnByTarget(bbdesigner$target);            
            if (col["clipMode"] != BoldBIDashboard.Grid.ClipMode.Ellipsis) {
                if (col["clipMode"] == BoldBIDashboard.Grid.ClipMode.EllipsisWithTooltip) {
                    var td = bbdesigner$target;
                    if (!bbdesigner$target.find("span").hasClass("e-ellipsistooltip")) {
                        var bbdesigner$span = BoldBIDashboard.buildTag('span.e-ellipsistooltip', {}, {})
                        bbdesigner$span.html(bbdesigner$target.html());
                        td.append(bbdesigner$span);
                    }
                    td.find('span.e-ellipsistooltip').css('display', 'inline-block')
                    var width = td.find('span:first')[0].getBoundingClientRect().width;
                    td.find('span.e-ellipsistooltip').remove();
                    if (bbdesigner$target.width() > (width)) {
                        bbdesigner$target.removeAttr('title');
                        return;
                    }
                }

                var scriptElement = document.createElement("script");
                if (BoldBIDashboard.isNullOrUndefined(col["tooltip"]) && BoldBIDashboard.isNullOrUndefined(col["headerTooltip"]))
                    return;
                else {
                    var t;
                    scriptElement.id = (this._id + col.headerText + bbdesigner$.inArray(col, this.model.columns) + "_TemplateToolTip").split(" ").join("");
                    scriptElement.type = "text/x-template";
                    var tooltipType = !isHeaderTooltip ? "tooltip" : "headerTooltip";
                    if (!BoldBIDashboard.isNullOrUndefined(col[tooltipType]) && col[tooltipType].slice(0, 1) !== "#")
                        scriptElement.text = col[tooltipType];
                    else
                        t = bbdesigner$(col[tooltipType]);
                    if (t) {
                        scriptElement.text = t.html();
                        scriptElement.type = t.attr("type") || scriptElement.type;
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(t) && col[tooltipType].slice(0, 1) !== "#")
                        bbdesigner$("body").append(scriptElement);
                }
                var rowElement = bbdesigner$target.closest("tr");
                if (!bbdesigner$(rowElement).hasClass("e-columnheader") && !bbdesigner$target.hasClass("e-gridheader")) {
                    var index = this.getIndexByRow(rowElement);//get the target rowIndex
                    if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling) {
                        if (!this.model.scrollSettings.enableVirtualization)
                            index = index % this.model.pageSettings.pageSize;
                        else {
                            var nameAttr = rowElement.attr("name");
                            index = index % this._virtualRowCount;
                            var virtualIndex = parseInt(nameAttr, 32);
                            data = this._virtualLoadedRecords[virtualIndex][index];
                        }
                    }
                    else
                        data = this.getCurrentViewData()[index];//get the data corresponding to row hovered
                }
                data.value = !bbdesigner$target.hasClass("e-headercell") || isStack ? bbdesigner$target.text() : bbdesigner$target.find("e-gridheadertooltip").text();
                var str = bbdesigner$(scriptElement).render(data);
                bbdesigner$target.attr('title', str);
                if (!BoldBIDashboard.isNullOrUndefined(data.value))
                    delete data.value;
            }
            else
                bbdesigner$target.removeAttr('title');

        },
        _rightClickHandler: function (e) {
            e.preventDefault(); var browser = BoldBIDashboard.browserInfo();
            if (e.which == 3 || (browser.name == "msie" && browser.version == "8.0")) {
                var args = {};
                bbdesigner$target = bbdesigner$(e.target);
                bbdesigner$gridRow = bbdesigner$(this.getRows());
                if (this.getContentTable().has(bbdesigner$target).length) {
                    var index = bbdesigner$gridRow.index(bbdesigner$target.parent());					
					var bbdesigner$row = this.getRowByIndex(index);
					var bbdesigner$data = this._currentJsonData[index];
					if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){	
						var viewDetails = this._getSelectedViewData(index, bbdesigner$target);					
						bbdesigner$data = viewDetails.data;				
						index = viewDetails.rowIndex;					
					}
                    if (index == -1)
                        return;
                    args = { rowIndex: index, row: bbdesigner$row, data: bbdesigner$data, cellIndex: bbdesigner$target.index(), cellValue: bbdesigner$target.html(), cell: bbdesigner$target };
                }
                else if (this.getHeaderTable().has(bbdesigner$target).length) {
                    var index = 0
                    bbdesigner$th = this.getHeaderTable().find('th').not('.e-detailheadercell,.e-grouptopleftcell,.e-filterbarcell');
                    if (bbdesigner$target.is('.e-headercelldiv'))
                        index = bbdesigner$th.index(bbdesigner$target.closest('.e-headercell'));
                    else
                        index = bbdesigner$th.index(bbdesigner$target);
                    if (index == -1)
                        return;
                    args = { headerIndex: index, headerText: this.getColumnFieldNames()[index], headerCell: bbdesigner$th.eq(index), column: this.getColumnByIndex(index) }
                }
                else if (bbdesigner$target.is('.e-pager') || (this.getPager() != null && this.getPager().has(bbdesigner$target).length)) {
                    args = { pager: this.model.pageSettings }
                }
                this._trigger("rightClick", args);
            }
        },
        _touchGrid: function (e) {
            var curPage = this._currentPage();
            switch (e.type) {
                case "swipeleft":
                    if (this.model.allowPaging && curPage != this.model.pageSettings.totalPages && !this.model.isEdit)
                        this.element.BoldBIDashboardGrid("gotoPage", curPage + 1);
                    break;
                case "swiperight":
                    if (this.model.allowPaging && curPage > 1 && !this.model.isEdit)
                        this.element.BoldBIDashboardGrid("gotoPage", curPage - 1);
                    break;
            }
        },
        _recorddblClickHandler: function (e) {
            var args = {}, bbdesigner$target = bbdesigner$(e.target).is(".e-rowcell") ? bbdesigner$(e.target) : bbdesigner$(e.target).closest("td");
            if (bbdesigner$target.closest(".e-grid").attr("id") !== this._id) return;
            if ((!bbdesigner$target.is('.e-rowcell') && !bbdesigner$target.closest("td").is(".e-rowcell")) || (bbdesigner$target.closest('.e-editcell,.e-editedbatchcell').length > 0))
                return;
            var index = this.getIndexByRow(bbdesigner$target.closest('tr'));
			var bbdesigner$row = this.getRowByIndex(index);
			var bbdesigner$data = this._currentJsonData[index];
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){	
				var viewDetails = this._getSelectedViewData(index, bbdesigner$target);					
				bbdesigner$data = viewDetails.data;				
				index = viewDetails.rowIndex;					
			}
            var cellIndx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? bbdesigner$target.index() - 1 : bbdesigner$target.index();
            args = { rowIndex: index, row: bbdesigner$row, data: bbdesigner$data, cell: bbdesigner$target, cellIndex: cellIndx, columnName: this.getColumnByIndex(cellIndx)["headerText"], cellValue: bbdesigner$target.text() };
            this._trigger("recordDoubleClick", args);
        },
        _recordClick: function (e) {
            var args = {}, bbdesigner$target = bbdesigner$(e.target).is(".e-rowcell") ? bbdesigner$(e.target) : bbdesigner$(e.target).closest("td");
            if (bbdesigner$target.closest(".e-grid").attr("id") !== this._id) return;
            if ((!bbdesigner$target.is('.e-rowcell') && !bbdesigner$target.closest("td").is(".e-rowcell")) || (bbdesigner$target.closest('.e-editcell,.e-editedbatchcell')).length > 0)
                return;
            var index = this.getIndexByRow(bbdesigner$target.closest('tr'));
			var bbdesigner$row = this.getRowByIndex(index);
			var bbdesigner$data = this._currentJsonData[index];
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){	
				var viewDetails = this._getSelectedViewData(index, bbdesigner$target);					
				bbdesigner$data = viewDetails.data;				
				index = viewDetails.rowIndex;					
			}			 
            var cellIndx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? bbdesigner$target.index() - 1 : bbdesigner$target.index();
            args = { rowIndex: index, row: bbdesigner$row, data: bbdesigner$data, cell: bbdesigner$target, cellIndex: cellIndx, columnName: this.getColumnByIndex(cellIndx)["headerText"], cellValue: bbdesigner$target.text() };
            this._trigger("recordClick", args);
        },
        _headerMouseDown: function (e) {
            if ((bbdesigner$(e.target).hasClass("e-headercelldiv") && !bbdesigner$(e.target).parent().hasClass("e-grouptopleftcell")) || bbdesigner$(e.target).hasClass("e-headercell")) {
                var bbdesigner$headercell = bbdesigner$(e.target).hasClass("e-headercelldiv") ? bbdesigner$(e.target).parent() : bbdesigner$(e.target);
                this.model.enableHeaderHover && bbdesigner$headercell.removeClass("e-hover e-headercell-hover").addClass("e-headercellactive e-active");
            }
            if (this.model.allowResizing)
                return this._resizer._mouseDown(e);
        },
        _contentMouseDown: function (e) {
            if (bbdesigner$(e.target).closest("td").hasClass("e-selectionbackground"))
                return;
            if (bbdesigner$(e.target).closest("tr").length) {
                this._dragDiv = BoldBIDashboard.buildTag("div.e-griddragarea", "", { "position": "absolute", "width": "0px", "height": "0px" })
                this.getContent().append(this._dragDiv);
                var tr = bbdesigner$(e.target).closest("tr.e-row");
                if (!tr.length)
                    tr = bbdesigner$(e.target).closest("tr.e-alt_row");
                this._startIndex = tr.length ? this.getIndexByRow(tr) : null;
                this._on(this.getContent(), "mousemove", this._mouseMoveDragHandler);
                this._on(bbdesigner$(document), "mouseup", this._mouseUpDragHandler);
                this._startDrag = { _x: e.pageX, _y: e.pageY };
            }
        },
        _mouseMoveDragHandler: function (e) {
            if (e.which == 1 && e.pageY != this._startDrag._y) {
                this._selectDrag = true;
                var left = this._dragDiv[0].offsetLeft;
                var top = this._dragDiv[0].offsetTop;

                var x1 = this._startDrag._x,
                y1 = this._startDrag._y,
                x2 = e.pageX,
                y2 = e.pageY, tmp, eleLocation = e.pageY + 2;

                if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
                if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; eleLocation = e.pageY - 2 }
                var height = this._dragDiv.height();
                this._dragDiv.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });
                var element = bbdesigner$(document.elementFromPoint(e.pageX, eleLocation));
                var tr = element.closest("tr.e-row");
                if (!tr.length)
                    tr = element.closest("tr.e-alt_row");
                if (tr.length) {
                    this._endIndex = this.getIndexByRow(tr);
                    if (BoldBIDashboard.isNullOrUndefined(this._startIndex))
                        this._startIndex = this._endIndex;
                    this.selectRows(this._startIndex, this._endIndex);
                }
            }
        },
        _mouseUpDragHandler: function (e) {
            this._off(bbdesigner$(document), "mouseup", this._mouseUpDragHandler);
            this._off(this.getContent(), "mousemove", this._mouseMoveDragHandler);
            this._selectDrag = false;
            this._dragDiv.remove();
        },
        _headerHover: function (e) {
            var bbdesigner$target = bbdesigner$(e.target);
            if (e.type == "mouseover" || e.type == "mousemove" || e.type == "touchmove" || e.type == "MSPointerMove") {
                if (this.model.allowResizing || this.model.allowResizeToFit)
                    this._resizer._mouseHover(e);

                if (this.model.enableHeaderHover && !this._dragActive && ((bbdesigner$target.hasClass("e-headercelldiv") && !bbdesigner$target.parent().hasClass("e-grouptopleftcell")) || bbdesigner$target.hasClass("e-headercell"))) {
                    if (bbdesigner$target.hasClass("e-headercelldiv"))
                        bbdesigner$target = bbdesigner$target.parent();
                    this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
                    bbdesigner$target.addClass("e-headercell-hover e-hover");
                }
                if (bbdesigner$target.hasClass("e-gridtooltip"))
                    this._showTooltip(bbdesigner$target);
                if (bbdesigner$target.hasClass("e-gridheadertooltip") || bbdesigner$target.find(".e-gridheadertooltip").length)
                    this._showTooltip(bbdesigner$target, true);
                if (e.type == "mouseover")
                    this._addCursor();
            } else
                this.model.enableHeaderHover && this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
        },
        _addCursor: function () {
            var flag = (this.model.allowResizing || this.model.allowResizeToFit || this.model.allowGrouping || this.model.allowFiltering || this.model.allowSorting || this.model.allowReordering || this.model.contextMenuSettings.enableContextMenu || this._allowcolumnSelection);
            if (!flag) {
                this.getHeaderTable().find(".e-columnheader").addClass("e-defaultcursor");
                this.getHeaderTable().find(".e-headercell").removeClass("e-defaultcursor");
            }
            else {
                this.getHeaderTable().find(".e-columnheader").removeClass("e-defaultcursor");
                if (!(this.model.contextMenuSettings.enableContextMenu || this.model.selectionSettings.selectionMode == "column")) {
                    var propArray = [{ val: this.model.allowSorting, str: "sort" }, { val: this.model.allowGrouping, str: "group" }, { val: this.model.allowReordering, str: "reorder" }, { val: this.model.allowFiltering, str: "filter" }];
                    var colpropcount = 0;
                    for (var i = 0; i < propArray.length; i++) {
                        if (propArray[i].val == false) {
                            propArray.splice(i, 1);
                            i--;
                        }
                    }

                    for (i = 0; i < this.model.columns.length && propArray.length > 0 ; i++) {
                        for (j = 0; j < propArray.length; j++) {
                            switch (propArray[j].str) {
                                case "sort":
                                    if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[i].allowSorting) && !this.model.columns[i].allowSorting)
                                        colpropcount++;
                                    break;
                                case "group":
                                    if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[i].allowGrouping) && !this.model.columns[i].allowGrouping)
                                        colpropcount++
                                    break;
                                case "reorder":
                                    if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[i].allowReordering) && !this.model.columns[i].allowReordering)
                                        colpropcount++
                                    break;
                                case "filter":
                                    if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[i].allowFiltering) && !this.model.columns[i].allowFiltering)
                                        colpropcount++;
                                    break;
                            }
                        }
						if(!BoldBIDashboard.isNullOrUndefined(this.model.columns[i].template) || !BoldBIDashboard.isNullOrUndefined(this.model.columns[i].templateID))
							isTempCol = true;
						else 
							isTempCol = false;
						if (colpropcount == propArray.length && !(isTempCol))
                            this.getHeaderTable().find(".e-headercell").eq(i).addClass("e-defaultcursor");
                        colpropcount = 0;
                    }
                }
            }
        },
        _colgroupRefresh: function () {
            if ((this.model.allowResizing || this.model.allowResizeToFit) && this.model.scrollSettings.frozenColumns > 0) {
                var gridheaderCol = bbdesigner$(this.getHeaderTable()).find('colgroup');
                var gridcontentCol = bbdesigner$(this.getContentTable()).find('colgroup');
            }
            else {
                var gridheaderCol = bbdesigner$(this.getHeaderTable()).find('colgroup')[0];
                var gridcontentCol = bbdesigner$(this.getContentTable()).find('colgroup')[0];
            }
            var headerColClone = bbdesigner$(gridheaderCol).clone();
            var contentColClone = bbdesigner$(gridcontentCol).clone();
            bbdesigner$(gridcontentCol).remove();
            bbdesigner$(gridheaderCol).remove();
            if ((this.model.allowResizing || this.model.allowResizeToFit) && this.model.scrollSettings.frozenColumns > 0) {
                bbdesigner$(headerColClone[0]).prependTo(this.getHeaderTable()[0]);
                bbdesigner$(headerColClone[1]).prependTo(this.getHeaderTable()[1]);
                bbdesigner$(contentColClone[0]).prependTo(this.getContentTable()[0]);
                bbdesigner$(contentColClone[1]).prependTo(this.getContentTable()[1]);
            }
            else {
                bbdesigner$(headerColClone).prependTo(this.getHeaderTable());
                bbdesigner$(contentColClone).prependTo(this.getContentTable());
            }
        },
        _detailColsRefresh: function () {
            this._bbdesigner$headerCols = this.getHeaderTable().children("colgroup").find("col");
            this._bbdesigner$contentCols = this.getContentTable().children("colgroup").find("col");
            var colCount = this.model.columns.length;
            if (this._bbdesigner$headerCols.length > colCount) this._bbdesigner$headerCols.splice(0, (this._bbdesigner$headerCols.length - colCount));
            if (this._bbdesigner$contentCols.length > colCount) this._bbdesigner$contentCols.splice(0, (this._bbdesigner$contentCols.length - colCount));
        },
        _summaryColRrefresh: function () {
            var table = this.getFooterContent().find('.e-gridsummary');
            for (var i = 0; i < this.columnsWidthCollection.length; i++) 
                table.find('col').eq(i).width(this.columnsWidthCollection[i]);
        },
        _headerdblClickHandler: function (e) {
            if (this.model.allowResizeToFit)
                this._resizer._columnResizeToFit(e);
            if (this.model.allowScrolling && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")))
                this.getScrollObject().refresh(this.model.scrollSettings.frozenColumns > 0);			
        },

        _mouseUp: function (e) {
            if (this.model.allowResizing)
                this._resizer._mouseUp(e);
        },

        _mouseMove: function (e) {
            if (this.model.allowResizing)
                this._resizer._mouseMove(e);
        },
        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "enableResponsiveRow":
                        if (options[prop]) {
                            this.element.addClass("e-responsive");
                            if (this.model.minWidth) {
                                this._removeMedia();
                                this._scrollerAddedOnMedia = false;
                            }
                            if (this.model.allowFiltering) {
                                this.element.find('.e-filterDialoge').remove();
                                this._renderFilterDialogs();
                                this._renderResponsiveFilter();
                                this.element.find('.e-gridtoolbar').remove();
                            }
                        } else {
                            if (this.model.allowFiltering) {
                                bbdesigner$('body').find('.e-filterDialoge').remove();
                                this._renderFilterDialogs();
                            }
                            if (this.element.css("display") == "none")
                                this.element.css("display", "block");
                            this.element.removeClass("e-responsive");
                            if (this.model.minWidth)
                                this._addMedia();
                            if (this.model.allowScrolling && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) {
                                this.getScrollObject().refresh();
                                if (!this.getScrollObject().isVScroll()) {
                                    this.getHeaderContent().removeClass("e-scrollcss");
                                    this.getHeaderContent().find(".e-headercontent").removeClass("e-hscrollcss");
                                }
                                else if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getScrollObject().isVScroll()) {
                                    this.getHeaderContent().addClass("e-scrollcss");
                                    this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
                                }
                            }
                        }
                        this._tdsOffsetWidth = [];
                        if (this.model.allowFiltering || this.model.allowSorting) {
                            var index = this.model.toolbarSettings.toolbarItems.indexOf('responsiveFilter');
                            index != -1 && this.model.toolbarSettings.toolbarItems.splice(index, 1);
                            var sortIndex = this.model.toolbarSettings.toolbarItems.indexOf('responsiveSorting');
                            sortIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(sortIndex, 1);
                            this.element.find('.e-gridtoolbar').remove();
                            this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
                        }
                        break;
                    case "showColumnChooser":
                        if (options[prop]) {
                            this._visibleColumns = [];
                            this._hiddenColumns = [];
                            this._visibleColumnsField = [];
                            this._hiddenColumnsField = [];
                            this._renderGridHeaderInternalDesign(this.model.columns);
                            this._renderColumnChooser();
                        }
                        else {
                            this.element.find(".e-ccButton").remove()
                            bbdesigner$("#" + this._id + 'ccDiv_wrapper').remove();
                        }
                        break;
                    case "gridLines":
                        this.getContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this.getHeaderContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this._showHeaderGridLines();
                        this._showGridLines();
                        break;
                    case "showDeleteConfirmDialog":
                        this.model.editSettings.showDeleteConfirmDialog = options[prop];
                        if (options[prop])
                            this._renderConfirmDialog();
                        else
                            this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
                        break;
                    case "showConfirmDialog":
                        this.model.editSettings.showConfirmDialog = options[prop];
                        if (options[prop])
                            this._renderConfirmDialog();
                        else
                            this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
                        break;
                    case "pageSettings":
                        var pageModel = this.getPager().BoldBIDashboardPager("model");
                        if (BoldBIDashboard.isNullOrUndefined(options[prop]["currentPage"]) || pageModel.currentPage != this._currentPage()) {
                            for (var pageProp in options[prop]) {
                                if (pageProp != "currentPage" && options[prop][pageProp] === pageModel[pageProp])
                                    delete options[prop][pageProp];
                            }
                            if (bbdesigner$.isEmptyObject(options[prop]))
                                break;
                            options[prop]["currentPage"] = this._currentPage();
                            this.getPager().BoldBIDashboardPager("option", options[prop]);
                            this._renderPagerTemplate(this.getPager(), options[prop]["showDefaults"]);
                            this._currentPage(this._currentPage() > pageModel.totalPages ? pageModel.totalPages : this._currentPage());
                            this.refreshContent();
                        }
                        break;
                    case "columns":
                        var columns = options.columns;
                        this.model.columns = [];
                        this.columns(columns, "add");
                        break;
                    case "allowPaging":
                        this.model.allowPaging = options[prop];
                        if (options[prop] && this.element.children(".e-pager").length == 0) {
                            this.element.append(this._renderGridPager());
                            this.refreshContent();
                            this.getPager().BoldBIDashboardPager("refreshPager");
                        } else {
                            this.getPager().remove();
                            this.setGridPager(null);
                            this.refreshContent();
                            if (this.model.filterSettings.filterType == "filterbar" && this.model.allowFiltering)
                                this._createPagerStatusBar();
                        }
                        break;
                    case "allowSearching":
                        this.model.allowSearching = options[prop];
                        break;
                    case "searchSettings":
                        bbdesigner$.extend(this.model.searchSetings, options[prop]);
                        this.refreshContent();
                        break;
                    case "allowGrouping":
                        if (options[prop] && this.element.children(".e-groupdroparea").length == 0) {
                            this.model.allowGrouping = options[prop];
                            this.addGroupingTemplate();
							this.model.showColumnChooser && this.element.find(".e-ccButton").length > 0 ? this.element.find(".e-ccButton").after(this._renderGroupDropArea()) : this.element.prepend(this._renderGroupDropArea());
                            this._enableGroupingEvents();
                            this._headerCellgDragDrop();
                            this._off(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
                            this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
                        } else
                            this.element.children(".e-groupdroparea").remove();
                        if (this.model.allowGrouping) {
                            !BoldBIDashboard.isNullOrUndefined(options["groupSettings"]) && bbdesigner$.extend(this.model.groupSettings, options["groupSettings"]);
                            this._enableGrouping();
                        }
                        
                        break;
                    case "groupSettings":
                        bbdesigner$.extend(this.model.groupSettings, options[prop]);
                        if(this.model.allowGrouping && BoldBIDashboard.isNullOrUndefined(options["allowGrouping"]))
                            this._enableGrouping();
                        if(!BoldBIDashboard.isNullOrUndefined(this.model.groupSettings.enableDropAreaAnimation))
                            this.model.groupSettings.enableDropAreaAutoSizing = this.model.groupSettings.enableDropAreaAnimation;
                        break;
                    case "cssClass":
                        this.element.removeClass(this.model.cssClass).addClass(options[prop]);
                        break;
                    case "allowFiltering":
                    case "filterSettings":
                        if (prop == "filterSettings")
                            bbdesigner$.extend(this.model.filterSettings, options[prop]);
                        else
                            this.model.allowFiltering = options[prop];
                        if (this._bbdesigner$fDlgIsOpen)
                            this._closeFDialog();
                        if (!this.model.allowFiltering) {
                            if (this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.FilterBar)
                                this.getHeaderTable().find(".e-filterbar").remove();
                            else if (this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.Menu || this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.Excel)
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                            if (this._isExcelFilter) {
                                this._isExcelFilter = false;
                                this._excelFilter.resetExcelFilter();
                                this._excelFilter = null;
                            }
                            this.model.filterSettings.filteredColumns = [];
                            this.refreshContent();
                        } else {
                            if (this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.FilterBar) {
                                this.getHeaderTable().find(".e-filterbar").remove();
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                                this._renderFiltering();
                                if (this.model.filterSettings.showFilterBarStatus && !this.model.allowPaging)
                                    this._createPagerStatusBar();
                                else if (this.model.allowPaging)
                                    this.getPager().BoldBIDashboardPager({ enableExternalMessage: this.model.filterSettings.showFilterBarStatus });
                                var bbdesigner$filterbar = this.getHeaderTable().find(".e-filterbar");
                                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                                    bbdesigner$filterbar.prepend(this._getEmptyFilterBarCell());
                            } else if (!_filter && (this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.Menu || this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.Excel)) {
                                var _filter = 1;
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                                this.getHeaderTable().find(".e-filterbar").remove();
                                var columnHeader = this.getHeaderTable().find(".e-columnheader").last().find(".e-headercell").not(".e-detailheadercell");
                                for (var i = 0; i < columnHeader.length; i++) {
                                    var columnName = columnHeader.eq(i).find(".e-headercelldiv").attr("ej-mappingname");
									if(!BoldBIDashboard.isNullOrUndefined(columnName)){
										var column = this.getColumnByField(columnName);
										if (!BoldBIDashboard.isNullOrUndefined(column) && !(this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.Excel && column.IsMeasure) && column.dateFormat == "None" && (BoldBIDashboard.isNullOrUndefined(column.allowFiltering) || column.allowFiltering))
											columnHeader.eq(i).addClass("e-headercellfilter").append(BoldBIDashboard.buildTag('div.e-filtericon e-icon e-filterset'));
									}
								}                               
							   if (this.model.filterSettings.filterType == BoldBIDashboard.Grid.FilterType.Excel) {
                                    this._isExcelFilter = true;
                                    this._renderExcelFilter();
                                } else if (this._isExcelFilter) {
                                    this._isExcelFilter = false;
                                    this._excelFilter.resetExcelFilter();
                                    this._excelFilter = null;
                                }
                                this._renderFilterDialogs();
                                this.model.filterSettings.filteredColumns = [];
                                if (this.model.scrollSettings.allowVirtualScrolling)
                                    this.refreshContent();
                            }
                            this._enableFilterEvents();
                        }
                        break;
                    case "enableRowHover":
                        this.model.enableRowHover = options[prop];
                        this._enableRowHover();
                        break;
                    case "allowScrolling":
                    case "scrollSettings":
                        var bbdesigner$content = this.getContent();
                        if (prop != "allowScrolling") {
                            if (!BoldBIDashboard.util.isNullOrUndefined(options["scrollSettings"])) {
                                if (bbdesigner$.isEmptyObject(options["scrollSettings"])) break;
                                bbdesigner$.extend(this.model.scrollSettings, options["scrollSettings"]);
                            }
							if(this.model.scrollSettings.allowVirtualScrolling){
								this._currentPage(1);
								this.model.currentIndex = 1;
								if(this.model.scrollSettings.enableVirtualization){								
									this._virtualRowCount = Math.round(this.model.scrollSettings.height / this.getRowHeight()) + 1; 
									this._refreshVirtualViewDetails();
									this._refreshVirtualViewData();
								}
								else {
									this._createPagerStatusBar();
									this._showPagerInformation(this.model.pageSettings);
								}
							}
                            if (options["scrollSettings"]["frozenColumns"] !== undefined || options["scrollSettings"]["frozenRows"] !== undefined ||
                                options["scrollSettings"]["allowVirtualScrolling"] !== undefined || options["scrollSettings"]["virtualScrollMode"] !== undefined ||
								options["scrollSettings"]["enableVirtualization"] != undefined) {
                                var model = this.model;
                                model.query = this.commonQuery.clone();
                                if (this._selectedRow() != -1)
                                    this.clearSelection(this._selectedRow());
                                if (options["scrollSettings"]["virtualScrollMode"] != undefined)
                                    model.pageSettings.currentPage = 1;
                            }
                            else {
                                if (!BoldBIDashboard.util.isNullOrUndefined(options["allowScrolling"]))
                                    this.model.allowScrolling = options["allowScrolling"];
                                !BoldBIDashboard.util.isNullOrUndefined(bbdesigner$content.data("BoldBIDashboardScroller")) && bbdesigner$content.BoldBIDashboardScroller("destroy");
                                if (this.model.allowScrolling) {
                                    this.getHeaderContent().find("div").first().addClass("e-headercontent");
									 this._originalScrollWidth = this.model.scrollSettings.width;
                                    this._renderScroller();
                                } else {
                                    this.element.children(".e-gridheader").removeClass("e-scrollcss");
                                    this.element.get(0).style.width.length == 0 && this.element.css("width", "auto");
                                }
                                this.setWidthToColumns();
                            }
                        }
                        break;
					case "currentIndex":
						if(this.model.allowScrolling &&  this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
							var currentView = Math.ceil(options["currentIndex"] / this._virtualRowCount);
							this._isThumbScroll = true;
							this._refreshVirtualView(currentView);
							this._refreshVirtualViewScroller(true);
						}
						else
							this._scrollObject.option("scrollTop", options["currentIndex"] * this.getRowHeight());						
						break;
                    case "locale":
                        this.model.locale = options[prop];
                        var model = this.model;
                        model.query = this.commonQuery.clone();
                        this.element.BoldBIDashboardGrid("destroy").BoldBIDashboardGrid(model);
                        break;
                    case "dataSource":
                        var bbdesigner$content = this.element.find(".e-gridcontent").first();
                        if (!bbdesigner$.isFunction(options["dataSource"]))
                            this.resetModelCollections();
						if(this._gridRecordsCount == 1 && !BoldBIDashboard.isNullOrUndefined(this._cDeleteData) && bbdesigner$.inArray(this._cDeleteData[0], this._dataSource()) == -1 && this.model.editSettings.allowDeleting)
                            this._gridRecordsCount =this._dataSource().length;
						this._refreshDataSource(this._dataSource());
						this.element.children(".e-gridfooter").remove();
						if (this.model.showSummary && this.model.currentViewData.length > 0) {
						    this._renderGridFooter().insertAfter(bbdesigner$content);
                            this.refreshScrollerEvent();
						}
                        if (this._gridRecordsCount && this.model.allowFiltering) {
                            this._initColumns(this.model.currentViewData[0] != undefined ? this.model.currentViewData[0] : this.model.currentViewData.value);
                            // this._renderFilterDialogs();
                        }
						if(!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount)
							this._addLastRow();
                        break;
                    case "filterDialogSwitch":
                        this._closeFDialog();
                        if (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") {
                            if(this.model.filterSettings.filterType == "menu"){
                                this._isExcelFilter = false;
                            } else{
                                this._isExcelFilter = true;
                            }
                            this._renderFilterDialogs();
                        
                        }
                        break;
                    case "selectedRowIndex":
                        if (this._selectedRow() != -1 && bbdesigner$.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1){
							this.model.currentIndex = this._selectedRow();
                            this.selectRows(this._selectedRow());
						}
                        else if (this._selectedRow() == -1) {
                            this.clearSelection();
                            this.selectedRowsIndexes = [];
                        }
                        break;
                    case "editType":
                        if (this._selectedRow() != -1 && bbdesigner$.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1)
                            this.selectRows(this._selectedRow());
                        break;
                    case "editSettings":
                        bbdesigner$.extend(this.model.editSettings, options[prop]);
                        this._processEditing();
                        this.refreshBatchEditMode();
                        this._tdsOffsetWidth = [];
                        bbdesigner$("#" + this._id + "_dialogEdit").data("BoldBIDashboardDialog") && bbdesigner$("#" + this._id + "_dialogEdit").BoldBIDashboardDialog("destroy");
                        bbdesigner$("#" + this._id + "_dialogEdit_wrapper,#" + this._id + "_dialogEdit").remove();
                        bbdesigner$("#" + this._id + "_externalEdit").remove();
                        this.getContentTable().find(".e-addedrow").remove();
                        if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                            if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
                                this.element.append(this._renderDialog());
                            else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                                this.element.append(this._renderExternalForm());
                            else if (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")
                                this._startAdd();
                       }
                        if (this.model.editSettings.allowDeleting && this.model.editSettings.showDeleteConfirmDialog)
                            BoldBIDashboard.isNullOrUndefined(this._confirmDialog) && this._renderConfirmDialog();
                        this._enableEditingEvents();
                        break;
                    case "allowResizing":
                        this.model.allowResizing = options[prop];
                        if (this.model.allowResizing) {
                            this._on(this.element, BoldBIDashboard.eventType.mouseMove, this._mouseMove);
                            this._on(this.element, "mouseup", this._mouseUp);
                            this._resizer = this._resizer || new BoldBIDashboard.gridFeatures.gridResize(this);
                        }
                        else {
                            this._off(this.element, BoldBIDashboard.eventType.mouseMove, this._mouseMove);
                            this._off(this.element, "mouseup", this._mouseUp);
                            if (!this.model.allowResizeToFit)
                                this._resizer = null;
                        }
                        break;
                    case "allowResizeToFit":
                        if (this.model.allowResizeToFit) {
                            this._on(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
                            this._resizer = this._resizer || new BoldBIDashboard.gridFeatures.gridResize(this);
                            this.setWidthToColumns();
                        }
                        else {
                            this._off(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
                            if (!this.model.allowResizing)
                                this._resizer = null;
                        }
                        break;
                    case "allowReordering":
                        this.model.allowReordering = options[prop];
                        if (this.model.allowReordering)
                            this._headerCellreorderDragDrop();
                        break;
                    case "showSummary":
                    case "summaryRows":
                        if (prop == "showSummary" && options[prop]) this.addSummaryTemplate();
                        if (prop == "showSummary" && !options[prop])
                            this.element.children(".e-gridfooter").remove();
                        else if (prop == "summaryRows" && this.model.showSummary || prop == "showSummary") {
                            this.element.children(".e-gridfooter").remove();
                            this.element.children(".e-gridfooter").remove();
                            var bbdesigner$content = this.element.find(".e-gridcontent").first();
                            var query = this.model.query.queries;
                            var pageQuery = [];
                            for (var i = 0; i < query.length; i++) {
                                if (query[i].fn === "onPage") {
                                    pageQuery = query.splice(i, 1);
                                }
                            }
                            var queryManager = this.model.query;
                            this._setSummaryAggregate(queryManager);
                            if (pageQuery.length > 0) {
                                queryManager.queries.push(pageQuery[0]);
                            }
                            if (this.model.currentViewData.length) {
                                if (this._isLocalData) {
                                    this._remoteSummaryData = this._dataManager.executeLocal(queryManager).aggregates;
                                    this._renderGridFooter().insertAfter(bbdesigner$content);
                                }
                                else {
                                    var proxy = this;
                                    var promise = this._dataManager.executeQuery(queryManager);
                                    promise.done(function (e) {
                                        proxy.element.children(".e-gridfooter").remove();
                                        proxy._remoteSummaryData = e.aggregates
                                        proxy._renderGridFooter().insertAfter(bbdesigner$content);
                                    });
                                }
                            }
                            if (this.model.allowGrouping) {
                                this._rowCol = this._captionSummary();
                                this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
                                this.refreshContent(true);
                            }
                        }
                        break;
                    case "enableAltRow":
                        this.model.enableAltRow = options[prop];
                        this.addInitTemplate();
                        this.refreshContent();
                        break;
                    case "toolbarSettings":
                        bbdesigner$.extend(this.model.toolbarSettings, options[prop]);
                        this.element.children(".e-gridtoolbar").remove();
                        if (this.model.toolbarSettings.showToolbar)
                            this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
                        break;
                    case "allowSorting":
                        this.model.allowSorting = options[prop];
                        if (!this.model.allowSorting) 
                            this.clearSorting();
                        break;
                    case "selectionSettings":
                        bbdesigner$.extend(this.model.selectionSettings, options[prop]);
                        this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
						if(this.model.selectionSettings.selectionMode.length > 0 && this.model.allowSelection)
							this._initSelection();
                        break;
                    case "sortSettings":
                        bbdesigner$.extend(this.model.sortSettings, options[prop]);
                        this.refreshContent();
                        break;
                    case "contextMenuSettings":
                        bbdesigner$.extend(this.model.contextMenuSettings, options[prop]);
                        !BoldBIDashboard.isNullOrUndefined(bbdesigner$("#" + this._id + "_Context").data("BoldBIDashboardMenu")) && bbdesigner$("#" + this._id + "_Context").BoldBIDashboardMenu("destroy") && bbdesigner$("#" + this._id + "_Context").remove();
                        if (this.model.contextMenuSettings.enableContextMenu)
                            this._renderContext()
                        break;
                    case "enableRTL":
                        this.model.enableRTL = options[prop];
                        var model = this.model;
                        model.query = this.commonQuery.clone();
                        this.element.BoldBIDashboardGrid("destroy");
                        model.enableRTL ? bbdesigner$("#" + this._id).addClass("e-rtl") : bbdesigner$("#" + this._id).removeClass("e-rtl");
                        bbdesigner$("#" + this._id).BoldBIDashboardGrid(model);
                        break;
                    case "enableTouch":
                        this.model.enableTouch = options[prop];
                        if (!this.model.enableTouch) {
                            this.element.addClass("e-touch");
                            this._off(this.element, "swipeleft swiperight", ".e-gridcontent .e-table");
                        }
                        else {
                            this._on(this.element, "swipeleft swiperight", ".e-gridcontent .e-table", bbdesigner$.proxy(this._touchGrid, this));
                            this.element.removeClass("e-touch");
                        }
                        break;
                    case "allowSelection":
                        if (options[prop]) {
                            this._off(this.element, (bbdesigner$.isFunction(bbdesigner$.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
                            this._on(this.element, "click", this._clickHandler);
							this._initSelection();
                        }
						else
							this.clearSelection();
                        break;
                    case "query":
                        this.commonQuery = bbdesigner$.extend(true, {}, options[prop]);
                        break;
                    case "showStackedHeader":
                    case "stackedHeaderRows":
                        if (this.model.showStackedHeader) {
                            if (BoldBIDashboard.getObject("stackedHeaderRows.length", options))
                                this.model.stackedHeaderRows = options["stackedHeaderRows"];                            
                            this._refreshStackedHeader();
                         }
                          else
                            this.getHeaderTable().find(".e-stackedHeaderRow").remove();
                        break;
                    case "allowTextWrap":
                    case "textWrapSettings":
                        bbdesigner$.extend(this.model.textWrapSettings, options[prop]);
                            this._setTextWrap();
                        break;
                    case "rowTemplate":
                        this.refreshContent(true);
                        break;
                    case "detailsTemplate":
                        if (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) {
                            this._renderAlertDialog();
                            this._alertDialog.find(".e-content").text(this._getLocalizedLabels("FrozenNotSupportedException"));
                            this._alertDialog.BoldBIDashboardDialog("open");
                        }
                        else {
                            var bbdesigner$header = this.element.children(".e-gridheader");
                            bbdesigner$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
                            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                                this._renderFiltering();
                            this.setGridHeaderContent(bbdesigner$header);
                            this.refreshContent(true);
                            if (this.model.allowReordering)
                                this._headerCellreorderDragDrop();
                            if (this.model.allowGrouping)
                                this._headerCellgDragDrop();
                        }
                        break;
                }
            }

        },
        
        resetModelCollections: function () {
            this.model.groupSettings.groupedColumns = [];
            this.model.filterSettings.filteredColumns = [];
            this.model.sortSettings.sortedColumns = [];
            this.model.pageSettings.currentPage = this.defaults.pageSettings.currentPage;
        },
        _enableGrouping: function(){
			this.refreshTemplate();
			if (this.model.groupSettings.showToggleButton) {
			    for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
			        var headercell = this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").eq(columnCount);
 					var field = this.model.columns[columnCount].field;
			        if (bbdesigner$.inArray(field, this._disabledGroupableColumns) == -1 && !BoldBIDashboard.isNullOrUndefined(field) && field != "") {
			            if (!headercell.find(".e-gridgroupbutton").length) {
			                if (bbdesigner$.inArray(field, this.model.groupSettings.groupedColumns) != -1)
			                    headercell.append(this._getToggleButton().addClass("e-toggleungroup"));
			                else
			                    headercell.append(this._getToggleButton().addClass("e-togglegroup"));
			            }
			        }
			    }
			}
			if (!this.model.groupSettings.showToggleButton)
			    this.getHeaderTable().find(".e-gridgroupbutton").remove();
			this.element.find(".e-groupdroparea").remove();
			if (this.model.groupSettings.showDropArea) {
			    this.model.showColumnChooser && this.element.find(".e-ccButton").length > 0 ? this.element.find(".e-ccButton").after(this._renderGroupDropArea()) : this.element.prepend(this._renderGroupDropArea());
			    if (BoldBIDashboard.gridFeatures.dragAndDrop) {
			        this._groupHeaderCelldrag();
			        this._headerCellgDragDrop();
			    }
			}
			if (!BoldBIDashboard.isNullOrUndefined(this.model.groupSettings.groupedColumns.length) && this.model.groupSettings.groupedColumns.length) {
				var args = {};
			    args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
			    args.requestType = BoldBIDashboard.Grid.Actions.Grouping;
			    bbdesigner$(".e-grid").find(".e-groupdroparea").empty();
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
					this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
					if (BoldBIDashboard.isNullOrUndefined(this.getsortColumnByField(this.model.groupSettings.groupedColumns[i])))
						this.model.sortSettings.sortedColumns.push({ field: this.model.groupSettings.groupedColumns[i], direction: BoldBIDashboard.sortOrder.Ascending});
				}
				this._processBindings(args);
			}
        },
        
        addIgnoreOnExport: function (args) {
            if (typeof (args) == 'string')
                this.ignoreOnExport.push(args);
            else
                this.ignoreOnExport = this.ignoreOnExport.concat(args);
        },
        _decode: function (value) {
            return bbdesigner$('<div/>').html(value).text();
        },
        _htmlEscape: function (str) {
            var regx = /[&<>"']/g, charEntities = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                "\"": "&#34;",
                "'": "&#39;"
            };
            return str.replace(regx, function (c) {
                return charEntities[c];
            });
        },
        _getForeignKeyData: function (data) {
           var proxy = this;
            var column = {},i;
            for (i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i].foreignKeyValue && this.model.columns[i].dataSource) {
                    var fieldName = BoldBIDashboard.isNullOrUndefined(proxy.model.columns[i]["foreignKeyField"]) ? proxy.model.columns[i]["field"] : proxy.model.columns[i]["foreignKeyField"];
                    var dataSource = this.model.columns[i].dataSource instanceof BoldBIDashboard.DataManager ? this.model.columns[i].foreignKeyData : this.model.columns[i].dataSource;
                    dataSource.filter(function (col) {
                        var value = BoldBIDashboard.getObject(proxy.model.columns[i]["field"], data);
                        var fValue = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
                        if (col[fieldName] == fValue) {
                            column[fieldName] = col;
                        }
                    });
                }
            }
            return column;
        },
        _foreignKeyBinding: function (curColumn, cellValue, gridId) {
            var cellData, val;
            var gridObj = bbdesigner$("#" + gridId).BoldBIDashboardGrid('instance');
            curColumn = gridObj.model.columns[curColumn];
            var dataSource = curColumn.dataSource instanceof BoldBIDashboard.DataManager ? curColumn.foreignKeyData : curColumn.dataSource;
            dataSource.filter(function (col) {
              if (BoldBIDashboard.getObject(curColumn.foreignKeyField, col) instanceof Date) {
                          if (gridObj.formatting( BoldBIDashboard.isNullOrUndefined(curColumn.format) ? "{0:dd/MM/yyyy hh:mm:ss}" : curColumn.format, BoldBIDashboard.getObject(curColumn.foreignKeyField, col), gridObj.model.locale) == gridObj.formatting(BoldBIDashboard.isNullOrUndefined(curColumn.format) ? "{0:dd/MM/yyyy hh:mm:ss}" :  curColumn.format, cellValue, gridObj.model.locale) ) {
					         val = BoldBIDashboard.getObject(curColumn.foreignKeyValue, col);
                             return cellData = curColumn.type == "date" ? new Date(val) : val;
                           }
                }
                else if (BoldBIDashboard.getObject(curColumn.foreignKeyField, col) == cellValue){
                            val = BoldBIDashboard.getObject(curColumn.foreignKeyValue, col);
                            return cellData =  val;
                }
                    
                });           
            if (curColumn.format) {
                cellData = gridObj.formatting(curColumn.format, cellData, gridObj.model.locale);
            }
            return cellData;
        },
        _checkForeignKeyBinding: function () {
            if (!this.model.columns.length)
                return;
            var c, _cols, _len, _col;
            for (c = 0, _cols = this.model.columns, _len = _cols.length; c < _len; c++) {
                _col = _cols[c];
                if (_col.hasOwnProperty("foreignKeyField") && _col["dataSource"] instanceof BoldBIDashboard.DataManager)
                    this._relationalColumns.push({ field: _col["field"], key: _col["foreignKeyField"], value: _col["foreignKeyValue"], dataSource: _col["dataSource"] });
            }
            this._bbdesigner$fkColumn = true;
        },  
        _setForeignKeyData: function (args) {
            if (!this._relationalColumns.length)
                return;
            var arr = this._relationalColumns, len = this._relationalColumns.length,
                promises = [], viewData = this.model.currentViewData, e = {};
            var obj, qry, pred, dist, qPromise, proxy = this;
         
            var failFn = BoldBIDashboard.proxy(function (e) { /*Separate fail handler to get more control over request*/
                this._trigger("actionFailure", { requestType: "fetchingforeigndata", error: e.error });
            }, this);
            if (!this.element.BoldBIDashboardWaitingPopup("model.showOnInit"))
                this.element.BoldBIDashboardWaitingPopup("show");
                
            for (var i = 0; i < len; i++) {
                if (!(0 in viewData)) continue;
                obj = arr[i], e.field = obj["field"], e.keyField = obj["key"], e.valueField = obj["value"], e.dataSource = obj["dataSource"],
                            e.query = new BoldBIDashboard.Query().select([e.valueField, e.keyField]).foreignKey(e.keyField),
                            dist = BoldBIDashboard.distinct(viewData.level ? viewData.records : viewData, e.keyField, true);
                       
                pred = BoldBIDashboard.UrlAdaptor.prototype.getFiltersFrom(dist, e.query);
                e.query.where(pred);
                        
                if (this._trigger("actionBegin", bbdesigner$.extend(e, { requestType: "fetchingforeigndata", column: this.getColumnByField(e.field) })))
                    return;
                qPromise = e.dataSource.ready === undefined ? e.dataSource.executeQuery(e.query, null, failFn) : e.dataSource.ready.fail(failFn);
                promises.push(qPromise);
            }
                
            bbdesigner$.when.apply(this, promises).then(function () {
                proxy.element.BoldBIDashboardWaitingPopup("hide");
                var arg = [].slice.call(arguments, 0, arguments.length), column;
                for (var i = 0, plen = promises.length; i < plen; i++) {
                    obj = arr[i];
                    for (var c = 0, clen = proxy.model.columns.length; c < clen; c++) {
                        column = proxy.model.columns[c];
                        if (column["foreignKeyField"] == obj["key"] && column["foreignKeyValue"] == obj["value"])
                            column["foreignKeyData"] = arg[i].result;
                    }
                }
                proxy.initialRender ? proxy._initGridRender() : proxy.sendDataRenderingRequest(args);
            });
                
        },
        _isRelationalRendering: function (args) {
            return (0 in this._relationalColumns) && ["add", "beginedit", "cancel"].indexOf(args.requestType) == -1;
        }        
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    BoldBIDashboard.gridFeatures.edit = {
        _processEditing: function () {
            var colInfo = this._columnToSelect(), query = colInfo.query, dropField = colInfo.fields, promises = [], qPromise,
                            e = this._relationalColumns, len = e.length, req;
            this.model.query._fromTable != "" && query.from(this.model.query._fromTable);
            req = dropField.length;
            if (req)
                promises.push(this._dataManager.executeQuery(query));
            if (len != 0) {
                for (var i = 0; i < len; i++) {
                    obj = e[i], qry = new BoldBIDashboard.Query().select([obj.key, obj.value]);
                    qPromise = obj["dataSource"].ready === undefined ? obj["dataSource"].executeQuery(qry) : obj["dataSource"].ready;
                    promises.push(qPromise);
                }
            }
            if (promises.length != 0) {
                bbdesigner$.when.apply(this, promises).then(BoldBIDashboard.proxy(function () {
                    var arg = [].slice.call(arguments, 0, arguments.length);
                    for (var i = 0, j = 0, s = req, flag, plen = promises.length; i < plen; i++) {
                        while (s > 0) {
                            BoldBIDashboard.createObject(dropField[--s], arg[i].result, this._dropDownManager);
                            flag = true;
                        }
                        if (flag && i == 0) continue; /* i == 0 - since one req will be made for all Ddl columns*/
                        obj = e[j], key = obj.key + "." + obj.value;
                        BoldBIDashboard.createObject(key, arg[i].result, this._dropDownManager);
                        j++;
                    }
                    this._initiateTemplateRendering();
                }, this));
            }
            else
                this._initiateTemplateRendering();
        },
        _initiateTemplateRendering: function() {
            if (this.model.editSettings.editMode == "normal") this.addEditingTemplate();
            else if (this.model.editSettings.editMode == "batch") this.addBatchEditTemplate();
            else if (this.model.editSettings.editMode == "dialog" ||
                this.model.editSettings.editMode == "externalform" ||
               this.model.editSettings.editMode == "inlineform")
                this.addDialogEditingTemplate();
            else this.addExternalDialogEditingTemplate();
            if ((this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal"))
                this._startAdd();
        },
        addEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var bbdesigner$tbody = BoldBIDashboard.buildTag('tbody');
            var bbdesigner$tr = BoldBIDashboard.buildTag('tr');
            var bbdesigner$td = BoldBIDashboard.buildTag('td', "", {}, { colSpan: this.model.scrollSettings.frozenColumns > 0 ? this.model.scrollSettings.frozenColumns : this.model.columns.length });
            var bbdesigner$form = BoldBIDashboard.buildTag('form', "", {}, { id: this._id + "EditForm", "class": "gridform" });
            var bbdesigner$table = BoldBIDashboard.buildTag('table.e-table', "", {}, { cellspacing: 0.25 });
            var bbdesigner$innerTbody = BoldBIDashboard.buildTag('tbody');
            var bbdesigner$innerTr = BoldBIDashboard.buildTag('tr');
            bbdesigner$tbody.append(bbdesigner$tr);
            bbdesigner$tr.append(bbdesigner$td);
            bbdesigner$td.append(bbdesigner$form);
            var bbdesigner$colGroup = bbdesigner$(document.createElement('colgroup'));
            bbdesigner$form.append(bbdesigner$table);
            bbdesigner$table.append(bbdesigner$colGroup);
            bbdesigner$innerTbody.append(bbdesigner$innerTr).appendTo(bbdesigner$table);
            if (this.model.scrollSettings.frozenColumns > 0) {
                var bbdesigner$tbodyClone = bbdesigner$tbody.clone();
                bbdesigner$tbodyClone.find("td").first().prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns);
            }
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                var bbdesigner$innerTd = BoldBIDashboard.buildTag('td.e-rowcell');
                bbdesigner$innerTr.append(bbdesigner$innerTd.get(0));
                if (BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["commands"]) && BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["template"])) {
                    this._initCellEditType(columnCount, bbdesigner$innerTd);
                } else if (this.model.columns[columnCount]["template"]) {
                    var helpers = {}, htxt = this.model.columns[columnCount].headerText;
                    helpers["_" + this._id + "ColumnTemplating"] = BoldBIDashboard.proxy(this._gridTemplate, null, this);
                    bbdesigner$.views.helpers(helpers);
                    if (!BoldBIDashboard.isNullOrUndefined(htxt) && !BoldBIDashboard.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                        htxt = htxt.replace(/[^0-9\s\w]/g, "_");
                    bbdesigner$("#" + this._id + htxt + columnCount + "_Template").remove();
                    var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
                    bbdesigner$innerTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "')}}");
                } else if (this.model.columns[columnCount]["commands"]) {
                    var helpers = {};
                    helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                    bbdesigner$.views.helpers(helpers);
                    bbdesigner$("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '')+ "_UnboundTemplate").remove();
                    divElement = this._createUnboundElement(this.model.columns[columnCount]);
                    bbdesigner$innerTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '') + columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                    this.model.scrollSettings.frozenColumns > 0 && bbdesigner$innerTd.addClass("e-frozenunbound");
                    this._isUnboundColumn = true;
                }
                if (this.model.columns[columnCount]["textAlign"] != undefined)
                    bbdesigner$innerTd.css("text-align", this.model.columns[columnCount]["textAlign"]);
                this.model.columns[columnCount]["allowEditing"] == false && bbdesigner$innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isPrimaryKey"] === true)
                    bbdesigner$innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isIdentity"] === true) {
                    bbdesigner$innerTd.find(".e-field").addClass("e-identity");
                    this._identityKeys.push(bbdesigner$.trim(this.model.columns[columnCount].field));
                    this._identityKeys = bbdesigner$.unique(this._identityKeys);
                }
                var bbdesigner$col = bbdesigner$(document.createElement('col'));
                if (this.model.columns[columnCount]["priority"]) {
                    bbdesigner$innerTd.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                    bbdesigner$col.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                }
                if (this.model.columns[columnCount]["visible"] === false) {
                    bbdesigner$col.css("display", "none");
                    bbdesigner$innerTd.addClass("e-hide");
                }
                if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
                    bbdesigner$innerTd.addClass(this.model.columns[columnCount]["cssClass"]);
                }
                !this.model.groupSettings.showGroupedColumn && bbdesigner$innerTd.addClass("{{for ~groupedColumns}}" +
                    " {{if #data == '" + this.model.columns[columnCount]["field"] + "'}}e-hide{{/if}}" +
                    "{{/for}}") && bbdesigner$col.css("display", "none");
                bbdesigner$colGroup.append(bbdesigner$col);
                if (columnCount == this.model.scrollSettings.frozenColumns - 1) {
                    bbdesigner$innerTr = bbdesigner$tbodyClone.find("tr").last();
                    bbdesigner$colGroup = bbdesigner$tbodyClone.find("colgroup");
                    bbdesigner$.templates(this._id + "_JSONFrozenEditingTemplate", bbdesigner$tbody.html());
                    bbdesigner$tbody = bbdesigner$tbodyClone;
                }
            }
            bbdesigner$.templates(this._id + "_JSONEditingTemplate", bbdesigner$tbody.html());
        },

        addDialogEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var bbdesigner$tbody = BoldBIDashboard.buildTag('div');
            var bbdesigner$form = BoldBIDashboard.buildTag('form.gridform', "", {}, { id: this._id + "EditForm" });
            var bbdesigner$table = BoldBIDashboard.buildTag('table', "", {}, { cellspacing: "14px" });
            var bbdesigner$innerTr, bbdesigner$labelTd, bbdesigner$valueTd, trElement, tdElement;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if (this.model.editSettings.editMode == "dialog") {
                    trElement = 'tr';
                    tdElement = 'td';
                }
                else trElement = tdElement = 'div';
                bbdesigner$innerTr = BoldBIDashboard.buildTag(trElement);
                bbdesigner$labelTd = BoldBIDashboard.buildTag(tdElement, "", { "text-align": "right" }).addClass("e-label");
                bbdesigner$valueTd = BoldBIDashboard.buildTag(tdElement, "", { "text-align": "left" }).addClass("e-rowcell");
                 if (this.model.columns[columnCount]["priority"] && this.model.editSettings.editMode == "inlineform") 
                    bbdesigner$innerTr.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                bbdesigner$innerTr.append(bbdesigner$labelTd.get(0)).append(bbdesigner$valueTd.get(0));
                if (this.model.columns[columnCount].headerText == undefined)
                    this.model.columns[columnCount].headerText = this.model.columns[columnCount].field;
                bbdesigner$labelTd.append("<label for='" + this.model.columns[columnCount].field + "'>" + this.model.columns[columnCount].headerText + "</label>");
                if (BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["commands"]) && BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["template"]))
                    this._initCellEditType(columnCount, bbdesigner$valueTd);
                else if (this.model.columns[columnCount]["template"]) {
                    var helpers = {}, htxt = this.model.columns[columnCount].headerText;
                    helpers["_" + this._id + "ColumnTemplating"] = BoldBIDashboard.proxy(this._gridTemplate, null, this);
                    bbdesigner$.views.helpers(helpers);
                    if (!BoldBIDashboard.isNullOrUndefined(htxt) && !BoldBIDashboard.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                        htxt = htxt.replace(/[^0-9\s\w]/g, "_");
                    bbdesigner$("#" + this._id + htxt + columnCount + "_Template").remove();
                    var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
                    bbdesigner$valueTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "')}}");
                } else if (this.model.columns[columnCount]["commands"]) {
                    var helpers = {};
                    helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                    bbdesigner$.views.helpers(helpers);
                    bbdesigner$("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '')+ "_UnboundTemplate").remove();
                    divElement = this._createUnboundElement(this.model.columns[columnCount]);
                    bbdesigner$valueTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                    this.model.scrollSettings.frozenColumns > 0 && bbdesigner$valueTd.addClass("e-frozenunbound");
                    this._isUnboundColumn = true;
                    bbdesigner$innerTr.addClass("e-hide");
                }
                this.model.columns[columnCount]["allowEditing"] == false && bbdesigner$valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isIdentity"] === true) {
                    bbdesigner$valueTd.find(".e-field").addClass("e-identity");
                    this._identityKeys.push(bbdesigner$.trim(this.model.columns[columnCount].field));
                    this._identityKeys = bbdesigner$.unique(this._identityKeys);
                }
                if (this.model.columns[columnCount]["visible"] === false)
                    bbdesigner$innerTr.addClass("e-hide");
                 if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
                     bbdesigner$valueTd.addClass(this.model.columns[columnCount]["cssClass"]);
                }
                if (this.model.editSettings.editMode == "dialog") {
                    bbdesigner$form.append(bbdesigner$table);
                    bbdesigner$table.append(bbdesigner$innerTr);
                } else
                    bbdesigner$form.append(bbdesigner$innerTr);
                bbdesigner$form.appendTo(bbdesigner$tbody);
                if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
                    bbdesigner$valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                    this._primaryKeys.push(bbdesigner$.trim(this.model.columns[columnCount].field));
                    this._primaryKeys = bbdesigner$.unique(this._primaryKeys);
                }
            }
            if (this.model.editSettings.editMode == "dialog") bbdesigner$form.append(bbdesigner$table);
            bbdesigner$tbody = this.renderDiaglogButton(bbdesigner$form, bbdesigner$tbody);
            bbdesigner$.templates(this._id + "_JSONDialogEditingTemplate", bbdesigner$tbody.html());
        },
        _editEventTrigger: function (args) {
            if (args.requestType == "save" || args.requestType == "delete") {
                var params = {
                    data: args.data,
                    action: args.action !== undefined ? args.action : args.requestType,
                };
                if (!BoldBIDashboard.isNullOrUndefined(args.foreignKeyData))
                    params.foreignKeyData = args.foreignKeyData;
				this._trigger("end" + params.action.charAt(0).toUpperCase() + params.action.slice(1), params);
            }
        },
        _compiledDropDownTemplate: function (valueField, textField, colType, format) {
            var helpers = { _gridFormatting: this.formatting };
            bbdesigner$.views.helpers(helpers);
            var bbdesigner$select = BoldBIDashboard.buildTag('select');
            var bbdesigner$option = BoldBIDashboard.buildTag("option", format != null ? "{{:~_gridFormatting('" + format + "'," + textField + ",'" + this.model.locale + "')}}" : "{{:" + textField + "}}", {}, { value: "{{:" + valueField + "}}" });
            bbdesigner$select.append(bbdesigner$option);
            return bbdesigner$.templates(bbdesigner$select.html());
        },
        _initCellEditType: function (columnCount, element) {
            var fName = this.model.columns[columnCount].field;
            if (this.model.columns[columnCount]["foreignKeyValue"])
                this.model.columns[columnCount]["editType"] = "dropdownedit";
            if (this._dataSource() instanceof BoldBIDashboard.DataManager  && this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor) {
                var index = bbdesigner$.inArray(this.model.columns[columnCount].field,this._dataSource().adaptor.value),fk_Value,fk_fieldName;
				 if(index != -1){
					 this.model.columns[columnCount]["editType"] = "dropdownedit";
						fk_Value = this._dataSource().adaptor.value[index];
						fk_fieldName = this._dataSource().adaptor.key[index];	 
				 }
            }
            if (this.model.columns[columnCount]["editTemplate"])
                this.model.columns[columnCount]["editType"] = "edittemplate";
            if (BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["editType"]))
                if (this.model.columns[columnCount]["type"] == "date" || this.model.columns[columnCount]["type"] == "datetime")
                    this.model.columns[columnCount]["editType"] = this.model.columns[columnCount]["type"] + "picker";
                else
                    this.model.columns[columnCount]["editType"] = "stringedit";
            if (this.model.isResponsive)
                element.attr("data-cell",this._decode(this.model.columns[columnCount]["headerText"]));
            var splits = (fName || "").split("."), sLen = splits.length - 1, braces = "";
            if (!BoldBIDashboard.isNullOrUndefined(fName))
                fName = fName.replace(/[^a-z0-9\s_]/gi, '');
            while (sLen) {
                braces += "(";
                sLen--;
            }
            switch (this.model.columns[columnCount]["editType"]) {
                case "edittemplate":
                    var temp = this.model.columns[columnCount].editTemplate.create;
                    if (typeof temp == "string") {
                        var temp1 = BoldBIDashboard.util.getObject(temp, window);
                        if (!bbdesigner$.isFunction(temp1)) {
                            if (bbdesigner$(temp).length == 1 && bbdesigner$(temp).get(0).tagName == "SCRIPT")
                                var bbdesigner$edittemplate = bbdesigner$(bbdesigner$(temp).html()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                            else
                                var bbdesigner$edittemplate = bbdesigner$(temp).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                        }
                        else
                            var bbdesigner$edittemplate = bbdesigner$(temp1()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                    }
                    else
                        var bbdesigner$edittemplate = bbdesigner$(temp()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append(bbdesigner$edittemplate);
                    break;
                case "stringedit":
                    element.html(BoldBIDashboard.buildTag('input.e-field e-ejinputtext', "", {}, { value: "{{html:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field }));
                    break;
                case "booleanedit":
                    element.html('{{if #data["' + splits.join('"]["') + '"]}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' checked="checkbox"></input>{{else}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' > {{/if}}');
                    if (this.model.editSettings.editMode == "normal")
                        element.addClass("e-boolcell");
                    break;
                case "numericedit":
                    var bbdesigner$numericText = BoldBIDashboard.buildTag('input.e-numerictextbox e-field', "", {}, { type: "text", value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append(bbdesigner$numericText);
                    break;
                case "datepicker":
                case "datetimepicker":
                    var bbdesigner$datePicker = BoldBIDashboard.buildTag('input.e-' + this.model.columns[columnCount]["editType"] + ' e-field', "", {}, { type: "text", value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append(bbdesigner$datePicker);
                    break;
                case "dropdownedit":
                    var currColumn = this.model.columns[columnCount];
                    if (BoldBIDashboard.isNullOrUndefined(currColumn.dataSource)) {
                        var arrayOfDatas; var selectedItems = [];
                        if (BoldBIDashboard.isNullOrUndefined(currColumn.dataSource) && (this._dataSource() instanceof BoldBIDashboard.DataManager && this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor)) {
                            data = this.model.dataSource.adaptor.foreignData[0];
                            bbdesigner$foreignkeyfield = this.model.dataSource.adaptor.key[0];
                            bbdesigner$foreignkeyvalue = this.model.dataSource.adaptor.value[0];
                            selectedItems = data;
                        }
                        var arrayOfDatas, field = currColumn.field;
                        if (BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.getObject(field, this._dropDownManager)))
                            return;
                        arrayOfDatas = BoldBIDashboard.getObject(field, this._dropDownManager);
                        var isObj = 0 in arrayOfDatas && typeof arrayOfDatas[0] == "object";
                        var uniqueData = uniqueData = BoldBIDashboard.dataUtil.mergeSort(BoldBIDashboard.distinct(arrayOfDatas, isObj ? field : undefined, isObj ? false : undefined));
                        if (selectedItems.length == 0) {
                            if (BoldBIDashboard.isNullOrUndefined(currColumn.dataSource) && (this._dataSource() instanceof BoldBIDashboard.DataManager && this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor)) {
                                for (var index = 0; index < uniqueData.length; index++)
                                    selectedItems.push({ text: uniqueData[index][0], value: uniqueData[index][1] });
                            }
                            else {
                                for (var index = 0; index < uniqueData.length; index++)
                                    selectedItems.push({ text: uniqueData[index], value: uniqueData[index] });
                            }
                        }
                    }
                    else
                        selectedItems = BoldBIDashboard.isNullOrUndefined(currColumn.foreignKeyField) || !(currColumn.field in this._dropDownManager) ? currColumn.dataSource : BoldBIDashboard.getObject(currColumn.foreignKeyField + "." + currColumn.foreignKeyValue, this._dropDownManager);
                    var dropDownTemplate;
                    var fieldName = BoldBIDashboard.isNullOrUndefined(currColumn.foreignKeyField) ? currColumn.field : currColumn.foreignKeyField;
                    if (currColumn.foreignKeyValue)
                        dropDownTemplate = this._compiledDropDownTemplate(fieldName, currColumn.foreignKeyValue, currColumn.type, currColumn.format);
                    else if ((this._dataSource() instanceof BoldBIDashboard.DataManager && this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor) && (currColumn.field == fk_Value)) {
                        dropDownTemplate = this._compiledDropDownTemplate(bbdesigner$foreignkeyfield ? bbdesigner$foreignkeyfield : "value", bbdesigner$foreignkeyvalue ? bbdesigner$foreignkeyvalue : "text", currColumn.type, currColumn.format);
                    }
                    else
                        dropDownTemplate = this._compiledDropDownTemplate("value", "text", currColumn.type, currColumn.format);
                    if (!BoldBIDashboard.isNullOrUndefined(currColumn.editParams) && ((this._dataSource() instanceof BoldBIDashboard.DataManager && (this._dataSource() instanceof BoldBIDashboard.DataManager && this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor)) && (currColumn.field == fk_Value)))
                        element.get(0).innerHTML = "<input value='{{:" + fk_fieldName + "}}'/>";
                    else
                        element.get(0).innerHTML = ["<select>", dropDownTemplate.render(selectedItems), "</select>"].join("");
					element.find("select,input").prop({ id: this._id + fName, name: currColumn.field }).addClass("e-field e-dropdownlist");
                    break;
            }
        },
        addBatchEditTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var bbdesigner$outerDiv = BoldBIDashboard.buildTag('div', "", { display: "none" }, { id: this._id + "_BulkEditTemplate" }), i, columnCount, bbdesigner$innerDiv;
            for (i = 0, columnCount = this.model.columns.length; i < columnCount; i++) {
                if (!this.model.columns[i]["template"] || !this.model.columns[i]["commands"]) {
                    bbdesigner$innerDiv = BoldBIDashboard.buildTag('div', "", {}, { id: this.model.columns[i].field.replace(/\./g, BoldBIDashboard.pvt.consts.complexPropertyMerge) + "_BulkEdit" });
                    this._initCellEditType(i, bbdesigner$innerDiv);
                    bbdesigner$outerDiv.append(bbdesigner$innerDiv);
                }
                if (this.model.columns[i]["isPrimaryKey"] === true) {
                    this._primaryKeys.push(bbdesigner$.trim(this.model.columns[i].field));
                    this._primaryKeys = bbdesigner$.unique(this._primaryKeys);
                }
                if (this.model.columns[i]["isIdentity"] === true) {
                    bbdesigner$innerDiv.find(".e-field").addClass("e-identity");
                    this._identityKeys.push(bbdesigner$.trim(this.model.columns[i].field));
                    this._identityKeys = bbdesigner$.unique(this._identityKeys);
                }
            }
            if (bbdesigner$outerDiv.children().length)
                this._bulkEditTemplate = bbdesigner$outerDiv;

        },
        addExternalDialogEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
			  var  bbdesigner$valueTd;
			   bbdesigner$valueTd = BoldBIDashboard.buildTag('td', "", { "text-align": "left" }).addClass("e-rowcell");
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
				if (BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["commands"]) && BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount]["template"]) && !BoldBIDashboard.isNullOrUndefined(this.model.columns[columnCount].editTemplate) )
                    this._initCellEditType(columnCount, bbdesigner$valueTd);
                if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
                    this._primaryKeys.push(bbdesigner$.trim(this.model.columns[columnCount].field));
                    this._primaryKeys = bbdesigner$.unique(this._primaryKeys);
                }
            }
            var bbdesigner$tbody = BoldBIDashboard.buildTag('div', "", { 'display': 'none' });
            var bbdesigner$form = BoldBIDashboard.buildTag('form.gridform', "", {}, { id: this._id + "EditForm" });
            var cloneElement;
            if (this.model.editSettings.editMode == "dialogtemplate" && this.model.editSettings.dialogEditorTemplateID != null)
                cloneElement = this.model.editSettings.dialogEditorTemplateID;
            else if (this.model.editSettings.editMode == "externalformtemplate" && this.model.editSettings.externalFormTemplateID != null) {
                cloneElement = this.model.editSettings.externalFormTemplateID;
                bbdesigner$form.addClass("e-display");
            }
            else {
                cloneElement = this.model.editSettings.inlineFormTemplateID;
                bbdesigner$form.addClass("e-display");
            }

            bbdesigner$form.html(bbdesigner$(cloneElement).html());
            bbdesigner$tbody = this.renderDiaglogButton(bbdesigner$form, bbdesigner$tbody);
            bbdesigner$.templates(this._id + "_JSONdialogTemplateMode", bbdesigner$tbody.html());
        },
        _editdblClickHandler: function (e) {
            var bbdesigner$target = bbdesigner$(e.target);
            if (bbdesigner$target.hasClass("e-rowcell") || (bbdesigner$target.hasClass("e-tooltip") && bbdesigner$target.closest("td").hasClass("e-rowcell"))) {
                if (!this.model.isEdit || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {
                    this._bbdesigner$currentTr = (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0)
                        ? this.getRowByIndex(bbdesigner$target.closest('tr').index())
                        : bbdesigner$target.closest('tr');
                    this.startEdit(this._bbdesigner$currentTr);
                }
            }
            return false;
        },
        _columnToSelect: function () {
            var column = [];
            for (var i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i]["editType"] === BoldBIDashboard.Grid.EditingType.Dropdown && BoldBIDashboard.isNullOrUndefined(this.model.columns[i]["dataSource"]))
                    column.push(this.model.columns[i].field);
            }
            if (column.length)
                return { query: BoldBIDashboard.Query().select(column), fields: column };
            return{ query: BoldBIDashboard.Query(), fields: [] };
        },
        _renderExternalForm: function () {
            var bbdesigner$externalform = BoldBIDashboard.buildTag("div", "", { display: "none" }, { id: this._id + "_externalEdit", 'class': "e-form-container" });
            var bbdesigner$eformHeader = BoldBIDashboard.buildTag("div", "", "", { id: this._id + "_eFormHeader", 'class': "e-form-titlebar" });
            var bbdesigner$eformTitle = BoldBIDashboard.buildTag("span", "", "", { 'class': "e-form-title" });
            var bbdesigner$eformToggleBtn = BoldBIDashboard.buildTag("div", "", "", { id: this._id + "_eFormToggleBtn", 'class': "e-form-togglebtn" });
            var bbdesigner$eformToggleIcon = BoldBIDashboard.buildTag("span", "", "", { 'class': "e-form-toggle-icon e-icon" });
            bbdesigner$eformToggleBtn.append(bbdesigner$eformToggleIcon);
            bbdesigner$eformHeader.append(bbdesigner$eformTitle).append(bbdesigner$eformToggleBtn);

            var bbdesigner$eformContent = BoldBIDashboard.buildTag("div", "", "", { id: this._id + "_eFormContent", 'class': "e-form-content" });
            var bbdesigner$eform = BoldBIDashboard.buildTag("div", "", "", { id: this._id + "_externalForm", 'class': "e-externalform" });
            var bbdesigner$contentOuterDiv = BoldBIDashboard.buildTag("div", "", "", { 'class': "e-externalformedit" });
            bbdesigner$eform.append(bbdesigner$contentOuterDiv);
            bbdesigner$eformContent.append(bbdesigner$eform);
            return bbdesigner$externalform.append(bbdesigner$eformHeader).append(bbdesigner$eformContent);;
        },
        _buttonClick: function (e) {
            if (e.type == "close") {
                if (!this.model.isEdit)
                    return;
                this.model.isEdit = false;
                this.element.BoldBIDashboardGrid("cancelEdit");
                this.refreshToolbar();
                return;
            }
            if (e.keyCode !== undefined && e.keyCode != 13 || this.model == null)
                return true;
            if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                if (e.target.id == "EditDialog_" + this._id + "_Save") 
                    this.element.BoldBIDashboardGrid("endEdit");
                 else if (e.target.id == "EditDialog_" + this._id + "_Cancel") {
                    this.element.BoldBIDashboardGrid("cancelEdit");
                    bbdesigner$("#" + this._id + "_dialogEdit").BoldBIDashboardDialog("close");
                }
            }
            else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                if (bbdesigner$(e.target).hasClass("e-form-toggle-icon")) {
                    this.element.BoldBIDashboardGrid("cancelEdit");
                    bbdesigner$("#" + this._id + "_externalEdit").css("display", "none");
                }
                else {
                    if (e.target.id == "EditExternalForm_" + this._id + "_Save") {
                        if (this.element.BoldBIDashboardGrid("endEdit").length !== undefined)
                            bbdesigner$("#" + this._id + "_externalEdit").css("display", "none");
                    } else if (e.target.id == "EditExternalForm_" + this._id + "_Cancel") {
                        this.element.BoldBIDashboardGrid("cancelEdit");
                        bbdesigner$("#" + this._id + "_externalEdit").css("display", "none");
                    }
                }
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                if (e.target.id == "InlineEditForm_" + this._id + "_Save")
                    this.element.BoldBIDashboardGrid("endEdit");
                else if (e.target.id == "InlineEditForm_" + this._id + "_Cancel")
                    this.element.BoldBIDashboardGrid("cancelEdit");
            }
            else
                this.element.BoldBIDashboardGrid("cancelEdit");
        },
        _enableEditingEvents: function () {
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.allowEditing && this.model.editSettings.editMode != "batch" && this.model.editSettings.allowEditOnDblClick)
                    this._on(this.element, "dblclick", ".e-gridcontent", this._editdblClickHandler);
                else
                    this._off(this.element, "dblclick", ".e-gridcontent");
                this._off(bbdesigner$("#" + this._id + "_dialogEdit"), "click keypress", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    this._on(bbdesigner$("#" + this._id + "_dialogEdit"), "click keypress", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel", this._buttonClick);
                }
                else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                    this._on(bbdesigner$("#" + this._id + "_externalEdit"), "click keypress", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel", this._buttonClick);
                    bbdesigner$(this.element).on("click", ".e-form-toggle-icon", bbdesigner$.proxy(this._buttonClick, this));
                }
                else if (this.model.editSettings.editMode == "batch") {
                    this._on(bbdesigner$(document), "mousedown", this._saveCellHandler);
					this._batchEnabled = true;
				}

                else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
                    bbdesigner$(this.element).on("click keypress", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel", bbdesigner$.proxy(this._buttonClick, this));
				
				if (this.model.editSettings.editMode != "batch" && this._batchEnabled) {
                    this._off(bbdesigner$(document), "mousedown", this._saveCellHandler);
					this._batchEnabled = false;
				}

            } else {
                this._off(bbdesigner$("#" + this._id + "_dialogEdit"), "click", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
                bbdesigner$(this.element).off("click", ".e-icon");
                this._off(bbdesigner$("#" + this._id + "_externalEdit"), "click", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel");
                bbdesigner$(this.element).off("click", ".e-form-toggle-icon");
                bbdesigner$(this.element).off("click", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel");
            }
        },
        _multiRowDelete: function () {
            var changes = {};
            changes.added = []; changes.deleted = [], changes.changed = [];
            changes.deleted = this.getSelectedRecords();
            var args = {};
            args.tr = this.getSelectedRows();
            args.requestType = "delete";
            var gridObject = this;
            this._sendBulkReuqest(changes, args);
        },
        deleteRow: function (bbdesigner$tr) {
            if (!this.model.editSettings.allowDeleting || (this.model.isEdit && this.model.editSettings.editMode != "batch" && !this.model.editSettings.showAddNewRow))
                return;
            if (bbdesigner$.isArray(bbdesigner$tr)) {
                this.selectRows(bbdesigner$tr);
                this._multiRowDelete();
            }
            else {
                if (this.model.editSettings.editMode == "batch")
                    this._bulkDelete(this.getIndexByRow(bbdesigner$tr));
                else {
                    if (this._primaryKeys.length == 0 && !this.model.editSettings.allowEditing && !this.model.editSettings.allowAdding) {
                        for (i = 0; i < this.model.columns.length; i++) {
                            if (this.model.columns[i]["isPrimaryKey"] === true) {
                                this._primaryKeys.push(bbdesigner$.trim(this.model.columns[i].field));
                                this._primaryKeys = bbdesigner$.unique(this._primaryKeys);
                            }
                        }
                    }
                    if (this._selectedRow() == -1 && BoldBIDashboard.isNullOrUndefined(bbdesigner$tr)) {
                        alert(this.localizedLabels.DeleteOperationAlert);
                        return;
                    }
                    if (BoldBIDashboard.isNullOrUndefined(bbdesigner$tr))
                        bbdesigner$tr = this.getRowByIndex(this._selectedRow());
                    this._primaryKeyValues = [];
                    for (var index = 0; index < this._primaryKeys.length; index++) {
                        var column = this.getColumnByField(this._primaryKeys[index]);
                        var trIndex = this.getIndexByRow(bbdesigner$tr);
                        this._primaryKeyValues.push(this._currentJsonData[trIndex][column.field]);
                    }
                    var deleteManager = BoldBIDashboard.DataManager(this._currentJsonData);
                    var query = new BoldBIDashboard.Query();
                    for (var i = 0; i < this._primaryKeys.length; i++)
                        query = query.where(this._primaryKeys[i], BoldBIDashboard.FilterOperators.equal, this._primaryKeyValues[i]);
                    currentData = deleteManager.executeLocal(query);
                    var args = {};
                    args.tr = bbdesigner$tr;
                    args.data = currentData[0];
                    var foreignKeyData = this._getForeignKeyData(args.data);
                    if (!BoldBIDashboard.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    args.requestType = BoldBIDashboard.Grid.Actions.Delete;
                    if (this._trigger("actionBegin", args))
                        return true;
                    this._cDeleteData = currentData;
                    var promise;
                    if (this._dataSource() instanceof BoldBIDashboard.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof BoldBIDashboard.remoteSaveAdaptor)) {
                        promise = this._dataManager.remove(this._primaryKeys[0], currentData[0][this._primaryKeys[0]]);
                        var proxy = this;
                        if (bbdesigner$.isFunction(promise.promise)) {
                            promise.done(function (e) {
                                proxy._processBindings(args);
                                proxy._primaryKeyValues = [];
                                proxy._cDeleteData = null;
                            });
                            promise.fail(function (e) {
                                args.error = e
                                proxy._trigger("actionFailure", args)
                            });
                        } else
                            this._processBindings(args);
                    } else
                        this._processBindings(args);
                    if (promise == undefined || !bbdesigner$.isFunction(promise.promise)) {
                        this._primaryKeyValues = [];
                        this._cDeleteData = null;
                    }
                }
            }
        },
        
        _htmlEncode: function (html) {
            str = html;
            if (!BoldBIDashboard.isNullOrUndefined(str))
                str = isNaN(str) ? str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, '\'') : str;
            return str;
        },
        startEdit: function (bbdesigner$tr) {
		    if (!this.model.editSettings.allowEditing || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal" && this._excludeDetailRows().hasClass("e-editedrow")))
		        return;
		    if (this.element.BoldBIDashboardWaitingPopup("model.showOnInit"))
		        return;
            if (this._selectedRow() == -1 && BoldBIDashboard.isNullOrUndefined(bbdesigner$tr)) {
                alert(this.localizedLabels.EditOperationAlert);
                return;
            }
            if (BoldBIDashboard.isNullOrUndefined(bbdesigner$tr)) {
                this._currentTrIndex = this._selectedRow();
                this._bbdesigner$currentTr = this.getRowByIndex(this._currentTrIndex);
            } else {
                this._currentTrIndex = this.getIndexByRow(bbdesigner$tr);
                this._bbdesigner$currentTr = bbdesigner$tr;
            }
            if (!bbdesigner$(this._bbdesigner$currentTr).is(":visible"))
                return false;
            this._primaryKeyValues = [];
            for (var index = 0; index < this._primaryKeys.length; index++) {
                var column = this.getColumnByField(this._primaryKeys[index]);
                var trIndex = this.getIndexByRow(this._bbdesigner$currentTr);
                this._primaryKeyValues.push(this._htmlEncode(this._currentJsonData[trIndex][column.field]));
            }
            var args = { row: this._bbdesigner$currentTr, rowIndex: this._currentTrIndex, primaryKey: this._primaryKeys, primaryKeyValue: this._primaryKeyValues };
            var cancel = this._trigger("beginEdit", args);
            if (cancel) {
                this._primaryKeyValues = [];
                return;
            }
            args.requestType = BoldBIDashboard.Grid.Actions.BeginEdit;
            this._processBindings(args);

        },
         _startAdd: function() {
            if (!this.model.editSettings.allowAdding)
                return;
			this._isAddNew = true;
            if (this.model.editSettings.editMode == "batch")
                this._bulkAddRow();
            else {
                var cloneData = {};
                for (var i = 0; i < this.model.columns.length; i++) {
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.parentDetails) && this.model.columns[i].field == this.model.parentDetails.parentKeyField)
                        this.model.columns[i].defaultValue = this.model.parentDetails.parentKeyFieldValue;
                    cloneData[this.model.columns[i].field] = !BoldBIDashboard.isNullOrUndefined(this.model.columns[i].defaultValue) ? this.model.columns[i].defaultValue : "";
                }
                var args = {}, complexObject = {};
                args.data = cloneData;
                if (this.model.editSettings.editMode.indexOf('template') != -1) {
                    for (var i = 0; i < this.model.columns.length; i++) {
                        if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[i].field) && this.model.columns[i].field.indexOf(".") != -1) {
                            var splits = this.model.columns[i].field.split('.');
                            BoldBIDashboard.createObject(this.model.columns[i].field, args.data[this.model.columns[i].field], complexObject);
                            args.data[splits[0]] = complexObject;
                            delete args.data[this.model.columns[i].field];
                        }
                    }
                }
                var foreignKeyData = this._getForeignKeyData(args.data);
                if (!BoldBIDashboard.isNullOrUndefined(foreignKeyData))
                    args.foreignKeyData = foreignKeyData;
                args.requestType = "add";
                this.clearSelection();
                var returnValue = this._processBindings(args);
                if (!returnValue)
                    this.model.editSettings.showAddNewRow ? this._selectedRow(-1) : this._selectedRow(0);
                var groupedColumns = this.model.groupSettings.groupedColumns.length;
                if (groupedColumns > 1) {
                    var bbdesigner$editCol = this.getContentTable().find(".e-addedrow").find("table").find("colgroup").children();
                    bbdesigner$(bbdesigner$editCol.slice(0, groupedColumns - 1)).css('width', this.getHeaderTable().find('colgroup').children()[0].style.width);
                }
            }
        },
        
        endEdit: function () {
            if (this.model.isEdit) {
                var formElement, bbdesigner$formElement, editedTr, count = 0;
                if (!this.editFormValidate())
                    return true;
                var obj = {};
                var editedRowWrap, type;
                if (this.model.editSettings.editMode == "batch")
                    this.saveCell();
                else {
					if(this.model.editSettings.showAddNewRow)
						editedTr = this.getContentTable().find(".e-editedrow");
                    formElement = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !BoldBIDashboard.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild: document.getElementById(this._id + "EditForm");
                    bbdesigner$formElement = bbdesigner$(formElement);
                    if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
                        editedRowWrap = bbdesigner$formElement.closest('tr');
                    else
                        editedRowWrap = bbdesigner$formElement.closest('div');
                    editedRowWrap.find('td.e-rowcell').removeClass('e-validError');
                    formElement = this.model.scrollSettings.frozenColumns > 0 ? formElement[0] : formElement;
                    for (var index = 0; index < formElement.length; index++) {
                        if (editedRowWrap.hasClass("e-addedrow") && bbdesigner$(formElement[index]).hasClass("e-identity"))
                            continue;
                        var columnName = formElement[index].name, bbdesigner$element = bbdesigner$(formElement[index]);
                        if (bbdesigner$element.hasClass("e-dropdownlist e-input") && bbdesigner$element.attr("id").indexOf("_input") != -1 && BoldBIDashboard.isNullOrUndefined(bbdesigner$formElement[1]))
                            continue;
                        if (columnName != undefined) {
                            if (columnName == "") {
                                if (formElement[index].id.indexOf("Save") != -1 || formElement[index].id.indexOf("Cancel")!= -1)
                                    columnName = "";
                                else
                                    columnName = formElement[index].id.replace(this._id, "");
                            }
                            if (columnName != "" && obj[columnName] == null) {
                                var column = this.getColumnByField(columnName), value = formElement[index].value, checkType = formElement[index].type, checkState = bbdesigner$(formElement[index]).is(':checked'),
                                    type = column ? column.originalType : null;
                                if (!BoldBIDashboard.isNullOrUndefined(column) && (column.editType == "edittemplate")) {
                                    if (!BoldBIDashboard.isNullOrUndefined(formElement[index + 1]) && formElement[index].type == 'hidden') index++;
                                    if (formElement[index].type != 'hidden') {
                                        var temp1 = column.editTemplate.read; bbdesigner$element = bbdesigner$(formElement[index]);
                                        if (typeof temp1 == "string")
                                            temp1 = BoldBIDashboard.util.getObject(temp1, window);
                                        value = BoldBIDashboard.isNullOrUndefined(column.foreignKeyField) ? temp1(bbdesigner$element) : bbdesigner$element.BoldBIDashboardDropDownList("getSelectedValue");
                                    }
                                }
                                else if (bbdesigner$(formElement[index]).hasClass("e-datepicker")) {
                                    value = bbdesigner$element.BoldBIDashboardDatePicker("model.value");
                                }
                                else if (bbdesigner$(formElement[index]).hasClass("e-datetimepicker")) {
                                    value = bbdesigner$element.BoldBIDashboardDateTimePicker("model.value");
                                }
                                else if (bbdesigner$element.is(".e-numerictextbox")) {
                                    value = bbdesigner$element.ejNumericTextbox("getValue");
                                    if (column.type == "string" && !BoldBIDashboard.isNullOrUndefined(value))
                                        value = value.toString();
								}
								else if (bbdesigner$element.data("BoldBIDashboardDropDownList")) {
                                    value = bbdesigner$element.BoldBIDashboardDropDownList("getSelectedValue");
                                    if (!BoldBIDashboard.isNullOrUndefined(column) && !BoldBIDashboard.isNullOrUndefined(column.format) && (column.type == "date" || column.type == "datetime"))
                                         value = value.length > 0 ? new Date(value) : value;
                                
								}
                                if (type)
                                    value = type == "number" ? +value : type == "boolean" ? (value === this.localizedLabels.True ? true : false) : type === "date" ? new Date(value) : value;
                                if (column == null)
                                    value = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
                                else if (column.type == "number" && !BoldBIDashboard.isNullOrUndefined(value) && value.length)
                                    value = BoldBIDashboard.parseFloat(value,this.model.locale);
                                if (typeof value == "string" && !value.length)
                                    value = null;
                                if ((checkType != "checkbox" && !BoldBIDashboard.isNullOrUndefined(value) && value !== "") || checkState)
                                    count++;
                                var originalvalue;
                                if (checkType != "checkbox")
                                    originalvalue = value;
                            	else
                                    originalvalue = checkState;
                            if (columnName.indexOf(".") != -1)
                                BoldBIDashboard.createObject(columnName, originalvalue, obj);
                            else
                                obj[columnName] = originalvalue;
                            }
                        }
                        if (index == formElement.length - 1 && bbdesigner$formElement.length > 1 && bbdesigner$formElement.index(formElement) == 0) {
                            formElement = bbdesigner$formElement[1];
                            index = -1;
                        }

                    }
                    var args = { data: obj };
                    var foreignKeyData = this._getForeignKeyData(args.data);
                    if (!BoldBIDashboard.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    args.requestType = BoldBIDashboard.Grid.Actions.Save;
                    args.selectedRow = this._selectedRow();
                    var currentData;
                    if (this._trigger("actionBegin", args))
                        return true;
                    if (editedRowWrap.hasClass("e-editedrow")) {
                        this._cModifiedData = obj;
                        args.action = "edit";
                    } else if (editedRowWrap.hasClass("e-addedrow")) {
                        if (count)
                            this._cAddedRecord = obj;
                        args.action = "add";
                    }
                    if (args.action == "add" && this.editFormValidate()) {
                        if (!count) {
                            elements = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : bbdesigner$("#" + this._id + "EditForm");
                            var error = BoldBIDashboard.buildTag("div");
                            var element = elements.find("input:visible").not(".e-identity").first();
                            this._renderValidator(error, element);
                            bbdesigner$errorMessage = BoldBIDashboard.buildTag("div.e-field-validation-error", this.localizedLabels.EmptyRowValidationMessage);
                            bbdesigner$tail = bbdesigner$(error).find(".e-errortail");
                            bbdesigner$errorMessage.insertAfter(bbdesigner$tail);
                            bbdesigner$errorMessage.css("display", "block");
                            return false;
                        }
                    }
                    this._updateAction(args);
                }
            }
        },
        _updateAction: function (args) {
            var promise;
            if (this._dataSource() instanceof BoldBIDashboard.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof BoldBIDashboard.remoteSaveAdaptor) || this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor) {
                   if (!BoldBIDashboard.isNullOrUndefined(this._cModifiedData))
                    promise = this._dataManager.update(this._primaryKeys[0], args.data);
                else
                    promise = this._dataManager.insert(args.data);
				var proxy = this;
				this.element.BoldBIDashboardWaitingPopup("show");
                if (bbdesigner$.isFunction(promise.promise)) {
                    promise.done(function (e) {
					    proxy.model.isEdit = false;
					    if (!BoldBIDashboard.isNullOrUndefined(e) && bbdesigner$.isPlainObject(e.record)) {
                            bbdesigner$.extend(args.data, e.record);
                            if (args.action == "add")
                                proxy._cAddedRecord = args.data;
                            if (args.action == "edit")
                                proxy._cModifiedData = args.data;
                        }
                        proxy._processBindings(args);
                        if (proxy._isRemoteSaveAdaptor) {
                            proxy.element.BoldBIDashboardWaitingPopup("hide");
                            if (!BoldBIDashboard.isNullOrUndefined(proxy._unboundRow) && args.selectedRow != proxy._unboundRow && args.requestType == "save") {
                                proxy._unboundRow.find(".e-editbutton").trigger("click");
                                proxy._unboundRow = null;
                            }
                        }
                        proxy._cModifiedData = null;
                        proxy._cAddedRecord = null;
                        proxy._primaryKeyValues = [];
                    });
                    promise.fail(function (e) {
                        args.error = (e && e.error) ? e.error : e;
                        proxy._trigger("actionFailure", args)
                    });
                } else{
				    proxy.model.isEdit = false;
                    proxy._processBindings(args);
			    }
            } else
                this._processBindings(args);
            if (promise == undefined || !bbdesigner$.isFunction(promise.promise)) {
                this._cModifiedData = null;
                this._cAddedRecord = null;
                this._primaryKeyValues = [];
            }
        },
        
        cancelEdit: function () {
            var args = {};
            args.requestType = BoldBIDashboard.Grid.Actions.Cancel;
            this._cModifiedData = null;
            this._processBindings(args);
            this._primaryKeyValues = [];
            this._currentData = null;
        },
        
        refreshToolbar: function () {
            var bbdesigner$toolbar = bbdesigner$("#" + this._id + "_toolbarItems");
            var lis = bbdesigner$toolbar.find("li");
            bbdesigner$toolbar.BoldBIDashboardToolbar("enableItem", lis);
			var editedTr = this.getContentTable().find(".e-editedrow");
			if(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal" && editedTr.length==0)
				this._disabledToolItems.push(lis.filter('[id='+this._id+'_add]'));
			else
			{
			    for (var i = 0; i < lis.length; i++) {
			        switch (lis[i].id) {
			            case this._id + "_add":
			            case this._id + "_edit":
			            case this._id + "_delete":
			            case this._id + "_responsiveFilter":
			            case this._id + "_responsiveSorting":
			            case this._id + "_search":
			                if (this.model.isEdit) {
			                    if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || editedTr.length != 0) {
			                        bbdesigner$(lis[i]).hasClass("e-hover") && bbdesigner$(lis[i]).removeClass("e-hover");
			                        this._disabledToolItems.push(lis[i]);
			                    }
			                }
			                else if (!this.model.enableToolbarItems && !this.model.editSettings.allowAdding && lis[i].id == this._id + "_add")
			                        this._disabledToolItems.push(lis[i]);
                            else if (!this.model.enableToolbarItems && !this.model.editSettings.allowEditing && lis[i].id == this._id + "_edit")
                                    this._disabledToolItems.push(lis[i]);
                            else if (!this.model.enableToolbarItems && !this.model.editSettings.allowDeleting && lis[i].id == this._id + "_delete")
                                    this._disabledToolItems.push(lis[i]);
			                break;
			            case this._id + "_update":
			            case this._id + "_cancel":
			                if (!this.model.isEdit) {
			                    bbdesigner$(lis[i]).hasClass("e-hover") && bbdesigner$(lis[i]).removeClass("e-hover");
			                    this._disabledToolItems.push(lis[i]);
			                }
			                break;
			        }
			    }
			}
            bbdesigner$toolbar.BoldBIDashboardToolbar("disableItem", this._disabledToolItems);
            bbdesigner$toolbar.BoldBIDashboardToolbar("model.enableRTL", this.model.enableRTL);
            this._disabledToolItems = bbdesigner$();

        },
        _getHiddenCount: function (elements) {
            var count = 0;
            for (var i = 0; i < elements.length; i++) {
                if (elements.eq(i).hasClass("e-hide"))
                    count++;
            }
            return count;
        },
        _refreshTemplateCell: function (temp, data) {
            var tempcell = temp.find('.e-templatecell');
			for(var i =0; i< tempcell.length;i++){						
				var args = { cell: tempcell[i], data: data, column: this.model.columns[bbdesigner$(tempcell[i]).index()], rowIndex: temp.index()};
				this._trigger("templateRefresh", args);	
			}			
        },
        _edit: function (args) {
            var editingManager = BoldBIDashboard.DataManager(this._currentJsonData), bbdesigner$tempFirstTR;
            var queryManager = new BoldBIDashboard.Query();
            if (this.model.allowFiltering)
                this._previousFilterCount = this._filteredRecordsCount;
            for (var index = 0; index < this._primaryKeys.length; index++)
                queryManager = queryManager.where(this._primaryKeys[index], BoldBIDashboard.FilterOperators.equal, this._primaryKeyValues[index]);
            this._currentData = editingManager.executeLocal(queryManager);
            var temp = document.createElement('div');
            var formTitle = !BoldBIDashboard.isNullOrUndefined(this.model.editSettings.titleColumn) ? this.model.editSettings.titleColumn : this._primaryKeys[0];
            var bbdesigner$temp = bbdesigner$(temp), bbdesigner$tempSecondTR;
            if (this.model.editSettings.editMode == "normal") {
                temp.innerHTML = ['<table>', bbdesigner$.render[this._id + "_JSONEditingTemplate"](this._currentData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                var bbdesigner$tr = bbdesigner$temp.find("tr").first(), detailCount = 0, firstHidden = this.model.columns.length
                , bbdesigner$currentTrFr = args.row.first();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    bbdesigner$temp.prepend(['<table>', bbdesigner$.render[this._id + "_JSONFrozenEditingTemplate"](this._currentData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join(""));
                    bbdesigner$tr.splice(0, 0, bbdesigner$temp.find("table").first().find("tr").first().get(0));
                    bbdesigner$currentTrLa = args.row.last();
                    bbdesigner$tempLastTR = bbdesigner$tr.last();
                }
                bbdesigner$tempFirstTR = bbdesigner$temp.find("tr").first();
                bbdesigner$temp.find('td').not(".e-rowcell").addClass("e-editcell e-normaledit");
                this._setEditDropdownValue(bbdesigner$temp);
                if (this.model.groupSettings.groupedColumns.length >= 2) {
                    var bbdesigner$indentCell = args.row.find("td.e-indentcell");
                    bbdesigner$temp.find("tr").first().prepend(bbdesigner$indentCell);
                }
                if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                    detailCount++;                    
                    bbdesigner$temp.find(".e-editcell").find("tr").prepend(args.row.find("[class^=e-detailrow]").removeClass("e-selectionbackground e-active"));
                    if (this.model.gridLines != "both")
                        bbdesigner$temp.find(".e-editcell .e-rowcell:first").addClass("e-detailrowvisible");
                }
                if (this.model.scrollSettings.frozenColumns > 0) {
                    bbdesigner$temp.find(".e-editcell").get(1).colSpan = this.model.columns.length - this.model.scrollSettings.frozenColumns - args.row.last().find(".e-hide").length + detailCount;
                    firstHidden = this.model.scrollSettings.frozenColumns;
                    bbdesigner$currentTrLa.hasClass("e-alt_row") && bbdesigner$tempLastTR.addClass("e-alt_row")
                }
                bbdesigner$temp.find(".e-editcell").get(0).colSpan = firstHidden - bbdesigner$currentTrFr.find("td").not(":visible").length + detailCount;
                bbdesigner$currentTrFr.hasClass("e-alt_row") && bbdesigner$tempFirstTR.addClass("e-alt_row");                
                bbdesigner$currentTrFr.empty().replaceWith(bbdesigner$tempFirstTR.addClass("e-editedrow"));
                if (!bbdesigner$tempFirstTR.is(":last-child"))
                    bbdesigner$tempFirstTR.find('td.e-rowcell').addClass('e-validError');
                if (this.model.scrollSettings.frozenColumns > 0)
                    bbdesigner$currentTrLa.empty().replaceWith(bbdesigner$tempLastTR.addClass("e-editedrow"));
                this._refreshUnboundTemplate(bbdesigner$tr.find(".gridform"));
                if(this.model.scrollSettings.frozenColumns == 0)
					this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row, tr.e-editedrow").toArray();
				else
					this._gridRows = bbdesigner$(this.getContentTable().get(0).rows).toArray();                 
                if (this.model.scrollSettings.frozenColumns > 0 && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) {
					this.getScrollObject().scrollY(this.getScrollObject().model.scrollTop, true);
                    this._gridRows = [this._gridRows, bbdesigner$(this.getContentTable().get(1).rows).toArray()];
				}
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                var detailCount = 0;
                temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? bbdesigner$.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : bbdesigner$.render[this._id + "_JSONdialogTemplateMode"](this._currentData);
				this._setEditDropdownValue(bbdesigner$temp);
                var tr = BoldBIDashboard.buildTag('tr');
                var td = BoldBIDashboard.buildTag('td');
                tr.addClass("e-editedrow");
                td.addClass("e-inlineformedit");
                temp = bbdesigner$(temp).clone(true).children();
                td.html(temp);
                tr.append(td);
                if (!tr.is(":last-child"))
                    tr.find('.e-rowcell').addClass('e-validError');
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var bbdesigner$trClone = tr.clone();
                    bbdesigner$trClone.find("td").empty().prop("colspan", this.model.scrollSettings.frozenColumns);
                    args.row.eq(1).after(tr).end().eq(0).after(bbdesigner$trClone);
                    this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
                }
                else
                    args.row.after(tr);
                this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr").toArray();
				if (this.model.detailsTemplate != null || this.model.childGrid != null)
                        detailCount++;
                if (this.model.scrollSettings.frozenColumns > 0)
                    td.prop("colspan", this.model.columns.length - this.model.scrollSettings.frozenColumns - tr.find("form").children().not(":visible").length - hideCount + detailCount);
                else
                    td.prop("colspan", this.model.columns.length - this._hiddenColumns.length - hideCount + detailCount);
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
                bbdesigner$("#" + this._id + "_inlineFormTitle").text(this.localizedLabels.EditFormTitle + this._currentData[0][formTitle]);
                args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
            }
            else {
                bbdesigner$temp.addClass("e-editedrow");
                temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? bbdesigner$.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : bbdesigner$.render[this._id + "_JSONdialogTemplateMode"](this._currentData);
                this._setEditDropdownValue(bbdesigner$temp);
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    bbdesigner$("#" + this._id + "_dialogEdit").html(bbdesigner$(temp));
                    var model = {};
                    model.cssClass = this.model.cssClass;
                    model.enableRTL = this.model.enableRTL;
                    model.width = "auto";
                    model.enableResize = this.phoneMode;
                    model.close = bbdesigner$.proxy(this._buttonClick, this);
                    model.content = "#" + this._id;
                    model.enableModal = true;
                    model.allowKeyboardNavigation = false;
                    model.title = this.localizedLabels.EditFormTitle + this._currentData[0][formTitle];
                    bbdesigner$("#" + this._id + "_dialogEdit").BoldBIDashboardDialog(model);
                    bbdesigner$("#" + this._id + "_dialogEdit").BoldBIDashboardDialog("open");
                }
                else {
                    bbdesigner$("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
                    bbdesigner$("#" + this._id + "_externalForm").find(".e-externalformedit").html(bbdesigner$(temp));
                    bbdesigner$("#" + this._id + "_eFormHeader").find(".e-form-title").text(this.localizedLabels.EditFormTitle + this._currentData[0][formTitle]);
                    this._externalFormPosition();
                    args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
                }
            }
            if (this.model.editSettings.editMode != "normal")
                bbdesigner$tempFirstTR = bbdesigner$(temp);
			if(!BoldBIDashboard.isNullOrUndefined(this.model.templateRefresh) && bbdesigner$tempFirstTR.find(".e-templatecell").length != 0) 
				this._refreshTemplateCell(bbdesigner$tempFirstTR, this.model.currentViewData[bbdesigner$tempFirstTR.index()]);
        },
        _setEditDropdownValue: function (bbdesigner$temp) {
            var bbdesigner$select = bbdesigner$temp.find("select.e-field"), x, inputDrop =  bbdesigner$temp.find("input.e-field.e-dropdownlist");
            for (var i = 0; i < bbdesigner$select.length; i++) {
                var ddlTemplate = {}, opPara = "";
                if (bbdesigner$select[i].name.indexOf('.') != -1) {
                    for (var j = 1; j < bbdesigner$select[i].name.split(".").length; j++)
                        opPara = opPara.concat("(");
                    ddlTemplate[this._id + "ddlTemp"] = "{{:" + opPara + "#data['" + bbdesigner$select[i].name.split('.').join("'] || {})['") + "']}}";
                }
                else
                    ddlTemplate[this._id + "ddlTemp"] = "{{:" + bbdesigner$select[i].name.replace(/[^a-z0-9\s_]/gi, '') + "}}"
                bbdesigner$.templates(ddlTemplate);
			    x = bbdesigner$.render[this._id + "ddlTemp"](this._currentData);
			    bbdesigner$temp.find("select:eq(" + i + ") option[value='" + x + "']").attr("selected", "selected");
                bbdesigner$select.eq(i).val(x);
            }
			for(var j=0;j<inputDrop.length;j++){
				inputDrop.eq(j).val(BoldBIDashboard.getObject(inputDrop.eq(j).attr("name"),this._currentData[0]));
			}
        },
        _add: function (args) {
            var temp = document.createElement('div'), bbdesigner$editTr;
            if (this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
                !(this._dataSource() instanceof BoldBIDashboard.DataManager) ? this._dataSource().splice(0, 1) : this._dataSource().dataSource.json.splice(0, 1);
            this._previousFilterCount = this._filteredRecordsCount;
            if (this.model.editSettings.editMode == "normal") {
                var bbdesigner$tempFirstTR, bbdesigner$temp = bbdesigner$(temp), frozenColSpan = this.model.columns.length;
                temp.innerHTML = ['<table>', bbdesigner$.render[this._id + "_JSONEditingTemplate"](args.data, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                var bbdesigner$select = bbdesigner$(temp).find('select.e-field');
                for (var i = 0; i < bbdesigner$select.length; i++)
                    bbdesigner$select.eq(i).val(args.data[bbdesigner$select[i].name]);
                if (this.model.scrollSettings.frozenColumns > 0) {
                    bbdesigner$tempLastTR = bbdesigner$temp.find("table").first().find("tr").first();
                    bbdesigner$temp.prepend(['<table>', bbdesigner$.render[this._id + "_JSONFrozenEditingTemplate"](args.data, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join(""));
					bbdesigner$(bbdesigner$tempLastTR).find("td").first().addClass("e-editcell");
                }
                bbdesigner$tempFirstTR = bbdesigner$temp.find("tr").first();
                var td = bbdesigner$(temp).find(".e-editcell").get(0);
                bbdesigner$(temp).find('td').first().addClass("e-editcell");
                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                if ((this.model.detailsTemplate != null || this.model.childGrid != null) && bbdesigner$(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0){
                    this.getContentTable().find('tr').first().replaceWith(bbdesigner$(temp).find("tr").first().addClass("e-addedrow e-normaledit"));
					if(this.getContentTable().find('tr').length == 0) 
						this.getContentTable().append(bbdesigner$(temp).find("tr").first().addClass("e-addedrow e-normaledit"));
				}
                else {
					var  bbdesigner$contentTbody = this.getContentTable().first().find('tbody').first();
                    if (this.model.editSettings.rowPosition == "top")
                        bbdesigner$contentTbody.prepend(bbdesigner$tempFirstTR.addClass("e-addedrow e-normaledit"));
                    else if (this.model.editSettings.rowPosition == "bottom")
                        bbdesigner$contentTbody.append(bbdesigner$tempFirstTR.addClass("e-addedrow e-normaledit"));
                    if (this.model.scrollSettings.frozenColumns > 0)
                        this.getContentTable().last().find('tbody').first().prepend(bbdesigner$tempLastTR.addClass("e-addedrow e-normaledit"));
                }
                bbdesigner$editTr = this.getContentTable().find("tr.e-addedrow");
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    bbdesigner$editTr.find('tr').first().prepend(BoldBIDashboard.buildTag('td.e-detailrowcollapse'));
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                if (this.model.groupSettings.groupedColumns.length) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                        if (i == 0)
                            bbdesigner$editTr.prepend(BoldBIDashboard.buildTag("td.e-indentcell"));
                        else {
                            bbdesigner$editTr.find("tr").prepend(BoldBIDashboard.buildTag("td.e-indentcell"));
                        }
                    }
                    if (this.model.groupSettings.groupedColumns.length >= 2)
                        bbdesigner$editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length + (this.model.groupSettings.groupedColumns.length - 1) - this._hiddenColumns.length - hideCount));
                    else
                        bbdesigner$editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length - hideCount));
                } else if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    bbdesigner$editTr.find(".e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length - hideCount + 1));
                else {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        bbdesigner$editTr.find(".e-editcell").last().prop("colspan", (this.model.columns.length - this.model.scrollSettings.frozenColumns - bbdesigner$tempLastTR.find("td").not(":visible").length - hideCount));
                        frozenColSpan = this.model.scrollSettings.frozenColumns;
                    }
                    bbdesigner$editTr.find(".e-editcell").first().prop("colspan", (frozenColSpan - bbdesigner$tempFirstTR.find("td").not(":visible").length - hideCount));

                }
                if (!bbdesigner$editTr.is(":last-child"))
                    bbdesigner$editTr.find('td.e-rowcell').addClass('e-validError');
                if (this.getBrowserDetails().browser == "msie" && this.model.editSettings.rowPosition == "bottom")
					this._colgroupRefresh();
                this._refreshUnboundTemplate(bbdesigner$editTr.find(".gridform"));
                this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray();
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray()];
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? bbdesigner$.render[this._id + "_JSONDialogEditingTemplate"](args.data) : bbdesigner$.render[this._id + "_JSONdialogTemplateMode"](args.data);
                var bbdesigner$select = bbdesigner$(temp).find('select.e-field');
                for (var i = 0; i < bbdesigner$select.length; i++)
                    bbdesigner$select.eq(i).val(args.data[bbdesigner$select[i].name]);
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                var detailCount = 0;
                var tr = BoldBIDashboard.buildTag('tr');
                var td = BoldBIDashboard.buildTag('td');
                tr.addClass("e-addedrow");
                td.addClass("e-inlineformedit e-editcell");
                temp = bbdesigner$(temp).clone(true).children();
                td.html(temp);
                tr.append(td);
                if (!tr.is(":last-child"))
                    tr.find('.e-rowcell').addClass('e-validError');
                var hideCount = !this.model.groupSettings.showGroupedColumn ? this.model.groupSettings.groupedColumns.length : 0;
                if (this.model.groupSettings.groupedColumns.length) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                        tr.prepend(BoldBIDashboard.buildTag("td.e-indentcell"));
                    }
                } else
                    tr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length - hideCount));
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var bbdesigner$trClone = tr.clone(), bbdesigner$divs = td.find(".gridform").children();
                    bbdesigner$trClone.find("td").empty().prop("colSpan", this.model.scrollSettings.frozenColumns - this._getHiddenCount(bbdesigner$divs.slice(0, this.model.scrollSettings.frozenColumns)));
                    td.prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns - this._getHiddenCount(bbdesigner$divs.slice(this.model.scrollSettings.frozenColumns)));
                    this.getContentTable().first().find('tbody').first().prepend(bbdesigner$trClone);
                    this.getContentTable().last().find('tbody').first().prepend(tr);
                }
                else {
					if (this.model.detailsTemplate != null || this.model.childGrid != null)
                        detailCount++;
                    td.prop("colspan", this.model.columns.length - this._hiddenColumns.length - hideCount + detailCount);
                    if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0)
                        this.getContentTable().find('tr').first().replaceWith(bbdesigner$(tr));
                    else
                        if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0)
                            this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                    if (this.model.editSettings.rowPosition == "top")
                        this.getContentTable().first().find('tbody').first().prepend(tr);
                    else if (this.model.editSettings.rowPosition == "bottom")
                        this.getContentTable().first().find('tbody').first().append(tr);
                }
                
                if ((this.model.detailsTemplate != null || this.model.childGrid != null) && bbdesigner$(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                bbdesigner$("#" + this._id + "_inlineFormTitle").text(this.localizedLabels.AddFormTitle);
                this._refreshUnboundTemplate(bbdesigner$("#" + this._id + "EditForm"));
                this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr.e-row, tr.e-alt_row").toArray();
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray()];
            }
            else {
                bbdesigner$(temp).addClass("e-addedrow");
                temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? bbdesigner$.render[this._id + "_JSONDialogEditingTemplate"](args.data) : bbdesigner$.render[this._id + "_JSONdialogTemplateMode"](args.data);
                var bbdesigner$select = bbdesigner$(temp).find('select.e-field');
                for (var i = 0; i < bbdesigner$select.length; i++)
                    bbdesigner$select.eq(i).val(args.data[bbdesigner$select[i].name]);
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    bbdesigner$("#" + this._id + "_dialogEdit").html(bbdesigner$(temp));
                    var model = {};
                    model.cssClass = this.model.cssClass;
                    model.width = "auto";
                    model.enableResize = this.phoneMode;
                    model.content = "#" + this._id;
                    model.enableModal = true;
                    model.close = bbdesigner$.proxy(this._buttonClick, this);
                    model.enableRTL = this.model.enableRTL;
                    model.allowKeyboardNavigation = false;
                    model.title = this.localizedLabels.AddFormTitle;
                    bbdesigner$("#" + this._id + "_dialogEdit").BoldBIDashboardDialog(model);
                    bbdesigner$("#" + this._id + "_dialogEdit").BoldBIDashboardDialog("open");
                }
                else {
                    bbdesigner$("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
                    bbdesigner$("#" + this._id + "_externalForm").find(".e-externalformedit").html(bbdesigner$(temp));
                    bbdesigner$("#" + this._id + "_eFormHeader").find(".e-form-title").text(this.localizedLabels.AddFormTitle);
                    this._externalFormPosition();
                }
            }
            if (this.model.editSettings.editMode != "normal")
                bbdesigner$editTr = bbdesigner$(temp);
			if(!BoldBIDashboard.isNullOrUndefined(this.model.templateRefresh) && bbdesigner$editTr.find(".e-templatecell").length != 0) 
				this._refreshTemplateCell(bbdesigner$editTr, args.data);
            if (this.model.allowPaging) {
                if (this.model.filterSettings.filteredColumns.length)
                    this.getPager().BoldBIDashboardPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
                else
                    this.getPager().BoldBIDashboardPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
                this._refreshGridPager();
            }
        },
        editFormValidate: function () {
            if (bbdesigner$.isFunction(bbdesigner$.validator)) {
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var forms = this.element.find(".gridform");
                    if (forms.length > 1) {
                        var form1, form2;
                        form1 = forms.eq(0).validate().form();
                        form2 = forms.eq(1).validate().form();
                        if (!(form1 && form2))
                            return false;
                        else
                            return true;
                    }
                    else
                        return forms.validate().form();
                }
                return bbdesigner$("#" + this._id + "EditForm").validate().form();
            }
            return true;
        },
        _refreshAltRow: function () {
            var bbdesigner$gridRows = this._excludeDetailRows();
            for (var r = 0; r < bbdesigner$gridRows.length; r++) {
                var bbdesigner$row = bbdesigner$(bbdesigner$gridRows[r]);
                bbdesigner$row.hasClass("e-alt_row") && bbdesigner$row.removeClass("e-alt_row");
                (r % 2 != 0) ? bbdesigner$row.addClass("e-alt_row") : bbdesigner$row.addClass("e-row")
            }
        },
        _editCompleteAction: function (args) {
            var bbdesigner$form = this.element.find(".gridform");
            this.model.isEdit = true;
            var bbdesigner$cols1 = this.getContentTable().children("colgroup").find("col");
            var width = this.element.width()
            this.setWidthToColumns();
            if (BoldBIDashboard.Grid.Actions.Add == args.requestType) {
                var disabledElements = bbdesigner$form.find(".e-field:disabled");
                for (var j = 0; j < disabledElements.length; j++) {
                    var fieldName = bbdesigner$(disabledElements[j]).attr("name");
                    if (!bbdesigner$(disabledElements[j]).hasClass("e-identity"))
                        if (bbdesigner$.inArray(fieldName, this._disabledEditableColumns) == -1 || bbdesigner$.inArray(fieldName, this._primaryKeys) !== -1)
                            bbdesigner$(disabledElements[j]).removeAttr("disabled").removeClass("e-disable");
                }
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
                    bbdesigner$form.find("colgroup").prepend(this._getIndentCol());
            }
            if (this._tdsOffsetWidth.length == 0 || this.model.groupSettings.groupedColumns.length || bbdesigner$.inArray(0, this._tdsOffsetWidth) != -1 || this._hiddenColumns.length > 0)
                this._setoffsetWidth();
            this._refreshEditForm(args);
            if (this.model.scrollSettings.frozenColumns > 0 && (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")) {
                if (args.requestType == "beginedit")
                    args.row.eq(0).next().find("td").height(args.row.eq(1).next().find("td").height());
                else
                    this.getContentTable().first().find("tr").first().find("td").height(this.getContentTable().last().find("tr").first().find("td").height());
            }
            if (this.model.scrollSettings.frozenRows > 0 && args.requestType == "beginedit")
                this._initFrozenRows();
            if (this.model.scrollSettings.frozenColumns > 0)
                this.rowHeightRefresh();
            if (bbdesigner$.isFunction(bbdesigner$.validator))
                this.initValidator();
        },
        _refreshEditForm: function (args) {
			var editedTr; 
			if(this.model.editSettings.showAddNewRow)
				editedTr = this.getContentTable().find(".e-editedrow");
            var form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !BoldBIDashboard.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild : document.getElementById(this._id + "EditForm");
            var elementFocused = false, columnIndex, matchMedia;
            if (this.model.enableResponsiveRow && bbdesigner$.isFunction(window.matchMedia))
                matchMedia = window.matchMedia("(max-width: 320px)");
            var bbdesigner$formElement = bbdesigner$(form).find("input,select,div.e-field"), percent = 86;
            if (this._isUnboundColumn || this.getContentTable().find(".e-templatecell") != null)
                bbdesigner$formElement = bbdesigner$formElement.filter(function () { return (!bbdesigner$(this).closest(".e-rowcell").hasClass("e-unboundcell") && !bbdesigner$(this).closest(".e-rowcell").hasClass("e-templatecell")) })
            for (var i = 0; i < bbdesigner$formElement.length; i++) {
                var bbdesigner$element = bbdesigner$formElement.eq(i);
                var inputWidth, column = this.getColumnByField(!BoldBIDashboard.isNullOrUndefined(bbdesigner$element.prop("name")) ? bbdesigner$element.prop("name") : bbdesigner$element.attr("name"));
                if (column != null)
                    columnIndex = bbdesigner$.inArray(column, this.model.columns);
                if (this.model.editSettings.editMode == "batch") {
                    percent = 95;
                }
                else if (this.model.editSettings.editMode == "normal")
                    percent = 96;
                if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                    bbdesigner$element.parent().css("width", BoldBIDashboard.dataUtil.max(this._tdsOffsetWidth) + "px");
                    inputWidth = BoldBIDashboard.max(this._tdsOffsetWidth) * (percent / 100);
                }
                else
                    inputWidth = this._tdsOffsetWidth[i] * (percent / 100);
                if ((this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch" || this.model.allowResizing || this.model.allowResizeToFit) && !bbdesigner$element.hasClass("e-checkbox"))
                    inputWidth = "100%";
                if (column !=null && columnIndex !== undefined && (columnIndex < this.model.columns.length && this.model.columns[columnIndex].editTemplate)) {
                    var temp = { rowdata: this.model.editSettings.editMode == "batch" ? this._batchEditRowData : this._currentJsonData[this._selectedRow()], column: this.model.columns, element: bbdesigner$element, requestType: args.requestType, type: args.type };
                    var temp1 = this.model.columns[columnIndex].editTemplate.write;
                    if (!BoldBIDashboard.isNullOrUndefined(args) && args.requestType == "add") temp.rowdata = {};
                    if (typeof temp1 == "string")
                        temp1 = BoldBIDashboard.util.getObject(temp1, window);
                    temp1(temp);
					if(this.model.columns[columnIndex].isPrimaryKey && args.requestType == "beginedit")
						bbdesigner$element.addClass("e-disable").attr("disabled", "disabled");
                }
                else if (bbdesigner$element.hasClass("e-numerictextbox")) {
                    var params = { width: inputWidth }, value = bbdesigner$element.val(), customParams = this.getColumnByField(bbdesigner$element.prop("name"));
                    if ((!BoldBIDashboard.isNullOrUndefined(matchMedia) && matchMedia.matches) || customParams["width"] && typeof customParams["width"] == "string" && customParams["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    params.enableRTL = this.model.enableRTL;
                    params.showSpinButton = true;
                    params.cssClass = this.model.cssClass;
					params.locale = this.model.locale;
                    if (value.length)
                        params.value = parseFloat(value);
                    if (bbdesigner$element.hasClass("e-disable"))
                        params.enabled = false;
                    if (!BoldBIDashboard.isNullOrUndefined(customParams["editParams"]))
                        bbdesigner$.extend(params, customParams["editParams"]);
                    bbdesigner$element.ejNumericTextbox(params);
                    bbdesigner$element.prop("name", bbdesigner$element.prop("name").replace(this._id, ""));
                } else if (bbdesigner$element.hasClass("e-datepicker")) {
                    var params = { width: inputWidth }, column = this.getColumnByField(bbdesigner$element.prop("name"));
                    if ((!BoldBIDashboard.isNullOrUndefined(matchMedia) && matchMedia.matches) || column["width"] && typeof column["width"] == "string" && column["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    params.enableRTL = this.model.enableRTL;
                    params.cssClass = this.model.cssClass;
                    params.displayDefaultDate = true;
                    params.showPopupButton = false;
                    params.watermarkText = this.localizedLabels.DatePickerWaterMark;
					params.locale = this.model.locale;
                    if (bbdesigner$element.val().length)
                        params.value = new Date(bbdesigner$element.val());
                    if (bbdesigner$element.hasClass("e-disable"))
                        params.enabled = false;
                    if (column["format"] !== undefined && column.format.length > 0) {
                        var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                        var formatVal = toformat.exec(column.format);
                        params.dateFormat = formatVal[2];
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(column["editParams"]))
                        bbdesigner$.extend(params, column["editParams"]);
                    bbdesigner$element.BoldBIDashboardDatePicker(params);
					if(this.model.editSettings.editMode == "batch")
                        bbdesigner$element.BoldBIDashboardDatePicker("show");
				}
                else if (bbdesigner$element.hasClass("e-datetimepicker")) {
                    var column = this.getColumnByField(bbdesigner$element.prop("name")),
                        params = {
                            width: inputWidth,
                            enableRTL: this.model.enableRTL,
                            cssClass: this.model.cssClass,
                            showPopupButton: false,
							locale : this.model.locale
                        };
                    if ((!BoldBIDashboard.isNullOrUndefined(matchMedia) && matchMedia.matches) || column["width"] && typeof column["width"] == "string" && column["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    if (bbdesigner$element.val().length)
                        params.value = new Date(bbdesigner$element.val());
                    if (bbdesigner$element.hasClass("e-disable"))
                        params.enabled = false;
                    if (column["format"] !== undefined && column.format.length > 0) {
                        var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                        var formatVal = toformat.exec(column.format);
                        params.dateTimeFormat = formatVal[2];
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(column["editParams"]))
                        bbdesigner$.extend(params, column["editParams"]);
                    bbdesigner$element.BoldBIDashboardDateTimePicker(params);
					if(this.model.editSettings.editMode == "batch")
                        bbdesigner$element.BoldBIDashboardDateTimePicker("show");
                }
                else if (bbdesigner$element.hasClass("e-dropdownlist")) {
                    var column = this.getColumnByField(bbdesigner$element.prop("name")),
                        params = {
                            width: inputWidth,
                            enableRTL: this.model.enableRTL,
                            enableIncrementalSearch: true
                        };
                    if ((!BoldBIDashboard.isNullOrUndefined(matchMedia) && matchMedia.matches) || column["width"] && typeof column["width"] == "string" && column["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        params.width = "100%";
                    if (!BoldBIDashboard.isNullOrUndefined(column["editParams"]))
                        bbdesigner$.extend(params, column["editParams"]);
					if (!BoldBIDashboard.isNullOrUndefined(column.dataSource) && !BoldBIDashboard.isNullOrUndefined(column.editParams) && this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor) 
						params.dataSource = column.dataSource;
					bbdesigner$element.BoldBIDashboardDropDownList(params);
					if ((this._dataSource() instanceof BoldBIDashboard.DataManager  && this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor) && !BoldBIDashboard.isNullOrUndefined(column.editParams))
					    bbdesigner$element.BoldBIDashboardDropDownList("setSelectedValue", args.requestType == "add" && BoldBIDashboard.isNullOrUndefined(column.defaultValue) ? bbdesigner$element.val("") : bbdesigner$element.attr('value'));
					else
                    bbdesigner$element.BoldBIDashboardDropDownList("setSelectedValue", args.requestType == "add" && BoldBIDashboard.isNullOrUndefined(column.defaultValue) ? bbdesigner$element.val("") : bbdesigner$element.val());
                    if (bbdesigner$element.hasClass("e-disable"))
                        bbdesigner$element.BoldBIDashboardDropDownList("disable");
                }
				 else if (bbdesigner$element.hasClass("e-save e-button") || bbdesigner$element.hasClass("e-cancel e-button") )
					 bbdesigner$element.BoldBIDashboardButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, width: "100","text-align":"centre",height:"35px"});
                    //else if (bbdesigner$element.hasClass("checkbox"))
                    //{
                    //    var value = bbdesigner$element.prop("checked");
                    //    bbdesigner$element.BoldBIDashboardCheckBox({
                    //        id: bbdesigner$element[0].id,
                    //        checked: value
                    //    });
                    //}
                else {
                    switch (bbdesigner$element.prop('tagName')) {
                        case "INPUT":
                            if (!BoldBIDashboard.isNullOrUndefined(column) && column.format && bbdesigner$element.val() != "") {
                                switch (column.type) {
                                    case ("date" || "datetime"):
                                        var value = bbdesigner$element.val();
                                        var date = new Date(value);
                                        var format = column.format.replace("{0:", "").replace("}", "");
                                        var newformat = BoldBIDashboard.format(date, format);
                                        bbdesigner$element.val(newformat);
                                        break;
                                    case "number":
                                        var value = bbdesigner$element.val();
                                        var format = new RegExp("\\{0(:([^\\}]+))?\\}", "gm").exec(column.format);
                                        format[2].toLowerCase().split("")[0] == "c" ? format[2] = format[2].toLowerCase().replace("c", "n") : format[2];
                                        bbdesigner$element.val(BoldBIDashboard.format(parseFloat(value), format[2]));
                                        break;
                                }
                            }
                            if (bbdesigner$element.attr("type") != "checkbox") {
                                bbdesigner$element.css("text-align", bbdesigner$element.attr("name") != null && this.getColumnByField(bbdesigner$element.attr("name")) != null ?
                                this.getColumnByField(bbdesigner$element.attr("name")).textAlign : "center");
                                if (this.model.editSettings.editMode == "batch"){
                                    bbdesigner$element.css('width', '100%').css("height", "28px");
									if (BoldBIDashboard.browserInfo().name == "msie" && parseInt(BoldBIDashboard.browserInfo().version, 10) == 8)
									   bbdesigner$element.css("line-height", "22px");
							    }
                                else if (this.model.editSettings.editMode == "normal"){
                                    bbdesigner$element.css('width', '100%').css("height", "30px");
									if (BoldBIDashboard.browserInfo().name == "msie" && parseInt(BoldBIDashboard.browserInfo().version, 10) == 8)
									   bbdesigner$element.css("line-height", "24px");
								}	
                                else{
                                    bbdesigner$element.outerWidth(inputWidth).height(28);
									if (BoldBIDashboard.browserInfo().name == "msie" && parseInt(BoldBIDashboard.browserInfo().version, 10) == 8)
									   bbdesigner$element.css("line-height", "26px");
								}

                            }
                            else
                                bbdesigner$element.width(inputWidth > 0 ? (bbdesigner$element.width() > inputWidth ? inputWidth : bbdesigner$element.width()) : this.model.editSettings.editMode.indexOf("template") != -1 ? bbdesigner$element.width() : 1);
								if(this.model.editSettings.editMode == "batch" && !this._tabKey)
									bbdesigner$element.is(':checked') ? bbdesigner$element.prop("checked",false) : bbdesigner$element.prop("checked",true);
                            break;
                        case "SELECT":
                            bbdesigner$element.width(inputWidth).height(28);
                            break;
                    }
                }
                if (column != null && !column.visible && column.validationRules && !(this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate")){
					if(column.editType == BoldBIDashboard.Grid.EditingType.Dropdown)
						bbdesigner$element.closest(".e-rowcell").find("input").addClass("e-hide");					
					bbdesigner$element.addClass("e-hide");
				}
                if (!bbdesigner$element.is(":disabled") && !elementFocused && (!bbdesigner$element.is(":hidden") || typeof (bbdesigner$element.data("BoldBIDashboardDropDownList") || bbdesigner$element.data("ejNumericTextbox")) == "object")) {
                    this._focusElements(bbdesigner$element);
                    elementFocused = true;
                }
            }

        },
        _focusElements: function (bbdesigner$currentCell) {
            if (bbdesigner$currentCell.length) {
                var bbdesigner$childElem = bbdesigner$currentCell;
                if ((bbdesigner$childElem[0].tagName.toLowerCase() == "select" && !bbdesigner$childElem.hasClass("e-field e-dropdownlist")) || (bbdesigner$childElem[0].tagName.toLowerCase() == "input") && !bbdesigner$childElem.hasClass("e-numerictextbox")) {
                    bbdesigner$childElem.focus().select();
                    bbdesigner$childElem[0].focus();
                }
                else if (bbdesigner$childElem.hasClass("e-field e-dropdownlist"))
                     bbdesigner$childElem.closest(".e-ddl").focus();
				else if (bbdesigner$childElem.hasClass('e-numerictextbox'))
					 bbdesigner$childElem.siblings('input:visible').first().select().focus();
                else
                    bbdesigner$childElem.find('input:visible,select').first().select().focus();
            }
        },
        _renderToolBar: function () {
            var bbdesigner$div = BoldBIDashboard.buildTag('div.e-gridtoolbar', "", {}, { id: this._id + "_toolbarItems" });
            var bbdesigner$ul = BoldBIDashboard.buildTag("ul");
            (!BoldBIDashboard.isNullOrUndefined(this.model.toolbarSettings.toolbarItems) && this.model.toolbarSettings.toolbarItems.length) && this._renderLi(bbdesigner$ul);
            bbdesigner$div.append(bbdesigner$ul);
            var bbdesigner$customUl = BoldBIDashboard.buildTag("ul");
            bbdesigner$div.append(bbdesigner$customUl);
            (!BoldBIDashboard.isNullOrUndefined(this.model.toolbarSettings.customToolbarItems) && this.model.toolbarSettings.customToolbarItems.length) && this._renderCustomLi(bbdesigner$customUl);
            var model = {};
            model.click = this._toolBarClick;
            model.cssClass = this.model.cssClass;
            model.enableRTL = this.model.enableRTL;
            model.enableSeprator = false;
            bbdesigner$div.BoldBIDashboardToolbar(model);
            bbdesigner$div.BoldBIDashboardToolbar("disableItem", this._disabledToolItems);
            this._disabledToolItems = bbdesigner$();
            return bbdesigner$div;
        },
        _renderCustomLi: function (bbdesigner$ul) {
            var bbdesigner$li; var customToolbar;
            for (var i = 0; i < this.model.toolbarSettings.customToolbarItems.length; i++) {
                customToolbar = this.model.toolbarSettings.customToolbarItems[i]["templateID"] ? this.model.toolbarSettings.customToolbarItems[i]["templateID"].replace("#", "") : this.model.toolbarSettings.customToolbarItems[i];
                bbdesigner$li = BoldBIDashboard.buildTag("li", "", {}, { id: this._id + "_" + customToolbar, title: customToolbar });
                switch (typeof this.model.toolbarSettings.customToolbarItems[i]) {
                    case "string":
                        var bbdesigner$item = BoldBIDashboard.buildTag("a.e-toolbaricons e-icon", "", {}).addClass(this.model.toolbarSettings.customToolbarItems[i]);
                        break;
                    case "object":
                        bbdesigner$li.attr("title", this.model.toolbarSettings.customToolbarItems[i]["templateID"].replace("#", ""));
                        var bbdesigner$item = bbdesigner$(this.model.toolbarSettings.customToolbarItems[i]["templateID"]).hide().html();
                        break;
                }
                bbdesigner$li.html(bbdesigner$item);
                bbdesigner$ul.append(bbdesigner$li);
            }
        },
        _renderLi: function (bbbbdesigner$ul) {
            if (bbbbdesigner$.isFunction(window.matchMedia)) {
                if (this.model.enableResponsiveRow && window.matchMedia("(max-width: 320px)").matches) {
                    var searchIndex = this.model.toolbarSettings.toolbarItems.indexOf('search');
                    searchIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(searchIndex, 1);
                    if (this.model.allowFiltering)
                        this.model.toolbarSettings.toolbarItems.push('responsiveFilter');
                    if (this.model.allowSorting) {
                        this.model.toolbarSettings.toolbarItems.push('responsiveSorting');
                    }
                    searchIndex != -1 && this.model.toolbarSettings.toolbarItems.push('search');
                }
            }
            for (var i = 0; i < this.model.toolbarSettings.toolbarItems.length; i++) {
                var bbbbdesigner$li = BoldBIDashboard.buildTag("li", "", {}, { id: this._id + "_" + this.model.toolbarSettings.toolbarItems[i], title: this.localizedLabels[this.model.toolbarSettings.toolbarItems[i].slice(0, 1).toUpperCase() + this.model.toolbarSettings.toolbarItems[i].slice(1)] });
                this._renderLiContent(bbbbdesigner$li, this.model.toolbarSettings.toolbarItems[i]);
                bbbbdesigner$ul.append(bbbbdesigner$li);
            }
        },
        _renderLiContent: function (bbbbdesigner$li, item) {
            var bbdesigner$a, bbdesigner$input, bbdesigner$div, bbdesigner$span;
            switch (item) {
                case "add":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-addnewitem e-toolbaricons e-icon e-addnew", "", {});
                    break;
                case "edit":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-edititem e-toolbaricons e-icon e-edit", "", {});
                    break;
                case "delete":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-deleteitem e-toolbaricons e-icon e-delete", "", {});
                    break;
                case "update":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-saveitem e-toolbaricons e-disabletool e-icon e-save", "", {});
                    this._disabledToolItems.push(bbdesigner$li.get(0));
                    break;
                case "cancel":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-cancel e-toolbaricons e-disabletool e-icon e-gcancel", "", {});
                    this._disabledToolItems.push(bbdesigner$li.get(0));
                    break;
				
                case "search":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", {});
                    if (!this.model.enableResponsiveRow) {
                        bbdesigner$input = BoldBIDashboard.buildTag("input.e-ejinputtext", "", {}, { type: "text", id: this._id + "_searchbar" });
                        bbdesigner$span = BoldBIDashboard.buildTag('span.e-cancel e-icon e-hide', "", { 'right': '1%' });
                        bbdesigner$div = BoldBIDashboard.buildTag('div.e-filterdiv e-searchinputdiv', "", { 'display': 'inline-table', 'width': '83%' });
                        bbdesigner$div.append(bbdesigner$input).append(bbdesigner$span);
                        bbdesigner$li.append(bbdesigner$div);
                        if (!BoldBIDashboard.isNullOrUndefined(this.model.searchSettings.key))
                            bbdesigner$input.val(this.model.searchSettings.key);
                    }
                    this.model.allowSearching = true;
                    break;
				case "printGrid":
					 bbdesigner$a = BoldBIDashboard.buildTag("a.e-print e-toolbaricons e-icon", "", {});
					 break;
                case "excelExport":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-toolbaricons e-excelIcon e-icon", "", {});
                    break;
                case "wordExport":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-toolbaricons e-wordIcon e-icon", "", {});
                    break;
                case "pdfExport":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-toolbaricons e-pdfIcon e-icon", "", {});
                    break;
                case "responsiveFilter":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-toolbaricons e-filterset e-icon", "", {});
                    break;
                case "responsiveSorting":
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-toolbaricons e-respponsiveSorting e-icon", "", {});
                    break;
            }
            bbdesigner$li.append(bbdesigner$a);
            if (item == "search"){
                this._searchBar = bbdesigner$li;
				bbdesigner$li.css('display','flex');
			}
        },
        _toolBarClick: function (Sender) {
            var bbdesigner$gridEle = bbdesigner$(this.itemsContainer).closest(".e-grid"), gridInstance = bbdesigner$gridEle.BoldBIDashboardGrid("instance"), gridId = bbdesigner$gridEle.attr('id');
            if (Sender.event == undefined && Sender.target.tagName == "INPUT" && Sender.currentTarget.id == gridId + "_search")
                return;
            bbdesigner$.isFunction(bbdesigner$.fn.BoldBIDashboardDatePicker) && bbdesigner$("#" + gridId + "EditForm").find(".e-datepicker").BoldBIDashboardDatePicker("hide");
            var currentTarget = Sender.currentTarget; var target = Sender.target;
            var args = { itemName: currentTarget.title, itemId: currentTarget.id, currentTarget: currentTarget, target: target, itemIndex: bbdesigner$(currentTarget).index(), itemCurrentTarget: currentTarget.outerHTML, gridModel:gridInstance.model, itemTarget: target.outerHTML, toolbarData: Sender };
            if (bbdesigner$gridEle.BoldBIDashboardGrid("instance")._trigger("toolbarClick", args))
                return;
            switch (args.itemId) {
                case gridId + "_add":
                    gridInstance._toolbarOperation(gridId + "_add");
                    break;
                case gridId + "_edit":
                    gridInstance._toolbarOperation(gridId + "_edit");
                    break;
                case gridId + "_delete":
                    gridInstance._toolbarOperation(gridId + "_delete");
                    break;
                case gridId + "_update":
                    gridInstance._toolbarOperation(gridId + "_update");
                    break;
                case gridId + "_cancel":
                    if (gridInstance.model.editSettings.editMode == "batch")
                        gridInstance._confirmDialog.find(".e-content").html(gridInstance.localizedLabels.CancelEdit).end().BoldBIDashboardDialog("open");
                    else
                        gridInstance._toolbarOperation(gridId + "_cancel");
                    break;
                case gridId + "_search":
                    if (gridInstance.model.enableResponsiveRow) {
                        if (BoldBIDashboard.isNullOrUndefined(gridInstance.element.find('.e-responsesearch')[0])) {
                            var bbdesigner$div = BoldBIDashboard.buildTag('div.e-gridtoolbar', "", {}, { id: this._id + "_toolbarItems" });
                            var bbdesigner$ul = BoldBIDashboard.buildTag('div.e-responsesearch', '', { 'width': '95%', 'height': '38px', 'margin-top': '7px', 'margin-left': '6px' });
                            var bbdesigner$span = BoldBIDashboard.buildTag('span.e-ttoltxt', '', { width: '98%', 'margin-left': '2%' }, { id: gridInstance._id + "_search" });
							bbdesigner$a = BoldBIDashboard.buildTag("span.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", { 'position': 'absolute', 'right': '2%', 'margin-top': '1%' });
                            if (BoldBIDashboard.browserInfo().name === "webkit")
                                bbdesigner$a.css("margin-top", "-2px");
                            var bbdesigner$input = BoldBIDashboard.buildTag("input.e-ejinputtext", "", { width: '97%', 'height': '30px' }, { type: "search", id: gridInstance._id + "_searchInput" });
                            if (!BoldBIDashboard.isNullOrUndefined(gridInstance.model.searchSettings.key))
                                bbdesigner$input.val(gridInstance.model.searchSettings.key);
                            bbdesigner$span.append(bbdesigner$input);
                            bbdesigner$span.append(bbdesigner$a);
                            bbdesigner$ul.append(bbdesigner$span);
                            bbdesigner$div.append(bbdesigner$ul);
                            bbdesigner$div.BoldBIDashboardToolbar({
                                click: function (sender) {
                                    gridInstance._toolbarOperation(gridId + "_search", bbdesigner$(sender.currentTarget).find("input").val());
                                }
                            });
                            bbdesigner$input.bind('keyup', function (e) {
                                if (bbdesigner$input.val() != '') {
                                    bbdesigner$a.removeClass('e-searchfind');
                                    bbdesigner$a.addClass('e-cancel')
                                }
                                else {
                                    bbdesigner$a.removeClass('e-cancel');
                                    bbdesigner$a.addClass('e-searchfind');
                                }
                            });
                            bbdesigner$a.click(function () {
                                if (bbdesigner$a.hasClass('e-cancel')) {
                                    bbdesigner$input.val('');
                                    bbdesigner$a.removeClass('e-cancel');
                                    bbdesigner$a.addClass('e-searchfind');
                                    gridInstance._toolbarOperation(gridId + "_search", bbdesigner$("#" + gridId + "_searchInput").val());
                                }
                            })
                            bbdesigner$div.insertBefore(gridInstance.getHeaderContent());
                        }
                        else {
                            if (gridInstance.element.find('.e-responsesearch').css('display') == 'block')
                                gridInstance.element.find('.e-responsesearch').css('display', 'none');
                            else
                                gridInstance.element.find('.e-responsesearch').css('display', 'block');
                        }
                    }
                    else
                        gridInstance._toolbarOperation(gridId + "_search", bbdesigner$(Sender.currentTarget).find("input").val());
                    break;
				case gridId + "_printGrid":
                    gridInstance._toolbarOperation(gridId + "_printGrid");
                    break;
                case gridId + "_excelExport":
                    gridInstance._toolbarOperation(gridId + "_excelExport");
                    break;
                case gridId + "_wordExport":
                    gridInstance._toolbarOperation(gridId + "_wordExport");
                    break;
                case gridId + "_pdfExport":
                    gridInstance._toolbarOperation(gridId + "_pdfExport");
                    break;
                case gridId + "_responsiveFilter":
                    gridInstance._toolbarOperation(gridId + "_responsiveFilter");
                    break;
                case gridId + "_responsiveSorting":
                    gridInstance._toolbarOperation(gridId + "_responsiveSorting");
                    break;
            }
            return false;
        },

        _toolbarOperation: function (operation, searchEle) {
            var bbdesigner$gridEle = this.element, gridObject = bbdesigner$gridEle.BoldBIDashboardGrid("instance"), batchEnable = gridObject.model.editSettings.editMode == "batch", gridId = bbdesigner$gridEle.attr('id'), fieldName;
            gridObject._exportTo = gridObject["export"];
            switch (operation) {
                case gridId + "_add":
                    if (batchEnable)
                        gridObject._bulkAddRow();
                    else
                        gridObject._startAdd();
                    break;
                case gridId + "_edit":
                    if (batchEnable && gridObject.model.editSettings.allowEditing) {
					    if (gridObject._bulkEditCellDetails.columnIndex == -1) {
					        alert(this.localizedLabels.EditOperationAlert);
                            return;
                        }
                        fieldName = gridObject.model.columns[gridObject._bulkEditCellDetails.columnIndex].field;
                        fieldName && gridObject.editCell(gridObject._bulkEditCellDetails.rowIndex, fieldName);
                    }
                    else
                        gridObject.startEdit();
                    break;
                case gridId + "_delete":
                    if (this._selectedRow() == -1) {
                        alert(this.localizedLabels.DeleteOperationAlert);
                        return;
                    }
                    if (this.model.editSettings.showDeleteConfirmDialog)
                        this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().BoldBIDashboardDialog("open");
                    else {
                        if (batchEnable)
                            this._bulkDelete()
                        else {
                            if (this.multiDeleteMode && this.selectedRowsIndexes.length > 1)
                                this._multiRowDelete();
                            else
                                this.deleteRow();
                        }
                    }
                    break;
                case gridId + "_update":
                    if (batchEnable && bbdesigner$("#" + this._id + "EditForm").children().find(".e-field-validation-error").length == 0)
                        this.model.editSettings.showConfirmDialog ? this._confirmDialog.find(".e-content").html(this.localizedLabels.BatchSaveConfirm).end().BoldBIDashboardDialog("open") : this.batchSave();
                    else
                        gridObject.endEdit();
                    break;
                case gridId + "_cancel":
                    if (batchEnable) {
                        if (bbdesigner$("#" + gridId + "ConfirmDialog").BoldBIDashboardDialog("isOpened") === true)
                            this._triggerConfirm();
                        else
                            gridObject.cancelEditCell();
                    }
                    else
                        gridObject.cancelEdit();
                    break;
                case gridId + "_search":
                    if (args.type == 'click' && args.target.nodeName == "A")
                        bbdesigner$gridEle.BoldBIDashboardGrid("search", searchEle);
                    break;
				case gridId + "_printGrid":
                    this.print();
                    break;
                case gridId + "_excelExport":
                    gridObject._exportTo(gridObject.model.exportToExcelAction, 'excelExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_wordExport":
                    gridObject._exportTo(gridObject.model.exportToWordAction, 'wordExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_pdfExport":
                    gridObject._exportTo(gridObject.model.exportToPdfAction, 'pdfExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_responsiveFilter":
                    bbdesigner$("#responsiveFilter").css('display', 'block');
                    setTimeout(function () { gridObject.element.css('display', 'none'), 0 });
                    break;
                case gridId + "_responsiveSorting":
                    this._sortColumns = []; this._removeSortCol = []
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                        this._sortColumns.push({ field: this.model.sortSettings.sortedColumns[i].field, direction: this.model.sortSettings.sortedColumns[i].direction });
                    }
                    if (BoldBIDashboard.isNullOrUndefined(bbdesigner$("#responsiveSort")[0])) {
                        var bbdesigner$dlg = bbdesigner$("#responsiveFilter").clone().css('display', 'block');
                        bbdesigner$dlg.insertAfter(this.element);
                        bbdesigner$dlg.attr('id', 'responsiveSort');
                        gridObject._setSortingButton();
                        var bbdesigner$btnDiv = BoldBIDashboard.buildTag('div.btnContainer', '', { width: '100%', 'bottom': '0px', 'position': 'absolute' });
                        var bbdesigner$inputOk = BoldBIDashboard.buildTag('input.e-resposnsiveFilterBtnLeft', 'OK', { 'width': '45.6%' });
                        var bbdesigner$inputCancel = BoldBIDashboard.buildTag('input.e-resposnsiveFilterBtnRight', 'Cancel', { 'width': '46%' });
                        var bbdesigner$closeIcon = BoldBIDashboard.buildTag('div.e-resFIlterRigthIcon');
                        var bbdesigner$cspanIcon = BoldBIDashboard.buildTag('span.e-icon e-responsiveClose e-resIcon');
                        bbdesigner$dlg.find('.e-resFilterleftIcon').remove();
                        bbdesigner$dlg.find('.labelRes').text('Sorting');
                        bbdesigner$dlg.find('.e-resFilterDialogHeaderDiv').append(bbdesigner$closeIcon.append(bbdesigner$cspanIcon))
                        bbdesigner$dlg.find('.e-resFilterDialogHeaderDiv').find('.e-resFIlterRigthIcon').click(function (e) {
                            bbdesigner$("#responsiveSort").css('display', 'none');
                            gridObject.element.css('display', 'block');
                        })
                        var bbdesigner$divIcon = BoldBIDashboard.buildTag('div.e-resFilterleftIcon', '', { 'margin-top': '3%' });
                        var bbdesigner$spanIcon = BoldBIDashboard.buildTag('span.e-icon e-resIcon e-responsiveSortClear');
                        bbdesigner$divIcon.click(function () {
                            bbdesigner$dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
                            gridObject._setSortingButton(true);
                            for (var i = 0; i < gridObject._sortColumns.length; i++) {
                                if (gridObject._removeSortCol.indexOf(gridObject._sortColumns[i].field) == -1)
                                    gridObject._removeSortCol.push(gridObject._sortColumns[i].field);
                            }
                            gridObject._sortColumns = [];
							gridObject._removeSortCol = [];
                        });
                        bbdesigner$dlg.find('.e-resFilterDialogHeaderDiv').prepend(bbdesigner$divIcon.append(bbdesigner$spanIcon));
                        bbdesigner$dlg.append(bbdesigner$btnDiv);
                        bbdesigner$btnDiv.append(bbdesigner$inputOk).append(bbdesigner$inputCancel);
                        bbdesigner$inputOk.BoldBIDashboardButton({
                            text: 'OK', type: 'button',
                            click: bbdesigner$.proxy(this._resSortOperation, this)
                        })
                        bbdesigner$inputCancel.BoldBIDashboardButton({
                            text: 'Cancel', type: 'button',
                            click: function () {
                                bbdesigner$("#responsiveSort").css('display', 'none');
                                gridObject.element.css('display', 'block');
                                gridObject._sortColumns = [];
                                bbdesigner$dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
                                gridObject._setSortingButton();
                            }
                        })
                    }
                    else {
                        bbdesigner$("#responsiveSort").find('.e-responsivefilterColDiv').find('.e-button').remove();
                        this._setSortingButton();
                    }
                    bbdesigner$("#responsiveSort").find('.e-responsivefilterColDiv').find('.e-filternone').remove();
                    bbdesigner$("#responsiveSort").css('display', 'block');
                    setTimeout(function () { gridObject.element.css('display', 'none'), 0 });
                    break;
            }
            return false;
        },
        _resSortOperation: function (sender) {
            var rCol=[];
			for(var i=0; i< this.model.sortSettings.sortedColumns.length;i++)
				rCol.push(this.model.sortSettings.sortedColumns[i].field);
            for (var i = 0; i < rCol.length; i++)
                this.removeSortedColumns(rCol[i]);
            for (var i = 0 ; i < this._sortColumns.length; i++) {
                if (this.model.allowMultiSorting)
                    this.multiSortRequest = true;
                this.sortColumn(this._sortColumns[i].field, this._sortColumns[i].direction);
            }
            bbdesigner$("#responsiveSort").css('display', 'none');
            this.element.css('display', 'block');
        },
        _setSortingButton: function (clear) {
            var bbdesigner$sortDiv = bbdesigner$("#responsiveSort");
            var gridObj = this;
            this._sortCols = [];
            if (BoldBIDashboard.isNullOrUndefined(bbdesigner$sortDiv.find('.e-responsivefilterColDiv').find('.e-button')[0])) {
                bbdesigner$sortDiv.find('.e-responsivefilterColDiv').each(function (index, object) {
                    var bbdesigner$btnDiv = BoldBIDashboard.buildTag('div', '', { 'float': 'right', 'margin-right': '2%', 'margin-top': '-1%' })
                    var fieldName = bbdesigner$(object).attr('ej-MappingName');
                    var bbdesigner$but = BoldBIDashboard.buildTag('button#' + fieldName + ".e-sortingBtn", '');
                    bbdesigner$(object).append(bbdesigner$btnDiv.append(bbdesigner$but));
                    var btnText = 'None', icon = '';
                    if (!clear) {
                        for (var sortC = 0; sortC < gridObj.model.sortSettings.sortedColumns.length; sortC++) {
                            if (gridObj.model.sortSettings.sortedColumns[sortC].field == fieldName) {
                                btnText = gridObj.model.sortSettings.sortedColumns[sortC].direction == 'ascending' ? 'Ascending' : 'Descending';
                                icon = btnText == 'Ascending' ? 'e-resIcon e-respponsiveSortingAsc' : 'e-resIcon e-respponsiveSortingDesc';
                            }
                        }
                        if (icon != '') {
                            bbdesigner$but.BoldBIDashboardButton({
                                text: btnText, type: 'button',
                                height: 28,
                                width: 120,
                                cssClass: 'e-resSortIconBtn',
                                id: fieldName,
                                prefixIcon: icon,
                                imagePosition: "imageright",
                                contentType: "textandimage",
                                showRoundedCorner: true,
                                click: bbdesigner$.proxy(gridObj._resSortButClick, gridObj)
                            })
                        }
                        else {
                            bbdesigner$but.BoldBIDashboardButton({
                                text: btnText, type: 'button',
                                height: 28,
                                cssClass: 'e-resSortIconBtn',
                                width: 120,
                                id: fieldName,
                                showRoundedCorner: true,
                                click: bbdesigner$.proxy(gridObj._resSortButClick, gridObj)
                            })
                        }
                    }
                    else {
                        bbdesigner$but.BoldBIDashboardButton({
                            text: btnText, type: 'button',
                            height: 28,
                            width: 120,
                            id: fieldName,
                            showRoundedCorner: true,
                            click: bbdesigner$.proxy(gridObj._resSortButClick, gridObj)
                        })
                    }
                });
            }
        },
        _sortOperation: function (field, direction) {
            if (this._removeSortCol.indexOf(field) != -1) {
                this._sortColumns.splice(this._removeSortCol.indexOf(field), 0);
				this._removeSortCol.splice(this._removeSortCol.indexOf(field), 0);
            }
            for (var column = 0; column < this._sortColumns.length; column++) {
                if (this._sortColumns[column]["field"] == field)
                    break;
            }
            if (this.model.allowMultiSorting) {
                this.multiSortRequest = true;
                if (column != -1) {
                    this._sortColumns.splice(column, 1);
					if (this._removeSortCol.indexOf(field) == -1)
						this._removeSortCol.push(field);
                }
            }
            else {
                bbdesigner$("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
                var bbdesigner$divColg = bbdesigner$("#responsiveFilter").find('.e-responsivefilterColDiv').not(".e-responsivefilterColDiv[ej-mappingname='" + field + "']");
                var bbdesigner$btn = bbdesigner$divColg.find('.e-button').addClass('e-disable');
                bbdesigner$btn.text('None');
                if (this._sortColumns.length > 0) {
                    this._removeSortCol.push(this._sortColumns[0].field);
                    this._sortColumns = [];
                }
            }
            this._sortColumns.push({ field: field, direction: direction });
        },
        _resSortButClick: function (sender) {
            var text = '', prefixIcon = '', fieldName = sender.model.id;
            var obj = bbdesigner$("#" + sender.model.id).BoldBIDashboardButton('instance');
            if (sender.model.text == 'None') {
                text = 'Ascending';
                prefixIcon = 'e-resIcon e-respponsiveSortingAsc';
                this._sortOperation(fieldName, 'ascending');
            }
            else if (sender.model.text == 'Ascending') {
                text = 'Descending';
                prefixIcon = 'e-resIcon e-respponsiveSortingDesc';
                this._sortOperation(fieldName, 'descending');
            }
            else {
                obj.model.text = 'None';
                obj.model.prefixIcon = '';
                obj.type = 'button';
                obj.model.contentType = "text";
                obj._render();
                for (var column = 0; column < this._sortColumns.length; column++) {
                    if (this._sortColumns[column]["field"] == fieldName)
                        break;
                }
                this._removeSortCol.push(fieldName);
                this._sortColumns.splice(column, 1);
                bbdesigner$("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
                return;
            }
            obj.model.text = text; obj.model.prefixIcon = 'e-resIcon ' + prefixIcon; obj.model.imagePosition = "imageright";
            obj.model.contentType = "textandimage"; obj._render();
        },
        renderDiaglogButton: function (form, tbody) {
            var btnId;
            if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                btnId = "EditExternalForm_";
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                btnId = "InlineEditForm_";
                var inlineTitleBar = BoldBIDashboard.buildTag("div", "", "", { id: this._id + "_inlineFormTitle", 'class': "e-inlineform-titlebar" });
                inlineTitleBar.appendTo(tbody);
                    }
					
            else
                btnId = "EditDialog_";
            var savebtn = BoldBIDashboard.buildTag('input.e-save', "", { 'margin-left': '30px' }, { type: "button", id: btnId + this._id + "_Save" });
            savebtn.BoldBIDashboardButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: this.localizedLabels.SaveButton, width: "100" });
            var cancelbtn = BoldBIDashboard.buildTag('input.e-cancel', "", { 'margin-left': '19px', 'margin-right': '13px' }, { type: "button", id: btnId + this._id + "_Cancel" });
            cancelbtn.BoldBIDashboardButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: this.localizedLabels.CancelButton, width: "100" });
            var btnDiv = (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate") ? BoldBIDashboard.buildTag('div', "", "", { 'class': "e-editform-btn" }) : BoldBIDashboard.buildTag('div');
            btnDiv.append(savebtn);
            btnDiv.append(cancelbtn);
            form.appendTo(tbody);
            if (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate")
                btnDiv.appendTo(tbody);
            else
                form.append(btnDiv);
            return tbody;
        },
        _externalFormPosition: function () {
            var pos = bbdesigner$(this.element).offset();
            var width = bbdesigner$(this.element).width();
            var height = bbdesigner$(this.element).height();
            var DivElement = bbdesigner$("#" + this._id + "_externalEdit");
            switch (this.model.editSettings.formPosition) {
                case "topright":
                    bbdesigner$(DivElement).find('.e-form-toggle-icon').removeClass('e-bottomleft').addClass('e-topright');
                    bbdesigner$(DivElement).css({ "left": (pos.left + width + 1) + "px", "top": pos.top + "px", "position": "absolute", "width": "290px" });
                    bbdesigner$("#" + this._id + "_eFormContent").height("auto");
                    break;
                case "bottomleft":
                    bbdesigner$(DivElement).find('.e-form-toggle-icon').removeClass('e-topright').addClass('e-bottomleft');
                    bbdesigner$(DivElement).css({ "left": (pos.left) + "px", "top": (pos.top + height + 1) + "px" });
                    bbdesigner$("#" + this._id + "_eFormContent").width("100%");
                    break;
            }
        },
        _setoffsetWidth: function () {
            var tds, bbdesigner$form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : bbdesigner$("#" + this._id + "EditForm");
            if (this._gridRecordsCount == 0 && this.model.editSettings.editMode != "batch")
                return;
            if (this.model.editSettings.editMode == "batch")
                tds = bbdesigner$form.closest("td");
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                tds = bbdesigner$form.find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
            else
                tds = bbdesigner$form.find("tr").find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
            for (var i = 0; i < tds.length; i++)
                this._tdsOffsetWidth[i] = tds.get(i).offsetWidth;
        },
        _bulkChangesAcquired: function () {
            if (this.batchChanges.added.length > 0 || this.batchChanges.changed.length || this.batchChanges.deleted.length)
                return true;
            return false;
        },
        _renderDialog: function () {
            var bbdesigner$dialog = BoldBIDashboard.buildTag("div.e-dialog e-dialog-content e-shadow e-widget-content", "", { display: "none" }, { id: this._id + "_dialogEdit" });
            return bbdesigner$dialog;
        },
        
        getCurrentEditCellData: function () {
            if (this.model.isEdit && bbdesigner$("#" + this._id + "EditForm").length) {
                var bbdesigner$element = bbdesigner$("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi, '')), cellValue;
                switch (this._bulkEditCellDetails.cellEditType) {
                    case BoldBIDashboard.Grid.EditingType.String:
					case BoldBIDashboard.Grid.EditingType.Numeric:
                        cellValue = bbdesigner$element.val();
                        break;                                          
                    case BoldBIDashboard.Grid.EditingType.Dropdown:
                        cellValue = this._bulkEditCellDetails.isForeignKey ? { "value": bbdesigner$element.BoldBIDashboardDropDownList("getSelectedValue"), "text": bbdesigner$element.BoldBIDashboardDropDownList("getValue") } : bbdesigner$element.BoldBIDashboardDropDownList("getSelectedValue");
                        break;
                    case BoldBIDashboard.Grid.EditingType.Boolean:
                        cellValue = bbdesigner$element.is(':checked');
                        break;
                    case BoldBIDashboard.Grid.EditingType.DatePicker:
                        cellValue = bbdesigner$element.BoldBIDashboardDatePicker("model.value");
                        break;
                    case BoldBIDashboard.Grid.EditingType.DateTimePicker:
                        cellValue = bbdesigner$element.BoldBIDashboardDateTimePicker("model.value");
                        break;
                }
                if (typeof cellValue == "string" && cellValue.length && this.model.columns[this._bulkEditCellDetails.columnIndex].type == "number")
                   cellValue = BoldBIDashboard.globalize.parseFloat(cellValue,this.model.locale);
                return cellValue;
            }
            return null;
        },
        cancelEditCell: function () {
            if (this.model.isEdit) {
                var tr = this.getRows()[this._bulkEditCellDetails.rowIndex], cellData = {}, cell;
                cellData[this._bulkEditCellDetails.fieldName] = this._bulkEditCellDetails.cellValue;
                if (bbdesigner$(tr).hasClass("e-insertedrow"))
                    cell = bbdesigner$(tr).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex + this.model.groupSettings.groupedColumns.length);
                else
                    cell = bbdesigner$(tr).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex);
                bbdesigner$(cell).removeClass("e-editedbatchcell").empty().html(bbdesigner$(bbdesigner$.templates[this._id + "_JSONTemplate"].render(cellData)).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex).innerHTML);
                this.model.isEdit = false;
                this.element.focus();
            }
        },
        saveCell: function (preventSaveEvent) {
            if (this.model.isEdit) {
                if (!this.editFormValidate())
                    return true;
                var bbdesigner$form = bbdesigner$("#" + this._id + "EditForm"), bbdesigner$targetTR = bbdesigner$form.closest("tr"), bbdesigner$targetTD = bbdesigner$form.closest("td"), bbdesigner$toolBar, tempVal, formattedValue
                , args = {}, column = this.model.columns[this._bulkEditCellDetails.columnIndex], bbdesigner$element = bbdesigner$("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi,'')), getVal, setVal;
                args = {
                    columnName: column.field,
                    value: this.getCurrentEditCellData(),
                    rowData: this._bulkEditCellDetails.rowData,
                    previousValue: this._bulkEditCellDetails.cellValue,
                    columnObject: column,
                    cell: bbdesigner$targetTD,
                    isForeignKey: this._bulkEditCellDetails.isForeignKey
                };
                if (!preventSaveEvent && this._trigger("cellSave", args)) {
                    this._focusElements(args.cell);
                    this._bulkEditCellDetails.cancelSave = true;
                    return;
                }
                if (this._bulkEditCellDetails.cellEditType == "datetimepicker" || this._bulkEditCellDetails.cellEditType == "dropdownedit" || this._bulkEditCellDetails.cellEditType == "datepicker")
                    bbdesigner$element[bbdesigner$element.data("ejWidgets")[0]]("destroy");
                if (!BoldBIDashboard.isNullOrUndefined(column.format)) {
                    if ((column.type == "date" || column.type == "datetime"))
                        (!args.isForeignKey) ? args.value = args.value.length > 0 ? new Date(args.value) : args.value : args.value.text = args.value.text.length > 0 ? new Date(args.value.text) : args.value.text;
                
                    formattedValue = this.formatting(column.format, args.isForeignKey ?
                                              (!isNaN(parseFloat(args.value.text)) && isFinite(args.value.text)
                                              ? parseFloat(args.value.text)
                                              : args.value.text) : args.value,this.model.locale);
                    args.cell.empty().html(formattedValue);
                }
                if (this._bulkEditCellDetails.cellEditType == "edittemplate") {
                    var temp1 = column.editTemplate.read;
                    if (typeof temp1 == "string")
                        temp1 = BoldBIDashboard.util.getObject(temp1, window);
                    args.value = args.isForeignKey ? { "value": bbdesigner$element.BoldBIDashboardDropDownList("getSelectedValue"), "text": bbdesigner$element.BoldBIDashboardDropDownList("getValue") } : temp1(bbdesigner$element);
                    BoldBIDashboard.createObject(this._bulkEditCellDetails["fieldName"], args.value, args.rowData);
                    args.cell.empty().html(args.isForeignKey ? args.value.text : args.value);
                }
                else {
                    if (args.columnObject.type == "boolean" || args.columnObject.editType == "booleanedit") {
                        var cellData = {};
                        BoldBIDashboard.createObject(args.columnObject.field, args.value, cellData);
                        args.cell.empty().html(bbdesigner$(bbdesigner$.templates[this._id + "_JSONTemplate"].render(cellData))[0].cells[this._bulkEditCellDetails.columnIndex].innerHTML);						
					}
					else if(args.columnObject.editType == "datepicker" || args.columnObject.editType == "datetimepicker")
						args.cell.empty().html(formattedValue);
                    else {
                        if (BoldBIDashboard.isNullOrUndefined(column.format))
                            args.cell.empty().html(args.isForeignKey ? args.value.text : args.value)
                    }
                }
                args.cell.removeClass('e-validError');
                if (args.cell.hasClass('e-updatedtd'))
                    args.cell.addClass("e-gupdatenotify");
                args.previousValue = !BoldBIDashboard.isNullOrUndefined(args.previousValue) ? (column.type == "date" || column.type == "datetime") ? new Date(args.previousValue) : args.previousValue : "";
                tempVal = args.isForeignKey ? args.value.value : args.value;
                var isValueModified = false;
                if (this._bulkEditCellDetails.type == "date" || this._bulkEditCellDetails.type == "datetime" && !BoldBIDashboard.isNullOrUndefined(this._bulkEditCellDetails.format))
                    isValueModified =this._bulkEditCellDetails.cellValue instanceof Date ? this.formatting(this._bulkEditCellDetails.format, this._bulkEditCellDetails.cellValue) != this.formatting(this._bulkEditCellDetails.format, tempVal): true;
                else
                    isValueModified = ((this._bulkEditCellDetails.cellEditType == "datepicker" || this._bulkEditCellDetails.cellEditType == "datetimepicker" || this._bulkEditCellDetails.cellEditType == "dropdownedit")
										 && tempVal instanceof Date && args.previousValue instanceof Date) ? (tempVal.getTime() !== args.previousValue.getTime()) : (typeof (tempVal) == "number" ? tempVal !== parseFloat(args.previousValue) : tempVal !== args.previousValue.toString());
                this.model.isEdit = false;
                if (isValueModified) {
                    this._enableSaveCancel();
                    args.cell.addClass("e-updatedtd e-icon e-gupdatenotify");
                    getVal = BoldBIDashboard.getObject(this._bulkEditCellDetails["fieldName"], args.rowData);
                    if (typeof getVal == "string" && getVal.length)
                        setVal = args.isForeignKey ? args.value.value.toString() : args.value.toString();
                    else
                        setVal = args.isForeignKey ? (!isNaN(parseInt(args.value.value)) ? parseInt(args.value.value) : args.value.value) : args.value;
                    if (typeof args.value == "string" && !setVal.length)
                        setVal = null;
                    BoldBIDashboard.createObject(this._bulkEditCellDetails["fieldName"], setVal, args.rowData);
                    if (bbdesigner$.inArray(args.rowData, this.batchChanges.changed) == -1 && bbdesigner$.inArray(args.rowData, this.batchChanges.added) == -1)
                        this.batchChanges.changed.push(args.rowData);
					if(this.isejObservableArray){
                        var batchAction;
                        if (args.cell.closest("tr").hasClass("e-insertedrow"))
                            batchAction = "insert";
                        else
                            batchAction = "update";                                                                             
                        this._refreshViewModel(args, batchAction);
                    }
                }
                bbdesigner$targetTR.removeClass("e-editedrow").removeClass("e-batchrow");
                args.cell.removeClass("e-editedbatchcell");
            }
        },
		_refreshViewModel:function(args, batchAction){
            var dm;
            if (!(this._dataSource() instanceof BoldBIDashboard.DataManager))
                dm = BoldBIDashboard.DataManager(this._dataSource());
            else 
                dm = this._dataSource();
            var query = new BoldBIDashboard.Query();
            for (var i = 0; i < this._primaryKeys.length; i++)
               query = query.where(this._primaryKeys[i], BoldBIDashboard.FilterOperators.equal, args.rowData[this._primaryKeys[i]]);
            var currentData = dm.executeLocal(query);
            var bbdesigner$dataSource = this._dataSource(undefined, true);
            var index = bbdesigner$.inArray(currentData[0], this._dataSource());
            this.model.editSettings.showConfirmDialog = false;
            switch (batchAction) {
                case "update":                
                bbdesigner$dataSource(args.rowData, index, batchAction);
                break;
                case "remove":
                bbdesigner$dataSource(args.rowData, index, batchAction);               
                break;
                case "insert":
                bbdesigner$dataSource(args.rowData, 0, batchAction);                  
                break;
            }            
        },
        _enableSaveCancel: function () {
            if (this.model.toolbarSettings.showToolbar) {
                bbdesigner$toolBar = this.element.find("#" + this._id + "_toolbarItems");
                bbdesigner$toolBar.BoldBIDashboardToolbar("enableItemByID", this._id + "_update");
                bbdesigner$toolBar.BoldBIDashboardToolbar("enableItemByID", this._id + "_cancel");
            }
        },
        setCellText: function (rowIndex, cellIndex, value) { /*Supports only local datasource*/
            var byField = typeof cellIndex == "string", rows = this._excludeDetailRows(), cell,
                isGrouped = this.model.groupSettings.groupedColumns.length != 0, isVirtualized = this.model.scrollSettings.allowVirtualScrolling,
                column = this[byField ? "getColumnByField" : "getColumnByIndex"](cellIndex), current = BoldBIDashboard.getObject(["currentViewData", (isGrouped ? ".records" : "")].join(""), this.model),
                edited = {}, dm = isVirtualized ? this._dataManager : new BoldBIDashboard.DataManager(current),
                key = this._primaryKeys[0], keyValue = byField || BoldBIDashboard.getObject(rowIndex + "." + key, isVirtualized ? this._dataManager.dataSource.json : current);

            BoldBIDashboard.createObject(column.field, value, edited);

            if (byField) {
                keyValue = rowIndex;
                rowIndex = dm.executeLocal(new BoldBIDashboard.Query().select(key)).indexOf(rowIndex);
                cellIndex = this.getColumnIndexByField(column.field);
            }
            if (isVirtualized) {
                var pageSize = this.model.pageSettings.pageSize, page, name, mod = rowIndex % pageSize;
                page = (rowIndex + pageSize - mod)/ pageSize;        
                name = (page - 1) * pageSize; isCached = bbdesigner$.inArray(name, this.virtualLoadedPages) != -1
                if (isCached) {
                    cell = this.getContentTable().find("tr[name=" + name + "]")[mod].cells[cellIndex];
                }
            }

            canSkip = rowIndex == -1 || cellIndex == -1 || (isVirtualized && !isCached)
                || rowIndex > (isVirtualized ? this._dataSource() : current).length || cellIndex > this.model.columns.length;

            if (!canSkip) { /*Skip when not in current page*/
                cell = cell || this._excludeDetailCells(rows[rowIndex])[cellIndex];
                cell.innerHTML = column.format === undefined ? value : this.formatting(column.format, value, this.model.locale);
                this._trigger("queryCellInfo", { cell: cell, text: cell.innerHTML, column: column, data: edited });
            }
			if(key){
				BoldBIDashboard.createObject(key, keyValue, edited);
				this._dataManager.update(key, edited);
			}
        },
        _excludeDetailCells: function (bbdesigner$tr) {
            var bbdesigner$gridCells;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid || this.model.showSummary))
                bbdesigner$gridCells = bbdesigner$(bbdesigner$tr.cells).not(".e-detailrowexpand, .e-detailrowcollapse");
            else
                bbdesigner$gridCells = bbdesigner$(bbdesigner$tr.cells);
            return bbdesigner$gridCells;
        },
        setCellValue: function (index, fieldName, cellValue) {
            if (bbdesigner$("#" + this._id + "EditForm").length > 0)
                bbdesigner$("#" + this._id + "EditForm").attr("id", "EditForm1");
            if (this.model.editSettings.editMode == "batch" && !this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.frozenColumns) {
                var data = this.getDataByIndex(index), tr = this._excludeDetailRows()[index], dataIndex, columnIndex = this.getColumnIndexByField(fieldName), proxy = this, editedValue = cellValue, valid = false;
                var column = this.getColumnByField(fieldName), editedTd;
                if (bbdesigner$(tr).hasClass("e-insertedrow"))
                    editedTd = bbdesigner$(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex + this.model.groupSettings.groupedColumns.length];
                else
                    editedTd = bbdesigner$(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex];
                if (!BoldBIDashboard.isNullOrUndefined(column) && !column.isPrimaryKey && column.allowEditing != false) {
                    if (!BoldBIDashboard.isNullOrUndefined(column.validationRules)) {/*Check for validation*/
                        bbdesigner$form = BoldBIDashboard.buildTag("form", "", {}, { id: this._id + "EditForm" }), bbdesigner$valElem = BoldBIDashboard.buildTag("input", "", {}, { id: this._id + column.field, value: cellValue });
                        bbdesigner$form.append(bbdesigner$valElem);
                        this.element.append(bbdesigner$form);
                        bbdesigner$form.validate({/*Validate the form*/
                            errorPlacement: function (error, element) {
                                if (!proxy._alertDialog) proxy._renderAlertDialog();
                                bbdesigner$("#" + proxy._id + "AlertDialog_wrapper").css("min-height", "");
                                proxy._alertDialog.find(".e-content").text(error.text());
                                proxy._alertDialog.BoldBIDashboardDialog("open");
                                proxy.element.find(bbdesigner$form).remove();
                                valid = true;
                                return true;
                            },
                        });
                        this.setValidationToField(column.field, column.validationRules);
                    }

                    if (column.foreignKeyValue) {
                        editedValue = this._foreignKeyBinding(columnIndex, cellValue, this._id);/*Get the corresponding foreign key value*/

                        if (editedValue == undefined) {
                            if (!this._alertDialog) this._renderAlertDialog();
                            bbdesigner$("#" + this._id + "AlertDialog_wrapper").css("min-height", "");
                            this._alertDialog.find(".e-content").text(this.localizedLabels.ForeignKeyAlert);
                            this._alertDialog.BoldBIDashboardDialog("open");
                            if (!BoldBIDashboard.isNullOrUndefined(column.validationRules)) this.element.find(bbdesigner$form).remove();
                            return;
                        }
                    }

                    if (!BoldBIDashboard.isNullOrUndefined(column.format)) {/*Get the formatted value*/
                        var formattedValue = this.formatting(column.format, column.foreignKeyValue ?
                                                    (!isNaN(parseFloat(cellValue)) && isFinite(cellValue)
                                                    ? parseFloat(cellValue)
                                                    : cellValue) : cellValue, this.model.locale);
                        editedValue = formattedValue;
                    }
                    


                    if (!BoldBIDashboard.isNullOrUndefined(column.validationRules)) {
                        bbdesigner$(bbdesigner$form).validate().form();
                        this.element.find(bbdesigner$form).remove();
                    }
                    bbdesigner$("#EditForm1").attr("id", this._id + "EditForm");
                    if (!valid && editedTd.innerHTML != editedValue) {
                        if (bbdesigner$(editedTd).has("form").length > 0) this.model.isEdit = false;
                        editedTd.innerHTML = editedValue;
                        bbdesigner$(editedTd).addClass("e-updatedtd e-icon e-gupdatenotify");
                        bbdesigner$(editedTd).removeClass("e-validError e-editedbatchcell");
                        BoldBIDashboard.createObject(fieldName, cellValue, data);
                        bbdesigner$.inArray(data, this.batchChanges.changed) == -1 && this.batchChanges.changed.push(data);
                        this._enableSaveCancel();
                    }
                }
            }
        },
        setDefaultData: function (defaultData) {
            if (BoldBIDashboard.isNullOrUndefined(defaultData)) {
                var fieldNames = [];
                var columns = this.model.columns;
                for (var column = 0; column < this.model.columns.length; column++)
                    fieldNames.push(this.model.columns[column]["field"]);
                if (BoldBIDashboard.isNullOrUndefined(this._bulkEditCellDetails._data))
                    this._bulkEditCellDetails._data = [];
                defaultData = {};
                var setter = function (field, value) { BoldBIDashboard.createObject(field, value, defaultData) };
                for (var i = 0; i < fieldNames.length; i++) {
                    var index = i, field = fieldNames[i], columnType = columns[i].type, val = BoldBIDashboard.getObject(field, this._bulkEditCellDetails._data[0]);
                    var isChild = !BoldBIDashboard.isNullOrUndefined(this.model.parentDetails) ? this.model.parentDetails.parentKeyField : null;
                    if (field == isChild)
                        this.model.columns[index].defaultValue = this.model.parentDetails.parentKeyFieldValue;
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[index]["defaultValue"])) {
                        setter(field, this.model.columns[index]["defaultValue"]);
                    }
                    else {
                        switch (columnType) {
                            case "number":
                                setter(field, 0);
                                break;
                            case "string":
                                setter(field, null);
                                break;
                            case "boolean":
                                setter(field, false);
                                break;
                            case "object":
                                if (bbdesigner$.isArray(val))
                                    setter(field, new Array());
                                else
                                    setter(field, null);
                        }
                    }
                }
            }
            this._bulkEditCellDetails.defaultData = defaultData;
        },
        _bulkDelete: function (index) {
            if (this.model.editSettings.allowDeleting) {
                if (BoldBIDashboard.isNullOrUndefined(index))
                    index = this._selectedRow();
                if (index == -1) {
                    alert(this.localizedLabels.DeleteOperationAlert);
                    return;
                }
                var tr, bbdesigner$tr, data, args = {};
                if (this.multiDeleteMode && this.selectedRowsIndexes.length > 1) {
                    data = [];
                    bbdesigner$tr = this._getSelectedRows();
                    Array.prototype.push.apply(data, this.getSelectedRecords());
                    Array.prototype.push.apply(this.batchChanges.deleted, this.getSelectedRecords());
                }
                else
                    tr = this.getRows()[index], bbdesigner$tr = bbdesigner$(tr), data = this.getDataByIndex(index);
                args = {
                    primaryKey: this._primaryKeys,
                    rowIndex: index,
                    rowData: data,
                    row: bbdesigner$tr
                };
                if (this._trigger("beforeBatchDelete", args))
                    return;
				if(this.isejObservableArray)                   
                    this._refreshViewModel(args, "remove");
                if (bbdesigner$tr.hasClass("e-insertedrow")) {
                    bbdesigner$tr.remove();
                    index = bbdesigner$.inArray(tr, this._bulkEditCellDetails.insertedTrCollection);
                    if (index != -1) {
                        this._bulkEditCellDetails.insertedTrCollection.splice(index, 1);
                        this.batchChanges.added.splice(index, 1);
                    }
                }
                else {
                    bbdesigner$tr.hide();
					if(args.rowIndex == 0 || bbdesigner$tr.hasClass("e-firstrow")){
						bbdesigner$tr.hasClass("e-firstrow") && this.getContentTable().find("tr").removeClass("e-firstrow");
						this.getContentTable().find("tr:visible").first().addClass("e-firstrow");
					} 

                    if (!bbdesigner$.isArray(data))
                        this.batchChanges.deleted.push(data);
                }
                this._gridRows = this.getContentTable().find("td.e-rowcell").closest("tr").toArray();
                this._enableSaveCancel();
                this._selectedRow(-1);
                args = {
                    primaryKey: this._primaryKeys,
                    rowIndex: index,
                    rowData: data
                };
                this._trigger("batchDelete", args);
            }
        },
        _bulkAddRow: function (defaultData) {
            var  bbdesigner$form = bbdesigner$("#" + this._id + "EditForm");
            if (bbdesigner$form.length && !this.editFormValidate())
                return true;
			if (this.model.editSettings.allowAdding) {
                var args = {}, bbdesigner$tr, editCellIndex, rows = this.getRows();
                if (!BoldBIDashboard.isNullOrUndefined(defaultData))
                    this._bulkEditCellDetails.defaultData = defaultData;
                BoldBIDashboard.isNullOrUndefined(this._bulkEditCellDetails.defaultData) && this.setDefaultData();
                args = {
                    defaultData: bbdesigner$.extend(true, {}, this._bulkEditCellDetails.defaultData),
                    primaryKey: this._primaryKeys,
                };
                if (this._trigger("beforeBatchAdd", args))
                    return;
                bbdesigner$tr = bbdesigner$(bbdesigner$.render[this._id + "_JSONTemplate"](args.defaultData)).addClass("e-insertedrow");
                rows != null && bbdesigner$(rows[0]).hasClass("e-alt_row") && bbdesigner$tr.removeClass("e-alt_row");
                if (this.model.editSettings.rowPosition == "top")
                    this.getContentTable().first().find('tbody').first().prepend(bbdesigner$tr);
                else if (this.model.editSettings.rowPosition == "bottom")
                    this.getContentTable().first().find('tbody').first().append(bbdesigner$tr);
                if (this._gridRecordsCount === 0)
                    this.getContentTable().find("tbody .emptyrecord").first().remove();
                this._gridRows = this.getContentTable().find("td.e-rowcell").closest("tr").toArray();
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    bbdesigner$tr.prepend(BoldBIDashboard.buildTag("td.e-indentcell"));
                this._bulkEditCellDetails.insertedTrCollection.push(bbdesigner$tr.get(0));
                this.batchChanges.added.push(args.defaultData);
                this._enableSaveCancel();
                var rowindex = this._gridRows.length - 1;
                if (this.model.editSettings.rowPosition == "bottom") {
                    editCellIndex = this._findNextEditableCell(0);
                    this.selectRows(rowindex);
                    this.editCell(rowindex, this.model.columns[editCellIndex].field);
                }
                else {
                    editCellIndex = this._findNextEditableCell(0);
                    this.selectRows(0);
                    this.editCell(0, this.model.columns[editCellIndex].field);
                }
                bbdesigner$tr.find(".e-rowcell").addClass("e-updatedtd e-icon e-gupdatenotify");
                args = { defaultData: args.defaultData };
                bbdesigner$.extend(args, {
                    columnObject: this.model.columns[editCellIndex],
                    columnIndex: editCellIndex,
                    row: bbdesigner$tr,
                    primaryKey: this._primaryKeys,
                    cell: bbdesigner$(bbdesigner$tr[0].cells[editCellIndex])
                });
                this._trigger("batchAdd", args);
            }
        },
        getDataByIndex: function (rowIndex) {
            var bbdesigner$tr = bbdesigner$(this.getRows()[rowIndex]), insertedRowIndex, currentRowData, index;
            if (bbdesigner$tr.hasClass("e-insertedrow")) {
                insertedRowIndex = bbdesigner$.inArray(bbdesigner$tr[0], this._bulkEditCellDetails.insertedTrCollection);
                return this.batchChanges.added[insertedRowIndex];
            }
            else
                return this._bulkEditCellDetails._data[rowIndex - this._bulkEditCellDetails.insertedTrCollection.length];

        },
        
        refreshBatchEditChanges: function () {
            this._bulkEditCellDetails = {
                cellValue: null,
                rowIndex: -1,
                _data: null,
                columnIndex: -1,
                fieldName: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                rowData: null,
                isForeignKey: false
            };
            this.batchChanges = {
                added: [],
                deleted: [],
                changed: []
            };
        },
        refreshBatchEditMode: function () {
            if (this.model.editSettings.editMode == "batch") {
                this.refreshBatchEditChanges();
                this._bulkEditCellDetails._data = bbdesigner$.extend(true, [], this.getCurrentViewData());
            }
        },
        
        batchCancel: function () {
            this.cancelEdit();
        },
        
        batchSave: function () {
            var args = {}, deferedObject, gridObject = this;
            this.saveCell();
            args["batchChanges"] = this.getBatchChanges();
            if (this._trigger("beforeBatchSave", args))
                return;
            args = {};
            args.requestType = "batchsave";
            this._sendBulkReuqest(this.getBatchChanges(), args);
        },
        _sendBulkReuqest: function (batchChanges, args) {
            var deferedObject = this._dataManager.saveChanges(batchChanges, this._primaryKeys[0], this.model.query._fromTable), gridObject = this;
            if (this._dataManager instanceof BoldBIDashboard.DataManager && !this._dataManager.dataSource.offline) {
                deferedObject.done(function (e) {
                    gridObject._processBindings(args);
                });
                deferedObject.fail(function (e) {
                    var args = { error: e.error };
                    gridObject._trigger("actionFailure", args);
                });
            }
            else
                this._processBindings(args);

        },
        
        getBatchChanges: function () {
            return this.batchChanges;
        },
        
        editCell: function (index, fieldName) {
            if (this.element.BoldBIDashboardWaitingPopup("model.showOnInit"))
                return;
            if (this.model.editSettings.allowEditing && bbdesigner$.inArray(fieldName, this._disabledEditableColumns) == -1) {
                var bbdesigner$form = bbdesigner$("#" + this._id + "EditForm");
                this.model.isEdit && this.saveCell();
                if (bbdesigner$.isFunction(bbdesigner$.validator) && bbdesigner$form.length && bbdesigner$form.validate().errorList.length)
                    return;
                var bbdesigner$targetTR = bbdesigner$(this.getRows()[index]), columnIndex = this.getColumnIndexByField(fieldName), bbdesigner$targetTd = bbdesigner$targetTR.find(".e-rowcell").eq(columnIndex), column = this.model.columns[columnIndex], rowData = this.getDataByIndex(index);
                var args = {
                    validationRules: BoldBIDashboard.isNullOrUndefined(column.validationRules) ? {} : bbdesigner$.extend(true, {}, column.validationRules),
                    columnName: column.field,
                    value: BoldBIDashboard.getObject(fieldName, rowData),
                    rowData: rowData,
                    primaryKey: this._primaryKeys,
                    columnObject: column,
                    cell: bbdesigner$targetTd,
                    isForeignKey: !BoldBIDashboard.isNullOrUndefined(column.foreignKeyValue) && this.model.editSettings.editMode == "batch" ? true : false,
                }, isEditable = true;
                this._batchEditRowData = rowData;
                if (this._trigger("cellEdit", args))
                    return;
                if (bbdesigner$targetTR.hasClass("e-insertedrow")) args.requestType = "add";
                if (bbdesigner$.inArray(fieldName, this._primaryKeys) != -1 || args.columnObject.allowEditing === false || args.columnObject.template || args.columnObject.commands) {
                    bbdesigner$.extend(this._bulkEditCellDetails, {
                        cellValue: args.value,
                        rowIndex: index,
                        fieldName: fieldName,
                        rowData: args.rowData,
                        columnIndex: columnIndex,
                        isForeignKey: BoldBIDashboard.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
                    });
                    isEditable = false;
                }
                if (bbdesigner$targetTR.hasClass("e-insertedrow") && (!args.columnObject.template && !args.columnObject.commands))
                    isEditable = true;
                if ((!BoldBIDashboard.isNullOrUndefined(args.columnObject.templateID) && BoldBIDashboard.isNullOrUndefined(args.columnObject.template)) || args.columnObject.template != undefined)
                    isEditable = false;
                if (isEditable) {
                    bbdesigner$.extend(this._bulkEditCellDetails, {
                        rowIndex: index,
                        cellValue: args.value,
                        columnIndex: columnIndex,
                        format: column.format,
                        type: column.type,
                        fieldName: fieldName,
                        cellEditType: args.columnObject.editType,
                        rowData: rowData,
                        isForeignKey: BoldBIDashboard.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
                    });
                    this._renderBulkEditObject(args, bbdesigner$targetTd);
                    bbdesigner$targetTR.addClass("e-editedrow").addClass("e-batchrow");
                    args.cell.addClass("e-editedbatchcell");
                    if (args.columnObject.editType == "booleanedit")
                        args.cell.addClass("e-boolrowcell");
                }
            }
        },
        _findNextEditableCell: function (columnIndex) {
            var endIndex = this.model.columns.length;
            for (var i = columnIndex; i < endIndex; i++) {
                if (!this.model.columns[i].template && !this.model.columns[i].commands && this.model.columns[i].visible)
                    return i;
            }
            return -1;
        },
        _findNextCell: function (columnIndex, direction) {
            var splittedColumn, visibleColumns = [], predicate, rows = this.getRows();
            predicate = BoldBIDashboard.Predicate("visible", "equal", true).and("template", "notequal", true);
            if (!bbdesigner$(rows[this._bulkEditCellDetails.rowIndex]).hasClass("e-insertedrow"))
                predicate = predicate.and("allowEditing", "notequal", false);
            splittedColumn = direction == "right" ? this.model.columns.slice(columnIndex) : this.model.columns.slice(0, columnIndex + 1).reverse();
            visibleColumns = BoldBIDashboard.DataManager(splittedColumn).executeLocal(BoldBIDashboard.Query().where(predicate));
            if (visibleColumns.length == 0 && (!(direction == "left" && this._bulkEditCellDetails.rowIndex == 0) && !(direction == "right" && this._bulkEditCellDetails.rowIndex + 1 == this.getRows().length))) {
                splittedColumn = direction == "right" ? this.model.columns.slice(0, columnIndex) : this.model.columns.slice(columnIndex).reverse();
                visibleColumns = BoldBIDashboard.DataManager(splittedColumn).executeLocal(BoldBIDashboard.Query().where(predicate));
                this._bulkEditCellDetails.rowIndex = visibleColumns.length && direction == "right" ? this._bulkEditCellDetails.rowIndex + 1 : this._bulkEditCellDetails.rowIndex - 1;
            }
            return visibleColumns.length ? bbdesigner$.inArray(visibleColumns[0], this.model.columns) : -1;
        },
        _moveCurrentCell: function (direction) {
            var editCellIndex, rowIndex = this._bulkEditCellDetails.rowIndex, currentRow, bbdesigner$form = bbdesigner$("#" + this._id + "EditForm");
            if (this._bulkEditCellDetails.rowIndex == -1 && this._bulkEditCellDetails.columnIndex == -1)
                return true;
            switch (direction) {
                case "right":
                    if ((this._bulkEditCellDetails.rowIndex == this.getRows().length - 1 && this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) || (!this.element.is(document.activeElement) && bbdesigner$form.length == 0))
                        return true;
                    if (this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) {
                        editCellIndex = 0;
                        this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex + 1;
                    }
                    else
                        editCellIndex = this._bulkEditCellDetails.columnIndex + 1;
                    if (this.model.columns[editCellIndex].template === true || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
                        editCellIndex = this._findNextCell(editCellIndex, direction);
                    this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
                    editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
                    break;
                case "left":
                    if ((this._bulkEditCellDetails.rowIndex == 0 && this._bulkEditCellDetails.columnIndex == 0) || (!this.element.is(document.activeElement) && bbdesigner$form.length == 0))
                        return true;
                    if (this._bulkEditCellDetails.columnIndex == 0) {
                        editCellIndex = this.model.columns.length - 1;
                        this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex - 1;
                        this.selectRows(this._bulkEditCellDetails.rowIndex);
                    }
                    else
                        editCellIndex = this._bulkEditCellDetails.columnIndex - 1;
                    if (this.model.columns[editCellIndex].template === true || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
                        editCellIndex = this._findNextCell(editCellIndex, direction);
                    this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
                    editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
                    break;
                case "up":
                    if (this._bulkEditCellDetails.rowIndex == 0)
                        return;
                    editCellIndex = this._bulkEditCellDetails.columnIndex;
                    this.selectRows(this._bulkEditCellDetails.rowIndex - 1);
                    this.editCell(this._bulkEditCellDetails.rowIndex - 1, this.model.columns[this._bulkEditCellDetails.columnIndex].field);
                    break;
                case "down":
                    if (this._bulkEditCellDetails.rowIndex == this.getRows().length - 1)
                        return;
                    editCellIndex = this._bulkEditCellDetails.columnIndex;
                    this.selectRows(this._bulkEditCellDetails.rowIndex + 1);
					if(this._bulkEditCellDetails.columnIndex != -1)
						this.editCell(this._bulkEditCellDetails.rowIndex + 1, this.model.columns[this._bulkEditCellDetails.columnIndex].field);
                    break;

            }
            addedRow = !bbdesigner$(this.getRows()[this._bulkEditCellDetails.rowIndex]).hasClass("e-insertedrow");
            if (editCellIndex != -1 && (this.model.columns[editCellIndex].commands || (this.model.columns[editCellIndex].isPrimaryKey && addedRow) || this.model.columns[editCellIndex].template))
                this.element.focus();
            return false;
        },
        _renderBulkEditObject: function (cellEditArgs, bbdesigner$td) {
            var bbdesigner$form = BoldBIDashboard.buildTag("form", "", {}, { id: this._id + "EditForm" }), bbdesigner$bulkEditTemplate = this._bulkEditTemplate, mappingName = this._id + cellEditArgs.columnObject.field, bbdesigner$element, htmlString, cellData = {};
            BoldBIDashboard.createObject(cellEditArgs.columnObject.field, cellEditArgs.value, cellData);
            var args = { requestType: cellEditArgs.requestType };
            bbdesigner$td.empty();
            if (!bbdesigner$td.parent().is(":last-child")){
                bbdesigner$td.addClass('e-validError');
                bbdesigner$td.removeClass('e-gupdatenotify');
             }
            htmlString = bbdesigner$bulkEditTemplate.find("#" + cellEditArgs.columnObject.field.replace(/\./g, BoldBIDashboard.pvt.consts.complexPropertyMerge) + "_BulkEdit").html();
            bbdesigner$element = bbdesigner$(bbdesigner$.templates(htmlString).render(cellData));
            if (bbdesigner$element.get(0).tagName == "SELECT") {
                var cellValue = BoldBIDashboard.getObject(cellEditArgs.columnObject.field, cellData);
                bbdesigner$element.val(BoldBIDashboard.isNullOrUndefined(cellValue) ? "" : cellValue.toString());
                bbdesigner$element.val() == null && bbdesigner$element.val(bbdesigner$element.find("option").first().val());
            }
            bbdesigner$form.append(bbdesigner$element);
            bbdesigner$td.append(bbdesigner$form);
            this._setoffsetWidth();
            this._refreshEditForm(args);
            if (bbdesigner$.isFunction(bbdesigner$.validator) && !bbdesigner$.isEmptyObject(cellEditArgs.validationRules)) {
                this.initValidator();
                this.setValidationToField(cellEditArgs.columnObject.field, cellEditArgs.validationRules);
            }
            this.model.isEdit = true;
        },
        _triggerConfirm: function (args) {
            if (args !== undefined && args.model.text == this.localizedLabels.OkButton) {
                if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.BatchSaveConfirm)
                    this.batchSave();
                else if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.ConfirmDelete) {
                    if (this.model.editSettings.editMode == "batch")
                        this._bulkDelete()
                    else {
                        if (this.multiDeleteMode)
                            this._multiRowDelete();
                        else
                            this.deleteRow();
                    }
                }
                else if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.CancelEdit)
                    this.cancelEdit();
                else {
                    this._confirmedValue = true;
                    this._processBindings(this._requestArgs);
                }
            }
            else {
                if (this._confirmDialog.find(".e-content").text() != this.localizedLabels.BatchSaveConfirm && this._confirmDialog.find(".e-content").text() != this.localizedLabels.ConfirmDelete) {
                    if (this._confirmDialog.find(".e-content").text() != this.localizedLabels.CancelEdit) {
                        switch (this._requestArgs.requestType) {
                            case "grouping":
                                this.model.groupSettings.groupedColumns.pop();
                                break;
                            case "ungrouping":
                                this.model.groupSettings.groupedColumns.push(this._requestArgs.columnName);
                                break;
                            case "sorting":
                                this._cSortedDirection = this._cSortedColumn = null;
                                break
                            case "filtering":
                                this.model.filterSettings.filteredColumns.reverse().splice(0, this._requestArgs.currentFilterObject);
                                this.model.filterSettings.filteredColumns.reverse();
                                break;
                            case "paging":
                                this._currentPage(this._requestArgs.previousPage);
                                this.getPager().BoldBIDashboardPager("model.currentPage", this._requestArgs.previousPage);
                                break

                        }
                    }
                }
                this._confirmedValue = false;
            }
            this._requestArgs = null;
            this._confirmDialog.BoldBIDashboardDialog("close");
        },
        _batchCellValidation:function(index) {
            var bbdesigner$row = this.getRowByIndex(index);
            if (this.model.editSettings.editMode=="batch" && this.model.isEdit && bbdesigner$row.hasClass('e-insertedrow') ){              
                for (i = 0; i < this._validatedColumns.length; i++) {
                      var colindex = this.getColumnIndexByField(this._validatedColumns[i])
                           if (!this.editFormValidate())
                                 return true;                         
                 this.editCell(index, this.model.columns[colindex].field);                          
                    }
               }
         },
        _saveCellHandler: function (e) {
            var bbdesigner$target = bbdesigner$(e.target);
            e.stopPropagation();
            var index=(this.model.editSettings.rowPosition == "top")?0:this._gridRows.length - 1;
            if (bbdesigner$target.closest(".e-popup").length == 0 && bbdesigner$target.closest(".e-rowcell").find("#" + this._id + "EditForm").length == 0) {
                if (bbdesigner$(this.getRows()).hasClass("e-insertedrow"))
                    this._batchCellValidation(index);
                this.saveCell();
            }
        },
        initValidator: function () {
            var gridObject = this, elements = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : bbdesigner$("#" + this._id + "EditForm");
            for (var i = 0; i < elements.length ; i++) {
                elements.eq(i).validate({
                    ignore: ".e-hide",
                    errorClass: 'e-field-validation-error',
                    errorElement: 'div',
                    wrapper: "div",
                    errorPlacement: function (error, element) {
                        gridObject._renderValidator(error, element);
                    },

                });
            }
        },
        _renderValidator: function (error, element) {          
            if (element.is(":hidden"))
                element = element.siblings("input:visible");
            if (!element.length)
                return;
            var bbdesigner$td = element.closest(this.model.editSettings.editMode == "inlineform" ? "div" : "td"), bbdesigner$container = bbdesigner$(error).addClass("e-error"),
             bbdesigner$tail = BoldBIDashboard.buildTag("div.e-errortail e-toparrow");
            bbdesigner$td.find(".e-error").remove();

            if (element.parent().hasClass("e-in-wrap"))
                bbdesigner$container.insertAfter(element.closest(".e-widget"));
            else
                bbdesigner$container.insertAfter(element);
                     
            var oTop = error[0].offsetTop, top = (bbdesigner$td.hasClass("e-validError") ^ this.model.allowScrolling) ? error.closest("td").offset().top + oTop : oTop,
                eleExceed = top + error[0].offsetHeight > (this.model.scrollSettings.frozenColumns > 0 ? this.getContent().find(".e-movablecontent") : this.getContent()).height(),
                isValidationExceed = (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch")&& eleExceed,
                doInvert = isValidationExceed && this.model.allowScrolling;

            if (isValidationExceed && !this.model.allowScrolling) {
                bbdesigner$td.removeClass("e-validError");
                error.find(".e-field-validation-error").css("position", "absolute").width(element.width() - 5);
            }

            if (this.model.allowScrolling && !bbdesigner$td.hasClass("e-validError"))
                bbdesigner$td.addClass("e-validError");

            var operation = doInvert ? "append" : "prepend";
            bbdesigner$container[operation](bbdesigner$tail);

            if (this.model.enableRTL)
                this.model.editSettings.editMode != "dialog" && bbdesigner$container.offset({ top: element.offset().top + element.height() });
            else
                this.model.editSettings.editMode != "dialog" && bbdesigner$container.offset({ left: element.offset().left, top: element.offset().top + element.height() });

            if (doInvert) {                
                var top = bbdesigner$container.css('top');
                bbdesigner$tail.addClass("e-bottomarrow");
                bbdesigner$container.css({
                    'bottom': top,
                    'top': 'auto'
                });
            }

            bbdesigner$container.show("slow");            
        },

        setValidation: function () {
            for (var i = 0; i < this.model.columns.length; i++) {
                if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[i]["validationRules"])) {
                    this.setValidationToField(this.model.columns[i].field, this.model.columns[i].validationRules);
                }
            }
        },
        
        setValidationToField: function (name, rules) {
            var fName = name, ele;
            if (!BoldBIDashboard.isNullOrUndefined(name))
                fName = fName.replace(/[^a-z0-9\s_]/gi, '');
            if (this.model.editSettings.editMode == "batch")
                var form = this.element.find("#" + this._id + "EditForm");
            else
                var form = this.element.find(".gridform");
            ele = form.find("#" + this._id + fName).length > 0 ? form.find("#" + this._id + fName) : form.find("#" + fName);
            if (rules["regex"]) {
                rules[name + "regex"] = rules["regex"]; delete rules["regex"];
                bbdesigner$.validator.addMethod(fName + "regex", function (value, element, options) {
                    var ptn = options instanceof RegExp ? options : new RegExp(options);
                    return ptn.test(value);
                }, BoldBIDashboard.getObject("messages.regex", rules) || this.getColumnByField(name).headerText + " should match the given pattern");
            }
            !ele.attr("name") && ele.attr("name", name);
            ele.rules("add", rules);
            var validator = bbdesigner$("#" + this._id + "EditForm").validate();
            validator.settings.messages[name] = validator.settings.messages[name] || {};
            if (!BoldBIDashboard.isNullOrUndefined(rules["required"])) {
                if (!BoldBIDashboard.isNullOrUndefined(rules["messages"] && rules["messages"]["required"]))
                    var message = rules["messages"]["required"];
                else
                    var message = bbdesigner$.validator.messages.required;
                if (message.indexOf("This field") == 0)
                    message = message.replace("This field", this.getColumnByField(name).headerText);               
                validator.settings.messages[name]["required"] = message;
                if (ele.hasClass("e-datepicker"))
                    ele.BoldBIDashboardDatePicker({watermarkText: ""});
            }
        },
        _renderConfirmDialog: function () {
            var bbdesigner$contentDiv = BoldBIDashboard.buildTag('div.e-content', this.localizedLabels.BatchSaveConfirm)
            , bbdesigner$buttons = BoldBIDashboard.buildTag('span.e-buttons', "<input type='button' id=" + this._id + 'ConfirmDialogOK' + " value='" + this.localizedLabels.OkButton + "' /> "
                + "<input type='button' id=" + this._id + 'ConfirmDialogCancel' + " value='" + this.localizedLabels.CancelButton + "' />");

            this._confirmDialog = BoldBIDashboard.buildTag('div#' + this._id + 'ConfirmDialog');
            this._confirmDialog.append(bbdesigner$contentDiv).append(bbdesigner$buttons);
            this.element.append(this._confirmDialog);
            bbdesigner$buttons.find("input").BoldBIDashboardButton({
                cssClass: this.model.cssClass,
                showRoundedCorner: true,
                size: "mini",
                click: bbdesigner$.proxy(this._triggerConfirm, this)
            });
            this._renderFDialog(this._id + 'ConfirmDialog');
            this._confirmDialog.BoldBIDashboardDialog({ width: "auto",minWidth:0,minHeight:0, enableModal: true });
        },
        _unboundClickHandler: function (e) {
            var bbdesigner$target = bbdesigner$(e.target).closest("button");
            if (bbdesigner$target.hasClass("e-button") && (bbdesigner$target.hasClass("e-disable") || bbdesigner$target.prop("disabled"))) return;
            var bbdesigner$editTrLen = 0, params = {};
            if (bbdesigner$(e.target).hasClass("e-unboundcelldiv"))
                return;
            var index = bbdesigner$target.hasClass("e-savebutton") ? this.getIndexByRow(bbdesigner$(".e-editedrow")) : this.getIndexByRow(bbdesigner$target.closest("tr"));
			if (this.model.isEdit && bbdesigner$target.hasClass("e-editbutton")) {
                this._unboundRow = bbdesigner$target.closest("tr");
                return;
            }
            var rowData = this._currentJsonData[index];
            var btnObj = bbdesigner$(bbdesigner$target).BoldBIDashboardButton("instance");
			 if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlinetemplate")
                bbdesigner$editTrLen = bbdesigner$("#" + this._id).find(".e-editedrow").length;
            this.model.allowSelection && !this.model.isEdit && this.selectRows(this.getIndexByRow(bbdesigner$target.closest("tr")) - bbdesigner$editTrLen);
            if (bbdesigner$target.hasClass("e-cancelbutton"))
                this.model.isEdit = false;
            bbdesigner$.isFunction(bbdesigner$.fn.BoldBIDashboardDatePicker) && bbdesigner$("#" + this._id + "EditForm").find(".e-datepicker").BoldBIDashboardDatePicker("hide");
            if (bbdesigner$target.hasClass("e-editbutton")) {
                if (this.model.isEdit)
                    this.cancelEdit();
                var bbdesigner$tr = this.getRowByIndex(index);
                this.startEdit(bbdesigner$tr);
            } else if (bbdesigner$target.hasClass("e-deletebutton")) {
                var bbdesigner$tr = this.getRowByIndex(index);
                if (this.model.editSettings.showDeleteConfirmDialog) {
                    this._toolbarOperation(this._id + "_delete");
                    return;
                }
                this.deleteRow(bbdesigner$tr);
            }
            else if (bbdesigner$target.hasClass("e-savebutton")) {
                this.endEdit();
                rowData = this._currentJsonData[index];
            }
            else if (bbdesigner$target.hasClass("e-cancelbutton"))
                this.cancelEdit();
            params = { rowIndex: index, data: rowData, buttonModel: btnObj.model };
            if (BoldBIDashboard.raiseWebFormsServerEvents) {
                var serverArgs = { model: this.model, originalEventType: "commandButtonClick" };
                var clientArgs = params;
				if(!BoldBIDashboard.isNullOrUndefined(this.model.serverEvents) && bbdesigner$.inArray("commandButtonClick",this.model.serverEvents) != -1)
                  BoldBIDashboard.raiseWebFormsServerEvents("commandButtonClick", serverArgs, clientArgs);
            }
        },
          
        addRecord: function (data, serverChange) {
            if (this.model.editSettings.allowAdding && (bbdesigner$(".e-gridcontent").find(".gridform").length == 0)) {
            if (data) {
                if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                    var bbdesigner$addRow = BoldBIDashboard.buildTag('tr.e-addedrow');
                    this.getContentTable().find('tbody').first().prepend(bbdesigner$addRow);
                }
                var args = { data: data };
                args.action = "add";
                args.selectedRow = this._selectedRow();
                this._cAddedRecord = data;
                args.requestType = BoldBIDashboard.Grid.Actions.Save;
                this._updateAction(args);
                args.selectedRow  != -1 && this.selectRows( args.selectedRow + 1)
                if (this._isUnboundColumn)
                    this._refreshUnboundTemplate(this.getContentTable());
                if (!serverChange) {
                    if ((this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") && this.model.allowPaging && this.model.pageSettings.pageSize < this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
                        this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                }
            } else
                    this._startAdd();
            }
        },
        
        updateRecord: function (keyField, data, action) {
            this._updateDeleteRecord(keyField, data, "update");
            if (this.model.sortSettings.sortedColumns.length || this.model.groupSettings.groupedColumns.length || !BoldBIDashboard.isNullOrUndefined(this._searchCount) || this.filterColumnCollection.length)
                this.refreshContent();
        },
        _updateDeleteRecord: function (keyField, data, action) {
            var dataMgr = BoldBIDashboard.DataManager(this._currentJsonData), dataFilter, index, bbdesigner$row, bbdesigner$newrow;
            dataFilter = dataMgr.executeLocal(BoldBIDashboard.Query().where(keyField, BoldBIDashboard.FilterOperators.equal, data[keyField]));
            if (dataFilter.length) {
                index = bbdesigner$.inArray(dataFilter[0], this._currentJsonData);
                if (index != -1) {
                    bbdesigner$row = this.getRowByIndex(index);
                    if (action == "update") {
                        BoldBIDashboard.copyObject(dataFilter[0], data);
                        bbdesigner$newrow = bbdesigner$(bbdesigner$.render[this._id + "_JSONTemplate"](dataFilter));
                        bbdesigner$row.replaceWith(bbdesigner$newrow);
                        !bbdesigner$row.hasClass("e-alt_row") && bbdesigner$newrow.removeClass("e-alt_row");
                        if (this._isUnboundColumn)
                            this._refreshUnboundTemplate(this.getContentTable());
                            this._dataManager[action](keyField, data);
                        if (this.model.summaryRows.length > 0)
                            this._createSummaryRows(this.getFooterTable());
                    }
                    else {
                        if (bbdesigner$.inArray(index, this.selectedRowsIndexes)==-1) 
                            this.selectedRowsIndexes.push(index);
                        this.deleteRow(bbdesigner$row);
                    }
                }
            }
           
        },
        
        deleteRecord: function (keyField, data) {
            this._updateDeleteRecord(keyField, data, "remove");
        },
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    BoldBIDashboard.gridFeatures.sort = {
        _addSortElementToColumn: function (field, direction) {
            var duplicateColumn = BoldBIDashboard.DataManager(this.model.columns).executeLocal(BoldBIDashboard.Query().where("field", "equal", field)), imageDirection;
            if (duplicateColumn.length > 1)
                var column = this.getColumnByHeaderText(this._bbdesigner$curSElementTarget.text());
            else
                var column = this.getColumnByField(field);
            if (BoldBIDashboard.isNullOrUndefined(column))
                return;
            var index = bbdesigner$.inArray(column, this.model.columns);
            var sortcolumn = this.getsortColumnByField(field);
            var sortindex = bbdesigner$.inArray(sortcolumn, this.model.sortSettings.sortedColumns);
            var bbdesigner$headerCellDiv = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
            direction = BoldBIDashboard.isNullOrUndefined(direction) ? "ascending" : direction.toLowerCase();
            bbdesigner$headerCellDiv.find(".e-ascending,.e-descending").remove();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[ej-mappingname='" + field + "']").find(".e-ascending,.e-descending").not(".e-ungroupbutton").remove();
            imageDirection = direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
            var opacity = 1;
            if (this.model.allowSorting && this.model.allowMultiSorting && this.model.sortSettings.sortedColumns.length > 1) {
                for (var i = 1; i <= sortindex; i++) {
                    opacity = opacity + 1;
                }
                if (bbdesigner$headerCellDiv.css("text-align") == "right") {
                    bbdesigner$headerCellDiv.prepend(this._createSortNumber(opacity, bbdesigner$headerCellDiv).addClass("e-sortnumber"));
                    bbdesigner$headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
                }
                else {
                    bbdesigner$headerCellDiv.prepend(this._createSortNumber(opacity, bbdesigner$headerCellDiv).addClass("e-sortnumber"));
                    bbdesigner$headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
                }
            }
            else
                bbdesigner$headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[ej-mappingname='" + field + "']").append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
            bbdesigner$headerCellDiv.parent().attr("aria-sort", direction);
        },
        _removeSortElementFromColumn: function (field) {
            var column = this.getColumnByField(field);
            var index = bbdesigner$.inArray(column, this.model.columns);
            var bbdesigner$headerCellDiv = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
            bbdesigner$headerCellDiv.find(".e-ascending,.e-descending").remove();
            bbdesigner$headerCellDiv.parent().removeAttr("aria-sort");
        },
        _sortCompleteAction: function (args) {
            var imageDirection;
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv")
                    .find(".e-ascending,.e-descending,.e-number").remove();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[ej-mappingname='" + args.columnName + "']").find(".e-ascending,.e-descending,.e-number").not(".e-ungroupbutton").remove();
            this.getHeaderTable().find("[aria-sort]").removeAttr("aria-sort");
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (this.model.groupSettings.groupedColumns.length && this._bbdesigner$curSElementTarget != null) {
                var bbdesigner$element = this._checkEinGroupDrop(bbdesigner$.trim(this._bbdesigner$curSElementTarget.attr("ej-mappingname")));
                if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$element)) {
                    imageDirection = (BoldBIDashboard.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._bbdesigner$curSElementTarget.attr("ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x"
                    bbdesigner$element.find(".e-ascending,.e-descending").removeClass().addClass("e-icon e-" + (BoldBIDashboard.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._bbdesigner$curSElementTarget.attr("ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) + " " + imageDirection);
                }
            }
            this.multiSortRequest = false;
            if (((!this.model.allowScrolling || !this.initialRender || this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0) && !this.model.allowResizeToFit))
                this.setWidthToColumns();
        },
        
        removeSortedColumns: function (fieldName) {
            if (bbdesigner$.isArray(fieldName)) {
                for (var i = 0; i < fieldName.length; i++) {
                    this._removeSortedColumnFromCollection(fieldName[i]);
                }
            }
            else
                this._removeSortedColumnFromCollection(fieldName);
            this.multiSortRequest = true;
            this.sortColumn(null, null);
        },
        _removeSortedColumnFromCollection: function (fieldName) {
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == fieldName) {
                    this.model.sortSettings.sortedColumns.splice(i, 1);
                    break;
                }
            }
        },
        
        clearSorting: function () {
            var proxy = this;
            this.model.sortSettings.sortedColumns = bbdesigner$.grep(this.model.sortSettings.sortedColumns, function (value, index) {
                if (bbdesigner$.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
                    return true;
                return false;
            });
            this._bbdesigner$prevSElementTarget = null;
            this._bbdesigner$curSElementTarget = null;
            this.refreshContent();
        },
        
        sortColumn: function (columnName, columnSortDirection, predicated) {
            if (!this.model.allowSorting || bbdesigner$.inArray(columnName, this._disabledSortableColumns) != -1 || (columnName != null && columnName.length == 0))
                return;
            var args = {};
            if (!this.multiSortRequest) {
                var proxy = this;
                this.model.sortSettings.sortedColumns = bbdesigner$.grep(this.model.sortSettings.sortedColumns, function (value, index) {
                    if (bbdesigner$.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
                        return true;
                    return false;
                });
            }
            args.requestType = BoldBIDashboard.Grid.Actions.Sorting;
            args.predicated = predicated;
            this._cSortedColumn = args.columnName = columnName;
            this._cSortedDirection = args.columnSortDirection = BoldBIDashboard.isNullOrUndefined(columnSortDirection) ? BoldBIDashboard.sortOrder.Ascending : columnSortDirection.toLowerCase();
            if (this._cSortedColumn !== null) {
                this._removeSortedColumnFromCollection(columnName);
                this.model.sortSettings.sortedColumns.push({ field: this._cSortedColumn, direction: this._cSortedDirection });
            }
            var returnValue = this._processBindings(args);
            if (returnValue)
                this._cSortedDirection = this._cSortedColumn = null;
            this._primaryKeyValues = [];
        },
        _createSortElement: function () {
            return BoldBIDashboard.buildTag('span.e-icon', "&nbsp;");
        },
        _renderMultiTouchDialog: function () {
            this._customPop = BoldBIDashboard.buildTag("div.e-gridpopup", "", { display: "none" });
            var bbdesigner$content = BoldBIDashboard.buildTag("div.e-content"), bbdesigner$downTail = BoldBIDashboard.buildTag("div.e-downtail e-tail");
            if (this.model.allowMultiSorting) {
                var bbdesigner$selElement = BoldBIDashboard.buildTag("span.e-sortdirect e-icon");
                bbdesigner$content.append(bbdesigner$selElement);
            }
            if (this.model.selectionType == "multiple") {
                var bbdesigner$selElement = BoldBIDashboard.buildTag("span.e-rowselect e-icon");
                bbdesigner$content.append(bbdesigner$selElement);
            }
            this._customPop.append(bbdesigner$content);
            this._customPop.append(bbdesigner$downTail);
            this.element.append(this._customPop);
        },

    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.ExcelFilter = BoldBIDashboard.ExcelFilter || {};
    BoldBIDashboard.excelFilter = function (options) {
		BoldBIDashboard.loadLocale("ejExcelFilter");
        this._ctrlInstance = options["instance"];
        this.id = this._ctrlInstance._id;
        this._dialogContainer = null;
        this._showSort = options["showSortOptions"] || false;
        this._interDeterminateState = options["interDeterminateState"] || false;
        this._maxCount = BoldBIDashboard.isNullOrUndefined(options["maxFilterLimit"]) ? 1000 : options["maxFilterLimit"];
        this._formatFiltering = true;
        this._locale = this._ctrlInstance.model.locale || "en-US";
        this.localizedLabels = this._getLocalizedLabel();
        this._filterHandler = options["filterHandler"] || null;
        this._searchHandler = this._ctrlInstance.model.searchSettings || null
		this._cancelHandler = options["cancelHandler"] || null;
		this._customFilterHandler = options["customFilterHandler"] || null;
        this._cssClass = options["cssClass"] || null;
        this._matchCase = options["allowCaseSensitive"] || false;
	    this._accent = options["allowAccent"] || false;
        this._title = options["title"] || this.localizedLabels.title;
        this._complexBlankCriteria = options["enableComplexBlankFilter"];
        this._blankValue = options["blankValue"];
        this.fName = options["initFilterCol"] || null;
        this._spliter = options["valueDelimiter"] || BoldBIDashboard.ExcelFilter.valueDelimiter;
        this._initialFName = this.fName;
        this._displayName = null;
        this._dataSource = null;
        this._isUrlAdaptor = false;
		this._bbdesigner$tableID = null;
        this._bbdesigner$blankVal = null;
        this._bbdesigner$selectedColors = [];
        this._bbdesigner$enableColor = false;
        this._bbdesigner$filteredByColor = "";
        this._bbdesigner$colType = null;
        this._bbdesigner$key = 0;
        this.filteredColumn = null;
        this.sortedColumns = null;        
        this._chkList = null;
        this._listsWrap = null;
        this._menuWrap = null;
        this._localJSON = null;
        this._actualCount = 0;
        this._totalRcrd = 0;
        this._enableResponsiveRow=false;
        this._searchCount = 0;
        this._currentData = null;
        this._openedFltr = null;
        this._predicates = [];
        this.cFilteredCols = this.fName!=null ? [this.fName] : [];
        this._columnsFiltered = [];
        this.guid = BoldBIDashboard.getGuid("excelfilter");
        this._noDlg = [];
        this._sepAftr = ["sortDesc","notcontains", "between", "top10","endswith","contains"];
        this._posType = ["number", "date", "datetime", "string", "boolean","guid"];
        this._empties = !this._complexBlankCriteria ? [this.guid] : ["null", "undefined", ""];
        this._reqInProgess = false;
        this._isFiltered = false;
        this._onActionBegin = options["actionBegin"] || null;
        this._onActionComplete = options["actionComplete"] || null;
        this.maxItemOnQuery = 0; /*To prevent OData URI queryString length*/
        this.enableNormalize = true; /*To clean up redundant values after formatting */
        this.enableSelect = false;
        this._onDemandSearch = false;
        this._maxFilterCount = false;
        this._clearSearchValue = false;
		this._islargeData = false;
        this._checkedValue = [];
        this._searchRequest = false;
        this._isIndeterminate = false;
        this._selectAll = "<div class='e-ftrchk'><input type='checkbox' class='e-selectall' value='selectall' class='e-ftrchk' /><label class='e-ftrchk'>(" + this.localizedLabels.SelectAll + ")</label></div>";
        this._blanks = "<div class='e-ftrchk'><input type='checkbox' id='blanks' class='e-ftrchk' value='" + this._empties.join(this._spliter) + "' @@/><label class='e-ftrchk' for='blanks' value=''>(" + this.localizedLabels.Blanks + ")</label></div>";
        this._blank = undefined;
        this._addAtLast = false;
        this._addToFilter = "<div class='e-ftrchk'><input type='checkbox' class='e-addtofilter'/><label class='e-ftrchk'>" + this.localizedLabels.AddToFilter + "</label></div>";
        this._preChkList = [];
        this._checked = null;
        this._add = null;
        this.guidMenuOpt = [
              { id: 1, text: this.localizedLabels.SortNoSmaller, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortNoLarger, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.GuidFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.GuidMenuOptions }];
        this.numberMenuOpt = this.booleanMenuOpt = [
              { id: 1, text: this.localizedLabels.SortNoSmaller, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortNoLarger, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.NumberFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.NumberMenuOptions }];
        this.stringMenuOpt = [
              { id: 1, text: this.localizedLabels.SortTextAscending, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortTextDescending, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] }];
        this.dateMenuOpt = [
              { id: 1, text: this.localizedLabels.SortDateOldest, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortDateNewest, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.DateFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.DateMenuOptions }];
        this.datetimeMenuOpt = [
              { id: 1, text: this.localizedLabels.SortDateOldest, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortDateNewest, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.DateTimeFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.DatetimeMenuOptions }];
        return this;
    };
    BoldBIDashboard.excelFilter.prototype = {
        //Helpers to handle (Blanks) value.
        isNotBlank: function (key, global) {
            var e = BoldBIDashboard.isNullOrUndefined(key) || (key === ""||key===null);

            if (!global && (key === ""||key===null))/* Handle special case - since "" string sorted before all */
                this._addAtLast = true;

            return !e;
        },   
        _checkBlank: function (key) {         

            if (this.isNotBlank(key))
                return true;
            /*Ensure Blank value added only once */
            var ret = this._blank == undefined && !this._addAtLast;

            if (ret) this._blank = true;            

            return ret;
        },
        _getValueData: function (key, data) {
            var arr = this._empties;

            if (this.isNotBlank(key, true)){
               arr = BoldBIDashboard.distinct(data, this._bbdesigner$foreignKey || this.fName, false);
			   if(!(BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version == "8.0")){
				for(var dat = 0; dat < arr.length; dat++){
					if((arr[dat] instanceof Date)){
						var temp = {dateString : arr[dat]};
						arr[dat] = JSON.parse(JSON.stringify(temp)).dateString;
						}
					}
			   }
			}

            return arr.join(this._spliter); /*Return value will be set to input element value attr*/
        },
        //Collection to predicate processing
        getPredicate: function (cols, field, updateModel) {
            this._isUrlAdaptor = this._ctrlInstance._dataSource() instanceof BoldBIDashboard.DataManager && (this._ctrlInstance._dataSource().adaptor instanceof BoldBIDashboard.UrlAdaptor || this._ctrlInstance._dataSource().adaptor instanceof BoldBIDashboard.WebMethodAdaptor);
            var c, dis = field != undefined ? [field] : BoldBIDashboard.distinct(cols, "field", false), collection, pred = {};
            for (var f = 0, flen = dis.length; f < flen; f++) {
                collection = new BoldBIDashboard.DataManager(cols).executeLocal(new BoldBIDashboard.Query().where("field", "in", dis[f]));
                pred[dis[f]] = this.generatePredicate(collection);
                if (updateModel) {
                    this._predicates[this._bbdesigner$key] = this._predicates[this._bbdesigner$key] || {};
                    this._predicates[this._bbdesigner$key][dis[f]] = pred[dis[f]];
                }

            }
            return pred;
        },

        generatePredicate: function (cols) {
            var len = cols ? cols.length : 0, predicate, first;
            if (!len) return;
            first = this._updateDateFilter(cols[0]);
            if(this._isUrlAdaptor && (first.type == "date" || first.type == "datetime"))
                predicate = this._getDatePredicate(first);
            else
                predicate = first.ejpredicate ? first.ejpredicate : BoldBIDashboard.Predicate(first.field, first.operator, first.value, first.ignoreCase || !first.matchcase, first.ignoreAccent || !first.accent);
            for (var p = 1; p < len; p++) {
                cols[p] = this._updateDateFilter(cols[p]);
                if (this._isUrlAdaptor && len > 2 && p > 1 && cols[p].predicate == "or"){
                    if (cols[p].type == "date" || cols[p].type == "datetime")                        
                        predicate.predicates.push(this._getDatePredicate(cols[p]));             
                    else
                        predicate.predicates.push(BoldBIDashboard.Predicate(cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase, cols[p].ignoreAccent || !cols[p].accent));
                }
                else{
                    if (this._isUrlAdaptor && (cols[p].type == "date" || cols[p].type == "datetime"))
                        predicate = predicate[cols[p].predicate](this._getDatePredicate(cols[p]));
                    else
                        predicate = cols[p].ejpredicate ? predicate[cols[p].predicate](cols[p].ejpredicate) : predicate[cols[p].predicate](cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase, cols[p].ignoreAccent || !cols[p].accent);
                }
            }
            return predicate || null;
        },
        _getDatePredicate: function(predicate){
            return BoldBIDashboard.Predicate(predicate.field, predicate.operator, predicate.value, predicate.ignoreCase || !predicate.matchcase, predicate.ignoreAccent || !predicate.accent);           
        },
        getFilterFrom: function (dm, data) {
            var data = BoldBIDashboard.distinct(data, this.fName, false);
                        
            if (this.maxItemOnQuery > 0) data = data.slice(0, this.maxItemOnQuery);
			
			if (data.length == 1) {
				var optr = this._bbdesigner$foreignKeyType == "string" ? "startswith" : "in";
				var _isCase = this._bbdesigner$foreignKeyType == "string" ? this._matchCase : true;
	            var _isAccent = this._bbdesigner$foreignKeyType == "string" ? this._accent : true;
				return BoldBIDashboard.Predicate(this.fName, optr, data[0], _isCase, _isAccent);
			}
                        
            return BoldBIDashboard.UrlAdaptor.prototype.getFiltersFrom(data, new BoldBIDashboard.Query().foreignKey(this._bbdesigner$foreignKey)); /*get [or] conditioned ejPredicate*/
        },
        /*Main Dialog*/
        renderDialog: function (type) {
            this._bbdesigner$colType = type;
            var dlgId = this.id + type + "_excelDlg";           
            //if (bbdesigner$("#" + dlgId).length != 0)
            //    return;
            var bbdesigner$dlg = BoldBIDashboard.buildTag("div#" + dlgId + ".e-excelfilter e-js e-dlgcontainer e-shadow");
            var bbdesigner$ul = BoldBIDashboard.buildTag("ul#" + this.id + type + "_MenuItem");
            var menuData = this._getMenuData(type);
            bbdesigner$ul = this._createLiTag(bbdesigner$ul, menuData, false);
            var bbdesigner$searchBox = BoldBIDashboard.buildTag("span.e-searchbox e-fields").append(BoldBIDashboard.buildTag("input#" + this.id + type + "_SearchBox.e-ejinputtext e-searchinput", {}, {}, { "type": "text", "placeholder": this.localizedLabels.Search })).append(BoldBIDashboard.buildTag("span.e-search e-icon"))
            var bbdesigner$lbox = BoldBIDashboard.buildTag("div#" + this.id + type + "_CheckBoxList.e-checkboxlist e-fields").append(BoldBIDashboard.buildTag("div"));
            var bbdesigner$btns = this._createBtn();
            var bbdesigner$sBox = BoldBIDashboard.buildTag("div.e-searchcontainer");            
            var bbdesigner$status = BoldBIDashboard.buildTag("div.e-status e-fields e-hide", this.localizedLabels.CheckBoxStatusMsg);
            bbdesigner$dlg.append(bbdesigner$ul);            
            bbdesigner$sBox.append(bbdesigner$searchBox);
            bbdesigner$sBox.append(bbdesigner$status);
            bbdesigner$sBox.append(bbdesigner$lbox);
            bbdesigner$sBox.append(bbdesigner$btns);
            bbdesigner$dlg.append(bbdesigner$sBox);
            bbdesigner$dlg.appendTo(this._ctrlInstance.element);
            bbdesigner$dlg.css("display", "none");
            this._renderCustomFDlg(type);
            this._dialogContainer = bbdesigner$dlg;
            if(this._cssClass!=null)
                bbdesigner$dlg.addClass(this._cssClass);
            if (!this._showSort) {
                bbdesigner$ul.find(".e-fnsort").closest("li").css("display", "none");
                bbdesigner$ul.find("li.e-separator:first").css("display", "none");
            }
            this._lsitBoxTemplate();
            this._renderSubCtrls(type);
            if (BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version < 10)
                BoldBIDashboard.ieClearRemover(bbdesigner$searchBox.find("input")[0]);
            this._wireEvents();
        },
        _getDeprecatedLocalizedLabel: function (key) {
            if (["Ok", "OK"].indexOf(key) != -1)
                return this.localizedLabels.Ok || this.localizedLabels.OK;
        },
        _renderSubCtrls: function (type) {
            bbdesigner$("#" + this.id + type + "_MenuItem").BoldBIDashboardMenu({ orientation: "vertical", width: 266, container: "#" + this.id, click: BoldBIDashboard.proxy(this._menuHandler, this), enableRTL: this._ctrlInstance.model.enableRTL, enableSeparator: false });
            bbdesigner$("#" + this.id + type + "_OkBtn").BoldBIDashboardButton({ text: this._getDeprecatedLocalizedLabel("OK"), showRoundedCorner: true, width: 60, click: BoldBIDashboard.proxy(this._fltrBtnHandler, this), enabled: true });
            bbdesigner$("#" + this.id + type + "_CancelBtn").BoldBIDashboardButton({ text: this.localizedLabels.Cancel, showRoundedCorner: true, width: 60, click: BoldBIDashboard.proxy(this.closeXFDialog, this) });
            bbdesigner$("#" + this.id + type + "_CheckBoxList").BoldBIDashboardScroller({ height: 130, width: 234, scroll: BoldBIDashboard.proxy(this._virtualize,this) });
            bbdesigner$("#" + this.id + type + "_CheckBoxList").BoldBIDashboardWaitingPopup({ showOnInit: false });
        },
        openXFDialog: function (options) {
			var obj;
            this.fName = options["field"];
            this._dataSource = options["dataSource"];
            this._bbdesigner$colType = options["type"] || "string";
            this._bbdesigner$format = options["format"] || "";
            this._enableResponsiveRow=options["enableResponsiveRow"];
            this.filteredColumn = options["filteredColumns"] || this._ctrlInstance.model.filterSettings.filteredColumns;
            this.sortedColumns = options["sortedColumns"] || this._ctrlInstance.model.sortSettings.sortedColumns;
            this._displayName = options["displayName"];
            this.query = options["query"] || new BoldBIDashboard.Query();
            this._bbdesigner$key = options["key"] || 0;
			this._bbdesigner$tableID = options["tableID"];
			this._bbdesigner$blankVal = BoldBIDashboard.isNullOrUndefined(this._bbdesigner$tableID) ? this._bbdesigner$blankVal : options["blank"];
            this._bbdesigner$selectedColors = options["selectedColors"] || [];
            this._bbdesigner$enableColor = options["enableColor"] || false;
            this._bbdesigner$filteredByColor = options["filteredByColor"] || this._bbdesigner$filteredByColor;
			this._bbdesigner$foreignField = options["foreignKeyValue"];
			this._bbdesigner$foreignData = options["foreignDataSource"];
			this._bbdesigner$foreignKey = options["foreignKey"];
			this._bbdesigner$foreignKeyType = options["foreignKeyType"];
			if (this._bbdesigner$foreignData instanceof BoldBIDashboard.DataManager && (this._bbdesigner$foreignData.adaptor instanceof BoldBIDashboard.ODataAdaptor || this._bbdesigner$foreignData.adaptor instanceof BoldBIDashboard.ODataV4Adaptor || this._bbdesigner$foreignData.adaptor instanceof BoldBIDashboard.WebApiAdaptor))
			    this.maxItemOnQuery = 50;
			bbdesigner$.extend(this.localizedLabels, options["localizedStrings"] || {});
            var args = { requestType : "filterbeforeopen", filterModel : this, columnName:this.fName, columnType: this._bbdesigner$colType };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            if (this._openedFltr == null || !this._openedFltr.is(bbdesigner$("#" + this.id + this._bbdesigner$colType + "_excelDlg"))) {
                this.closeXFDialog();
                this._openedFltr = bbdesigner$("#" + this.id + this._bbdesigner$colType + "_excelDlg");
            }
            this._listsWrap = bbdesigner$("#" + this.id + this._bbdesigner$colType + "_CheckBoxList");
            this._menuWrap = bbdesigner$("#" + this.id + this._bbdesigner$colType + "_MenuItem");
            this._searchBox = this._openedFltr.find(".e-searchbox input");
            this._setPosition(this._openedFltr, options["position"]);
            this._openedFltr.addClass(options["cssClass"]);
            this._openedFltr.fadeIn(300, function () {
            });
			var bbdesigner$popups = bbdesigner$("#" + this.id + this._bbdesigner$colType + "_MenuItem").find("li[ejfnrole='popup']");
            if (this._bbdesigner$enableColor) {
                this._createDivTag(bbdesigner$popups.eq(0).find(".e-shadow"), this._bbdesigner$selectedColors, false, "sort");
                (this._bbdesigner$filteredByColor == -1 || (this._bbdesigner$filteredByColor.length < 1 || this._bbdesigner$filteredByColor === this.fName)) ? this._createDivTag(bbdesigner$popups.eq(1).find(".e-shadow"),this._bbdesigner$selectedColors, false, "filter") : bbdesigner$popups.eq(1).addClass("e-disable-item");
            }    
            else 
                bbdesigner$popups.hide();
            this._isFiltered = this._predicates[this._bbdesigner$key] != undefined && this._predicates[this._bbdesigner$key][this.fName] != undefined;
            this._isFiltered = options["isFiltered"] || this._isFiltered;
            if ((this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime") && this._bbdesigner$format == "")
                this._bbdesigner$format = this._bbdesigner$colType == "date" ? "{0:MM/dd/yyyy}" : "{0:MM/dd/yyyy hh:mm:ss}";
            this._processListData();
			obj = this._listsWrap.data("BoldBIDashboardScroller");
            
                        
            this._setDisable();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._bbdesigner$colType };
            if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },
        closeXFDialog: function (e) {
            if (e != null) {
                var bbdesigner$target = bbdesigner$(e.target);
                if (!(bbdesigner$target.closest("#" + this.id + this._bbdesigner$colType + "_CustomFDlg").length > 0 || bbdesigner$target.closest("#" + this.id + this._bbdesigner$colType + "_excelDlg").length > 0))
                    return;
            }            
            if (this._openedFltr) {
                if (!this._openedFltr.hasClass("e-dlgcustom")) {
                    this._openedFltr.fadeOut(300, function () {
                    });
                    this._listsWrap.BoldBIDashboardWaitingPopup("hide");
                }
                else {
                    this._openedFltr.BoldBIDashboardDialog("close");
                }
                !BoldBIDashboard.isNullOrUndefined(this._cancelHandler) && this._cancelHandler();
                this.resetFilterModel();/*Reset private properties after filter closed*/
                this._ctrlInstance._bbdesigner$fDlgIsOpen = false;
            }
        },
        _setPosition: function (ele, pos) {
            ele.css("position", "absolute");
            ele.css("left", pos["X"]).css("top", pos["Y"]);                      
        },
        _setDisable: function () {
            var bbdesigner$clr = this._menuWrap.find("li[ejfnrole='clearfilter']"), bbdesigner$fltr = this._menuWrap.find("li[ejfnrole='filterpopup']");
            var bbdesigner$sort = this._menuWrap.find("li[ejfnrole *= 'sort']"), bbdesigner$checked = this._listsWrap.find("input").filter(":checked:not(.e-selectall)").length;
            !this._isFiltered ? bbdesigner$clr.addClass("e-disable-item") : bbdesigner$clr.removeClass("e-disable-item");
            if (this._showSort) {
                var sQM = BoldBIDashboard.DataManager(this.sortedColumns).executeLocal(new BoldBIDashboard.Query().where("field", "in", this.fName));
                ( sQM.length && sQM[0]["direction"] == "ascending") ? bbdesigner$sort.filter("[ejfnrole='sortAsc']").addClass("e-disable-item") : bbdesigner$sort.filter("[ejfnrole='sortAsc']").removeClass("e-disable-item");
                (sQM.length && sQM[0]["direction"] == "descending") ? bbdesigner$sort.filter("[ejfnrole='sortDesc']").addClass("e-disable-item") : bbdesigner$sort.filter("[ejfnrole ='sortDesc']").removeClass("e-disable-item");
            }
            var bbdesigner$flteredList = bbdesigner$fltr.find(".aschild");
            if (this.cFilteredCols.length != 0 && bbdesigner$.inArray(this.fName,this.cFilteredCols) != -1) {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        if (bbdesigner$flteredList.find("#ejFiltercheck").length == 0) {
                            bbdesigner$flteredList.append("<input type='checkbox' id='ejFiltercheck' />");
                            bbdesigner$flteredList.find("#ejFiltercheck").BoldBIDashboardCheckBox({ checked: true });
                            bbdesigner$flteredList.find("#ejFiltercheck").BoldBIDashboardCheckBox("disable");
                        }
                        if (bbdesigner$fltr.find(".e-shadow .e-exceltick").length > 0)
                            bbdesigner$fltr.find(".e-shadow .e-exceltick").remove();
                        if (this.filteredColumn[f].field == this.fName && !BoldBIDashboard.isNullOrUndefined(this.filteredColumn[f + 1]) && this.filteredColumn[f + 1].field == this.fName && (this._bbdesigner$foreignField && this.filteredColumn[f + 1].customFilter || !this._bbdesigner$foreignField)) {
                            if (this.filteredColumn[f].operator == "greaterthanorequal" && this.filteredColumn[f + 1].operator == "lessthanorequal")
                                bbdesigner$fltr.find(".e-shadow .e-list[ejvalue=between]").find("a").append("<span class='e-exceltick e-icon' />");
                            else
                                bbdesigner$fltr.find(".e-shadow .e-list[ejvalue=customfilter]").find("a").append("<span class='e-exceltick e-icon' />");
                        }
                        else if (this._bbdesigner$foreignField)
                            bbdesigner$fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].actualFilterOperator + "]").find("a").append("<span class='e-exceltick e-icon' />");
                        else
                            bbdesigner$fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].operator + "]").find("a").append("<span class='e-exceltick e-icon' />");
                        break;
                    }
                }
            }
            else {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        this._removeTick(bbdesigner$fltr,bbdesigner$flteredList);
                        break;
                    }
                }
            }
            if (!this._isFiltered && bbdesigner$flteredList.find("#ejFiltercheck").length != 0) {
                 this._removeTick(bbdesigner$fltr,bbdesigner$flteredList);
            }
            if (this._bbdesigner$colType == "boolean")
                this._menuWrap.find("li[aria-haspopup=true]").addClass("e-hide");            
            this._searchBox.val(""); this._searchBox.siblings().addClass("e-search").removeClass("e-cancel");
        },
        _removeTick: function(bbdesigner$fltr,bbdesigner$flteredList){
            bbdesigner$flteredList.find("#ejFiltercheck").BoldBIDashboardCheckBox("destroy");
            bbdesigner$fltr.find(".aschild #ejFiltercheck").remove();
            bbdesigner$fltr.find(".e-shadow .e-exceltick.e-icon").remove();
        },
        _createBtn: function (isCDlg) {
            var id = isCDlg ? this.id + this._bbdesigner$colType + "Custom" : this.id + this._bbdesigner$colType;
            var bbdesigner$divCon = BoldBIDashboard.buildTag("div.e-btncontainer e-fields");
            var bbdesigner$div = BoldBIDashboard.buildTag("div");
            bbdesigner$div.append(BoldBIDashboard.buildTag("input#" + id + "_OkBtn.e-fltrbtn e-btnsub e-flat bbi-dbrd-btn-small bbi-dbrd-btn-primary", {}, {}, { type: "button" })).append(BoldBIDashboard.buildTag("input#" + id + "_CancelBtn.e-fltrbtn e-btncan e-flat bbi-dbrd-btn-small bbi-dbrd-btn-secondary", {}, {}, { type: "button" }));
            return bbdesigner$divCon.append(bbdesigner$div);
        },
        _menuHandler: function (args) {
            var bbdesigner$ele = bbdesigner$(args.element);
            var role = bbdesigner$ele.attr("ejfnrole");
            var arg = {};
            if (role === "filterbgcolor" || role === "filterfgcolor") {
                var fDetails = { field: this.fName, operation: role, color: bbdesigner$(args.element).css('background-color')};
			    arg = { originalEvent: args.event, action: "filterbycolor", filterDetails: fDetails, tableID: this._bbdesigner$tableID }; 
                this._isFiltered = false;
            }
            else if (role == "clearfilter") {
                var ftrDetails = { field: this.fName, operator: "", value: "", predicate: "or" };
                arg = { originalEvent: args.event, fieldName: this.fName, action: "clearfiltering", filterDetails: ftrDetails, tableID: this._bbdesigner$tableID };
                var indx = bbdesigner$.inArray(this.fName, this.cFilteredCols);
                indx!=-1 && this.cFilteredCols.splice(indx, 1);
				var bbdesigner$cIndx = bbdesigner$.inArray(this.fName, this._columnsFiltered);
                bbdesigner$cIndx!=-1 && this._columnsFiltered.splice(bbdesigner$cIndx, 1);
                if (this._initialFName == this.fName)
                    this._initialFName = null;
            }
            else if(role == "popup" || role == "filterpopup") {
                return;
            }
            else if (role == "operator") {
                this._openCustomFilter(bbdesigner$ele.attr("ejvalue"));
            }
			else{
                var sOrder, sDetails;
				if(role == "sortAsc" || role == "sortDesc"){
					sOrder = role == "sortAsc" ? "ascending" : "descending";
					sDetails = { field: this.fName, direction: sOrder };
					arg = { originalEvent: args.event, action: "sorting", sortDetails: sDetails, tableID: this._bbdesigner$tableID };
				}
				else{
					sDetails = { field: this.fName, direction: sOrder, operation: role, color: bbdesigner$(args.element).css('background-color')};
					arg = { originalEvent: args.event, action: "sortbycolor", sortDetails: sDetails, tableID: this._bbdesigner$tableID }; 
				}
            }
            if (role != "operator") {
                this._filterHandler(arg);
                this.closeXFDialog();
            }
        },
        _searchBoxFocus: function (e) {
            var bbdesigner$target = bbdesigner$(e.target);
            if (bbdesigner$target.hasClass("e-cancel")) {
                bbdesigner$target.prev().val("");
                bbdesigner$target.next().addClass("e-cancel")
                bbdesigner$target.addClass("e-search");
                bbdesigner$target.prev().trigger("keyup");
            }
            if (e.type == "focusin") {
                bbdesigner$target.next().addClass("e-cancel");
                bbdesigner$target.next().removeClass("e-search");
            }
        },
        _search: function (e) {
            var enterText = e.target.value, args = {}, parsed, operator, bbdesigner$target = bbdesigner$(e.target);
            parsed = (this.getType() != "string" && parseFloat(enterText)) ? parseFloat(enterText) : enterText;
            operator ="contains" ;
            parsed = (parsed == "" || parsed == undefined) ? undefined : parsed;
            if (this._bbdesigner$colType == "boolean") {
                if (parsed != undefined && this.localizedLabels.True.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "true";
                else if (parsed != undefined && this.localizedLabels.False.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "false";
            }
            if (this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime") {
                parsed = BoldBIDashboard.parseDate(enterText, this.replacer(this._bbdesigner$format, /{0:|}/g, ""));
                operator = "in";
                if (this._previousValue == null && parsed == null)
                    return;
            }
            this._previousValue = parsed;
            delay = this._dataSource instanceof BoldBIDashboard.DataManager && (this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) ? 1500 : 0;
            sender = { type: "filterchoicesearch", value: parsed, operator: operator, matchcase: ["date", "datetime"].indexOf(this._bbdesigner$colType) != -1 ? false : this._matchCase, accent: this._accent }
            this._processSearch(sender, delay);
            if (bbdesigner$target.val() == "") {
                bbdesigner$target.next().addClass("e-search");
                bbdesigner$target.next().removeClass("e-cancel");
            } else {
                bbdesigner$target.next().addClass("e-cancel");
                bbdesigner$target.next().removeClass("e-search");
            }
        },
        _processSearch: function (sender, delay) {
            if (!this._alreadySearchProcessed) {
                this._alreadySearchProcessed = true;
                this._startTimer(sender, delay);
            } else {
                this._stopTimer();
                this._startTimer(sender, delay);
            }
        },
        _startTimer: function (sender, delay) {
			proxy = this;
            this._timer = window.setTimeout(
                function () {
                    proxy._processListData(sender);
                }, delay)
        },
        _stopTimer: function () {
            if (this._timer != null)
                window.clearTimeout(this._timer);
        },
        _getLocalizedLabel: function (property) {
            return BoldBIDashboard.getLocalizedConstants("BoldBIDashboard.ExcelFilter", this._locale);
        },
        _getMenuData: function (type) {
            return type != undefined ? this[type + "MenuOpt"] : [];
        },
		_checkHtmlEncode: function(key){
           var isEncode = !BoldBIDashboard.isNullOrUndefined(this._ctrlInstance.getColumnByField) ? this._ctrlInstance.getColumnByField(this.fName).disableHtmlEncode : false;
           var bool = !BoldBIDashboard.isNullOrUndefined(isEncode) && isEncode  ? true : false;
           return bool;
        },
        /*CheckBox list*/
        _lsitBoxTemplate: function () {
            var helper = {}, temp = {};            
            helper[this.id + "isNotBlank"] = BoldBIDashboard.proxy(this.isNotBlank, this);
            helper[this.id + "checkBlank"] = BoldBIDashboard.proxy(this._checkBlank, this);
            helper[this.id + "_getValueData"] = BoldBIDashboard.proxy(this._getValueData, this);            
            helper[this.id + "_checkBoxState"] = BoldBIDashboard.proxy(this._setCheckState, this);          
            helper[this.id + "_htmlEncode"] = BoldBIDashboard.proxy(this._checkHtmlEncode, this);    
            helper[this.id + "_genId"] = this._genCheckID;
            bbdesigner$.views.helpers(helper); 			
            var genID = this.id + this._bbdesigner$colType + "{{:~" + this.id + "_genId()}}";
            temp[this.id + this._bbdesigner$colType + "_listBox_Template"] = "{{if ~" + this.id + "checkBlank(key)}}<div class='e-ftrchk'><input type='checkbox' id='" + genID + "' value='{{html:~" + this.id + "_getValueData(key, items)}}' class='e-ftrchk' {{:~" + this.id + "_checkBoxState(~" + this.id + "_getValueData(key, items))}}/><label class='e-ftrchk' for='" + genID + "'>{{if ~" + this.id + "isNotBlank(key,'true')}} {{if ~" + this.id + "_htmlEncode(key)}} {{>key}} {{else}} {{:key}} {{/if}} {{else}} (Blanks) {{/if}}</label></div>{{/if}}";
            bbdesigner$.templates(temp);
        },
      
        _processListData: function (params) {
            var result, promise, args = {}, query = new BoldBIDashboard.Query(), searchQuery = new BoldBIDashboard.Query().requiresCount(), evtArgs = {}; this._searchCount = 0;
            var predicates = this._predicates[this._bbdesigner$key], pred;
			if(proxy.query._expands.length)
                query._expands = proxy.query._expands;
			var data = null, columnName = null, localJSON = null, result = null;
			if(BoldBIDashboard.isNullOrUndefined(this._bbdesigner$foreignField && this._bbdesigner$foreignData)){
				data = this._dataSource; 
				columnName =  this.fName;
				localJSON = this._localJSON;
			}
			else{
				data = localJSON = this._bbdesigner$foreignData; 
				if(this._dataSource instanceof BoldBIDashboard.DataManager && !(data instanceof BoldBIDashboard.DataManager))
                    data = BoldBIDashboard.DataManager(data);
				columnName = this._bbdesigner$foreignField;
			}
            for (var prop in predicates) {
                if (prop == this.fName)
                    continue;
                var obj = predicates[prop], from = obj["from"];
                if (from)
                    query.skip(from == "top" ? 0 : data.length - (data.length - obj["take"])).take(obj["take"]);
                else
                    pred = pred != undefined ? pred["and"](obj) : obj;
            }
            args.columnName = columnName;           
            query.requiresCount();
            if (this._dataSource instanceof BoldBIDashboard.DataManager && !this._dataSource.dataSource.offline && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
                query.take(this.maxFilterChoices);
                this._onDemandSearch = true;
            }
		    pred && query.where(pred);
            BoldBIDashboard.merge(query.queries, this.query.queries) || BoldBIDashboard.merge(query._params, this.query._params)
            evtArgs.requestType = params ? params.type : "filterchoicerequest",evtArgs.filterModel = this, evtArgs.query = query, evtArgs.dataSource = data;
            if(evtArgs.requestType == "filterchoicesearch")
				evtArgs.queryParams = params;
			if (this._ctrlInstance._trigger(this._onActionBegin, evtArgs))
                return;
            if (!BoldBIDashboard.isNullOrUndefined(this._searchHandler) && this._searchHandler.key.length) {
                var searchDetails = this._searchHandler;
                query.search(searchDetails.key, searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase || true, searchDetails.ignoreAccent || true);
            }
            if (this.enableSelect)
                query.select(this.fName);
            if (params && params.type == "filterchoicesearch") {
                this._clearSearchValue = BoldBIDashboard.isNullOrUndefined(params.value) ? true : false;
                args.type = params.type;
                args.value = params.value;
                if (this._bbdesigner$foreignField) query = searchQuery;
                params.value && query.where(columnName, params.operator, params.value, !params.matchcase, params.accent);
                if (this._dataSource instanceof BoldBIDashboard.DataManager && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
                    this._searchRequest = true;
					var type = this._bbdesigner$colType;
                    var dlgId = this.id + type + "_excelDlg";   
                    if(bbdesigner$("#" + dlgId).is(":visible"))
                     //this._listsWrap.BoldBIDashboardWaitingPopup("show");
                    if (this._bbdesigner$foreignField) {
                        var frKeyData = this._bbdesigner$foreignData instanceof BoldBIDashboard.DataManager ? this._bbdesigner$foreignData : BoldBIDashboard.DataManager(this._bbdesigner$foreignData);
                        this._dataProcessing(frKeyData, query, args);
                    }
                    else
                        this._dataProcessing(this._dataSource, query, args);
                }
                else
                    this._dataProcessing(BoldBIDashboard.DataManager(this._localJSON), query, args);
            }
            else if (!(this._dataSource instanceof BoldBIDashboard.DataManager)) {
				var result = [];
                promise = BoldBIDashboard.DataManager(this._dataSource).executeLocal(query);
                args.type = "filterchoicerequest";
                if (this._bbdesigner$foreignField)
                    this._filterForeignData(promise, args);
                else {
                    result = promise.result;
                    args.data = this._localJSON = this._currentData = result;
                    this._totalRcrd = promise.count;
                    this._setCheckBoxList(args);
                }
            }
            else {
                proxy = this; args.type = "filterchoicerequest";
                //this._listsWrap.BoldBIDashboardWaitingPopup("show");
                if (!this._reqInProgess) {
                    this._reqInProgess = true;
					if(this._bbdesigner$foreignField)
                        data = this._dataSource;
                    promise = data.executeQuery(query);
                    promise.done(function (e) {
                        if (proxy._bbdesigner$foreignField)
                            proxy._filterForeignData(e, args);
                        else {
                            result = e.result;
                            args.data = proxy._localJSON = proxy._currentData = result;
                            proxy._totalRcrd = e.count;
                            proxy._listsWrap.BoldBIDashboardWaitingPopup("hide");
                            proxy._setCheckBoxList(args);;
                            proxy._reqInProgess = false;
                        }
                    });
                }
            }           
        },
        _dataProcessing: function (dataSource, query, args) {
            var result, promise;
            promise = dataSource.executeQuery(query);
            promise.done(function (e) {
                args.data = proxy._currentData = e.result;
                proxy._totalRcrd = proxy._searchCount = e.result.length;
                proxy._setCheckBoxList(args);
            });
        },
        _filterForeignData: function (fromPromise, args) {
            var custom = typeof args === "boolean", key = this._bbdesigner$foreignKey,
               field = this._bbdesigner$foreignField, type = this._bbdesigner$foreignKeyType,
                result, count, proxy = this, defaults = {}, pred, tmp, actuals, query = new BoldBIDashboard.Query(),
                dm = this._bbdesigner$foreignData instanceof BoldBIDashboard.DataManager ? this._bbdesigner$foreignData : BoldBIDashboard.DataManager(this._bbdesigner$foreignData);
            if (!custom) {
                result = fromPromise.result, count = fromPromise.count;
                if (!!count)
                    query.where(this.getFilterFrom(this._bbdesigner$foreignData, result));
                if (!this._listsWrap.BoldBIDashboardWaitingPopup("model.showOnInit"))
                    this._listsWrap.BoldBIDashboardWaitingPopup("show");
            }
            else {
                tmp = fromPromise[0], defaults = fromPromise[0], actuals = fromPromise.slice();
                if (!!tmp)
                    this.closeXFDialog();
                pred = new BoldBIDashboard.Predicate(field, tmp.operator, tmp.value, !tmp.matchcase, !tmp.accent);
                for (var i = 1, tmp, len = fromPromise.length; i < len; i++) {
                    tmp = fromPromise[i], pred = pred[tmp.predicate](field, tmp.operator, tmp.value, !tmp.matchcase, !tmp.accent);
                }
                query.where(pred);
            }
            query.select([key, field]);
            dm.executeQuery(query).done(function (e) {
                if (!custom) {
                    args.data = proxy._localJSON = proxy._currentData = e.result;
                    proxy._totalRcrd = count;
                    proxy._listsWrap.BoldBIDashboardWaitingPopup("hide");
                    proxy._setCheckBoxList(args);
                    proxy._reqInProgess = false;
                } else {
                    var dst = BoldBIDashboard.distinct(e.result, key, true), dst = 0 in dst ? dst : [{}];
                    var coll = dst.map(function (val, ind) {
                        return bbdesigner$.extend({}, defaults, { value: val[key], operator: "in", actuals: actuals, type: type });
                    });
                    proxy.initiateFilter(coll);
                }
            });
        },
        _setCheckBoxList: function (args) {
            var evtArgs = {}, _blank ="", sortedData, flag, blank = this._blanks, bbdesigner$checked;
            evtArgs.requestType = args.type, evtArgs.dataSource = this._dataSource, evtArgs.filterModel = this;
            if (this._currentData.length != 0) {                
                sortedData = this.getDistinct(args.data, args.columnName, true, !!this._bbdesigner$foreignKey);
                flag = this._isFiltered;                
                this._actualCount = sortedData.length; sortedData.length = this._maxCount > this._actualCount ? this._actualCount : this._maxCount;               
                (this._onDemandSearch && this._actualCount == 1000) || this._actualCount >= this._maxCount ? this._openedFltr.find("div.e-status").removeClass("e-hide") : this._openedFltr.find("div.e-status").addClass("e-hide");
                this._islargeData = this._maxCount < this._actualCount ? true : false;
				this._filterdCol = BoldBIDashboard.DataManager(this.filteredColumn).executeLocal(BoldBIDashboard.Query().where("field", "in", this.fName));               
				if ((args.type == "filterchoicesearch") && (!BoldBIDashboard.isNullOrUndefined(args.value)))
                    this._listsWrap.find("div:first").html([this._selectAll, this._addToFilter, bbdesigner$.render[this.id + this._bbdesigner$colType + "_listBox_Template"](sortedData),  (BoldBIDashboard.isNullOrUndefined(args.value) && this._addAtLast) ? this.replacer(blank, /@@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));                
                else 
                    this._listsWrap.find("div:first").html([this._selectAll, bbdesigner$.render[this.id + this._bbdesigner$colType + "_listBox_Template"](sortedData),  (BoldBIDashboard.isNullOrUndefined(args.value) && this._addAtLast) ? this.replacer(blank, /@@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));                
                this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall,.e-addtofilter"), bbdesigner$inView = this._chkList.slice(0, 20);
                bbdesigner$inView.BoldBIDashboardCheckBox({ change: BoldBIDashboard.proxy(this._checkHandler, this) });
                bbdesigner$inView.siblings().height(14).width(14);
                this._listsWrap.find(".e-addtofilter").BoldBIDashboardCheckBox({ change: BoldBIDashboard.proxy(this._addToFilterHandler, this) });
                this._listsWrap.find(".e-addtofilter").attr("id", this.id + this._bbdesigner$colType + "AddToFilter");
                this._listsWrap.find(".e-selectall").BoldBIDashboardCheckBox({ change: BoldBIDashboard.proxy(this._selectAllHandler, this), enableTriState: this._interDeterminateState, beforeChange: this._selectAllBeforeHandler });
				this._listsWrap.find(".e-selectall").attr("id",this.id + this._bbdesigner$colType + "SelectAll");
                this._listsWrap.find(".e-selectall,.e-addtofilter").siblings().height(14).width(14);
				this._listsWrap.find(".e-selectall").closest("span").siblings("label").attr("for", this.id + this._bbdesigner$colType + "SelectAll");
            }
            else
            {
                this._listsWrap.find("div").first().html(BoldBIDashboard.buildTag("div.e-ftrchk", this.localizedLabels.NoResult, {}, {}));
                this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall");
            }
            if (!BoldBIDashboard.isNullOrUndefined(this._chkList))
                bbdesigner$checked = this._chkList.filter(":checked").length;
            if (this._isFiltered && this._searchRequest && bbdesigner$checked == 0)
                this._checkIsIndeterminate(args.columnName, this.filteredColumn);
            if (!this._isFiltered || this._actualCount == bbdesigner$checked)
                this._listsWrap.find(".e-selectall").BoldBIDashboardCheckBox({ checked: true });
            else if (bbdesigner$checked > 0 || this._isIndeterminate && this._interDeterminateState)
                this._listsWrap.find(".e-selectall").BoldBIDashboardCheckBox('model.checkState', 'indeterminate');
            bbdesigner$("#" + this.id + this._bbdesigner$colType + "_OkBtn").BoldBIDashboardButton({ enabled: bbdesigner$checked != 0 });
            this._listsWrap.BoldBIDashboardScroller({ scrollTop: 0 }).BoldBIDashboardScroller("refresh");
             if(this._listsWrap.hasClass('e-waitingpopup'))
                this._listsWrap.BoldBIDashboardWaitingPopup("hide");
            if (this._ctrlInstance._trigger(this._onActionComplete, evtArgs))
                return;
            this._isIndeterminate = false;
            this._checkedValue = [];
            if (args.type == "filterchoicerequest") {
                this._preChkList = this._chkList;
                this._checked = this._preChkList.filter(":checked");
            }
            if (this._listsWrap.find(".e-addtofilter").length)
                this._add = this._listsWrap.find(".e-addtofilter");
            else
                this._add = null;
        },
        _addToFilterHandler: function (args) {
            bbdesigner$("#" + this.id + this._bbdesigner$colType + "_OkBtn").BoldBIDashboardButton({ enabled: args.isChecked || !!this._chkList.filter(":checked").length });
        },
        _checkIsIndeterminate: function (colName, filteredCol) {
            for (var i = 0 ; i < filteredCol.length; i++) {
                if (colName == filteredCol[i].field)
                    this._isIndeterminate = true;
            }
        },
        _createLiTag: function (bbdesigner$ul, menuData, isChild) {
            proxy = this;
            bbdesigner$.each(menuData, function (index, obj) {
                var bbdesigner$li = BoldBIDashboard.buildTag("li", {}, {}, obj["htmlAttribute"] || (isChild && { "ejfnrole": "operator", "ejvalue": obj.value }) || {}), bbdesigner$child;
                var apd = (isChild && bbdesigner$.inArray(obj.value,proxy._noDlg)==-1) ? "..." : "";
                var bbdesigner$a = BoldBIDashboard.buildTag("a", obj.text + apd, {}, {});
                obj["sprite"] != undefined && bbdesigner$a.append(BoldBIDashboard.buildTag("span", {}, {}, { "class": obj["sprite"] }))
                if (obj["child"] != undefined){
                    if(obj.id != 3 && obj.id != 5)
                        bbdesigner$child = proxy._createLiTag(BoldBIDashboard.buildTag("ul.e-shadow"), obj["child"], true);
                    else if(obj.id === 3 )
                        bbdesigner$child = proxy._createDivTag(BoldBIDashboard.buildTag("ul.e-shadow"), obj["child"], true, "sort");
                    else
                        bbdesigner$child = proxy._createDivTag(BoldBIDashboard.buildTag("ul.e-shadow"), obj["child"], true, "filter");
				}
                obj["child"] == undefined ? bbdesigner$ul.append(bbdesigner$li.append(bbdesigner$a)) : bbdesigner$ul.append(bbdesigner$li.append(bbdesigner$a).append(bbdesigner$child))
                if (bbdesigner$.inArray(obj.value || (obj.htmlAttribute && obj.htmlAttribute.ejfnrole), proxy._sepAftr) != -1)
                    bbdesigner$ul.append(BoldBIDashboard.buildTag("li.e-separator"));
            });
            return bbdesigner$ul;
        },
		
		_createDivTag: function (bbdesigner$ul, menuData, isChild, reqType) {
            var bbdesigner$li, bbdesigner$a, bbdesigner$div, bgColor = [], fgColor = [], avble = false, cellcolor = "", fontcolor = "", selCellHdr = "", selCellClr = "", selFontHdr = "", selFontClr = "";
            if (reqType == "sort") {
                cellcolor = this.localizedLabels.SortByCellColor;
                fontcolor = this.localizedLabels.SortByFontColor;
            }
            else{
                cellcolor = this.localizedLabels.FilterByCellColor;
                fontcolor = this.localizedLabels.FilterByFontColor;
            }
			selCellHdr = reqType + "colorhdr";
            selFontHdr = reqType + "fonthdr";
            selCellClr = reqType + "bgcolor";
            selFontClr = reqType + "fgcolor";
            (bbdesigner$ul.length > 0) && bbdesigner$ul.children().remove();
            if(menuData.length > 0){
			    for(var i = 0; i < menuData.length; i++){
				    for(var j = 0; j < bgColor.length; j++){
					    if(bgColor[j] == menuData[i].background){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!BoldBIDashboard.isNullOrUndefined(menuData[i].background) && !menuData[i].background.startsWith('#6n'))) 
                        bgColor.push(menuData[i].background);
				    avble = false;
				    for(var j = 0; j < fgColor.length; j++){
					    if(fgColor[j] == menuData[i].foreground){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!BoldBIDashboard.isNullOrUndefined(menuData[i].foreground) && !menuData[i].foreground.startsWith('#6n'))) 
                        fgColor.push(menuData[i].foreground);
				    avble = false;
			    }
                if(bgColor.length > 0){
                    bbdesigner$li = BoldBIDashboard.buildTag("li.e-list e-bghdrcolor", "", "" , {"ejfnrole": selCellHdr });
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-menulink", cellcolor, {});
                    bbdesigner$li.append(bbdesigner$a);
                    bbdesigner$ul.append(bbdesigner$li);
			        for(var i = 0; i < bgColor.length; i++){
                        bbdesigner$li = BoldBIDashboard.buildTag("li.e-list e-valcolor", {}, {'background-color': bgColor[i]}, {"ejfnrole": selCellClr });
                        bbdesigner$ul.append(bbdesigner$li);
			        }
                }
                if(fgColor.length > 0){
			        bbdesigner$li = BoldBIDashboard.buildTag("li.e-list e-fghdrcolor", "", "" , {"ejfnrole": selFontHdr });
                    bbdesigner$a = BoldBIDashboard.buildTag("a.e-menulink", fontcolor, {});
                    bbdesigner$li.append(bbdesigner$a);
                    bbdesigner$ul.append(bbdesigner$li);
                    for(var i = 0; i < fgColor.length; i++) {
                        bbdesigner$li = BoldBIDashboard.buildTag("li.e-list e-valcolor", {}, {'background-color': fgColor[i]}, {"ejfnrole": selFontClr });
                        bbdesigner$ul.append(bbdesigner$li);
                    }
                }
                (bgColor.length < 1 && fgColor.length < 1) ? bbdesigner$ul.parent().addClass("e-disable-item"): bbdesigner$ul.parent().removeClass("e-disable-item");
            }
            else {
                bbdesigner$ul.parent().addClass("e-disable-item");
            }
            return bbdesigner$ul;
        },
		
        _setCheckState: function (value) {           
            var val = value, fobj, splts = value.split(this._spliter), splen = splts.length, flag = false;           
            if (!this._isFiltered || this._searchCount)
                return "checked";
            else {
               
                while (splen--) { /*looped for split values*/
                    val = this.processValue(splts[splen]);

                    //Date and boolean will be checked as iteration due to 
                    if (this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime" || this._bbdesigner$colType == "boolean") {
                        for (var i = 0, len = this._filterdCol.length; i < len; i++) {
                            if (this._bbdesigner$colType == "boolean" && val !== this._filterdCol[i].value)
                                continue;
                            if (this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime") {
								var filterval = this._filterdCol[i].value;
                                var firstVal = this._bbdesigner$colType == "date" && val instanceof Date ? this._formatting(this._bbdesigner$format, new Date(val.getFullYear(), val.getMonth(), val.getDate()), this._locale) : this._formatting(this._bbdesigner$format, val, this._locale);
                                var secondVal = this._bbdesigner$colType == "date" && filterval instanceof Date ? this._formatting(this._bbdesigner$format, new Date(filterval.getFullYear(), filterval.getMonth(), filterval.getDate()), this._locale) : this._formatting(this._bbdesigner$format, filterval, this._locale);
                                if ((firstVal !== secondVal || this._filterdCol[i].operator != "in") && !this._maxFilterCount)
                                    continue;
                                else {
                                    if (this._maxFilterCount && (this._onDemandSearch || this._islargeData)) {
                                        if (firstVal == secondVal) {
                                            this._checkedValue.push(firstVal);
                                            return ""
                                        }
                                        else if (this._checkedValue.indexOf(secondVal) == -1 || this._checkedValue.length == this._filterdCol.length)
                                            return "checked";
                                        else
                                            continue;
                                    }
                                }
                            }
                            return "checked";
                        }
                    }
                    else {
                       if (this._bbdesigner$colType == "string" && !BoldBIDashboard.isNullOrUndefined(val) && (typeof val == "string")) {
                            if (this._filterdCol[0].value == val.toLowerCase())
                                val = val.toLowerCase();
                        }
                        var fQ = BoldBIDashboard.DataManager(this._filterdCol).executeLocal(BoldBIDashboard.Query().where("value", "in", val, this._filterdCol[0].matchcase).where("operator", "in", "in"));
                        if (fQ.length != 0) {
                            if (fQ[0].operator == "in" &&(!BoldBIDashboard.isNullOrUndefined(fQ[0].actualFilterOperator) && fQ[0].actualFilterOperator=="in") && fQ[0].isCustom == true && this._ctrlInstance.model.currentViewData.length > 0)
                                return "checked";
                            else
                                return fQ[0]["isCustom"] === true ? "" : "checked";
                        }
                        else {
                            if ((this._onDemandSearch || this._islargeData) && this._maxFilterCount) {
                                var fltrQury = BoldBIDashboard.DataManager(this._filterdCol).executeLocal(BoldBIDashboard.Query().where("value", "in", val).where("operator", "notcontains", "in"));
                                if (fltrQury.length == 0)
                                    return "checked";
                            }
                        }
                    }
                }
            }
        },
        _genCheckID: function () {
            return "CheckBox" + this.getIndex();
        },
        _formatting: function (format, value, locale) {

            if (this._bbdesigner$colType == "date" && format == "")
                format = "{0:MM/dd/yyyy hh:mm:ss}";

            if (this._bbdesigner$colType == "boolean")                 
                return value === "" ? "" : this.localizedLabels[value == true ? "True" : value == false ? "False" : ""];
           
            if (this._formatFiltering || this._bbdesigner$colType == "date") {
                var formatter = this._ctrlInstance.formatting;                
                return format != "" ? formatter(format, value, locale) : value;
            } 
        },
        _updateDateFilter: function (filter) {
            if (filter.type != "date" && !(filter.value instanceof Date))
                return filter;            
            filter.value = filter.value instanceof Date ? filter.value : BoldBIDashboard.parseJSON({ val: filter.value }).val;
            return ["in", "notcontains"].indexOf(filter.operator) == -1 ? filter : this._setDateObject(filter);
        },        
        _checkHandler: function (args) {
            bbdesigner$("#" + args.model.id).prop("checked", args.isChecked);
            var bbdesigner$checkedlist = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall,.e-addtofilter)"), clen = bbdesigner$checkedlist.length;
            var bbdesigner$selectall = this._listsWrap.find(".e-selectall"), canCheck;
            if (clen == this._chkList.length) {
                bbdesigner$selectall.prop("checked", true);
                canCheck = true;
            }
            else if (clen == 0) {
                bbdesigner$selectall.prop("checked", false);
                canCheck = false;
            }
            else if (args.isInteraction)
                bbdesigner$selectall.BoldBIDashboardCheckBox('model.checkState', 'indeterminate')
            bbdesigner$selectall.BoldBIDashboardCheckBox({ checked: canCheck });
            bbdesigner$("#" + this.id + this._bbdesigner$colType + "_OkBtn").BoldBIDashboardButton({ enabled: (clen != 0) || (!BoldBIDashboard.isNullOrUndefined(this._add) && this._add.prop("checked")) });
        },
        _selectAllBeforeHandler: function (args) {
            if (args.isChecked) {
                if (this.model.checkState == "indeterminate") {
                    args.cancel = true;
                    this.model.checkState = "uncheck";
                    this.option({ checkState: "check" })
                }
                else
                    this.checkState("uncheck");
            }
        },
        _selectAllHandler: function (args) {
            
            if (args.checkState=="check"){
                this._chkList.filter(":not(:checked)").BoldBIDashboardCheckBox({ checked: args.isChecked, change: BoldBIDashboard.proxy(this._checkHandler, this) });
                this._chkList.prop("checked", true);
            }
            else if (args.checkState == "uncheck") {
                this._chkList.filter(function () { if (bbdesigner$(this).hasClass("e-checkbox") && bbdesigner$(this).prop("checked")) return this; }).BoldBIDashboardCheckBox({ checked: args.isChecked });
                this._chkList.prop("checked", false); this._chkList.removeAttr("checked");
            }
            bbdesigner$("#" + this.id + this._bbdesigner$colType + "_OkBtn").BoldBIDashboardButton({ enabled: args.isChecked || (!BoldBIDashboard.isNullOrUndefined(this._add )&& this._add.prop("checked")) });
        },
        /*Custom Dialog*/
        _renderCustomFDlg: function (type) {
            var dlgId = this.id + type + "_CustomFDlg";
            if (bbdesigner$("#" + dlgId).length)
                return;
            var bbdesigner$dlg = BoldBIDashboard.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcustom");
            bbdesigner$dlg.addClass(this._cssClass);
            this._renderCDlgContent(bbdesigner$dlg, type);
            bbdesigner$dlg.BoldBIDashboardDialog({ showOnInit: false, enableResize: false, enableModal: true, allowKeyboardNavigation: false, title: this._title, width: 370, content: "#" + this.id, enableRTL: this._ctrlInstance.model.enableRTL, closeIconTooltip: "Close", cssClass: "e-excelfilter e-customDlg" });
			bbdesigner$dlg.BoldBIDashboardDialog("refresh");
        },

        _renderCDlgContent: function (content, type) {
            var bbdesigner$div1 = BoldBIDashboard.buildTag("div.e-dlgfields",this.localizedLabels.Showrowswhere, {}, {});
            var bbdesigner$id = this.id + this._bbdesigner$colType;
            var bbdesigner$fset = BoldBIDashboard.buildTag("fieldset.e-fieldset");
            var bbdesigner$op1 = BoldBIDashboard.buildTag("tr.e-fields"), bbdesigner$op2 = BoldBIDashboard.buildTag("tr.e-fields"), bbdesigner$op3 = BoldBIDashboard.buildTag("tr.e-fields e-top");
            var bbdesigner$dp1 = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomDrop1"), bbdesigner$dp2 = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomDrop2"), bbdesigner$dp3 = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomDrop3");
            var bbdesigner$in1 = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomValue1.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), bbdesigner$in2 = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomValue2.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), bbdesigner$in3 = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomValue3.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" });
            var bbdesigner$pred = BoldBIDashboard.buildTag("tr.e-predicate");
            var radioAnd = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomAndPredicate", {}, {}, { "type": "radio", "name": "predicate" , "value":"and" }), radioOr = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomOrPredicate", {}, {}, { "type": "radio", "name": "predicate", "value":"or" });
            var matchCase = BoldBIDashboard.buildTag("input#" + bbdesigner$id + "_CustomMatchPredicate", {}, {}, { "type": "checkbox" });
            content.append(bbdesigner$div1);
            var table = BoldBIDashboard.buildTag("table.e-optable");
            bbdesigner$op1.append(BoldBIDashboard.buildTag("td.e-operator").append(bbdesigner$dp1))
                .append(BoldBIDashboard.buildTag("td.e-value").append(bbdesigner$in1));
            bbdesigner$pred.append(BoldBIDashboard.buildTag("td", {}, {}, {}).append(radioAnd).append(BoldBIDashboard.buildTag("label.e-caption", this.localizedLabels.PredicateAnd, {}, { "for": bbdesigner$id + "_CustomAndPredicate" }))
                .append(radioOr).append(BoldBIDashboard.buildTag("label.e-caption", this.localizedLabels.PredicateOr, {}, { "for": bbdesigner$id + "_CustomOrPredicate" })));
            bbdesigner$op2.append(BoldBIDashboard.buildTag("td.e-operator").append(bbdesigner$dp2))
                .append(BoldBIDashboard.buildTag("td.e-value").append(bbdesigner$in2));
            table.append(bbdesigner$op1)
            .append(bbdesigner$pred)
            .append(bbdesigner$op2);
			if(type == "string")
			    bbdesigner$pred.append(BoldBIDashboard.buildTag("td", {}, {}, {}).append(matchCase).append(BoldBIDashboard.buildTag("label.e-caption", this.localizedLabels.MatchCase, {}, { "for": bbdesigner$id + "_CustomMatchPredicate" })));
            if (type == "number" || type == "guid") {
                bbdesigner$op3.append(BoldBIDashboard.buildTag("td.e-operator").append(bbdesigner$dp3))
                .append(BoldBIDashboard.buildTag("td.e-value").append(bbdesigner$in3));
                table.append(bbdesigner$op3)
            }
            bbdesigner$fset.append(BoldBIDashboard.buildTag("legend"))
                .append(table)
            content.append(BoldBIDashboard.buildTag("div.e-dlgfields").append(bbdesigner$fset));
            content.append(BoldBIDashboard.buildTag("div.e-dlgfields").append(this._createBtn(true)));
            content.appendTo("body");
            var uppertype = type.replace(type.charAt(0), type.charAt(0).toUpperCase());
            bbdesigner$([bbdesigner$dp1, bbdesigner$dp2]).BoldBIDashboardDropDownList({ fields: { text: "text", value: "value" }, height: 27, width: 120, enableRTL: this._ctrlInstance.model.enableRTL });
            if (type == "number") {
				bbdesigner$([bbdesigner$dp1, bbdesigner$dp2]).BoldBIDashboardDropDownList({ popupWidth: "170px" });
                bbdesigner$([bbdesigner$in1, bbdesigner$in2]).ejNumericTextbox({ showSpinButton: false, height: "27px",decimalPlaces : 2, width: "177px", enableRTL: this._ctrlInstance.model.enableRTL,watermarkText: this.localizedLabels.NumericTextboxWaterMark, focusOut: function(args){ if(this.model.decimalPlaces == 0) this.element.prev(".e-input").val(this.model.value); } });
            }
			else if (type == "guid") {
                bbdesigner$([bbdesigner$dp1, bbdesigner$dp2]).BoldBIDashboardDropDownList({ popupWidth: "170px" });
                bbdesigner$(bbdesigner$in1).css({"height":"22px","width":"175px" });
                bbdesigner$(bbdesigner$in2).css({"height":"22px","width":"177px" });
            }
            else if (type == "date") {
				bbdesigner$([bbdesigner$dp1, bbdesigner$dp2]).BoldBIDashboardDropDownList({ popupWidth: "170px" });
				bbdesigner$([bbdesigner$in1, bbdesigner$in2]).BoldBIDashboardDatePicker({ "cssClass": this._ctrlInstance.model.cssClass, height: "27px", width: "177px", "enableRTL": this._ctrlInstance.model.enableRTL, watermarkText: this.localizedLabels.DatePickerWaterMark, locale: this._locale });
            }
            else if (type == "datetime") {
                bbdesigner$([bbdesigner$dp1, bbdesigner$dp2]).BoldBIDashboardDropDownList({ popupWidth: "170px" });
                bbdesigner$([bbdesigner$in1, bbdesigner$in2]).BoldBIDashboardDateTimePicker({ "cssClass": this._ctrlInstance.model.cssClass, height: "27px", width: "177px", "enableRTL": this._ctrlInstance.model.enableRTL, watermarkText: this.localizedLabels.DateTimePickerWaterMark, locale: this._locale });
            }
            else if (type == "string") {
                bbdesigner$([bbdesigner$in1, bbdesigner$in2]).BoldBIDashboardAutocomplete({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL, enableDistinct: true, width: "177px", height: "27px", locale: this._locale });
            }
            bbdesigner$([radioAnd, radioOr]).BoldBIDashboardRadioButton({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL });
            matchCase.BoldBIDashboardCheckBox({ });
            bbdesigner$("#" + bbdesigner$id + "Custom_OkBtn").BoldBIDashboardButton({ text: this._getDeprecatedLocalizedLabel("OK"), showRoundedCorner: true, width: "23.6%", click: BoldBIDashboard.proxy(this._fltrBtnHandler, this), enabled: true });
            bbdesigner$("#" + bbdesigner$id + "Custom_CancelBtn").BoldBIDashboardButton({ text: this.localizedLabels.Cancel, showRoundedCorner: true, width: "23.6%", click: BoldBIDashboard.proxy(this.closeXFDialog, this) })
        },
                     
        _openCustomFilter: function (operator) {
            var oper = operator != "top10" ? this._bbdesigner$colType : operator, emptyOp = { text: "", value: "" }, query = this.query;
            var type = oper.replace(oper.charAt(0), oper.charAt(0).toUpperCase());
            var id = this.id + this._bbdesigner$colType;
            this.closeXFDialog();
            this._openedFltr = bbdesigner$("#" + id + "_CustomFDlg");
            var args = { requestType: "filterbeforeopen", filterModel: this, columnName: this.fName, columnType: this._bbdesigner$colType, isCustomFilter: true };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            this._openedFltr.BoldBIDashboardDialog("open");
            this._openedFltr.BoldBIDashboardDialog({open: function(args){
				(bbdesigner$("#" + id + "_CustomValue1").hasClass("e-autocomplete") || bbdesigner$("#" + id + "_CustomValue1").hasClass("e-datepicker") || bbdesigner$("#" + id + "_CustomValue1").hasClass("e-datetimepicker")) ? bbdesigner$("#" + id + "_CustomValue1").focus() : bbdesigner$("#" + id + "_CustomValue1").prev().focus();
			}});
            this._openedFltr.find("legend").html(this._displayName);            
            var sl = (["Number","Date"].indexOf(type) != -1) ? 6 : 5;
            var sliced = this.localizedLabels[type + "MenuOptions"].slice(0,sl); sliced.unshift(emptyOp);
            bbdesigner$("#" + id + "_CustomDrop1").BoldBIDashboardDropDownList({ dataSource: sliced });
            bbdesigner$("#" + id + "_CustomDrop2").BoldBIDashboardDropDownList({ dataSource: sliced });
			if (this._bbdesigner$colType == "number") {
                if(operator == "top10"){
                    this._openedFltr.find(".e-optable tr").not(".e-top").addClass("e-hide");   
                    this._openedFltr.find(".e-optable tr.e-top").removeClass("e-hide");
                    bbdesigner$("#" + id + "_CustomDrop3").BoldBIDashboardDropDownList({ dataSource: this.localizedLabels[type + "MenuOptions"] });
                }
                else{                   
                    this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                    this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide"); 
                }
            }
            else {
                this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide");
            }
            if(this._bbdesigner$colType == "string"){
				var fName = this._bbdesigner$foreignField ? this._bbdesigner$foreignField : this.fName;
				var data = this._bbdesigner$foreignData && this._bbdesigner$foreignField ? this._bbdesigner$foreignData : this._dataSource;
                this._openedFltr.find(".e-autocomplete").BoldBIDashboardAutocomplete({
                    fields: { text: fName }, dataSource: data,query:query, focusIn: function (args) {
                        var type = this.element.closest("td").siblings().find(".e-dropdownlist").BoldBIDashboardDropDownList("getSelectedValue");
                        var bbdesigner$matchCase = this.element.closest(".e-dialog-scroller").find(".e-checkbox").prop("checked");
						 this.model.caseSensitiveSearch = bbdesigner$matchCase;
						 this.model.filterType = type == "" ? this.model.filterType : type;
                    }
                });
            }
            if (this._bbdesigner$colType == "date" && this._bbdesigner$format != "")
                this._openedFltr.find(".e-datepicker").BoldBIDashboardDatePicker({ dateFormat: this._bbdesigner$format.replace(/{0:|}/g, function () { return "" }), enableStrictMode: true });
            else if (this._bbdesigner$colType == "datetime" && this._bbdesigner$format != "")
                this._openedFltr.find(".e-datetimepicker").BoldBIDashboardDateTimePicker({ dateTimeFormat: this._bbdesigner$format.replace(/{0:|}/g, function () { return "" }), enableStrictMode: true });
            this._setFilteredData(id, operator);
			if(!BoldBIDashboard.isNullOrUndefined(this._customFilterHandler)) 
				this._customFilterHandler();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._bbdesigner$colType, isCustomFilter: true };
            
			if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },
        
        _setFilteredData: function (bbdesigner$id, op) {
            var indx = bbdesigner$.inArray(this.fName, this.cFilteredCols);
            var fQM = [], optrs = [], fLen;
            var between = ["greaterthanorequal", "lessthanorequal"];
            if (op == "top10")
                return;
            if (indx != -1)
                fQM = BoldBIDashboard.DataManager(this.filteredColumn).executeLocal(BoldBIDashboard.Query().where("field", "in", this.fName));
            if (indx != -1 && this._bbdesigner$foreignField)
                fQM = fQM[0]["actuals"];
            if (this._initialFName != null && this._initialFName == this.fName)
                fQM[0]["isCustom"] = true;
            fLen = fQM.length;
            var drops = this._openedFltr.find(".e-dropdownlist"), inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input"), bbdesigner$pred = this._openedFltr.find(".e-predicate");            
            if (indx != -1 && fLen && fQM[0]["from"]!=undefined)
                optrs = [op, ""];
			else if(op == "between" && indx != -1 && fLen )
				optrs = [fQM[0]["operator"], !BoldBIDashboard.isNullOrUndefined(fQM[1]) ? fQM[1]["operator"] : ""];
            else if (indx != -1 && fLen && fQM[0]["isCustom"])
                optrs = [(op != "customfilter" && indx != -1) ? op : fQM[0]["operator"], op == "customfilter" && fQM[1] ? fQM[1]["operator"] : ""];
			else if(indx == -1 && op == "customfilter") 
                optrs = ["in", ""];
            else if (op == "between" || op == "customfilter")
                optrs = op != "customfilter" ? between : ["", ""];           
            else
                optrs = [op, ""];
           
            for (var i = 0; i < (indx != -1 ? fLen : 2) ; i++) {
                var opt = /\D*/.exec(optrs[i])[0];
                bbdesigner$(drops[i]).prop("value", opt);
                bbdesigner$(drops[i]).BoldBIDashboardDropDownList("setSelectedValue", opt);
				 bbdesigner$(drops[i]).BoldBIDashboardDropDownList({ change: function(arg){ 
					this.element.closest(".e-fields").find(".e-autocomplete").val("");
				 }});
				var value = (indx != -1 && fLen && fQM[i]["isCustom"] && (opt == (this._bbdesigner$foreignField ? fQM[i]["actualFilterOperator"] : fQM[i]["operator"]) || opt == "customfilter" || opt == "between")) ? this._bbdesigner$foreignField ? opt != "" ? fQM[i]["actualFilterValue"] : "" : fQM[i]["value"] : "";
                if (bbdesigner$(inputs[i]).hasClass("e-datepicker"))
                    bbdesigner$("#" + inputs[i].id).BoldBIDashboardDatePicker("model.value", (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["value"] : null);
                else if (bbdesigner$(inputs[i]).hasClass("e-numerictextbox"))
                    bbdesigner$("#" + inputs[i].id).ejNumericTextbox("model.value", value);
                else if (bbdesigner$(inputs[i]).hasClass("e-datetimepicker"))
                    bbdesigner$(inputs[i]).BoldBIDashboardDateTimePicker("model.value", value);
                else
                    bbdesigner$(inputs[i]).val(value);
                var bbdesigner$pre = (indx != -1 && fLen && fQM[i]["isCustom"] && fQM[i]["predicate"] != undefined) ? this._bbdesigner$foreignField ? fQM[i]["actualPredicate"] : fQM[i]["predicate"] : "and";
				bbdesigner$pred.find("input[value=" + bbdesigner$pre + "]").BoldBIDashboardRadioButton({checked:  true});
				if(this._bbdesigner$colType == "string"){
				    var bbdesigner$match = (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["matchcase"] : this._matchCase;
					bbdesigner$pred.find("input.e-js[type='checkbox']").BoldBIDashboardCheckBox({checked: bbdesigner$match});
				}
				this._openedFltr.find(".e-value input:visible:eq(0)").select();
            }            
        },
        _setDateObject: function (filterObject) {
            if (filterObject.value != null) {
                var bbdesigner$fltrVal = filterObject.value;
                var bbdesigner$prevObj = bbdesigner$.extend(true, {}, filterObject);
                var bbdesigner$nextObj = bbdesigner$.extend(true, {}, filterObject);                
                var bbdesigner$prevDate = new Date(bbdesigner$prevObj.value.setSeconds(bbdesigner$prevObj.value.getSeconds() - 1));
                var bbdesigner$nextDate = new Date(bbdesigner$nextObj.value.setSeconds(bbdesigner$nextObj.value.getSeconds() + 2));
                filterObject.value = new Date(filterObject.value.setSeconds(bbdesigner$nextObj.value.getSeconds() - 1));                
                bbdesigner$prevObj.value = bbdesigner$prevDate;
                bbdesigner$nextObj.value = bbdesigner$nextDate;
                if (filterObject.operator == "in") {
                    bbdesigner$prevObj.operator = "greaterthan";
                    bbdesigner$prevObj.predicate = "and";
                    bbdesigner$nextObj.operator = "lessthan";
                    bbdesigner$nextObj.predicate = "and";
                } else if (filterObject.operator == "notcontains") {
                    bbdesigner$prevObj.operator = "lessthanorequal";
                    bbdesigner$prevObj.predicate = "or";
                    bbdesigner$nextObj.operator = "greaterthanorequal";
                    bbdesigner$nextObj.predicate = "or";
                }
                var predicate = BoldBIDashboard.Predicate(bbdesigner$prevObj.field, bbdesigner$prevObj.operator, bbdesigner$prevObj.value, false);
                predicate = predicate[bbdesigner$nextObj.predicate](bbdesigner$nextObj.field, bbdesigner$nextObj.operator, bbdesigner$nextObj.value, false);
                filterObject.ejpredicate = predicate; filterObject.type = "date";
                return filterObject;
            }
            else
                return filterObject;
        },
        _getCDlgFields: function () {
            var dropDowns = this._openedFltr.find(".e-dropdownlist"), defaults;
            var bbdesigner$match = this._openedFltr.find(".e-checkbox"), matchcase = true,valueColl = [];
            var bbdesigner$inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input");
            var bbdesigner$ginputs = this._openedFltr.find(".e-value input"),
                bbdesigner$pred = this._openedFltr.find(".e-predicate  div[aria-checked = true]").find("input[type ='radio']").val()
            bbdesigner$.inArray(this.fName, this.cFilteredCols) == -1 && this.cFilteredCols.push(this.fName);

            for (var i = 0,len = dropDowns.length; i < len; i++) {
                var dvalue = bbdesigner$(dropDowns[i]).BoldBIDashboardDropDownList("getSelectedValue"), value;
                if (this._bbdesigner$colType == "number")
                    value = parseFloat(bbdesigner$inputs.eq(i).ejNumericTextbox("model.value"));
				if(this._bbdesigner$colType == "guid")
                    value = bbdesigner$ginputs.eq(i).val();
                if (this._bbdesigner$colType == "string") {
                    value = bbdesigner$inputs.eq(i).val();
                    matchcase = bbdesigner$match.is(":checked");
                }
                if (this._bbdesigner$colType == "date") 
                    value = bbdesigner$inputs.eq(i).BoldBIDashboardDatePicker("model.value");
                if (this._bbdesigner$colType == "datetime")
                    value = bbdesigner$inputs.eq(i).BoldBIDashboardDateTimePicker("model.value");

                defaults = { field: this.fName, predicate: i == 1 ? bbdesigner$pred : "or", matchcase: matchcase, isCustom: true };
                if (dvalue == "top" || dvalue == "bottom") {
                    valueColl.push(bbdesigner$.extend(true, { value: "", operator: "notcontains", take: value, from: dvalue }, defaults));
                }
                else if (dvalue != "") {
                    if (this._empties.indexOf(value + "") > -1 || (this._bbdesigner$colType == "number" && isNaN(value))) {
                        var cols = this.iterateAndGetCollection(this._empties.join(this._spliter), bbdesigner$.extend({}, defaults, { predicate: dvalue.toLowerCase() === "notcontains" ? "and" : "or", operator: dvalue.toLowerCase() }));
                        var pred = this.generatePredicate(cols);
                        valueColl.push(bbdesigner$.extend({}, defaults, { ejpredicate: pred, operator: dvalue.toLowerCase() }));
                    }
                    else {
                        var filterObj = {}; bbdesigner$.extend(true, filterObj, { value: value, operator: dvalue.toLowerCase(), isCustom: true, actualFilterOperator: dvalue.toLowerCase(), actualFilterValue: value, actualPredicate: defaults.predicate }, defaults);
                        if (this._bbdesigner$colType == "date")
                            filterObj.type = "date";
                        valueColl.push((this._bbdesigner$colType == "date" && ["in", "notcontains"].indexOf(dvalue.toLowerCase()) != -1) ? this._setDateObject(filterObj) : filterObj);
                    }
                }
                else
                    break;
            }
            if (this._bbdesigner$foreignField == undefined)
                this.initiateFilter(valueColl);
            else 
                this._filterForeignData(valueColl, true);            
        },
      
        _fltrBtnHandler: function (args) {
            var matchcase, valColl = [], arg = {}, predicate, fObj = {}, optr = "", checked = [], unchecked;
            this._maxFilterCount = false;
            if (this._clearSearchValue)
                this._searchCount = 0;
            if (!this._openedFltr.hasClass("e-dlgcustom")) {
                if (!this._isFiltered && this._listsWrap.find(".e-selectall").BoldBIDashboardCheckBox("model.checked") && (this._searchCount == 0 || (this._add && this._add.prop("checked"))))
                    return this.closeXFDialog();                                  
                if (this._onDemandSearch || this._islargeData) {
                    if (this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)").length <= this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)").length || this._listsWrap.find(".e-selectall").BoldBIDashboardCheckBox("model.checked")) {
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)");
                        optr = "in";
                    }
                    else {
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)");
                        optr = "notcontains";
                        this._maxFilterCount = true;
                    }
                }
                else {
                    var chkdata = this._chkList.filter(":checked"), unchkdata = this._chkList.filter(":not(':checked')");
                    if ((this._add && this._add.prop("checked"))) {
                        if (unchkdata.length)
                            unchecked = unchkdata;
                        checked = this._checked.length == 0 ? this._preChkList : this._checked;
                        if (chkdata.length && this._checked.length != 0)
                            BoldBIDashboard.merge(checked, chkdata);
                    }
                    else
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall,.e-addtofilter)");
                    optr = this._colType == "string" ? "startswith" : "in";
                }
                var len = checked.length, cVal, type = this.getType();
                var _isCase = this._colType == "string" ? this._matchCase : true;
	            var _isAccent = this._colType == "string" ? this._accent : true;
                var defaults = this._maxFilterCount ? { field: this.fName, predicate: "and", operator: optr, matchcase: _isCase, accent: _isAccent } : { field: this.fName, predicate: "or", operator: optr, matchcase: _isCase, accent: _isAccent };
                for (var i = 0; i < len; i++) {
                    if (!BoldBIDashboard.isNullOrUndefined(unchecked)) {
                        for (var j = 0; j < unchecked.length; j++) {
                            var flag = 0;
                            if (checked[i].value == unchecked[j].value) {
                                flag = 1;
                                break;
                            }
                        }
                    }
                    if (flag)
                        continue;
                    cVal = checked[i].value;
                    if (this.enableNormalize && cVal.indexOf(this._spliter) != -1) {
                        BoldBIDashboard.merge(valColl, this.iterateAndGetCollection(cVal, defaults));
                        continue;
                    }
                    cVal = this.processValue(cVal, type);

                    bbdesigner$.extend(true, fObj, { value: cVal }, defaults);
                                                            
                    for (var j = 0; j < valColl.length; j++) {
                        var count = 0;
                        if (valColl[j].value == cVal) {
                            count = 1;
                            break;
                        }
                    }
                    if (count)
                        continue;

                    valColl.push(type == "date" ? this._setDateObject(fObj) : fObj);

                    fObj = {};
                }
                var cIndex = bbdesigner$.inArray(this.fName, this.cFilteredCols);
                if(cIndex != -1)
                    this.cFilteredCols.splice(cIndex, 1);
                if (this._isFiltered && this._searchRequest) {
                    this._checkIsIndeterminate(this.fName, this.filteredColumn);
                    if (this._isIndeterminate) {
                        BoldBIDashboard.merge(valColl, this.filteredColumn);
                        valColl = BoldBIDashboard.distinct(valColl, "value", true);
                        this._searchRequest = false;
                    }          
                }
                this.initiateFilter(valColl);
            }
            else {
                valColl = this._getCDlgFields();
                bbdesigner$.inArray(this.fName, this.cFilteredCols) == -1 && valColl[0] && this.cFilteredCols.push(this.fName);
            }
        },
        initiateFilter: function (valColl) {
            var firstVal = valColl[0], predicate;
            if (!BoldBIDashboard.isNullOrUndefined(firstVal)) {
                isTake = firstVal["from"];
                predicate = firstVal["ejpredicate"] ? firstVal["ejpredicate"] : BoldBIDashboard.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchcase, !firstVal.accent);
                for (var j = 1, jlen = valColl.length; j < jlen; j++) {
                    predicate.value += ',' + valColl[j].value;
                }
                arg = { action: "filtering", filterCollection: valColl, fieldName: this.fName, ejpredicate: predicate, tableID: this._bbdesigner$tableID};
                if (this._predicates[this._bbdesigner$key] == undefined)
                    this._predicates[this._bbdesigner$key] = {};
                this._predicates[this._bbdesigner$key][this.fName] = !isTake ? predicate : { from: firstVal["from"], take: firstVal["take"] };
                if (!this._openedFltr.hasClass("e-dlgcustom") && this._listsWrap.find(".e-selectall").BoldBIDashboardCheckBox("model.checked") && (!this._searchCount || ((this._add && this._add.prop("checked")) && (this._preChkList.filter(":not(':checked')").length == 0 || this._checked.length == 0)) || (valColl.length == this._preChkList.length)) && bbdesigner$.inArray(this.fName, this._columnsFiltered) != -1)
                    arg = { action: "clearfiltering", filterDetails: { field: this.fName, operator: "", predicate: "or", value: "" }, fieldName: this.fName, tableID: this._bbdesigner$tableID }
                if (bbdesigner$.inArray(this.fName, this._columnsFiltered) == -1)
                    this._columnsFiltered.push(this.fName);                
                this._filterHandler(arg);
            }
            this.closeXFDialog();
        },        
		/*Util method to perform formatted group on the inputted json*/
        getDistinct: function (json, field, fullRecord, redundancy) {
		    var lookup = {}, len = json.length, result = [], current, value, fd;

		    while (len--) {
		        current = json[len], value = BoldBIDashboard.getObject(field, current), fd = value;
            if (!BoldBIDashboard.isNullOrUndefined(current)) {
		        if (this.enableNormalize)
		            fd = this._formatting(this._bbdesigner$format, value, this._locale);

		        current["ejvalue"] = fd;

		        if (redundancy || !(value in lookup))
		            result.push(fullRecord ? current : value);

		        lookup[value] = true;
		    }
         }

		    result = BoldBIDashboard.group(BoldBIDashboard.mergeSort(result, field), "ejvalue"); /* sort with field and group with ejvalue */

		    return result;
		},
        /*Util method to split string and build filterobject collection */
		iterateAndGetCollection: function (valuestring, defaults) {
		    var splts = valuestring.split(this._spliter), len = splts.length, result = [], value, type = this._ctrlInstance._bbdesigner$colType;
            if (type == "number" || type == "date" || type == "datetime"){
				var index = splts.indexOf("");
				if (index > -1) {
                  splts.splice(index, 1);
                }
			}
		    while (len--) {
		        value = this.processValue(splts[len]);		       

		        result.push(bbdesigner$.extend(true, { value: value }, defaults));
		    }

		    return result;
		},
        /*Util method to perform type conversion*/
		processValue: function (val, type/* optional */) {		    
		     type = type || this.getType(); type = this._empties.indexOf(val) != -1 ? "empty" : type; val = val === this.guid ? this._blankValue + "" : val;
		    switch (type) {
		        case "empty":/*Handle blanks*/
		            val = val == "null" ? null : val == "undefined" ? undefined : "";
		            break;
		        case "date":
		        case "datetime":
		            val = new Date(val);
		            break;
		        case "number":
		            val = +val;
		            break;
		        case "boolean":		           
		            val = (!isNaN(val) && typeof (val) == "string") ? BoldBIDashboard.parseInt(val) != 0 : val === "true" ? true : false;
		            break;
		    }		    		      
		    return val;
		},
		getType: function () {
		    return !BoldBIDashboard.isNullOrUndefined(this._bbdesigner$foreignField) ? this._bbdesigner$foreignKeyType : this._bbdesigner$colType;
		},
		replacer: function (input, pattern, processor, params) {
		    if (typeof processor == "function")
		        processor = processor.call(this, params)
		   return input.replace(pattern, processor);
		},
        _virtualize: function (e) {
            var height = bbdesigner$("#" + this.id + this._bbdesigner$colType + "_CheckBoxList").height();
            var chks = this._chkList.not(".e-checkbox").filter(function () { if (this.offsetTop > e.scrollTop - this.offsetHeight && e.scrollTop + height+70 > this.offsetTop + this.offsetHeight) return this; });
            if (chks.length == 0) return;
            chks.filter(":checked").BoldBIDashboardCheckBox({ checked: true }); chks.filter(":not(:checked)").BoldBIDashboardCheckBox({ checked: false });
            chks.BoldBIDashboardCheckBox({ change: BoldBIDashboard.proxy(this._checkHandler, this) });
            var scrollObj = this._listsWrap.BoldBIDashboardScroller('instance');            
            scrollObj.refresh();
        },
        /*Method to reset private properties*/
        resetFilterModel: function (destroy) {
            this._blank = undefined;
            this._addAtLast = false;
            this._isFiltered = false;
            this._searchCount = 0;
        },
        resetExcelFilter: function (template) {
            var _i, _type, _id = this.id,_len, _bbdesigner$id;
            this._predicates = [];          
            this.cFilteredCols = [];
            this.resetFilterModel();
            for (_i = 0, _len = this._posType.length; _i < _len; _i++) {
                _type = this._posType[_i], _bbdesigner$id = _id + _type;
                var cDlg = bbdesigner$("#" + _bbdesigner$id + "_CustomFDlg");               
                if (!cDlg.length) {
                    bbdesigner$("#" + _bbdesigner$id +"_CustomDrop1_popup_wrapper").remove();
                    bbdesigner$("#" + _bbdesigner$id +"_CustomDrop2_popup_wrapper").remove();
                }
                if (!(bbdesigner$("#" + _bbdesigner$id + "_CheckBoxList").length)) {
                    bbdesigner$("#" + _bbdesigner$id + "_CheckBoxList_WaitingPopup").remove();
                }				
                bbdesigner$("#" + _bbdesigner$id + "_CheckBoxList").BoldBIDashboardWaitingPopup("destroy"); bbdesigner$("#" + _bbdesigner$id + "_excelDlg").remove();
                cDlg.find(".e-dropdownlist").BoldBIDashboardDropDownList("destroy");
                cDlg.find(".e-button").BoldBIDashboardButton("destroy");
                if (_type == "string" || _type == "boolean") cDlg.find(".e-autocomplete").BoldBIDashboardAutocomplete("destroy");
                if (_type == "number") cDlg.find(".e-numerictextbox").ejNumericTextbox("destroy");
                if (_type == "date") cDlg.find(".e-datepicker").BoldBIDashboardDatePicker("destroy");
                cDlg.BoldBIDashboardDialog("destroy");
                bbdesigner$("#" + _bbdesigner$id + "_CustomFDlg").remove();
            }
        },
        _wireEvents: function () {
            this._ctrlInstance._on(this._dialogContainer, "focus click", ".e-searchbox", BoldBIDashboard.proxy(this._searchBoxFocus, this));
            this._ctrlInstance._on(this._dialogContainer, "keyup", ".e-searchbox input", BoldBIDashboard.proxy(this._search, this));
        }
    };

    BoldBIDashboard.ExcelFilter.valueDelimiter = "@|@";
    BoldBIDashboard.ExcelFilter.Locale = BoldBIDashboard.ExcelFilter.Locale || {};

    BoldBIDashboard.ExcelFilter.Locale["default"] = BoldBIDashboard.ExcelFilter.Locale["en-US"] = {
        SortNoSmaller: "Sort Smallest to Largest",
        SortNoLarger: "Sort Largest to Smallest",
        SortTextAscending: "Sort A to Z",
        SortTextDescending: "Sort Z to A",
        SortDateOldest: "Sort by Oldest",
        SortDateNewest:"Sort by Newest",
		SortByColor: "Sort By Color",
        SortByCellColor: "Sort by Cell Color",
        SortByFontColor: "Sort by Font Color",
        FilterByColor: "Filter By Color",
		CustomSort: "Custom Sort",
        FilterByCellColor: "Filter by Cell Color",
        FilterByFontColor: "Filter by Font Color",
        ClearFilter: "Clear Filter",
        NumberFilter: "Number Filters",
		GuidFilter: "Guid Filters",
        TextFilter: "Text Filters",
        DateFilter: "Date Filters",
        DateTimeFilter: "Date Time Filters",
        SelectAll: "Select All",
        Blanks: "Blanks",
		Search:"Search",
        Showrowswhere:"Show rows where",
		NumericTextboxWaterMark:"Enter value",
        StringMenuOptions: [{ text: "Equal", value: "in" }, { text: "Not Equal", value: "notcontains" }, { text: "Starts With", value: "startswith" }, { text: "Ends With", value: "endswith" }, { text: "Contains", value: "contains" }, { text: "Custom Filter", value: "customfilter" }],
        NumberMenuOptions: [{ text: "Equal", value: "in" }, { text: "Not Equal", value: "notcontains" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
        GuidMenuOptions: [{ text: "Equal", value: "in" }, { text: "Not Equal", value: "notcontains" }, { text: "Custom Filter", value: "customfilter" }],
		DateMenuOptions: [{ text: "Equal", value: "in" }, { text: "Not Equal", value: "notcontains" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
		DatetimeMenuOptions: [{ text: "Equal", value: "in" }, { text: "Not Equal", value: "notcontains" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
		Top10MenuOptions: [{ text: "Top", value: "top" }, { text: "Bottom", value: "bottom" }],
        title:"Custom Filter",
        PredicateAnd: "AND",
        PredicateOr: "OR",
        OK: "OK",
        MatchCase: "Match Case",
        Cancel: "Cancel",
        NoResult: "No Matches Found",
        CheckBoxStatusMsg: "Not all items showing",
        DatePickerWaterMark: "Select date",
        DateTimePickerWaterMark: "Select date time",
		True: "true",
        False: "false",
        AddToFilter: "Add current selection to filter"
    };

})(jQuery, SyncfusionBoldBIDashboard);;;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    BoldBIDashboard.gridFeatures.filter = {
        
        getFilterBar: function () {
            return this._gridFilterBar;
        },

        setGridFilterBar: function (value) {
            this._gridFilterBar = value;
        },
        
        filterColumn: function (fieldName, filterOperator, filterValue, predicate, matchcase, actualFilterValue, actualOperator) {
            if (!this.model.allowFiltering)
                return;
            var column = this.getColumnByField(fieldName), _format;
			if(!BoldBIDashboard.isNullOrUndefined(column.filterBarTemplate) && column.type == "boolean" && filterValue == "true" || filterValue == "false")
				filterValue = JSON.parse(filterValue);
            if (!BoldBIDashboard.isNullOrUndefined(column.filterBarTemplate) && (column.type == "date" || column.type == "datetime") && filterValue.length > 0) {

                if (BoldBIDashboard.isNullOrUndefined(column.format)) {
                    if (this._currentFilterColumn.type == "date")
                        _format = BoldBIDashboard.preferredCulture().calendar.patterns.d; //System Date format
                    else
                        _format = BoldBIDashboard.preferredCulture().calendar.patterns.f; //System DateTime format
                }
                else
                    _format = column.format.replace("{0:", "").replace('}', "");
                filterValue = BoldBIDashboard.parseDate(filterValue, _format, this.model.locale);
            }
            var filterCollection = [];
            if (typeof (fieldName) == "object")
                filterCollection = fieldName;
            else
                filterCollection.push({ field: fieldName, operator: filterOperator, value: filterValue, predicate: predicate, matchcase: matchcase, actualFilterValue: actualFilterValue });

            for (var i = 0; i < filterCollection.length; i++) {
                var fieldName = filterCollection[i].field, filterOperator = filterCollection[i].operator,
                filterValue = filterCollection[i].value, predicate = filterCollection[i].predicate,
                matchcase = !BoldBIDashboard.isNullOrUndefined(filterCollection[i].matchcase) ? filterCollection[i].matchcase : false, actualFilterValue = filterCollection[i].actualFilterValue;
                var args = {};
                args.requestType = BoldBIDashboard.Grid.Actions.Filtering;
                args.currentFilterObject = [];
                this._bbdesigner$curFieldName = fieldName;
                if (!bbdesigner$.isArray(filterOperator))
                    filterOperator = bbdesigner$.makeArray(filterOperator);
                if (!bbdesigner$.isArray(filterValue))
                    filterValue = bbdesigner$.makeArray(filterValue);
                if (!bbdesigner$.isArray(predicate))
                    predicate = bbdesigner$.makeArray(predicate);
                var firstLoop = false;
                var filterCol = this._filterCollection;
                if (BoldBIDashboard.util.isNullOrUndefined(this._currentFilterColumn))
                    this._currentFilterColumn = this.getColumnByField(fieldName);
                for (var index = 0; index < filterOperator.length; index++) {
                    var filterObject = {
                        field: fieldName,
                        operator: filterOperator[index],
                        value: filterValue[index],
                        matchcase: matchcase,
                        predicate: predicate[index],
                        actualFilterValue: BoldBIDashboard.getObject("value", actualFilterValue),
                        actualOperator: BoldBIDashboard.getObject("operator", actualFilterValue)
                    };
                    predicated = BoldBIDashboard.getObject("ejpredicate", actualFilterValue);
                    if (predicated)
                        filterObject = predicated;
                    if (this.model.filterSettings.filterType == "filterbar")
                        this._bbdesigner$colType = this._currentFilterColumn.type;
                    if (this.model.filterSettings.filteredColumns.length == 0 && !BoldBIDashboard.isNullOrUndefined(filterObject.value) && filterObject.value !== "") {
                        if ((this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime") && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                            this._setDateFilters(filterObject);
                        else
                            this.model.filterSettings.filteredColumns.push(filterObject);
                    } else {
                        var proxy = this;
                        if (!firstLoop) {
                            var dataManger = BoldBIDashboard.DataManager(this.model.filterSettings.filteredColumns);
                            var query = new BoldBIDashboard.Query().where("field", BoldBIDashboard.FilterOperators.equal, filterObject.field);
                            var object = dataManger.executeLocal(query);
                            for (var j = 0; j < object.length; j++) {
                                var objectIndex = bbdesigner$.inArray(object[j], this.model.filterSettings.filteredColumns)
                                if (objectIndex != -1)
                                    this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
                            }
                        }
                        if (filterObject.value !== "") {
                            if ((this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime") && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                                this._setDateFilters(filterObject);
                            else
                                this.model.filterSettings.filteredColumns.push(filterObject);
                        }
                    }
                    firstLoop = true;
                    args.currentFilterObject.push(filterObject);
                }
                args.filterCollection = this.model.filterSettings.filteredColumns;
                args.currentFilteringColumn = fieldName;
                var returnValue = this._processBindings(args);
                if (returnValue) {
                    this.model.filterSettings.filteredColumns.reverse().splice(0, filterOperator.length);
                    this.model.filterSettings.filteredColumns.reverse();
                }
			if(!BoldBIDashboard.isNullOrUndefined(column.filterBarTemplate) && this.model.filterSettings.filterType == "filterbar"){
					this.filterStatusMsg = "";
					if(this._oldFilterColumn != column &&  (this.filterColumnCollection.length > 0 && bbdesigner$.inArray(column,this.filterColumnCollection) == -1 ))
					this.filterColumnCollection.push(column);
					this._oldFilterColumn = this._currentFilterColumn = column;
					//this._showFilterMsg();
				}
            }
        },
        
        search: function (searchString) {
            var args = {};
            if (bbdesigner$("#" + this._id + "_search").find("input").val() != searchString);
                bbdesigner$("#" + this._id + "_search").find("input").val(searchString);
            args.requestType = BoldBIDashboard.Grid.Actions.Search;
            args.keyValue = searchString;
            if (searchString != "" || this.model.searchSettings.key != "") {                
                this.model.searchSettings.key = searchString.toLowerCase() == this.localizedLabels.True.toLowerCase() ? "true" : searchString.toLowerCase() == this.localizedLabels.False.toLowerCase() ? "false" : searchString;
                this._processBindings(args);
            }
            this._primaryKeyValues = [];
        },
        _filterBarHandler: function (e) {
            var keycode = e.keyCode, bbdesigner$target = bbdesigner$(e.target);
            if (bbdesigner$target.closest(".e-grid").attr("id") !== this._id)
                return;
            if ((this.model.filterSettings["filterBarMode"] == "immediate" || keycode == 13) && keycode != 9) {
                var bbdesigner$target = bbdesigner$(e.target);
                this.filterStatusMsg = "";
                var fieldName = bbdesigner$target.prop("id").replace("_filterBarcell", "");
                var column = this.getColumnByField(fieldName);
                if (column == null)
                    return;
                this._currentFilterColumn = column;
                this._bbdesigner$curFieldName = column.field;
                if (this._currentFilterColumn != this._oldFilterColumn)
                    this.filterValueOldLength = 0;				
                this._currentFilterbarValue = bbdesigner$target.val().toLowerCase() == this.localizedLabels.True.toLowerCase() ? "true" : bbdesigner$target.val().toLowerCase() == this.localizedLabels.False.toLowerCase() ? "false" : bbdesigner$target.val();
                this.filterValueCurrentLength = this._currentFilterbarValue.length;
                if (((this.filterValueCurrentLength == 0 && this.filterValueOldLength == 0) || this._currentFilterbarValue == this.OldfilterValue) && this._currentFilterColumn == this._oldFilterColumn && !this.model.scrollSettings.enableVirtualization) {
                    this._showFilterMsg();
                    return;
                }
                this._skipFilterProcess = this._checkForSkipInput();
                if (!this._skipFilterProcess) {
                    this._processFilter(e);
                } else {
                    if (this._currentFilterColumn.type == "string") {
                        this.filterStatusMsg = "Invalid Filter Data";
                        this._showFilterMsg();
                    } else {
                        this._skipFilterProcess = false;
						if(!this.model.scrollSettings.enableVirtualization)
							this._showFilterMsg();
                        return;
                    }
                }
            }
        },
        _renderResponsiveFilter: function () {
            var bbdesigner$outerDiv = BoldBIDashboard.buildTag('div#responsiveFilter.resFilterDiv', '', { 'width': '100%', 'padding': '0px' });
            var height = bbdesigner$(window).height() + 1;
            var headerHieght = height * (8 / 100);
            var width = this.element.height() > height ? bbdesigner$(window).width() + 16.5 : bbdesigner$(window).width();
            var bbdesigner$columnDiv = BoldBIDashboard.buildTag('div.columnDiv', '', { width: '100%' });
            for (var i = 0; i < this.model.columns.length; i++) {
                var bbdesigner$cDiv = BoldBIDashboard.buildTag('div.e-responsivefilterColDiv', '', { width: '100%' }, { 'ej-MappingName': this.model.columns[i].field });
                var bbdesigner$span = BoldBIDashboard.buildTag('span', this.model.columns[i].headerText, { 'margin-left': '4%' });
                bbdesigner$cDiv.append(bbdesigner$span);
                bbdesigner$columnDiv.append(bbdesigner$cDiv);
            }
            bbdesigner$outerDiv.append(bbdesigner$columnDiv);
            this.element.append(bbdesigner$outerDiv);
            var gridObj = this;
            var widt = this.element.outerWidth();
            var bbdesigner$headerDiv = BoldBIDashboard.buildTag('div.e-resFilterDialogHeaderDiv', '', { 'height': headerHieght });
            var bbdesigner$span = BoldBIDashboard.buildTag('div.labelRes', '<span>Filter</span>');
            var bbdesigner$resIcon = BoldBIDashboard.buildTag('div.e-resFilterleftIcon', '', { 'margin-top': '3%' });
            var bbdesigner$resspan = BoldBIDashboard.buildTag('span.e-icon e-responsiveFilterClear e-resIcon', '', { 'font-size': '23px' });
            var bbdesigner$divIcon = BoldBIDashboard.buildTag('div.e-resFIlterRigthIcon', '', { 'float': 'right', 'margin-top': '3%' }, { closeDialogue: 'responsiveFilter', gridEle: true });
            var bbdesigner$spanIcon = BoldBIDashboard.buildTag('span.e-icon e-responisveClose e-resIcon', '', { 'font-size': '23px' }, { closeDialogue: 'responsiveFilter', gridEle: true });
            bbdesigner$divIcon.click(function (e) {
                bbdesigner$("#responsiveFilter").css('display', 'none');
                gridObj.element.css('display', 'block');
            });
            bbdesigner$resIcon.click(function (e) {
                bbdesigner$("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-filternone').click();
            });
            bbdesigner$headerDiv.append(bbdesigner$resIcon.append(bbdesigner$resspan));
            bbdesigner$headerDiv.append(bbdesigner$span).append(bbdesigner$divIcon.append(bbdesigner$spanIcon));
            bbdesigner$outerDiv.prepend(bbdesigner$headerDiv);
            bbdesigner$outerDiv.insertAfter(this.element);
            bbdesigner$(".resFilterDiv").bind('keydown', bbdesigner$.proxy(this._responsiveDialogueKeyUp, this))
            bbdesigner$outerDiv.css('display', 'none');
            bbdesigner$(".e-responsivefilterColDiv").bind('click', bbdesigner$.proxy(this._mouseClickHandler, this));
        },
        _closeDivIcon: function (sender) {
            var bbdesigner$div = bbdesigner$(sender.target);
            if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$div.attr('closeDialogue'))) {
                var bbdesigner$dialog = bbdesigner$("#" + bbdesigner$div.attr('closeDialogue'));
                if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$dialog.data('BoldBIDashboardDialog')))
                    bbdesigner$dialog.BoldBIDashboardDialog('close');
                else
                    bbdesigner$dialog.css('display', 'none');
            }
            if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$div.attr('gridEle'))) {
                this.element.css('display', 'block');
            }
            if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$div.attr('openDialogue'))) {
                if (this.model.enableResponsiveRow || bbdesigner$div.attr('closeDialogue').indexOf('Custom') != -1) {
                    var bbdesigner$dialog = bbdesigner$("#" + bbdesigner$div.attr('openDialogue'));
                    if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$dialog.data('BoldBIDashboardDialog')))
                        bbdesigner$dialog.BoldBIDashboardDialog('open');
                    else
                        bbdesigner$dialog.css('display', 'block');
                }
                else
                    this.element.css('display', 'block');
            }
        },
        _setResponsiveFilterIcon: function () {
            var bbdesigner$div = bbdesigner$("#responsiveFilter").find('.columnDiv'), bbdesigner$proxy = this;
            bbdesigner$div.find('.e-filtericon').remove();
            for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
                var column = this.model.filterSettings.filteredColumns[i];
                var bbdesigner$selcDiv = bbdesigner$div.find('.e-responsivefilterColDiv[ej-MappingName=' + column.field + ']');
                var bbdesigner$divIcon = BoldBIDashboard.buildTag('div.e-filtericon e-icon e-resIcon e-filterset e-filternone e-filterreset', '', { float: 'right', height: '22px', width: '21px', 'font-size': '20px', 'margin-right': '3%', 'margin-top': '2%' });
                var bbdesigner$iconSapn = BoldBIDashboard.buildTag('span.e-filtericon e-icon e-resIcon e-filterset e-filternone', '', {}, { 'colType': column.type });
                bbdesigner$selcDiv.find('.e-filternone').remove();
                bbdesigner$selcDiv.append(bbdesigner$divIcon);
                bbdesigner$iconSapn.click(function (e) {
                    var bbdesigner$target = e.target;
                    bbdesigner$proxy._bbdesigner$colType = bbdesigner$target.attr('colType');
                    bbdesigner$proxy._fltrClrHandler();
                    bbdesigner$target.remove();
                })
            }
        },
        _renderExcelFilter: function () {
            var filterCol = this.model.filterSettings.filteredColumns.length != 0 ? this.model.filterSettings.filteredColumns[0].field : null;
            var model = {
                instance: this,
                showSortOptions: this.model.allowSorting,
                allowFormatFiltering: this.model.filterSettings.allowFormatFiltering,
                allowCaseSensitive: this.model.filterSettings.enableCaseSensitivity,
                maxFilterLimit: this.model.filterSettings.maxFilterChoices,
                interDeterminateState: this.model.filterSettings.enableInterDeterminateState,
                enableComplexBlankFilter: this.model.filterSettings.enableComplexBlankFilter,
                blankValue: this.model.filterSettings.blankValue,
                filterHandler: BoldBIDashboard.proxy(this._filterHandler, this),
                initFilterCol: filterCol,
                actionBegin: "actionBegin",
                actionComplete: "actionComplete"
            };
            this._excelFilter = new BoldBIDashboard.excelFilter(model);
            bbdesigner$.extend(this._excelFilter, this.model.filterSettings);
        },
        _filterHandler: function (args) {
            var arg = {}, fQMgr;
            arg.requestType = args.action == "sorting" ? args.action : "filtering";
            var temp = this.model.filterSettings.filteredColumns;
            if (args.action == "filtering") {
                fQMgr = BoldBIDashboard.DataManager(this.model.filterSettings.filteredColumns);
                var query = new BoldBIDashboard.Query().where("field", BoldBIDashboard.FilterOperators.equal, args.fieldName);
                var object = fQMgr.executeLocal(query);
                for (var i = 0; i < object.length; i++) {
                    var objectIndex = bbdesigner$.inArray(object[i], this.model.filterSettings.filteredColumns)
                    if (objectIndex != -1)
                        this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
                }
                BoldBIDashboard.merge(this.model.filterSettings.filteredColumns, args.filterCollection);
                args.currentFilterCollection = args.filterCollection;
            }
            else if (args.action == "clearfiltering") {
                var filterObj = args.filterDetails;
                delete this._excelFilter._predicates[0][args.fieldName];
                this.filterColumn(filterObj.field, filterObj.operator, filterObj.value, filterObj.predicate);
                return;
            }
            else if (args.action == "sorting") {
                var sortObj = args.sortDetails;
                var valColl = this.model.filterSettings.filteredColumns;
                var firstVal = valColl[0], predicate;
                if (!BoldBIDashboard.isNullOrUndefined(firstVal)) {
                    isTake = firstVal["from"];
                    predicate = firstVal["ejpredicate"] ? firstVal["ejpredicate"] : BoldBIDashboard.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchcase, !firstVal.accent);
                    for (var j = 1, jlen = valColl.length; j < jlen; j++) {
                        predicate.value += ',' + valColl[j].value;
                    }
                }
                if (BoldBIDashboard.gridFeatures.sort)
                    this.sortColumn(sortObj.field, sortObj.direction, predicate);
                this._excelFilter.closeXFDialog();
                return;
            }

            arg.currentFilteringColumn = args.fieldName;
            arg.predicated = args.ejpredicate;
            var returnValue = this._processBindings(arg);
            if (returnValue)
                this.model.filterSettings.filteredColumns = temp;
        },
        _renderFiltering: function () {
            var bbdesigner$headerTable = this.getHeaderTable(),args,temp;
            var bbdesigner$tr = BoldBIDashboard.buildTag('tr.e-filterbar'), bbdesigner$trClone, filteredFields = [],bbdesigner$input;
            if (this.model.detailsTemplate || this.model.childGrid) bbdesigner$tr.append(BoldBIDashboard.buildTag('th.e-filterbarcell e-mastercell'));
            for (var column = 0; column < this.model.columns.length; column++) {
                var bbdesigner$th = BoldBIDashboard.buildTag('th.e-filterbarcell'), bbdesigner$div = BoldBIDashboard.buildTag('div.e-filterdiv'), bbdesigner$span = BoldBIDashboard.buildTag('span.e-cancel e-icon e-hide');
                if (this.model.columns[column]["allowFiltering"] != false && !BoldBIDashboard.isNullOrUndefined(this.model.columns[column].filterBarTemplate)) {
                    bbdesigner$th.addClass('e-fltrtemp');
                    bbdesigner$div.addClass('e-fltrtempdiv');
                    if (BoldBIDashboard.isNullOrUndefined(this.model.columns[column].filterBarTemplate.create)) {
                        bbdesigner$input = BoldBIDashboard.buildTag('input e-filtertext', "", {}, { title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle, id: this.model.columns[column]["field"] + "_filterBarcell", "class": "e-filterUi_input e-filtertext e-fltrTemp" });
                    }
                    else {
                        args = { columnIndex: column, column: this.model.columns[column] }
                        temp = this.model.columns[column].filterBarTemplate.create;
                        if (typeof temp == "string")
                            temp = BoldBIDashboard.util.getObject(temp, window);
                        bbdesigner$input = temp(args)
                        bbdesigner$input = bbdesigner$(bbdesigner$input).attr({ title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle, id: this.model.columns[column]["field"] + "_filterBarcell", "class": "e-filterUi_input e-filtertext e-fltrTemp" });
                    }
                }
                else{
					bbdesigner$div.addClass('e-fltrinputdiv');
                    bbdesigner$input = BoldBIDashboard.buildTag('input.e-ejinputtext e-filtertext', "", {}, { title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle, type: "search", id: this.model.columns[column]["field"] + "_filterBarcell" });
				}
                if (this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "filterbar" && bbdesigner$.inArray(this.model.columns[column].field, filteredFields) == -1) {
                    for (var fColumn = 0; fColumn < this.model.filterSettings.filteredColumns.length; fColumn++) {
                        if (this.getColumnIndexByField(this.model.filterSettings.filteredColumns[fColumn].field) == column) {
                            if (this.model.filterSettings.filteredColumns[fColumn].operator == "greaterthan")
                                bbdesigner$input.val(">" + this.model.filterSettings.filteredColumns[fColumn].value);
                            else if (this.model.filterSettings.filteredColumns[fColumn].operator == "lessthan")
                                bbdesigner$input.val("<" + this.model.filterSettings.filteredColumns[fColumn].value);
                            else if (this.model.filterSettings.filteredColumns[fColumn].operator == "notequal")
                                bbdesigner$input.val("!=" + this.model.filterSettings.filteredColumns[fColumn].value);
                            else
                                bbdesigner$input.val(this.model.filterSettings.filteredColumns[fColumn].value);
                            if (bbdesigner$.inArray(this.model.filterSettings.filteredColumns[fColumn].field, filteredFields) == -1) filteredFields.push(this.model.filterSettings.filteredColumns[fColumn].field);
                        }
                    }
                }
                if (this.model.columns[column]["allowFiltering"] === false || this.model.columns[column]["field"] == "" || BoldBIDashboard.isNullOrUndefined(this.model.columns[column]["field"])) {
                    bbdesigner$input.attr("disabled", true).addClass("e-disable");
                    this._disabledFilterableColumns.push(this.model.columns[column]["headerText"]);
                }
                this.model.columns[column]["visible"] === false && bbdesigner$th.addClass("e-hide");
                !BoldBIDashboard.isNullOrUndefined(this.model.columns[column]["cssClass"]) && bbdesigner$th.addClass(this.model.columns[column]["cssClass"]);
                if (this.model.columns[column]["allowFiltering"] != false && !BoldBIDashboard.isNullOrUndefined(this.model.columns[column].filterBarTemplate))
                    bbdesigner$div.append(bbdesigner$input);
                else
                bbdesigner$div.append(bbdesigner$input).append(bbdesigner$span);
                bbdesigner$tr.append(bbdesigner$th.append(bbdesigner$div));
                if (column == this.model.scrollSettings.frozenColumns - 1) {
                    bbdesigner$trClone = bbdesigner$tr.clone();
                    bbdesigner$headerTable.find("thead").first().append(bbdesigner$trClone);
                    bbdesigner$tr.empty();
                }
            }
            bbdesigner$headerTable.find("thead").last().append(bbdesigner$tr);
			if (BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version < 10) {
                var filterBarCell = bbdesigner$headerTable.find("thead").find(".e-ejinputtext.e-filtertext");
                for (var cell = 0; cell < filterBarCell.length; cell++)
                    BoldBIDashboard.ieClearRemover(filterBarCell[cell]);
            }
            this.setGridFilterBar(bbdesigner$tr);
        },
        _renderFilterBarTemplate: function () {
            var args, temp1, temp2,flag = false;
            for (var count = 0 ; count < this.model.columns.length; count++) {
                if (this.model.columns[count]["allowFiltering"] != false && !BoldBIDashboard.isNullOrUndefined(this.model.columns[count].filterBarTemplate)) {
                    temp1 = this.model.columns[count].filterBarTemplate.read;
                    if (typeof temp1 == "string")
                        temp1 = BoldBIDashboard.util.getObject(temp1, window);
                    args = { element: this.getHeaderTable().find('.e-filterbar').find('.e-fltrtemp').find("#" + this.model.columns[count].field + "_filterBarcell"), columIndex: count, column: this.model.columns[count] }
                    if (typeof args.column.filterBarTemplate.read == "string")
                        args.column.filterBarTemplate.read = temp1;
                    temp2 = this.model.columns[count].filterBarTemplate.write;
                    if (typeof temp2 == "string")
                        temp2 = BoldBIDashboard.util.getObject(temp2, window);
                    temp2.call(this, args);
					flag = true
                }
            }
			if(flag)
            this.model.filterSettings.filterBarMode = BoldBIDashboard.Grid.FilterBarMode.OnEnter;
        },
        _closeFilterDlg: function () {
            if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$("#" + this._id + "_" + this._bbdesigner$colType + "Dlg").data('BoldBIDashboardDialog')))
                bbdesigner$("#" + this._id + "_" + this._bbdesigner$colType + "Dlg").BoldBIDashboardDialog('close');
            else
                bbdesigner$("#" + this._id + "_" + this._bbdesigner$colType + "Dlg").css('display', 'none');
            this._bbdesigner$fDlgIsOpen = false;
            this._bbdesigner$menuDlgIsOpen = false;
        },
        _filterBarClose: function (e) {
            var bbdesigner$target = bbdesigner$(e.target);
            if (bbdesigner$target.closest(".e-grid").attr("id") !== this._id)
                return;
            if (e.type == "click" && bbdesigner$target.hasClass("e-cancel")) {
                var bbdesigner$targetText = bbdesigner$target.prev();
                bbdesigner$targetText.focus().val("");
                bbdesigner$targetText.trigger("keyup");
                e.stopPropagation();
            }
            if (e.type == "focusin" && bbdesigner$target.hasClass("e-filtertext")) {
                bbdesigner$target = bbdesigner$(e.target).next();
                this.getFilterBar().find(".e-cancel").addClass("e-hide");
                bbdesigner$target.removeClass("e-hide");
            }
        },
        _processFilter: function (e) {
            if (!this._alreadyFilterProcessed) {
                this._alreadyFilterProcessed = true;
                this._startTimer(e);
            } else {
                this._stopTimer();
                this._startTimer(e);
            }
        },
        _startTimer: function (e) {
            var proxy = this;
            var delay = e.keyCode == 13 ? 0 : proxy.model.filterSettings.immediateModeDelay;
            this._timer = window.setTimeout(
                function () {
                    proxy._onTimerTick();
                },
                delay);
        },
        _stopTimer: function () {
            if (this._timer != null)
                window.clearTimeout(this._timer);
        },

        _onTimerTick: function () {
            this.OldfilterValue = this._currentFilterbarValue;
            this._oldFilterColumn = this._currentFilterColumn;
            this.filterValueOldLength = this.filterValueCurrentLength;
            this._findPredicate();
            var result = null;
            var matchcase = this._currentFilterColumn.type == "string" ? false : true;            
            var collection = bbdesigner$.extend([], this.model.filterSettings.filteredColumns);
            for (var i = 0; i < collection.length; i++) {
                if (this.getHeaderContent().find(".e-filterbar #" + collection[i].field + "_filterBarcell").val() == "") {
                        if (bbdesigner$.inArray(this.model.filterSettings.filteredColumns[i], this.filterColumnCollection) != -1)
                            this.filterColumnCollection.splice(i, 1);
                        this.model.filterSettings.filteredColumns.splice(i, 1);
                }
            }
			if (this._currentFilterColumn.type == "date" || this._currentFilterColumn.type == "datetime") {
                for (var j = 0; j < this.model.filterSettings.filteredColumns.length; j++) {
                    if (this.model.filterSettings.filteredColumns[j].isComplex) {
                        var preobject = this.model.filterSettings.filteredColumns[j].predicates;
                        if (this.model.filterSettings.filteredColumns.length == 1) {
                           this.model.filterSettings.filteredColumns = preobject;
                        }
                        else {
                            this.model.filterSettings.filteredColumns[j] = preobject[0];
                            this.model.filterSettings.filteredColumns.push(preobject[1]);
                        }
                    }
                }
            }
            if (!this._skipFilterProcess) {
                if (this._currentFilterColumn.foreignKeyValue && this._currentFilterColumn.dataSource && this._currentFilterbarValue != "")
                    this._fltrForeignKeyValue(this._operator, this._currentFilterbarValue, matchcase,
                                              this._currentFilterColumn.dataSource, this._currentFilterColumn.foreignKeyField,
                                              this._currentFilterColumn.foreignKeyValue, this._currentFilterColumn.type);
                else{
						if(BoldBIDashboard.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate))
							this.filterColumn(this._currentFilterColumn.field, this._operator, this._currentFilterbarValue, this._predicate, matchcase);
					}
            }
            else
                this.filterStatusMsg = "Invalid Filter Data";
            if(!this.model.scrollSettings.enableVirtualization && BoldBIDashboard.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate))
				this._showFilterMsg();
            this._stopTimer();
        },

        _findPredicate: function () {
            var _value = this._currentFilterbarValue.replace(/ && /i, " and ").replace(" || ", " or ");
            var _predicateFinder = _value.split(' ');
            this._predicate = "and";
            if (_predicateFinder.length != 0) {
                if (bbdesigner$.isFunction(BoldBIDashboard.Predicate[_predicateFinder[1]])) {
                    this._skipFilterProcess = false;
                    this._predicate = _predicateFinder[1];
                    var valuesArray = _value.split(" " + _predicateFinder[1] + " ");
                    var tempOperator = [];
                    var filterValues = [];
                    for (var i = 0; i < valuesArray.length; i++) {
                        this._validateFilterValue(valuesArray[i]);
                        tempOperator.push(this._operator);
                        if (this._currentFilterColumn.type == "number")
                            filterValues.push(this._currentFilterbarValue);
                        else if (this._currentFilterColumn.type == "string")
                            filterValues.push(valuesArray[i]);
                    }
                    this._currentFilterbarValue = filterValues;
                    this._operator = tempOperator;
                } else
                    this._validateFilterValue(bbdesigner$.trim(this._currentFilterbarValue));
            } else
                this._validateFilterValue(bbdesigner$.trim(this._currentFilterbarValue));
        },

        _validateFilterValue: function (_value) {
            switch (this._currentFilterColumn.type) {
                case "number":
                    this._operator = BoldBIDashboard.FilterOperators.equal;
                    var stringSkipInput = new Array(">", "<", "=", "!");
                    for (var i = 0; i < _value.length; i++) {
                        if (bbdesigner$.inArray(_value[i], stringSkipInput) != -1) {
                            break;
                        }
                    }
                    if (i != _value.length) {
                        this._getOperator(_value.substring(i));
                        if (i != 0)
                            this._currentFilterbarValue = _value.substring(0, i);
                    }
                    if (this._currentFilterbarValue != "" && _value.length >= 1)
                        this._currentFilterbarValue = BoldBIDashboard.parseFloat(this._currentFilterbarValue, this.model.locale);
                    else
                        this._currentFilterbarValue = _value.length > 1 ? BoldBIDashboard.parseFloat(_value, this.model.locale) : _value;
                    break;
                case "date":
                case "datetime":
                    this._operator = BoldBIDashboard.FilterOperators.equal;
                    this._getOperator(_value);
                    var _format;
                    if (BoldBIDashboard.isNullOrUndefined(this._currentFilterColumn.format)) {
                        if (this._currentFilterColumn.type == "date")
                            _format = BoldBIDashboard.preferredCulture().calendar.patterns.d; //System Date format
                        else
                            _format = BoldBIDashboard.preferredCulture().calendar.patterns.f; //System DateTime format
                    }
                    else
                        _format = this._currentFilterColumn.format.replace("{0:","").replace('}', "");
                    if (this._currentFilterbarValue != "") {
                        var filterbarValue = BoldBIDashboard.parseDate(this._currentFilterbarValue, _format, this.model.locale);
                        if (!BoldBIDashboard.isNullOrUndefined(filterbarValue))
                            this._currentFilterbarValue = BoldBIDashboard.parseDate(this._currentFilterbarValue, _format, this.model.locale);
                        else
                            this.filterStatusMsg = "Invalid Filter Data";
                    }
                    break;
                case "string":
                    if (_value.charAt(0) == '*') {
                        this._currentFilterbarValue = this._currentFilterbarValue.slice(1);
                        this._operator = BoldBIDashboard.FilterOperators.startsWith;
                    }
                    else if (_value.charAt(_value.length - 1) == '%') {
                        this._currentFilterbarValue = this._currentFilterbarValue.slice(0, -1);
                        this._operator = BoldBIDashboard.FilterOperators.startsWith;
                    }
                    else if (_value.charAt(0) == '%') {
                        this._currentFilterbarValue = this._currentFilterbarValue.slice(1);
                        this._operator = BoldBIDashboard.FilterOperators.endsWith;
                    }
                    else
                        this._operator = BoldBIDashboard.FilterOperators.startsWith;
                    break;
                case "boolean":
                    if (this._currentFilterbarValue.toLowerCase() == "true" || this._currentFilterbarValue == "1")
                        this._currentFilterbarValue = true;
                    else if (this._currentFilterbarValue.toLowerCase() == "false" || this._currentFilterbarValue == "0")
                        this._currentFilterbarValue = false;
                    this._operator = BoldBIDashboard.FilterOperators.equal;
                    break;
                default:
                    this._operator = BoldBIDashboard.FilterOperators.equal;
            }
        },
        _getOperator: function (_value) {
            if (_value.charAt(0) == "=") {
                this._operator = BoldBIDashboard.FilterOperators.equal;
                this._currentFilterbarValue = _value.substring(1);
            }
            if (BoldBIDashboard.data.operatorSymbols[_value.charAt(0)] !== undefined || BoldBIDashboard.data.operatorSymbols[_value.slice(0, 2)] !== undefined) {
                this._operator = BoldBIDashboard.data.operatorSymbols[_value.charAt(0)];
                this._currentFilterbarValue = _value.substring(1);
                if (this._operator === undefined) {
                    this._operator = BoldBIDashboard.data.operatorSymbols[_value.slice(0, 2)];
                    this._currentFilterbarValue = _value.substring(2);
                }
            }
            if (this._operator == BoldBIDashboard.FilterOperators.lessThan || this._operator == BoldBIDashboard.FilterOperators.greaterThan) {
                if (this._currentFilterbarValue.charAt(0) == "=") {
                    this._operator = this._operator + "orequal";
                    this._currentFilterbarValue = this._currentFilterbarValue.substring(1);
                }
            }

        },

        _checkForSkipInput: function () {
            var isSkip = false;
            var skipInput = new Array("=", " ", "!");
            var context = this;
            if (this._currentFilterColumn.type == "number") {
                if (BoldBIDashboard.data.operatorSymbols[this._currentFilterbarValue] !== undefined || bbdesigner$.inArray(this._currentFilterbarValue, skipInput) != -1)
                    isSkip = true;
            }
            if (this._currentFilterColumn.type == "string") {
                var stringSkipInput = new Array(">", "<", "=", "!");
                for (var i = 0; i < this._currentFilterbarValue.length; i++) {
                    if (bbdesigner$.inArray(this._currentFilterbarValue[i], stringSkipInput) != -1)
                        isSkip = true;
                }
            }
            return isSkip;
        },
        _showFilterMsg: function () {
            var index = bbdesigner$.inArray(this._currentFilterColumn, this.filterColumnCollection);
            if (this._currentFilterbarValue !== "" && index == -1)
                this.filterColumnCollection.push(this._currentFilterColumn);
            if (this._currentFilterbarValue === "" && index != -1) {
                this.filterColumnCollection.splice(index, 1);
            }
            if ((!this._skipFilterProcess || this.filterColumnCollection.length > 0) && this.filterStatusMsg != "Invalid Filter Data") {
                for (var index = 0; index < this.filterColumnCollection.length; index++) {
                    var val, filterColumnName, hTxt = this.filterColumnCollection[index].headerText;
                    if (this.filterColumnCollection[index].disableHtmlEncode)
                        hTxt = this._htmlEscape(hTxt);
                    if (this.filterColumnCollection[index].field.indexOf('.') != -1) {
                        var spltClmn = (this.filterColumnCollection[index].field).split(".");
                        filterColumnName = spltClmn.join("\\.");
                        val = bbdesigner$("#" + filterColumnName + "_filterBarcell").val();
                    }
                    else
                       	 { 
							if(this._currentFilterColumn.type == "boolean" && !BoldBIDashboard.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate) && this.element.find("#" + this.filterColumnCollection[index].field + "_filterBarcell").hasClass('e-checkbox e-js')) 
								val = this.element.find("#" + this.filterColumnCollection[index].field + "_filterBarcell").parent().attr('aria-checked');
							else
								val = this.element.find("#" + this.filterColumnCollection[index].field + "_filterBarcell").val();
						}	   
                    if (val != "") {
                        if (index > 0 && this.filterStatusMsg != "")
                            this.filterStatusMsg += " && ";
                        this.filterStatusMsg += hTxt + ": " + val;
                    }
                }
            }

            if (this.model.allowPaging)
                this.getPager().BoldBIDashboardPager("model.externalMessage", this.filterStatusMsg);
            else {
                if (this.model.scrollSettings.allowVirtualScrolling)
                    this.bbdesigner$pagerStatusBarDiv.find(".e-pagerfiltermsg").html(this.filterStatusMsg).css("display", "block");
                else
                    this.bbdesigner$pagerStatusBarDiv.find("div").html(this.filterStatusMsg);
                if (this.filterStatusMsg.length)
                    this.bbdesigner$pagerStatusBarDiv.css("display", "block");
                else
                    this.model.scrollSettings.allowVirtualScrolling ? this.bbdesigner$pagerStatusBarDiv.find(".e-pagerfiltermsg").hide() : this.bbdesigner$pagerStatusBarDiv.hide();
            }
            if (this.filterStatusMsg == "Invalid Filter Data") {
                index = bbdesigner$.inArray(this._currentFilterColumn, this.filterColumnCollection);
                this.filterColumnCollection.splice(index, 1);
            }
            this.filterStatusMsg = "";
        },
        _renderFilterDialogs: function () {
            var bbdesigner$strDlg, bbdesigner$numDlg, bbdesigner$boolDlg, bbdesigner$dateDlg, bbdesigner$datetimeDlg,bbdesigner$guidDlg;

            bbdesigner$.each(this.model.columns, BoldBIDashboard.proxy(function (indx, col) {
                if (col.type == "string" && (!bbdesigner$strDlg || !BoldBIDashboard.isNullOrUndefined(col.filterType))) {
                    if (BoldBIDashboard.isNullOrUndefined(col.filterType))
                        bbdesigner$strDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "guid" && (!bbdesigner$guidDlg || !BoldBIDashboard.isNullOrUndefined(col.filterType))) {
                    if (BoldBIDashboard.isNullOrUndefined(col.filterType))
                        bbdesigner$guidDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "number" && (!bbdesigner$numDlg || !BoldBIDashboard.isNullOrUndefined(col.filterType))) {
                    if (BoldBIDashboard.isNullOrUndefined(col.filterType))
                        bbdesigner$numDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "date" && (!bbdesigner$dateDlg || !BoldBIDashboard.isNullOrUndefined(col.filterType))) {
                    if (BoldBIDashboard.isNullOrUndefined(col.filterType))
                        bbdesigner$dateDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "datetime" && (!bbdesigner$datetimeDlg || !BoldBIDashboard.isNullOrUndefined(col.filterType))) {
                    if (BoldBIDashboard.isNullOrUndefined(col.filterType))
                        bbdesigner$datetimeDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "boolean" && (!bbdesigner$boolDlg || !BoldBIDashboard.isNullOrUndefined(col.filterType))) {
                    if (BoldBIDashboard.isNullOrUndefined(col.filterType))
                        bbdesigner$boolDlg = true;
                    this._renderFilters(col);
                }
            }, this));
        },
        _renderFilters: function (col) {
            if ((this._isExcelFilter && col.filterType != "menu") || col.filterType == "excel") {
                if (BoldBIDashboard.isNullOrUndefined(this._excelFilter)) {
                    this._renderExcelFilter();
                    this._excelFilterRendered = true;
                }
                this._excelFilter.renderDialog(col.type);
            }
            else
                eval(this["_render" + col.type.substring(0, 1).toUpperCase() + col.type.substring(1) + "Dialog"](col));
        },
        _renderStringDialog: function () {
            var bbdesigner$id = this._id + "_stringDlg";
            if (bbdesigner$("#" + bbdesigner$id).length > 0) return;
            var bbdesigner$content = BoldBIDashboard.buildTag("div#" + bbdesigner$id + ".e-dlgcontainer e-filterDialoge");
            bbdesigner$content.appendTo("body");
            this._renderDlgContent(bbdesigner$content, "string");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog(bbdesigner$id);
        },
        _renderBooleanDialog: function () {
            var bbdesigner$id = this._id + "_booleanDlg";
            if (bbdesigner$("#" + bbdesigner$id).length > 0) return;
            var bbdesigner$content = BoldBIDashboard.buildTag("div#" + bbdesigner$id + ".e-dlgcontainer e-filterDialoge");
            bbdesigner$content.appendTo("body");
            this._renderDlgContent(bbdesigner$content, "boolean");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog(bbdesigner$id);
            if (!this.model.filterSettings.showPredicate)
                bbdesigner$("#" + bbdesigner$id).BoldBIDashboardDialog({ minHeight: 90, width: "100%" });
            else
                bbdesigner$("#" + bbdesigner$id).BoldBIDashboardDialog({ minHeight: 136, width: "100%" });
        },
		 _renderGuidDialog: function () {
            var bbdesigner$id = this._id + "_guidDlg";
            if (bbdesigner$("#" + bbdesigner$id).length > 0) return;
            var bbdesigner$content = BoldBIDashboard.buildTag("div#" + bbdesigner$id + ".e-dlgcontainer e-filterDialoge");
            bbdesigner$content.appendTo("body");
            this._renderDlgContent(bbdesigner$content, "guid");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog(bbdesigner$id);
        },
        _renderNumberDialog: function () {
            var bbdesigner$id = this._id + "_numberDlg";
            if (bbdesigner$("#" + bbdesigner$id).length > 0) return;
            var bbdesigner$content = BoldBIDashboard.buildTag("div#" + bbdesigner$id + ".e-dlgcontainer e-filterDialoge");
            bbdesigner$content.appendTo("body");
            this._renderDlgContent(bbdesigner$content, "number");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog(bbdesigner$id);
        },
        _renderDateDialog: function (col) {
            var bbdesigner$id = this._id + "_dateDlg";
            if (bbdesigner$("#" + bbdesigner$id).length > 0) return;
            var bbdesigner$content = BoldBIDashboard.buildTag("div#" + bbdesigner$id + ".e-dlgcontainer e-filterDialoge");
            bbdesigner$content.appendTo("body");
            this._renderDlgContent(bbdesigner$content, "date", col);
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog(bbdesigner$id);
        },
        _renderDatetimeDialog: function (col) {
            var bbdesigner$id = this._id + "_datetimeDlg";
            if (bbdesigner$("#" + bbdesigner$id).length > 0) return;
            var bbdesigner$content = BoldBIDashboard.buildTag("div#" + bbdesigner$id + ".e-dlgcontainer e-filterDialoge");
            bbdesigner$content.appendTo("body");
            this._renderDlgContent(bbdesigner$content, "datetime", col);
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog(bbdesigner$id);
        },
        _renderFDialog: function (id) {
            bbdesigner$("#" + id).BoldBIDashboardDialog({ showOnInit: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, "showHeader": false, width: 260, enableResize: false, allowKeyboardNavigation: false, content: "#" + this._id });
        },
        _closeFDialog: function () {
            if (this._isExcelFilter || this._excelFilterRendered)
                if (!BoldBIDashboard.isNullOrUndefined(this._excelFilter)) {
                    this._excelFilter.closeXFDialog();
                }
            if (this._bbdesigner$menuDlgIsOpen)
                this._closeFilterDlg();
        },
        _renderDlgContent: function (content, type, col) {
            content.addClass("e-grid");
            var bbdesigner$predicate = BoldBIDashboard.buildTag("div.e-predicate"), bbdesigner$operator = BoldBIDashboard.buildTag("div.e-operator"), bbdesigner$value = BoldBIDashboard.buildTag("div.e-value");
            var bbdesigner$strOp = this.localizedLabels.StringMenuOptions;
            var bbdesigner$numOp = this.localizedLabels.NumberMenuOptions;
            var bbdesigner$drdown = BoldBIDashboard.buildTag("input#" + this._id + type + "_ddinput", {}, {}, { "type": "text" });
            var bbdesigner$drdownDiv = BoldBIDashboard.buildTag("div#" + this._id + type + "_dropdown");
            var bbdesigner$drdownUl = BoldBIDashboard.buildTag("ul");
            var bbdesigner$radio = BoldBIDashboard.buildTag("input", {}, {}, { "type": "radio", "name": this._id + "_predicate" + type, "value": "or" });
            var bbdesigner$andRadio = BoldBIDashboard.buildTag("input", {}, {}, { "type": "radio", "name": this._id + "_predicate" + type, "value": "and", "checked": "checked" });
            var bbdesigner$cbox;
            bbdesigner$predicate.append(bbdesigner$andRadio)
                .append(BoldBIDashboard.buildTag("span.e-caption").html(this.localizedLabels.PredicateAnd))
                .append(bbdesigner$radio)
                .append(BoldBIDashboard.buildTag("span.e-caption").html(this.localizedLabels.PredicateOr));
            !this.model.filterSettings.showPredicate && bbdesigner$predicate.hide();
            if (type == "string") {
                bbdesigner$cbox = BoldBIDashboard.buildTag("input", {}, {}, { "type": "checkbox" });
                bbdesigner$predicate.append(bbdesigner$cbox)
                    .append(BoldBIDashboard.buildTag("span.e-caption").html(this.localizedLabels.MatchCase));
                bbdesigner$.each(bbdesigner$strOp, function (indx, operator) {
                    bbdesigner$drdownUl.append(BoldBIDashboard.buildTag("li", {}, {}, { "value": operator.value }).html(operator.text));
                });
            }
            if (type == "number" || type == "date" || type == "datetime"|| type == "guid" ) {
                if(type=="guid")
                bbdesigner$numOp = bbdesigner$numOp.slice(4,6);
                bbdesigner$.each(bbdesigner$numOp, function (indx, operator) {
                bbdesigner$drdownUl.append(BoldBIDashboard.buildTag("li", {}, {}, { "value": operator.value }).html(operator.text));
                });
            }
            if (type != "boolean") {
                bbdesigner$drdownDiv.append(bbdesigner$drdownUl);
                bbdesigner$operator.append(bbdesigner$drdown);
                bbdesigner$operator.append(bbdesigner$drdownDiv);
            }
            var bbdesigner$tBox = BoldBIDashboard.buildTag("input", {}, {}, { "type": "text" });
            var bbdesigner$tchkBox = BoldBIDashboard.buildTag("input", {}, {}, { "type": "checkbox" });
            var filterVal = this.model.enableResponsiveRow ? 'OkButton' : 'Filter';
            var clearVal = this.model.enableResponsiveRow ? 'CancelButton' : 'Clear';
            var bbdesigner$filter = BoldBIDashboard.buildTag("input.e-filter bbi-dbrd-btn-small bbi-dbrd-btn-primary", {}, {}, { "type": "button", "value":this.localizedLabels[filterVal] });
            var bbdesigner$clear = BoldBIDashboard.buildTag("input.e-clear bbi-dbrd-btn-small bbi-dbrd-btn-secondary", {}, {}, { "type": "button", "value": this.localizedLabels[clearVal] });
            bbdesigner$value.append(BoldBIDashboard.buildTag("span.e-caption").html(this.localizedLabels.FilterMenuCaption + " : "));
            content.append(bbdesigner$predicate);
            if (type == "boolean") {
                bbdesigner$value.find("span.e-caption").css("top","1px");
                bbdesigner$value.append(bbdesigner$tchkBox);
            }
            else {
                bbdesigner$value.append(BoldBIDashboard.buildTag("br")).append(bbdesigner$tBox);
                content.append(bbdesigner$operator);
            }
            content.append(bbdesigner$value);
            content.append(BoldBIDashboard.buildTag("div.e-dlgBtns").append(bbdesigner$filter)
                .append(bbdesigner$clear));
            if (type != "boolean")
                bbdesigner$drdown.BoldBIDashboardDropDownList({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "targetID": this._id + type + "_dropdown", width: "100%", height: "26px", selectedItemIndex: 0 });
            bbdesigner$radio.BoldBIDashboardRadioButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            bbdesigner$andRadio.BoldBIDashboardRadioButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, checked: true });
            if (bbdesigner$cbox)
                bbdesigner$cbox.BoldBIDashboardCheckBox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            content.css("display", "none");
            this._createButton("filter", bbdesigner$filter);
            this._createButton("clear", bbdesigner$clear);
            if (type == "number")
                bbdesigner$tBox.ejNumericTextbox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "value": 0, showSpinButton: false, height: "26px", decimalPlaces: 2, width: "100%" });
            else if (type == "guid" )
                bbdesigner$tBox.css({  "height": "26px", "width": "100%" });
			else if (type == "date") {
                bbdesigner$tBox.attr("id", this._id + "_dpDate")
                bbdesigner$tBox.BoldBIDashboardDatePicker({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, enableStrictMode: true, width: "100%", watermarkText: this.localizedLabels.DatePickerWaterMark, locale: this.model.locale });
                if (!BoldBIDashboard.isNullOrUndefined(col.format))
                    bbdesigner$tBox.BoldBIDashboardDatePicker({ dateFormat: col.format.replace(/{0:|}/g, function () { return "" }) });
            }
			else if (type == "datetime") {
			    bbdesigner$tBox.attr("id", this._id + "_dpDateTime")
			    bbdesigner$tBox.BoldBIDashboardDateTimePicker({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, enableStrictMode: true, width: "100%", locale: this.model.locale });
			    if (!BoldBIDashboard.isNullOrUndefined(col.format))
			        bbdesigner$tBox.BoldBIDashboardDateTimePicker({ dateTimeFormat: col.format.replace(/{0:|}/g, function () { return "" }) });
			}
			else if (type == "boolean")
                bbdesigner$tchkBox.BoldBIDashboardCheckBox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            else if (type == "string") {
                bbdesigner$tBox.attr("id", this._id + "_acString");
                bbdesigner$tBox.BoldBIDashboardAutocomplete({
                    "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "dataSource": this._dataSource(), width: "100%", height: 26, enableDistinct: true, focusIn: function (args) {
                        var bbdesigner$dropdown = this.element.closest(".e-dialog").find(".e-dropdownlist");
                        var bbdesigner$matchcase = this.element.closest(".e-dialog").find(".e-checkbox").prop("checked");
                        this.model.filterType = bbdesigner$dropdown.BoldBIDashboardDropDownList("model.value");
                        this.model.caseSensitiveSearch = bbdesigner$matchcase;
                    },
                    open: function (args) {
                        var doped = !this.element.closest(".e-dialog").BoldBIDashboardDialog("isOpened")
                        this.suggestionList.css({ visibility: (doped ? "hidden" : "visible") });
                    }
                    
                });
            }
        },
        _createButton: function (name, element) {
            var bbdesigner$func = name == "filter" ? BoldBIDashboard.proxy(this._fltrBtnHandler, this) : BoldBIDashboard.proxy(this._fltrClrHandler, this);
            element.BoldBIDashboardButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "click": bbdesigner$func });
        },
        _getIdField: function () {
            var bbdesigner$key;
            bbdesigner$.each(this.model.columns, function (indx, col) {
                if (col.key) {
                    bbdesigner$key = col.field;
                    return false;
                }
            });
            return bbdesigner$key;
        },
        _filterCompleteAction: function () {
            if (this.model.allowPaging)
                this._refreshGridPager();
            if (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) {
                this._closeFDialog();
                var column = this.getColumnByField(this._bbdesigner$curFieldName);
                var index = bbdesigner$.inArray(column, this.model.columns), proxy = this, _addicon = false;
                bbdesigner$.each(this.model.filterSettings.filteredColumns, function (indx, col) {
                    if (col.field == proxy._bbdesigner$curFieldName) {
                        _addicon = true;
                        return false;
                    }
                    else if (col.isComplex == true) {
                        if (col.predicates[0].field == proxy._bbdesigner$curFieldName) {
                            _addicon = true;
                            return false;
                        }
                    }
                });
                var bbdesigner$fIcon = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell").eq(index).find(".e-filtericon");
                if (_addicon)
                    bbdesigner$fIcon.addClass("e-filteredicon e-filternone");
                else
                    bbdesigner$fIcon.removeClass("e-filteredicon e-filternone");
            }
        },
        _refreshFilterIcon: function () {
            if (!this.model.filterSettings.filteredColumns.length)
                return;
            var filteredCols = BoldBIDashboard.distinct(this.model.filterSettings.filteredColumns, "field", true), _bbdesigner$headerCells = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell"), index, col;
            if (this.model.showStackedHeader)
                _bbdesigner$headerCells = _bbdesigner$headerCells.not(".e-stackedHeaderCell");
            if (this.model.allowReordering)
                _bbdesigner$headerCells.find(".e-filtericon").removeClass("e-filteredicon e-filternone");
            for (var i = 0, flen = filteredCols.length; i < flen; i++) {
                col = filteredCols[i]
                index = this.getColumnIndexByField(col.isComplex === true? col.predicates[0].field : col.field);
                _bbdesigner$headerCells.eq(index).find(".e-filtericon").addClass("e-filteredicon e-filternone");
            }
        },
        _setFilterFieldValues: function (id) {
            var bbdesigner$fVal = "", proxy = this;
            var flchk = -1, optr;
            bbdesigner$.each(this.model.filterSettings.filteredColumns, function (indx, value) {
                if (value.field == proxy._bbdesigner$curFieldName)
                    flchk = indx;
            });
            if (flchk == -1 && this._bbdesigner$colType != "boolean") {
                if (this._bbdesigner$colType == "string") {
                    bbdesigner$(".e-predicate input.e-js[type='checkbox']").BoldBIDashboardCheckBox({
                        checked: false
                    });
                }
                bbdesigner$(".e-predicate input[name =" + this._id + "_predicate" + this._bbdesigner$colType + "]:first").BoldBIDashboardRadioButton({ checked: true });
                bbdesigner$("#" + this._id + this._bbdesigner$colType + "_ddinput").BoldBIDashboardDropDownList({
                    selectedItemIndex: 0, change: function (args) {
                        this.element.closest(".e-dialog").find(".e-autocomplete").val(bbdesigner$fVal);
                    }
                });
            }
            var filteredFields = bbdesigner$(this.model.filterSettings.filteredColumns).map(function () {
                return this.field;
            }).get();
            if (this._bbdesigner$curFieldName != this._bbdesigner$prevFieldName || bbdesigner$.inArray(this._bbdesigner$curFieldName, filteredFields) != -1) {
                bbdesigner$.each(this.model.filterSettings.filteredColumns, function (indx, col) {
                    if (col.field == proxy._bbdesigner$curFieldName) {
                        var index;
                        var option = proxy._bbdesigner$colType == "number" || proxy._bbdesigner$colType == "date" || proxy._bbdesigner$colType == "datetime" ? "Number" : "String";
                        var bbdesigner$dlist = proxy.localizedLabels[option + "MenuOptions"];                        
                        var optr = BoldBIDashboard.isNullOrUndefined(col.actualOperator) ? col.operator : col.actualOperator
                        for (index = 0; index < bbdesigner$dlist.length; index++) {
                            if (bbdesigner$dlist[index].value.toLowerCase() == optr)
                                break;
                        }
                        if (proxy._bbdesigner$colType == "string")
                            bbdesigner$(".e-predicate input.e-js[type='checkbox']").BoldBIDashboardCheckBox({ checked: col.matchcase });
                        bbdesigner$("input[value=" + col.predicate + "]").BoldBIDashboardRadioButton({ checked: true });
                        bbdesigner$("#" + proxy._id + proxy._bbdesigner$colType + "_ddinput").BoldBIDashboardDropDownList({ selectedItemIndex: index });
                        bbdesigner$fVal = col.actualFilterValue != null ? col.actualFilterValue : col.value;
                        return false;
                    }
                });
                if (this._bbdesigner$colType == "boolean") {
                    if (bbdesigner$fVal && bbdesigner$fVal != "")
                        bbdesigner$(id).find(".e-value input").attr("checked", true);
                    else
                        bbdesigner$(id).find(".e-value input").attr("checked", false);
                } else if (this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime") {
                    bbdesigner$(id).find(".e-value .e-datepicker")[this._bbdesigner$colType == "date" ? "BoldBIDashboardDatePicker" : "BoldBIDashboardDateTimePicker"]("model.value", bbdesigner$fVal);
                } else if(this._bbdesigner$colType == "number"){
					bbdesigner$(id).find(".e-value .e-numerictextbox").ejNumericTextbox("model.value", bbdesigner$fVal);
				} else
                    bbdesigner$(id).find(".e-value input").val(bbdesigner$fVal);
            }
        },
        _fltrBtnHandler: function (e) {
            var id = this._id + "_" + this._bbdesigner$colType + "Dlg";
            var bbdesigner$par = bbdesigner$("#" + id);
            var bbdesigner$input = bbdesigner$par.find(".e-value input"), bbdesigner$operator, result, predicateEle;
            var value = bbdesigner$input.val(), matchcase = undefined, filterValue;
            if (this._bbdesigner$colType == "number") {
                bbdesigner$input = bbdesigner$input.filter(".e-numerictextbox");
                value = parseFloat(bbdesigner$input.ejNumericTextbox("getValue"));
                matchcase = true;
            }
            if (this._bbdesigner$colType == "string")
                matchcase = bbdesigner$par.find(".e-predicate input[type='checkbox']").is(":checked");
            if (this._bbdesigner$colType == "date" || this._bbdesigner$colType == "datetime") {
                value = BoldBIDashboard.parseDate(value, this._bbdesigner$colFormat, this.model.locale);
                matchcase = true;
            }
            if (this._bbdesigner$colType == "boolean") {
                value = bbdesigner$input.BoldBIDashboardCheckBox("model.checked") != null ? bbdesigner$input.BoldBIDashboardCheckBox("model.checked") : false;
                bbdesigner$operator = "equal";
            } else
                bbdesigner$operator = bbdesigner$("#" + this._id + this._bbdesigner$colType + "_ddinput").BoldBIDashboardDropDownList("getSelectedValue").toLowerCase();
            predicateEle = bbdesigner$par.find(".e-predicate input[type='radio']:checked");
            if (this._bbdesigner$colForeignKeyValue && this._bbdesigner$colDropdownData)
                this._fltrForeignKeyValue(bbdesigner$operator, value, matchcase, this._bbdesigner$colDropdownData, this._bbdesigner$colForeignKeyField, this._bbdesigner$colForeignKeyValue, this._bbdesigner$colType, predicateEle);
            else
                this.filterColumn(this._bbdesigner$curFieldName, bbdesigner$operator, value, bbdesigner$par.find(".e-predicate input[type='radio']:checked").attr("value"), matchcase);
            if (this.model.isResponsive) {
                bbdesigner$par.css('display', 'none');
                this._setResponsiveFilterIcon();
                this.element.css('display', 'block');
                if (this.model.allowScrolling && (!this.model.enableResponsiveRow || !this.model.minWidth)) {
                    var args = {};
                    args.requestType = 'refresh';
                    this._refreshScroller(args);
                }
            }
        },
        _fltrClrHandler: function (e) {                        
			this.clearFiltering(this._bbdesigner$curFieldName);
        },

        _fltrForeignKeyValue: function (operator, value, matchcase, dataSource, fieldName, mapFieldName, colType, predicateEle) {
            if (BoldBIDashboard.isNullOrUndefined(matchcase))
                matchcase = true;
            var operatorCol = [], predicateCol = [], query, filterValue, visible = predicateEle ? predicateEle.css("display") == "none" : true, condition = predicateEle ? predicateEle.attr("value") : "and", predicate;
            var data = dataSource, val;
            if (!(dataSource instanceof BoldBIDashboard.DataManager))
                data = new BoldBIDashboard.DataManager(dataSource);
            if (colType == "date") {
                var bbdesigner$prevDate = new Date(value.setDate(value.getDate() - 1));
                var bbdesigner$nextDate = new Date(value.setDate(value.getDate() + 2));
                if (operator == "equal" || operator == "notequal") {
                    if (operator == "equal")
                        query = new BoldBIDashboard.Query().where(BoldBIDashboard.Predicate(mapFieldName, ">", bbdesigner$prevDate, !matchcase)
                            .and(mapFieldName, "<", bbdesigner$nextDate, !matchcase)).select(fieldName);
                    else
                        query = new BoldBIDashboard.Query().where(BoldBIDashboard.Predicate(mapFieldName, "<=", bbdesigner$prevDate, !matchcase)
                           .or(mapFieldName, ">=", bbdesigner$nextDate, !matchcase)).select(fieldName);
                }
                else
                    query = new BoldBIDashboard.Query().where(mapFieldName, operator, value, !matchcase).select(fieldName);
            }
            else
                query = new BoldBIDashboard.Query().where(mapFieldName, operator, value, !matchcase).select(fieldName);
            filterValue = { actualFilterValue: value, actualOperator: operator, ejpredicate: undefined, predicate: condition };
            data.executeQuery(query).done(BoldBIDashboard.proxy(function (e) {
                val = e.result, requireProc = bbdesigner$.isPlainObject(val[0]), preds = [], merge = false, val = requireProc ? BoldBIDashboard.distinct(val, fieldName, false) : val, field = this._bbdesigner$curFieldName;
                predicate = new BoldBIDashboard.Predicate(field, "equal", val[0], matchcase);
                for (i = 1, vlen = val.length; i < vlen; i++) {
                    preds.push(new BoldBIDashboard.Predicate(field, "equal", val[i], matchcase));
                    merge = true;
                }
                if (merge) {
                    preds.unshift(predicate);
                    predicate = BoldBIDashboard.Predicate.or(preds); /*ensure same level for multiple predicates*/
                }
                bbdesigner$.extend(filterValue, { ejpredicate: bbdesigner$.extend(predicate, { field: field }, filterValue) });
                this.filterColumn(field, operator, value, predicateCol, matchcase, filterValue);
            }, this));
        },
        _setDateFilters: function (filterObject, forGrouping) {
            var bbdesigner$prevDate, bbdesigner$nextDate;
            if (!forGrouping && !BoldBIDashboard.isNullOrUndefined(this.getColumnByField(filterObject.field).format)) {
                var formatString = this.getColumnByField(filterObject.field).format;
                if (formatString.indexOf("s") != -1) {
                    bbdesigner$prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
                    bbdesigner$nextDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() + 2));
                }
                else if (formatString.indexOf("m") != -1) {
                    bbdesigner$prevDate = new Date(filterObject.value.setMinutes(filterObject.value.getMinutes() - 1));
                    bbdesigner$nextDate = new Date(filterObject.value.setMinutes(filterObject.value.getMinutes() + 2));
                }
                else if (formatString.indexOf("h") != -1) {
                    bbdesigner$prevDate = new Date(filterObject.value.setHours(filterObject.value.getHours() - 1));
                    bbdesigner$nextDate = new Date(filterObject.value.setHours(filterObject.value.getHours() + 2));
                }
                else {
                    bbdesigner$prevDate = new Date(filterObject.value.setDate(filterObject.value.getDate() - 1));
                    bbdesigner$nextDate = new Date(filterObject.value.setDate(filterObject.value.getDate() + 2));
                }
            }
            else {
                bbdesigner$prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
                bbdesigner$nextDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() + 2));
            }
            var bbdesigner$prevObj = bbdesigner$.extend({}, filterObject);
            var bbdesigner$nextObj = bbdesigner$.extend({}, filterObject);
            bbdesigner$prevObj.value = bbdesigner$prevDate;
            bbdesigner$nextObj.value = bbdesigner$nextDate;
            if (filterObject.operator == "equal") {
                bbdesigner$prevObj.operator = "greaterthan";
                bbdesigner$prevObj.predicate = "and";
                bbdesigner$nextObj.operator = "lessthan";
                bbdesigner$nextObj.predicate = "and";
            } else {
                bbdesigner$prevObj.operator = "lessthanorequal";
                bbdesigner$prevObj.predicate = "or";
                bbdesigner$nextObj.operator = "greaterthanorequal";
                bbdesigner$nextObj.predicate = "or";
            }
            pred = BoldBIDashboard.Predicate(bbdesigner$prevObj.field, bbdesigner$prevObj.operator, bbdesigner$prevObj.value, false);
            predicate = pred[bbdesigner$nextObj.predicate](BoldBIDashboard.Predicate(bbdesigner$nextObj.field, bbdesigner$nextObj.operator, bbdesigner$nextObj.value, false));
            filterObject.value = new Date(filterObject.value.setSeconds(bbdesigner$nextObj.value.getSeconds() - 1));
            if (forGrouping)            
                return predicate;            
            else
                this.model.filterSettings.filteredColumns.push(bbdesigner$.extend(predicate, { field: filterObject.field, operator: filterObject.operator }));
        }       
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    BoldBIDashboard.gridFeatures.group = {
        _renderGroupDropArea: function () {
            if(!BoldBIDashboard.isNullOrUndefined(this.model.groupSettings.enableDropAreaAnimation))
                this.model.groupSettings.enableDropAreaAutoSizing = this.model.groupSettings.enableDropAreaAnimation;
            var dragLabel = this.model.groupSettings.enableDropAreaAutoSizing ? "" : this.localizedLabels.GroupDropArea;
            if (this.model.groupSettings.showDropArea) {
                var bbdesigner$div = BoldBIDashboard.buildTag("div.e-groupdroparea", dragLabel);
                this.model.groupSettings.enableDropAreaAutoSizing && bbdesigner$div.append(BoldBIDashboard.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAutoSizing ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
                return bbdesigner$div;
            }
        },
        _getColGroup: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            if (gridObject.model.groupSettings.groupedColumns.length == 1)
                var level = this.data.items.level === undefined ? 0 : this.data.items.level - 1;
            else
                var level = this.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : this.data.items.level - 1;
            var bbdesigner$div = bbdesigner$(document.createElement("div"));
            var bbdesigner$colGroup;
            if (gridObject._isCaptionSummary)
                bbdesigner$colGroup = gridObject._getCaptionColGroup(level);
            else {
                bbdesigner$colGroup = gridObject._getMetaColGroup();
                if (level != gridObject.model.groupSettings.groupedColumns.length && gridObject.model.groupSettings.groupedColumns.length > 1)
                    bbdesigner$colGroup.prepend(gridObject._getIndentCol());
            }
            bbdesigner$div.html(bbdesigner$colGroup);
            return bbdesigner$div.html();
        },
        _colSpanAdjust: function (gridObjectId, type, captionDetails) {
            var gridObject, groupData;
            if (BoldBIDashboard.isNullOrUndefined(gridObjectId)) {
                gridObject = this;
                groupData = captionDetails;
            }
            else {
                gridObject = this.getRsc("helpers", gridObjectId);
                groupData = this;
            }
            if (gridObject.model.groupSettings.groupedColumns.length == 1) {
                var level = groupData.data.items.level === undefined ? 1 : groupData.data.items.level - 1;
                if (type == "groupcaption")
                    gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
            } else {
                var level = groupData.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : groupData.data.items.level - 1;
                if (type == "groupcaption" && groupData.data.items.level === undefined)
                    gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
            }            
            gridObject._isGrouping = true;
            var hideGroupColumnCount = !gridObject.model.groupSettings.showGroupedColumn ? gridObject.model.groupSettings.groupedColumns.length : 0;
            var count = 0;
            bbdesigner$.each(gridObject._hiddenColumnsField, function (indx, col) {
                var tempIndex = bbdesigner$.inArray(col, gridObject.model.groupSettings.groupedColumns);
                if (tempIndex != -1) {
                    count = count + 1;
                    if (gridObject.model.groupSettings.showGroupedColumn)
                        hideGroupColumnCount = hideGroupColumnCount + 1;
                }
            })
            var colspan = gridObject.model.columns.length + gridObject.model.groupSettings.groupedColumns.length - level - gridObject._hiddenColumnsField.length - hideGroupColumnCount + count;
            colspan = (gridObject.model.detailsTemplate != null || gridObject.model.childGrid != null) ? colspan + 1 : colspan;

            if (gridObject._isCaptionSummary && type == "groupcaption") {
                var index = [], cIndex = 0;
                var row = gridObject._captionSummary();
                var hiddenIndexCount = 0, summaryColIndexes = [];
                bbdesigner$.each(row[0].summaryColumns, function (cindx, col) {
                    if (bbdesigner$.inArray(col.displayColumn, gridObject._hiddenColumnsField) != -1)
                        cIndex++;
                    summaryColIndexes.push(gridObject.getColumnIndexByField(col.displayColumn));
                    index.push(gridObject.getColumnIndexByField(col.displayColumn) + gridObject.model.groupSettings.groupedColumns.length - level);
                });
                var sumColIndex = BoldBIDashboard.min(summaryColIndexes)
                for (var i = 0; i < gridObject._hiddenColumnsField.length; i++) {
                    var colIndex = BoldBIDashboard.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i])) ? gridObject.getColumnIndexByHeaderText(gridObject._hiddenColumnsField[i], BoldBIDashboard.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i]))) : gridObject.getColumnIndexByField(gridObject._hiddenColumnsField[i]);
                    if (sumColIndex > colIndex)
                        hiddenIndexCount++;
                }
                if (index.length > 0)
                    colspan = BoldBIDashboard.min(index);
                colspan = colspan - hiddenIndexCount;
                colspan = (gridObject.model.detailsTemplate != null || gridObject.model.childGrid != null) ? colspan + 1 : colspan;
            }
            return colspan;
        },
        _captionEncode: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            var column = gridObject.getColumnByField(this.data.field);
            return column.disableHtmlEncode;
        },
        _captionFormat: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            var keyValue, captionData = this.data;
            var column = gridObject.getColumnByField(captionData.field);
            if (column.foreignKeyValue && column.dataSource)
                keyValue = gridObject._foreignKeyBinding(gridObject.getColumnIndexByField(captionData.field), captionData.key, gridObject._id);
            else
                keyValue = captionData.key;
			if(!BoldBIDashboard.isNullOrUndefined(column.format) && column.format.indexOf("{0:") == -1){
				captionData[captionData.field] = captionData.key;
				gridObject.data = captionData;
			}
            captionData.key = column.format ? gridObject.formatting(column.format, keyValue, gridObject.model.locale) : keyValue;
            captionData.headerText = column.headerText;
            return bbdesigner$.render[gridObject._id + "_CaptionTemplate"](captionData);
        },
        _getCaptionColGroup: function (level) {
            var cloneColGroup = this.getHeaderTable().find("colgroup").clone();
            var colColl = cloneColGroup.find("col");
            var indentCol = colColl.length - this.model.columns.length;
            if (this.model.detailsTemplate != null || this.model.childGrid != null)
                indentCol = indentCol - 1;
            cloneColGroup.find("col:lt(" + indentCol + ")").remove();
            if (level > 0 && level != this.model.groupSettings.groupedColumns.length) {
                if (this.model.groupSettings.groupedColumns.length > 2 && level != this.model.groupSettings.groupedColumns.length - 1) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length - level; i++) {
                        cloneColGroup.prepend(this._getIndentCol());
                    }
                }
                else
                    cloneColGroup.prepend(this._getIndentCol());
            }
            return cloneColGroup;
        },
        _groupSummaryRow: function (item, aggregates, gridObjectId, showGroup) {
            var gridObject = this.getRsc("helpers", gridObjectId), showGroup = !BoldBIDashboard.isNullOrUndefined(showGroup);
            if (gridObject.model.showSummary) {
                if (gridObject.getFooterTable() == null)
                    gridObject._renderGridFooter();
                gridObject._createSummaryRows(gridObject.getFooterTable(), item.records == null ? item : item.records, aggregates, item, showGroup);
                if (gridObject._isCaptionSummary && !showGroup) {
                    var index = [];
                    var row = gridObject._captionSummary();
                    bbdesigner$.each(row[0].summaryColumns, function (cindx, col) {
                        index.push(gridObject.getColumnIndexByField(col.displayColumn));
                    });
                    if (index.length > 0)
                        colIndex = BoldBIDashboard.min(index);
                    var colLength = gridObject.model.columns.length;
                    gridObject.getFooterTable().find("tbody td").slice(-(colLength - colIndex)).removeClass("e-summaryrow").addClass("e-groupcaptionsummary");
                }
                if (!gridObject.model.groupSettings.showGroupedColumn) {
                    var groupedcolumns = gridObject.model.groupSettings.groupedColumns;
                    var count = 0;
                    var gridfooterrow = gridObject.getFooterTable().children('tbody').find('tr');
                    for (var j = 0; j < gridObject.model.summaryRows.length; j++) {
                        for (var k = 0; k < gridObject.model.summaryRows[j].summaryColumns.length; k++) {
                            for (var i = 0; i < groupedcolumns.length; i++) {
                                if (groupedcolumns[i] == gridObject.model.summaryRows[j].summaryColumns[k].displayColumn) {
                                    count++;
                                    if (gridObject.model.summaryRows[j].summaryColumns.length == count) {
                                        bbdesigner$(gridfooterrow[j]).addClass("e-hide")
                                    }
                                }
                            }
                        }
                        count = 0;
                    }
                }
                return !showGroup ? gridObject.getFooterTable().find("tbody").find("tr").html() : gridObject.getFooterTable().find("tbody").html();
            }
        },
        addGroupingTemplate: function () {
            var tbody = document.createElement('tbody');
            var expandTd = "<td class='e-recordplusexpand' ej-mappingname='{{:field}}' ej-mappingvalue='{{:key}}'><div class='e-icon e-gdiagonalnext'></div></td>";
            var proxy = this;
            var helpers = {};
            helpers["_" + proxy._id + "ColSpanAdjust"] = this._colSpanAdjust;
            helpers["_" + proxy._id + "Colgroup"] = this._getColGroup;
            if (BoldBIDashboard.isNullOrUndefined(this.model.groupSettings.captionFormat))
                bbdesigner$.templates(proxy._id + "_CaptionTemplate", this.localizedLabels.GroupCaptionFormat);
            else
                bbdesigner$.templates(proxy._id + "_CaptionTemplate", this.model.groupSettings.captionFormat);
            helpers["_" + proxy._id + "CaptionFormat"] = this._captionFormat;
            helpers["_" + proxy._id + "GroupSummaryRow"] = this._groupSummaryRow;
            helpers["_" + proxy._id + "CaptionEncode"] = this._captionEncode;
            helpers[proxy._id + "Object"] = this;
            bbdesigner$.views.helpers(helpers);
            var caption = " ~_" + proxy._id + "CaptionFormat('" + proxy._id + "Object')";
            var cpationTd = expandTd + "<td class='e-groupcaption' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','groupcaption') }}'>{{if ~_" + proxy._id + "CaptionEncode('" + proxy._id + "Object')}}{{html:" + caption + "}}{{else}}{{:" + caption + "}}{{/if}}</td>";
            if (this._isCaptionSummary && this.model.showSummary)
                cpationTd = cpationTd + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object')}}";
            var captionTr = "<tr>" + cpationTd + "</tr>";
            var bbdesigner$tbody = BoldBIDashboard.buildTag("tbody");
            bbdesigner$tbody.html("{{if items.GROUPGUID}}" +
                "{{for items tmpl='" + proxy._id + "_GroupingTemplate'/}}" +
                "{{else}}" +
                "{{for items tmpl='" + proxy._id + "_JSONTemplate'/}}" +
                "{{/if}}");
            var indentTd = "<td class='e-indentcell'></td>";
            var table = "<table class='e-table {{if items.GROUPGUID}}{{else}}e-recordtable{{/if}}' cellspacing='0.25px' >" +
                "{{:~_" + proxy._id + "Colgroup('" + proxy._id + "Object')}}" +
                bbdesigner$tbody.html() + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object', '" + proxy._id + "showGroupCaption')}}" +
            "</table>";
            var tableTd = "<td class='e-tabletd' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','table')}}'>" + table + "</td>";
            var tr = "<tr>" + indentTd + tableTd + "</tr>";
            bbdesigner$.templates(proxy._id + "_GroupingTemplate", captionTr + tr);
        },
        addSummaryTemplate: function () {
            var proxy = this;
            bbdesigner$.each(proxy.model.summaryRows, function (cindx, row) {
                bbdesigner$.each(row.summaryColumns, function (cindx, cols) {
                    if (!BoldBIDashboard.isNullOrUndefined(cols.template))
                        bbdesigner$.templates(proxy._id + "_summaryTemplate" + cols.template, cols.template)
                });
            });
        },
        _getGroupTopLeftCell: function () {
            var bbdesigner$th = BoldBIDashboard.buildTag("th.e-grouptopleftcell");
            bbdesigner$th.append(BoldBIDashboard.buildTag("div.e-headercelldiv e-emptyCell", "&nbsp;"));
            return bbdesigner$th;
        },
        _getEmptyFilterBarCell: function () {
            var bbdesigner$th = BoldBIDashboard.buildTag("th.e-filterbarcell e-grouptopleftcell");
            return bbdesigner$th;
        },
        _groupingAction: function (refWidth) {
            var bbdesigner$groupTopCell = this.getHeaderTable().find("thead").find(".e-columnheader:not(.e-stackedHeaderRow)").find(".e-grouptopleftcell"), bbdesigner$col = this.getHeaderTable().find("colgroup").find("col");
            var groupColumn = bbdesigner$groupTopCell.length;
            if (groupColumn) {
                this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
                (this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
                bbdesigner$groupTopCell.remove();
                this.getHeaderTable().find("thead").find(".e-filterbar").find(".e-filterbarcell:lt(" + groupColumn + ")").remove();
            }
            if (!this.model.allowResizeToFit || refWidth)
                this.setWidthToColumns();
            for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
                this.getHeaderTable().find("thead").find(".e-columnheader").prepend(this._getGroupTopLeftCell());
                this.getHeaderTable().find("thead").find(".e-filterbar").prepend(this._getEmptyFilterBarCell());
            }
            this.getHeaderTable().find(".e-columnheader").find("th.e-grouptopleftcell").last().addClass("e-lastgrouptopleftcell");
        },
        
        groupColumn: function (columnName) {
            if (!this.model.allowGrouping || bbdesigner$.inArray(columnName, this._disabledGroupableColumns) != -1)
                return;
            if (BoldBIDashboard.isNullOrUndefined(this.getColumnByField(columnName)) || bbdesigner$.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
                return;
            this.model.groupSettings.groupedColumns.push(columnName);
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == columnName) {
                    break;
                }
            }
            this.model.sortSettings.sortedColumns.length == i && this.model.sortSettings.sortedColumns.push({ field: columnName, direction: BoldBIDashboard.sortOrder.Ascending });
            var args = {};
            args.columnName = columnName;
            args.requestType = BoldBIDashboard.Grid.Actions.Grouping;
            var returnValue = this._processBindings(args);
            if (returnValue) {
                if (!(bbdesigner$.inArray(columnName, this._scolumns) != -1 || this._gridSort == columnName))
                    this.model.sortSettings.sortedColumns.pop();
                this.model.groupSettings.groupedColumns.pop();
            }
            this._primaryKeyValues = [];
        },
        
        ungroupColumn: function (columnName) {
            if (!this.model.allowGrouping)
                return;
            if (bbdesigner$.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
                this.model.groupSettings.groupedColumns.splice(bbdesigner$.inArray(columnName, this.model.groupSettings.groupedColumns), 1);
            else
                return null;
            var column = this.getColumnByField(columnName)
            if (!this.model.groupSettings.showGroupedColumn && !column["visible"]) {
                var index = this._hiddenColumnsField.indexOf(columnName);
                this._hiddenColumnsField.splice(index, 1);
                column["visible"] = true;
            }
            var args = {};
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == columnName) {
                    if (this._scolumns.indexOf(columnName) != -1 && this.model.allowSorting && this.model.allowMultiSorting || this._gridSort == columnName)
                        if (this.model.allowSorting && this.model.allowMultiSorting) {
                            var no = bbdesigner$.inArray(columnName, this._scolumns);
                            this._scolumns.splice(no, 1);
                            break;
                        }
                        else {
                            this._gridSort = null;
                            break;
                        }
                    else
                        this.model.sortSettings.sortedColumns.splice(i, 1);
                    break;
                }
            }
            args.columnName = columnName;
            args.requestType = BoldBIDashboard.Grid.Actions.Ungrouping;
            var returnValue = this._processBindings(args);
            if (returnValue)
                this.model.groupSettings.groupedColumns.push(columnName);
            this._primaryKeyValues = [];
        },
        
        collapseGroupDropArea: function () {
            var bbdesigner$groupDropArea = this.element.find(".e-groupdroparea").first(), proxy = this;
            this.model.groupSettings.groupedColumns.length == 0 && this.model.groupSettings.enableDropAreaAutoSizing && bbdesigner$groupDropArea.animate({ height: "10px" }, 200, function () {
                if (proxy.model != null && proxy.model.groupSettings.groupedColumns.length == 0) {
                    bbdesigner$(this).html("").append(BoldBIDashboard.buildTag("div.e-animatebutton e-animatebuttondown e-icon e-gdownarrow"));
                    bbdesigner$(this).dequeue().css("height", "auto");
                }
            });
        },
        
        expandGroupDropArea: function () {
            var bbdesigner$groupDropArea = this.element.find(".e-groupdroparea").first(), proxy = this;
            this.model.groupSettings.groupedColumns.length == 0 && proxy.model.groupSettings.enableDropAreaAutoSizing && bbdesigner$groupDropArea.animate({ height: "30px" }, 150, function () {
                proxy.model.groupSettings.groupedColumns.length == 0 && bbdesigner$groupDropArea.html(proxy.localizedLabels.GroupDropArea).append(BoldBIDashboard.buildTag("div.e-animatebutton e-animatebuttonup e-icon e-guparrow"));
                bbdesigner$groupDropArea.dequeue().css("height", "30px");
            });
        },
        _enableGroupingEvents: function () {
            if (this.model.allowGrouping) {
                this._on(this.element, "click", ".e-groupdroparea,.e-groupheadercell", this._groupHeaderCellClick);
                
                this._on(this.element, "mousedown", ".e-groupheadercell", function (e) {
                    return false;
                });
            }

        },
        _recalculateIndentWidth: function () {
            var proxy = this;
            var browserDetails = this.getBrowserDetails();
            var indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width(), newWidth = indentWidth, perPixel = indentWidth / 30, bbdesigner$col;
            if (perPixel >= 1)
                newWidth = (30 / perPixel);
            this.getHeaderTable().find("colgroup").find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
            var bbdesigner$conCol = this.getContentTable().find("table").filter(":not(.e-recordtable)");
            indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width();
            if (indentWidth > 30 || (this._isCaptionSummary && (indentWidth >= 30 || (indentWidth > newWidth)))) {
                if (this._isCaptionSummary) {
                    var colgroup = this.model.isEdit ? bbdesigner$conCol.parent(":not(.gridform)").children("colgroup") : bbdesigner$conCol.children("colgroup");
                    bbdesigner$.each(colgroup, function (index, item) {
                        var indentCol = bbdesigner$(item).find("col").length - proxy.model.columns.length;
                        if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
                            if (indentCol > 0)
                                indentCol = indentCol - 1;
                        }
                        bbdesigner$(item).find("col").slice(0, indentCol).css("width", newWidth + "px");
                    });
                }
                else
                    this.model.isEdit ? bbdesigner$conCol.parent(":not(.gridform)").children("colgroup").find("col:first-child").css("width", indentWidth + "px") : bbdesigner$conCol.children("colgroup").find("col:first-child").css("width", indentWidth + "px");
                bbdesigner$col = this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length);
                if (browserDetails.browser != "msie")
                    bbdesigner$col.css("width", newWidth + "px");
                else{
                    if (this._isCaptionSummary) 
						bbdesigner$col.css("width", newWidth + "px");
					else
						bbdesigner$col.first().css("width", ((indentWidth / this.element.width()) * 100) + "%");
				}
            } else {
                this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
                this.getContentTable().find("table").filter(":not(.e-recordtable)").children("colgroup").find("col:first-child").css("width", indentWidth + "px");
            }
            if (this.model.showSummary) {
                var sumCols = this.getContentTable().find("table").filter(".e-groupsummary").find(".e-summary");
                sumCols.css("width", newWidth + "px");
            }
        },
        
        getFieldNameByHeaderText: function (headerText) {
            if (BoldBIDashboard.isNullOrUndefined(this._fieldColumnNames[headerText]))
                return null;
            return this._fieldColumnNames[headerText];
        },
        
        getHeaderTextByFieldName: function (field) {
            if (BoldBIDashboard.isNullOrUndefined(this._headerColumnNames[field]))
                return null;
            return this._headerColumnNames[field];
        },
        
        expandAll: function () {
            var recordPlus = this.element.find(".e-recordpluscollapse");
            var detailRow = this._excludeDetailRows().find(".e-detailrowcollapse");
            if (recordPlus.length != 0) {
                for (var i = 0; i < recordPlus.length; i++)
                    this.expandCollapse(bbdesigner$(recordPlus[i]));
            }
            if (detailRow.length != 0) {
                for (var i = 0; i < detailRow.length; i++)
                    this.expandCollapse(bbdesigner$(detailRow[i]));
            }
        },
        
        collapseAll: function () {
            var recordPlus = this.element.find(".e-recordplusexpand");
            var detailRow = this.element.find(".e-detailrowexpand");
            if (recordPlus.length != 0) {
                for (var i = 0; i < recordPlus.length; i++)
                    this.expandCollapse(bbdesigner$(recordPlus[i]));
            }
            if (detailRow.length != 0) {
                for (var i = 0; i < detailRow.length; i++)
                    this.expandCollapse(bbdesigner$(detailRow[i]));
            }
        },
        _group: function (args) {
            if (this.model.groupSettings.groupedColumns.length && this.model.currentViewData) {
                this._currentJsonData = [];
                var temp = document.createElement('div');
                if (!this.model.groupSettings.showGroupedColumn) {
                    if (!this.initialRender && !BoldBIDashboard.isNullOrUndefined(args.columnName) && args.requestType == "grouping") {
                        var col = this.getColumnByField(args.columnName);
                        if (bbdesigner$.inArray(args.columnName, this._hiddenColumnsField) == -1) {
                            this._hiddenColumnsField.push(args.columnName)
                            col.visible = false;
                        }
                    }
                    else {
                        for (i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                            if (bbdesigner$.inArray(this.model.groupSettings.groupedColumns[i], this._hiddenColumnsField) == -1) {
                                this._hiddenColumnsField.push(this.model.groupSettings.groupedColumns[i])
                                this.getColumnByField(this.model.groupSettings.groupedColumns[i]).visible = false;
                            }
                        }
                    }
                    this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
                    this.getContentTable().children("colgroup").replaceWith(this.getHeaderTable().find('colgroup').clone());
                }
                if (args.requestType == "reorder")
                    this._isReorder = true;
                else
                    this._isReorder = false;
                var bbdesigner$col = this.getContentTable().children("colgroup").find('col');
                var length = bbdesigner$col.length - this.model.columns.length;
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    length--;
                if (bbdesigner$col.length > this.model.columns.length)
                    this.getContentTable().children("colgroup").find('col:lt(' + length + ')').remove();
                this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
                var dlen;
                if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                    dlen = this.model.groupSettings.groupedColumns.length + 1;
                }
                else
                    dlen = this.model.groupSettings.groupedColumns.length;
                for (var i = 0; i < dlen; i++)
                    this.getContentTable().children("colgroup").prepend(this._getIndentCol());
                if (this.model.currentViewData.length) {
                    var bbdesigner$tbody = this.getContentTable().children('tbody');
                    bbdesigner$tbody.empty();
                    temp.innerHTML = ['<table>', bbdesigner$.render[this._id + "_GroupingTemplate"](this.model.currentViewData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                    this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                    this._hideCaptionSummaryColumn();
                }
                this._groupingAction();
                this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr").not(".e-gridSummaryRows");
                this._eventBindings();
            }
        },
        _ungroup: function () {
            this._isGrouping = false;
            if (!BoldBIDashboard.isNullOrUndefined(this.model.detailsTemplate))
                this._detailsOuterWidth = null;
            var bbdesigner$header = this.element.children(".e-gridheader");
            var bbdesigner$filterInput = bbdesigner$header.find(".e-filterbar").find("th").find("input");
            bbdesigner$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
            this.setGridHeaderContent(bbdesigner$header);
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
                this._renderFiltering();
                this._renderFilterBarTemplate();

                var filterThNew = this.element.children(".e-gridheader").find(".e-filterbar").find("th").find("input");
                for (var i = 0; i < bbdesigner$filterInput.length; i++)
                    filterThNew.eq(i).val(bbdesigner$filterInput.eq(i).val());
            }
            if (!this.model.groupSettings.showGroupedColumn)
                this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
            this.refreshTemplate();
            this.element.find(".e-gridcontent").children("div").first().empty().append(this._renderGridContent().find("table").first());
            this.setGridContent(this.element.find(".e-gridcontent"));
            if (this.model.groupSettings.groupedColumns.length != 0)
                this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr").toArray();
            else
                this._gridRows = this.getContentTable().get(0).rows;
           
        },
        _groupHeaderCellClick: function (e) {
            var bbdesigner$target = bbdesigner$(e.target);
            if (bbdesigner$target.hasClass('e-groupdroparea'))
                return;
            if (bbdesigner$target.hasClass("e-ungroupbutton")) {
                var field = bbdesigner$target.parent().attr("ej-mappingname");
                this.ungroupColumn(field);
            } else if (bbdesigner$target.hasClass("e-togglegroupbutton")) {
                var field = bbdesigner$target.parent().attr("ej-mappingname");
                bbdesigner$target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
            } else if (bbdesigner$target.hasClass("e-animatebutton")) {
                if (!bbdesigner$(e.target).hasClass("e-animatebuttondown")) {
                    this.collapseGroupDropArea();
                } else {
                    this.expandGroupDropArea();
                }
            }
            else {
                bbdesigner$target.addClass("e-headercelldiv");
                this._mouseClickHandler(e);
                bbdesigner$target.removeClass("e-headercelldiv");
            }

            return false;
        },
        _captionSummary: function (nocaption) {
            var summary = null, cols = this.model.summaryRows, k, len = cols.length;
            for (k = 0; k < len; k++) {
                if (cols[k].showCaptionSummary == true) {
                    summary = bbdesigner$(cols[k]);
                    break;
                }
            }
            
            if (nocaption) {
                left = cols.slice(0, k), right = cols.slice(k + 1, len);
                BoldBIDashboard.merge(summary = left, right);
            }

            return summary;
        },
        _dropAreaHover: function (e) {
            var bbdesigner$target = bbdesigner$(e.target), proxy = this;
            if (e.type == "mouseenter") {
                if (this._dragActive) {
                    if (bbdesigner$target.hasClass("e-groupdroparea"))
                        bbdesigner$target.addClass("e-hover");
                } else
                    bbdesigner$target.removeClass("e-hover");
                bbdesigner$target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && bbdesigner$target.find(".e-ungroupbutton").show(150);
            } else if (e.type == "mouseleave") {
                if (bbdesigner$target.hasClass("e-groupdroparea")) {
                    bbdesigner$target.find(".e-ungroupbutton").hide(150);
                    bbdesigner$target.removeClass("e-hover");
                }
                bbdesigner$target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && bbdesigner$target.find(".e-ungroupbutton").hide(150);
            }
            return false;
        },
        _groupingCompleteAction: function (args) {
            var bbdesigner$groupDrop = this.element.children(".e-groupdroparea");
            if (this.model.groupSettings.groupedColumns.length && bbdesigner$groupDrop.find(".e-grid-icon").length == 0 || BoldBIDashboard.Grid.Actions.Refresh == args.requestType)
                bbdesigner$groupDrop.empty();
            if (this.initialRender || BoldBIDashboard.Grid.Actions.Refresh == args.requestType) {
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
                this._refreshGridPager();
            } else
                this._addColumnToGroupDrop(args.columnName);
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").remove();
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (!this.initialRender && BoldBIDashboard.gridFeatures.dragAndDrop)
                this._groupHeaderCelldrag();
            this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() - 1);
            this.element.children(".e-cloneproperties").remove();
            if (BoldBIDashboard.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
                this._refreshFilterIcon();
        },
        _ungroupingCompleteAction: function (args) {
            var bbdesigner$groupDrop = this.element.children(".e-groupdroparea");
            if (args.requestType != BoldBIDashboard.Grid.Actions.Refresh)
               this._removeColumnFromDrop(args.columnName);
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").remove();
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (this.model.groupSettings.groupedColumns.length == 0) {
                bbdesigner$groupDrop.html(this.model.groupSettings.enableDropAreaAutoSizing ? "" : this.localizedLabels.GroupDropArea);
                this.model.groupSettings.enableDropAreaAutoSizing && bbdesigner$groupDrop.append(BoldBIDashboard.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAutoSizing ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
                bbdesigner$groupDrop.css("height", "auto");
            }
            if (BoldBIDashboard.gridFeatures.dragAndDrop)
                this._headerCellgDragDrop();
            if (this.model.allowReordering && BoldBIDashboard.gridFeatures.dragAndDrop)
                this._headerCellreorderDragDrop();
            this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() + 10);
            this.element.children(".e-cloneproperties").remove();
            if (BoldBIDashboard.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
                this._refreshFilterIcon();
        },
        _getToggleButton: function () {
            return BoldBIDashboard.buildTag("span.e-togglegroupbutton e-icon e-gridgroupbutton", "&nbsp;");
        },
        _checkEinHeader: function (field) {
            var bbdesigner$headerCell = this.element.children(".e-gridheader").find("thead").find(".e-columnheader").find(".e-headercell");
            for (var i = 0; i < bbdesigner$headerCell.length; i++) {
                if (bbdesigner$.trim(bbdesigner$headerCell.eq(i).find("div").attr("ej-mappingname")) == field)
                    return bbdesigner$headerCell.eq(i);
                else if (this.model.allowSorting && this.model.allowMultiSorting) {
                    var header = bbdesigner$(bbdesigner$headerCell.eq(i)).clone();
                    header.find(".e-number").remove();
                    if (bbdesigner$.trim(header.find("div").attr("ej-mappingname")) == field)
                        return header;
                }
            }
            return null;

        },

        _checkEinGroupDrop: function (field) {
            var bbdesigner$groupHeaderCell = this.element.children(".e-groupdroparea").find(".e-grid-icon");
            for (var i = 0; i < bbdesigner$groupHeaderCell.length; i++) {
                if (bbdesigner$.trim(bbdesigner$groupHeaderCell.eq(i).find("div").attr("ej-mappingname")) == field)
                    return bbdesigner$groupHeaderCell.eq(i);
            }
            return null;
        },

        _addColumnToGroupDrop: function (field) {
            var bbdesigner$groupedColumn = BoldBIDashboard.buildTag("div.e-grid-icon e-groupheadercell"), bbdesigner$groupDropArea = this.element.find(".e-groupdroparea").first();
            var bbdesigner$childDiv = BoldBIDashboard.buildTag("div", {}, {}, { "ej-mappingname": field }), imageDirection = "e-rarrowup-2x";
            var column = this.getColumnByField(field)
            if (column.disableHtmlEncode)
                bbdesigner$groupedColumn.append(bbdesigner$childDiv.text(column.headerText));
            else if (column.headerTemplateID)
                bbdesigner$groupedColumn.append(bbdesigner$childDiv.html(bbdesigner$(column.headerTemplateID).html()))
            else
                bbdesigner$groupedColumn.append(bbdesigner$childDiv.html(column.headerText));
            var bbdesigner$headerCell = this._checkEinHeader(field);
            if (this.model.groupSettings.showToggleButton) {
                bbdesigner$childDiv.append(this._getToggleButton().addClass("e-toggleungroup"));
                bbdesigner$headerCell.find(".e-headercelldiv").find(".e-togglegroupbutton").remove().end().append(this._getToggleButton().addClass("e-toggleungroup"));
            }
            var direction = "ascending";
            if (bbdesigner$headerCell.find(".e-ascending,.e-descending").length) {
                direction = bbdesigner$headerCell.find(".e-ascending,.e-descending").hasClass("e-ascending") ? "ascending" : "descending";
                imageDirection = direction == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
            }
            bbdesigner$childDiv.append(this._createSortElement().addClass("e-" + direction + " " + imageDirection));
            this.model.groupSettings.showUngroupButton && bbdesigner$childDiv.append(BoldBIDashboard.buildTag("span.e-ungroupbutton e-icon e-cancel", " ", {}, { title: this.localizedLabels.UnGroup }));
            bbdesigner$groupDropArea.append(bbdesigner$groupedColumn).css("height", "auto");
            var left = bbdesigner$groupedColumn.offset().left, bbdesigner$cloned = bbdesigner$groupedColumn.clone().css("position", "absolute"), proxy = this;
            bbdesigner$groupedColumn.css("visibility", "hidden")
            bbdesigner$groupDropArea.append(bbdesigner$cloned).dequeue();
            bbdesigner$cloned.css({ "left": left + 150 }).animate({ left: left }, 150, function (e) {
                bbdesigner$groupedColumn.css("visibility", "visible");
                bbdesigner$cloned.remove();
            });
        },
        _removeColumnFromDrop: function (field) {
            var headerText = this.getHeaderTextByFieldName(field), proxy = this, bbdesigner$groupDropArea = this.element.children(".e-groupdroparea");
            var bbdesigner$groupHeaderCell = bbdesigner$groupDropArea.css("height", "30px").find(".e-grid-icon");
            for (var i = 0; i < bbdesigner$groupHeaderCell.length; i++) {
                if (bbdesigner$.trim(bbdesigner$groupHeaderCell.eq(i).find("div").attr("ej-mappingname")) == field) {
                    if (this.model.groupSettings.groupedColumns.length == 0) {
                        this.collapseGroupDropArea();
                    } else
                        bbdesigner$groupHeaderCell.eq(i).remove();
                }
            }
        },
        _setAggreatedCollection: function (clonedQuery) {
            if (this._dataSource() instanceof BoldBIDashboard.DataManager && this._dataManager.dataSource.url != undefined && !this._isRemoteSaveAdaptor)
                return;
            var data;
            data = this._dataManager.executeLocal(clonedQuery).result;
            this._aggregatedCollection = data;
        },
        _setAggregates: function (data, collection) {
            var indx, pred, query = new BoldBIDashboard.Query();
            data = data || this.model.currentViewData, collection = collection || this._aggregatedCollection;
            var dLen = data.length, cLen;
            if (dLen != 0){
                var fieldPred = BoldBIDashboard.Predicate("field", "equal", data[0].field), keyPred = BoldBIDashboard.Predicate("key", "equal", data[0].key);
                if(data[0].key instanceof Date) {
                    var dateObject = { value: data[0].key, operator : "equal", field : "key" };
                    keyPred = this._setDateFilters(dateObject,true);
                }
                pred = (fieldPred["and"](keyPred));
            }
            for (indx = 1; indx < dLen; indx++) {
                var fieldPred = BoldBIDashboard.Predicate("field", "equal", data[indx].field), keyPred = BoldBIDashboard.Predicate("key", "equal", data[indx].key);
                if(data[indx].key instanceof Date) {
                    var dateObject = { value: data[indx].key, operator : "equal", field : "key" };
                    keyPred = this._setDateFilters(dateObject,true);
                }
                pred = pred["or"](fieldPred["and"](keyPred));
            }
            collection = pred ? new BoldBIDashboard.DataManager(collection).executeLocal(query.where(pred)) : collection;
            cLen = collection.length;
            if (data.length > 0) {
                for (indx = 0; indx < cLen; indx++) {
                    if (indx > 0 && indx < cLen - 1) continue;
                    data[indx].count = collection[indx].count; 
                    if (data[indx].items.GROUPGUID)
                        this._setAggregates(data[indx].items, collection[indx].items);
                    if (this.model.showSummary) { 
                        var agg = data[indx]["aggregates"] = [];
                        var rows = this.model.summaryRows, scolumns, summaryData;
                        for (var row = 0, rlen = rows.length; row < rlen; row++) {
                            scolumns = rows[row].summaryColumns;
                            for (var col = 0, clen = scolumns.length; col < clen; col++) {
                                summaryData = collection[indx].items.level ? collection[indx].items.records : collection[indx].items;
                                agg[scolumns[col].dataMember + " - " + scolumns[col].summaryType] = this.getSummaryValues(scolumns[col], summaryData);
                            }
                        }
                    }
                }
            }
        },
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    BoldBIDashboard.gridFeatures.selection = {
        
        selectRows: function (rowIndex, toIndex, target, e) {
            if (!this._allowrowSelection)
                return false;
            if (this._traverseRow != rowIndex)
                bbdesigner$(".e-traverse").removeClass("e-traverse");
            this._traverseRow = null;
            var rowIndexCollection = [];
			if(this.initialRender)
				this.model.currentIndex = rowIndex;
			if(this.model.scrollSettings.enableVirtualization){
				if (bbdesigner$.isArray(rowIndex))
					this.model.currentIndex = rowIndex[0];
				else if(toIndex){
					this.model.currentIndex = rowIndex > toIndex ? toIndex : rowIndex;
				}							
			}
            if (!this.multiSelectCtrlRequest && this.model.scrollSettings.allowVirtualScrolling) {
                if (!this._virtuaOtherPage) {
                    this.clearSelection();
                    this._virtualScrollingSelection = false;
                }
                else
                    this._virtualScrollingSelection = true;
            }
            if (bbdesigner$.isArray(rowIndex)) {
                rowIndexCollection = rowIndex;
				rowIndex = rowIndexCollection[0];
				this._virtaulSel = [];
				if(this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization){										
					this._virtualScrollingSelection = true;
					this._virtualSelectedRows = rowIndexCollection;
					var from = (parseInt(rowIndex / this.model.pageSettings.pageSize)) * this.model.pageSettings.pageSize;
					var to = (parseInt((rowIndex / this.model.pageSettings.pageSize)) + 1) * this.model.pageSettings.pageSize;
					this._virtaulSel.push(rowIndex);
					if (!this._virtuaOtherPage)
						this._virtaulUnSel = []
					for (var i = 1; i < rowIndexCollection.length; i++) {
						if (from < rowIndexCollection[i] && rowIndexCollection[i] < to)
							this._virtaulSel.push(rowIndexCollection[i]);
						else
							this._virtaulUnSel.push(rowIndexCollection[i]);
					}										
				}
            }

            var bbdesigner$gridRows = bbdesigner$(this.getRows());
            var args = {}, ascend, res;
            var Data = this._currentJsonData[BoldBIDashboard.isNullOrUndefined(rowIndex) ? toIndex : rowIndex];
			var bbdesigner$rowIndex = rowIndex, bbdesigner$prevIndex = this._previousIndex, bbdesigner$prevRow = this.getRowByIndex(this._previousIndex);		
            if (this.model.scrollSettings.allowVirtualScrolling) {
				if(this.model.scrollSettings.enableVirtualization){					
					var virtualRowCount = this._virtualRowCount;
					var currentIndex = Math.ceil((rowIndex + 1) / virtualRowCount);		
					var rowCount = currentIndex > 1 ? this._virtualRowCount: 0;					
					if(this.initialRender || (currentIndex != this._currentVirtualIndex && !target)){
						this._isThumbScroll = true;
						this._refreshVirtualView(currentIndex);						
						rowIndex = rowIndex != 0 ? rowIndex % this._virtualRowCount + rowCount : rowIndex;																			
					}					
					else {						
						if(rowIndex > this._virtualRowCount * 3 || target){
							var viewIndex = this._getSelectedViewData(rowIndex, target).viewIndex;
							var remain = rowIndex % this._virtualRowCount;																												
							bbdesigner$rowIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);	
						}
						else 
							rowIndex = rowIndex % this._virtualRowCount + rowCount;						
						if(rowIndex == bbdesigner$rowIndex && !target)
							rowIndex = rowIndex != 0 ? rowIndex % this._virtualRowCount + rowCount : rowIndex;											
					}
					if(rowIndexCollection.length){												
						for(var i = 0; i < rowIndexCollection.length; i++){
							var viewIndex = this._getSelectedViewData(rowIndexCollection[i]).viewIndex;
							if(bbdesigner$.inArray(viewIndex, this._currentLoadedIndexes) != -1)
								this._virtaulSel.push(rowIndexCollection[i]);
							if(!this._virtualSelectedRecords[rowIndexCollection[i]])
								this._virtualSelectedRecords[rowIndexCollection[i]] =  this._getSelectedViewData(rowIndexCollection[i]).data;
						}					
					}
					Data = this._getSelectedViewData(rowIndex, target, currentIndex).data;	
					bbdesigner$prevIndex = this._prevSelIndex;					
					bbdesigner$prevRow = this._prevSelRow;							
				}
				else{
					var pageSize = this.model.pageSettings.pageSize;
					var nameIndx = this.getRowByIndex(rowIndex).attr("name");
					var pageIndex = !BoldBIDashboard.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
					var trIndex = (rowIndex) % (pageSize);
					var pageto = parseInt(rowIndex / pageSize);
					var nameattr = pageto * pageSize;
					if ((!BoldBIDashboard.isNullOrUndefined(pageto) && pageto > 0 && bbdesigner$.inArray(nameattr, this.virtualLoadedPages) == -1) && BoldBIDashboard.isNullOrUndefined(target)) {
						trIndex--; this._virIndex = true;
						this._virtualTrIndex=trIndex;
						this.gotoPage(pageto + 1);
						var proxy = this;
						if (this._dataSource() instanceof BoldBIDashboard.DataManager) {
							this._queryPromise.done(function (e) {
								proxy._virtuaOtherPage=true;
								proxy._virtualdata = proxy._currentJsonData;
								proxy._pageTo = pageto;
								if(proxy._virtualScrollingSelection)
									proxy._virtualSelRecords = e.virtualSelectRecords;
								var from = (parseInt(rowIndex / proxy.model.pageSettings.pageSize)) * proxy.model.pageSettings.pageSize;
								var to = (parseInt((rowIndex / proxy.model.pageSettings.pageSize)) + 1) * proxy.model.pageSettings.pageSize;
								var _selctRow = []
								_selctRow.push(rowIndex);
								for (var i = 1; i < rowIndexCollection.length; i++)
									if (from < rowIndexCollection[i] && rowIndexCollection[i] < to)
										_selctRow.push(rowIndexCollection[i]);
								proxy.selectRows(_selctRow);
								return false;
							});
							if(proxy._virtualScrollingSelection)
								return;
						}
						else {
							proxy._virtualdata = proxy._currentJsonData;
							if (rowIndexCollection.length > 0) {
								proxy._virtualSelRecords = [];
								for (var i = 0; i < rowIndexCollection.length; i++) {
									proxy._virtualSelRecords.push(this.model.dataSource[rowIndexCollection[i]]);
								}
							}
							proxy._pageTo = pageto;
						}
					}
					if (this._virtuaOtherPage) {
						this._virtuaOtherPage=false;
					}
					Data = this._virtualScrollingSelection ? this._virtualSelRecords : Data;
					var nameattr = this._pageTo * pageSize;
					if (!BoldBIDashboard.isNullOrUndefined(this._virtualdata) && this._virtualdata.length > 0) {
						rowIndex = bbdesigner$(document.getElementsByName(nameattr)[trIndex]).index();
						Data = this._virtualdata[trIndex];
						this._virtualdata = [];
					}
					else if (bbdesigner$(document.getElementsByName(pageto * pageSize)).length > 0 && !BoldBIDashboard.isNullOrUndefined(this._pageTo))
						rowIndex = bbdesigner$(document.getElementsByName(pageto * pageSize)[rowIndex % pageSize]).index();
				}
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.virtualLoadedPages)) {
                var pagesLoaded = this.virtualLoadedPages.length;
                if (BoldBIDashboard.isNullOrUndefined(Data) && rowIndex >= this._currentJsonData.length && trIndex > -1 && pagesLoaded == pageIndex) {
                    Data = this._currentJsonData[trIndex];
                }
                if (pagesLoaded == pageIndex) {
                    this._virtualLoadedRecords[pageIndex] = this._currentJsonData;
                }
                if (((pagesLoaded * pageSize) - rowIndex) > pageSize && ((pagesLoaded * pageSize) - pageSize) > rowIndex) {
                    Data = this._loadedJsonData[this._loadedJsonData.length - 1].data[trIndex];
                }
                if (BoldBIDashboard.isNullOrUndefined(Data)) {
                    Data = this._virtualLoadedRecords[pageIndex][trIndex];
                }
            }
            args = { rowIndex: bbdesigner$rowIndex, row: bbdesigner$gridRows.eq(rowIndex), data: Data, target: target,  prevRow: bbdesigner$prevRow, prevRowIndex: bbdesigner$prevIndex, parentTarget: e  };
            if (this._trigger("rowSelecting", args))
                return;
            var bbdesigner$gridRows = bbdesigner$(this.getRows());
            if ((this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && this.model.isEdit && this.model.enableAutoSaveOnSelectionChange) {
                if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || this.getContentTable().find(".e-editedrow").length != 0) {
                    if (this.endEdit())
                        return;
                    else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                        bbdesigner$("#" + this._id + "_externalEdit").css("display", "none");
                }
            }
            if (rowIndexCollection.length > 0) {
                for (var i = 0; i < rowIndexCollection.length; i++) {
                    this.selectedRowsIndexes.push(rowIndexCollection[i]);
                    bbdesigner$('input[type="checkbox"]').eq(rowIndexCollection[i]).prop('checked', true);
                }
				if( !this.model.scrollSettings.enableVirtualization){
					var diff = this._virtaulSel[0] - rowIndex;
					for (var i = 0; i < this._virtaulSel.length; i++) {
						this._virtaulSel[i] -= diff;
					}
				}
                rows = this.getRowByIndex(this.model.scrollSettings.allowVirtualScrolling ? this._virtaulSel : rowIndexCollection);
                if (this.model.scrollSettings.frozenColumns)
                    rows = bbdesigner$(rows[0]).add(rows[1]);
                bbdesigner$(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
            }
            else if (BoldBIDashboard.isNullOrUndefined(toIndex) || BoldBIDashboard.isNullOrUndefined(rowIndex)) {
                rowIndex = BoldBIDashboard.isNullOrUndefined(rowIndex) ? toIndex : rowIndex;
                switch (this.model.selectionType) {
                    case BoldBIDashboard.Grid.SelectionType.Multiple:
                        if (this.multiSelectCtrlRequest) {
							this.model.selectedRecords = [];
                            var selectedRowIndex = bbdesigner$.inArray(bbdesigner$rowIndex, this.selectedRowsIndexes);
                            selectedRowIndex != -1 && this.clearSelection(bbdesigner$rowIndex) && this.selectedRowsIndexes.splice(selectedRowIndex, 0);
                            if (selectedRowIndex == -1) {
                                this.selectedRowsIndexes.push(bbdesigner$rowIndex);
                                this.getRowByIndex(rowIndex).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                                if(!this.model.scrollSettings.enableVirtualization)
									this._virtualSelectAction(pageIndex, rowIndex, pageSize);
								else
									this._virtualSelectedRecords[bbdesigner$rowIndex] = this._getSelectedViewData(rowIndex, target).data;
                            }
                            Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                            break;
                        }
                    case BoldBIDashboard.Grid.SelectionType.Single:
                        this.clearSelection();
                        this.clearColumnSelection();
                        this.selectedRowsIndexes = [];
                        this.model.selectedRecords = [];
                        this._virtualSelectedRecords = {};
                        this.selectedRowsIndexes.push(bbdesigner$rowIndex);
                        this.getRowByIndex(rowIndex).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                        if(!this.model.scrollSettings.enableVirtualization)
							this._virtualSelectAction(pageIndex, rowIndex, pageSize);
						else
							this._virtualSelectedRecords[bbdesigner$rowIndex] = Data;
                        Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                        break;
                }
            } else {
                if (this.model.selectionType == BoldBIDashboard.Grid.SelectionType.Multiple) {
                    this.clearSelection();
                    this.clearColumnSelection();
                    this.selectedRowsIndexes = [];
                    this.model.selectedRecords = [];                  
					this._virtualSelectedRecords = {};
					bbdesigner$toIndex = toIndex;					
					this._virtualUnSel = [];
					this._virtualUnSelIndexes = [];
					if(this.model.scrollSettings.enableVirtualization && target){
						var viewIndex = this._getSelectedViewData(toIndex, target).viewIndex;
						var remain = toIndex % this._virtualRowCount;																												
						bbdesigner$toIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
						if(bbdesigner$rowIndex != this._prevSelIndex)bbdesigner$rowIndex = this._prevSelIndex;																	
					}					
                    ascend = bbdesigner$rowIndex - bbdesigner$toIndex < 0;
					if(!this.model.scrollSettings.enableVirtualization)
						rows = ascend ? this.getRowByIndex(rowIndex, toIndex + 1) : this.getRowByIndex(toIndex, rowIndex + 1);
                    if (this.model.scrollSettings.frozenColumns)
                        rows = bbdesigner$(rows[0]).add(rows[1]);
                    var rowIndexes = [];
                    for (var i = ascend ? bbdesigner$rowIndex : bbdesigner$toIndex, to = ascend ? bbdesigner$toIndex : bbdesigner$rowIndex; i <= to; i++) {
						 if(this.model.scrollSettings.allowVirtualScrolling){
							if(!this.model.scrollSettings.enableVirtualization){
								var nameIndx = this.getRowByIndex(i).attr("name");
								var pageIndex = !BoldBIDashboard.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
								this._virtualSelectAction(pageIndex, i, pageSize);
							}
							else {								
								this._virtualSelectedRecords[i] = this._getSelectedViewData(i).data;
								var viewIndex = this._getSelectedViewData(i).viewIndex;
								if(bbdesigner$.inArray(viewIndex, this._currentLoadedIndexes) != -1){
									var indx = this._currentLoadedIndexes.indexOf(viewIndex);
									var selIndex = i % this._virtualRowCount + indx * this._virtualRowCount;
									if(selIndex == 0) indx * this._virtualRowCount;
									rowIndexes.push(selIndex);
								}
								else {
									this._virtualUnSel.push(i);
									if(bbdesigner$.inArray(viewIndex, this._virtualUnSelIndexes) == -1)
										this._virtualUnSelIndexes.push(viewIndex);
								}
							}
						}
                        this.selectedRowsIndexes.push(i);
                    }
					if(this.model.scrollSettings.enableVirtualization)
						rows =  this.getRowByIndex(rowIndexes[0], rowIndexes[rowIndexes.length - 1] + 1);
                    bbdesigner$(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                    Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                }
            }
            if (this._selectedRow() !== bbdesigner$rowIndex)
                this._selectedRow(bbdesigner$rowIndex);
            Data = this._virtualScrollingSelection ? this._virtualSelRecords : Data;
			var selectedIndex = this.model.scrollSettings.enableVirtualization ? bbdesigner$rowIndex : this._selectedRow();
            var args = { rowIndex: selectedIndex, row: this.getRowByIndex(this._selectedRow()), data: Data, target: target, prevRow: bbdesigner$prevRow, prevRowIndex : bbdesigner$prevIndex, parentTarget: e };
            this._previousIndex = this.selectedRowsIndexes.length ? rowIndex :this._previousIndex;
			if(this.model.scrollSettings.enableVirtualization){
				this._prevSelIndex = bbdesigner$rowIndex; 
				this._prevSelRow = this.getRowByIndex(rowIndex);
			}
            if (bbdesigner$(this.getRowByIndex(rowIndex)).is('[role="row"]'))
                this._trigger("rowSelected", args);            
        },

        _virtualSelectAction: function (pageIndex, rowIndex, pageSize) {
            if (this.model.scrollSettings.allowVirtualScrolling && !BoldBIDashboard.isNullOrUndefined(rowIndex)) {
                if (!BoldBIDashboard.isNullOrUndefined(this._virtualLoadedRecords[pageIndex]))
                    this._virtualSelectedRecords[rowIndex] = this._virtualLoadedRecords[pageIndex][rowIndex % pageSize];
                else
                    this._virtualSelectedRecords[rowIndex] = this._currentJsonData[rowIndex % pageSize];
            }
        },
		_getSelectedViewData: function(rowIndex, target, currentViewIndex){
			var index = rowIndex % this._virtualRowCount, viewIndex, result = {};
			if(target)
				viewIndex = parseInt(bbdesigner$(target).closest("tr").attr("name"), 32);
			else if(currentViewIndex)
				viewIndex = currentViewIndex;
			else
				viewIndex = rowIndex > 1 ? Math.ceil((rowIndex + 1) / this._virtualRowCount) : 1;
			result["viewIndex"] = viewIndex;
			if(this._virtualLoadedRecords[viewIndex])
				result["data"] = this._virtualLoadedRecords[viewIndex][index];
			var remain = rowIndex % this._virtualRowCount;	
			result["rowIndex"] = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
			return result;
		},
        selectCells: function (rowCellIndexes) {
            if (!this._allowcellSelection)
                return false;
            var bbdesigner$cell = null, previousRowCell, prevRowCellIndex;
            var gridRows = this._excludeDetailRows();
            if (this.model.scrollSettings.frozenColumns)
                bbdesigner$cell = this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]);
            else
                bbdesigner$cell = gridRows.eq(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")");				
            if(!BoldBIDashboard.isNullOrUndefined(this._previousRowCellIndex) && this._previousRowCellIndex.length != 0 ){
				if(this.model.scrollSettings.enableVirtualization){
					previousRowCell = this._prevRowCell;
					prevRowCellIndex = this._preVirRowCellIndex;
				}
				else{
					previousRowCell = bbdesigner$(this.getRowByIndex(this._previousRowCellIndex[0][0]).find(".e-rowcell:eq("+this._previousRowCellIndex[0][1]+")"));
					prevRowCellIndex = this._previousRowCellIndex;
				}
			}			
			var bbdesigner$data = this._currentJsonData[rowCellIndexes[0][0]], bbdesigner$rowIndex = rowCellIndexes[0][0], viewDetails;
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
				viewDetails = this._getSelectedViewData(rowCellIndexes[0][0], bbdesigner$cell);
				bbdesigner$data = viewDetails.data;
				bbdesigner$rowIndex = viewDetails.rowIndex;
			}				
            var args = { currentCell: bbdesigner$cell, cellIndex: rowCellIndexes[0][1], data: bbdesigner$data, previousRowCellIndex: prevRowCellIndex, previousRowCell: previousRowCell };
            if (this.model.selectionType == "multiple") {
                args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                args["isShiftPressed"] = this.multiSelectShiftRequest;
            }
            if (this._trigger("cellSelecting", args))
                return;
            switch (this.model.selectionType) {
                case BoldBIDashboard.Grid.SelectionType.Multiple:
                    if (this.multiSelectCtrlRequest) {
                        var selectedCellIndex = bbdesigner$.inArray(bbdesigner$rowIndex, this._rowIndexesColl);
                        if (selectedCellIndex != -1)
                            this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(parseInt(rowCellIndexes[0][1].toString()));
                        else {
                            if (bbdesigner$.inArray(bbdesigner$rowIndex, this._rowIndexesColl) == -1)
                                this._rowIndexesColl.push(bbdesigner$rowIndex);
                            this.selectedRowCellIndexes.push({ rowIndex: bbdesigner$rowIndex, cellIndex: rowCellIndexes[0][1] });
                        }
                        bbdesigner$cell.addClass("e-cellselectionbackground e-activecell");
                        break;
                    }
                    else if (this.multiSelectShiftRequest && this._previousRowCellIndex != undefined) {
                        this.clearCellSelection();
                        this.clearColumnSelection();
                        this.selectedRowCellIndexes = [];
                        var previousRowIndex = this._previousRowCellIndex[0][0];
                        var previousCellIndex = parseInt(this._previousRowCellIndex[0][1]);
                        var currentRowIndex = rowCellIndexes[0][0];
                        var currentCellIndex = parseInt(rowCellIndexes[0][1]);
						if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
							previousRowIndex = this._preVirRowCellIndex[0][0];
							currentRowIndex = this._getSelectedViewData(currentRowIndex, this.getRowByIndex(currentRowIndex).find(".e-rowcell")).rowIndex;
						}
                        var newCellColl = [];
                        var min, max;
                        if(this.model.selectionSettings.cellSelectionMode == "box"){
							var bbdesigner$rowCount =  this.model.scrollSettings.frozenColumns ? this.getRows()[0].length - 1 : this.getRows().length - 1;
							var pCellIndex = previousCellIndex < currentCellIndex ? previousCellIndex : currentCellIndex;
							var cCellIndex = pCellIndex == currentCellIndex ? previousCellIndex : currentCellIndex;	
							var newRowColl = [], newCellColl = [];							
							for (var i = pCellIndex; i <= cCellIndex; i++) {								
								min = previousRowIndex;									
								max = currentRowIndex;
								if( min < max ){
									for (var j = min; j <= max; j++) {
										bbdesigner$.inArray(j, newRowColl) == -1 && newRowColl.push(j);											
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);										
									}
								}
								else{
									for (var j = max; j <= min; j++) {
										bbdesigner$.inArray(j, newRowColl) == -1 && newRowColl.push(j);											
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);										
									}
								}
								newCellColl.push(i);								
							}							
							for(var i = 0; i < newRowColl.length; i++){								
								this.selectedRowCellIndexes.push({ rowIndex: newRowColl[i], cellIndex: newCellColl });										
							}
							this._rowIndexesColl = BoldBIDashboard.distinct(newRowColl);
						}
                        else if (currentRowIndex > previousRowIndex) {
                            for (var i = previousRowIndex; i <= currentRowIndex; i++) {
                                newCellColl = [];
                                min = i == previousRowIndex ? previousCellIndex : 0;
                                max = i == currentRowIndex ? currentCellIndex : this.model.columns.length - 1;
                                for (var j = min; j <= max; j++) {
                                    newCellColl.push(j);
                                    this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
                                }								
                                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndex: newCellColl });
                                this._rowIndexesColl.push(i);
                            }
                        } 						 						
						else {
                            for (var i = previousRowIndex; i >= currentRowIndex; i--) {
                                newCellColl = [];
                                min = i == previousRowIndex ? previousCellIndex : this.model.columns.length - 1;
                                max = i == currentRowIndex ? currentCellIndex : 0;
								if( min > max ){
									for (var j = min; j >= max; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								}
								else{
									for (var j = max; j >= min; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								}                                
                                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndex: newCellColl });
                                this._rowIndexesColl.push(i);
                            }
                        }
                        break;
                    }
                    else {
                        this.clearCellSelection();
						this._virtualRowCellSelIndex = [];
                        for (var i = 0; i < rowCellIndexes.length; i++) {
                            if (rowCellIndexes[i][1].length > 1) {
                                var td = gridRows.eq(rowCellIndexes[i][0]).find(".e-rowcell");
                                if (this.model.scrollSettings.frozenColumns)
                                    td = bbdesigner$(gridRows[0]).eq(rowCellIndexes[i][0]).find(".e-rowcell").add(bbdesigner$(gridRows[1]).eq(rowCellIndexes[i][0]).find(".e-rowcell"));
                                for (var j = 0; j < td.length; j++) {
                                    var index = (this.model.detailsTemplate != null || this.model.childGrid != null) ? td[j].cellIndex - 1 : j;
                                    if (bbdesigner$.inArray(index, rowCellIndexes[i][1]) != -1) {
                                        bbdesigner$(td[j]).addClass("e-cellselectionbackground e-activecell");
                                        var selectedCellIndex = bbdesigner$.inArray(rowCellIndexes[i][0], this._rowIndexesColl);
                                        if (selectedCellIndex != -1)
                                            this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(td[j].cellIndex);
                                        else {
											bbdesigner$rowIndex = rowCellIndexes[i][0];
											if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
												viewDetails = this._getSelectedViewData(bbdesigner$rowIndex, td);
												bbdesigner$data = viewDetails.data;
												bbdesigner$rowIndex = viewDetails.rowIndex;
											}
                                            this.selectedRowCellIndexes.push({ rowIndex: bbdesigner$rowIndex, cellIndex: [td[j].cellIndex] });
                                            this._rowIndexesColl.push(rowCellIndexes[i][0]);
                                        }
                                    }
                                }
                            }
                            else {
                                if (this.model.scrollSettings.frozenColumns)
                                    this._frozenCell(rowCellIndexes[i][0], rowCellIndexes[i][1][0]).addClass("e-cellselectionbackground e-activecell");
                                else
                                    bbdesigner$(this.getRowByIndex(rowCellIndexes[i][0]).find(".e-rowcell:eq(" + rowCellIndexes[i][1] + ")")).addClass("e-cellselectionbackground e-activecell");
                                this.selectedRowCellIndexes.push({ rowIndex: bbdesigner$rowIndex, cellIndex: rowCellIndexes[i][1] });
                                this._rowIndexesColl.push(bbdesigner$rowIndex);
                            }
                        }
                        break;

                    }
                case BoldBIDashboard.Grid.SelectionType.Single:
                    this.clearCellSelection();
                    this.clearColumnSelection();
                    this.selectedRowCellIndexes = [];
					this._virtualRowCellSelIndex = [];
                    if (bbdesigner$.inArray(bbdesigner$rowIndex, this._rowIndexesColl) == -1)
                       this._rowIndexesColl.push(bbdesigner$rowIndex);
                    this.selectedRowCellIndexes.push({ rowIndex: bbdesigner$rowIndex, cellIndex: rowCellIndexes[0][1] });
                    if (this.model.scrollSettings.frozenColumns)
                        this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]).addClass("e-cellselectionbackground e-activecell");
                    else
						bbdesigner$(this.getRowByIndex(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")")).addClass("e-cellselectionbackground e-activecell");
                    break;
            }
            var args = { currentCell: bbdesigner$cell, cellIndex: rowCellIndexes[0][1], data: bbdesigner$data, selectedRowCellIndex: this.selectedRowCellIndexes, previousRowCellIndex: prevRowCellIndex, previousRowCell: previousRowCell};
            if (!this.multiSelectShiftRequest || BoldBIDashboard.isNullOrUndefined(this._previousRowCellIndex)){
				this._previousRowCellIndex = rowCellIndexes;
				if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){					
					this._preVirRowCellIndex = bbdesigner$.extend(true, [], rowCellIndexes);
					this._preVirRowCellIndex[0][0] = bbdesigner$rowIndex;
				}											
				this._prevRowCell = bbdesigner$cell;
			} 
            if (this._trigger("cellSelected", args))
                return;			
        },
		_selectMultipleCells: function(i, j, currentCellIndex, previousCellIndex){			
			if (this.model.scrollSettings.frozenColumns)
				this._frozenCell(i, j).addClass("e-cellselectionbackground e-activecell");
			else{				
				if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
					var viewIndex = this._getSelectedViewData(i).viewIndex;
					if(bbdesigner$.inArray(viewIndex, this._currentLoadedIndexes) != -1){
						var indx = this._currentLoadedIndexes.indexOf(viewIndex);
						var selIndex = i % this._virtualRowCount + indx * this._virtualRowCount;						
						bbdesigner$(this.getRowByIndex(selIndex).find(".e-rowcell:eq(" + j + ")")).addClass("e-cellselectionbackground e-activecell");
						if(bbdesigner$.inArray(i, this._virtualRowCellSelIndex) == -1 && bbdesigner$.inArray(i, this._rowIndexesColl) != -1 && i != this._preVirRowCellIndex[0][0])
							this._virtualRowCellSelIndex.push(i);
					}					
				}
				else
					bbdesigner$(this.getRowByIndex(i).find(".e-rowcell:eq(" + j + ")")).addClass("e-cellselectionbackground e-activecell");
			}
		},

        
        selectColumns: function (columnIndex, toIndex) {
            if (!this._allowcolumnSelection)
                return false;
            this._allowcolumnSelection = true;
            var gridRows = this.getRows();            
            var prevColumnHeaderCell = this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[this._previousColumnIndex];
            var args = { columnIndex: columnIndex == undefined ? toIndex : columnIndex, headerCell: bbdesigner$(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[columnIndex]), column: this.model.columns[columnIndex], previousColumnIndex: this._previousColumnIndex, prevColumnHeaderCell: prevColumnHeaderCell };
            var bbdesigner$precolIndex = this._previousColumnIndex;
            if ((args["isShiftPressed"] = this.multiSelectShiftRequest) == true)
                this._previousColumnIndex = columnIndex == undefined ? toIndex : columnIndex;
            else
                this._previousColumnIndex = toIndex;
            if (this.model.selectionType == "multiple") {
                args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                args["isShiftPressed"] = this.multiSelectShiftRequest;
            }
            if (this._trigger("columnSelecting", args))
                return;
            if (BoldBIDashboard.isNullOrUndefined(toIndex) || BoldBIDashboard.isNullOrUndefined(columnIndex)) {
                columnIndex = BoldBIDashboard.isNullOrUndefined(columnIndex) ? toIndex : columnIndex;
                switch (this.model.selectionType) {
                    case BoldBIDashboard.Grid.SelectionType.Multiple:
                        if (this.multiSelectCtrlRequest) {
                            var selectedColumnIndex = bbdesigner$.inArray(columnIndex, this.selectedColumnIndexes);
                            selectedColumnIndex != -1 && this.clearColumnSelection(columnIndex) && this.selectedColumnIndexes.splice(selectedColumnIndex, 0);
                            if (selectedColumnIndex == -1) {
                                this.selectedColumnIndexes.push(columnIndex);
                                this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
                                (this.model.detailsTemplate != null || this.model.childGrid != null) && ++columnIndex;
                                if (this.model.scrollSettings.frozenColumns)
                                    this._frozenColumnSelection(gridRows, columnIndex);
                                else
                                    for (var i = 0; i < gridRows.length; i++) {
                                        bbdesigner$(gridRows[i].cells[columnIndex]).addClass("e-columnselection");
                                    }
                                bbdesigner$(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell')[columnIndex]).addClass("e-columnselection");
                            }
                            break;
                        }
                    case BoldBIDashboard.Grid.SelectionType.Single:
                        this.clearSelection();
                        this.clearCellSelection();
                        this.clearColumnSelection();
                        this.selectedColumnIndexes = [];
                        this.selectedColumnIndexes.push(columnIndex);
                        this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
                        (this.model.detailsTemplate != null || this.model.childGrid != null) && ++columnIndex;
                        if (this.model.scrollSettings.frozenColumns)
                            this._frozenColumnSelection(gridRows, columnIndex);
                        else
                        for (var i = 0; i < gridRows.length; i++) {
                            bbdesigner$(gridRows[i].cells[columnIndex]).addClass("e-columnselection");
                        }
                        bbdesigner$(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell')[columnIndex]).addClass("e-columnselection");
                        break;
                }
            } else {
                if (this.model.selectionType == BoldBIDashboard.Grid.SelectionType.Multiple) {
                    this.clearColumnSelection();
                    this.selectedColumnIndexes = [];
                    var indent = 0;
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                        ++columnIndex; ++toIndex;
                        indent = 1;
                    }
                    var startIndex = columnIndex > toIndex ? toIndex : columnIndex;
                    var endIndex = columnIndex > toIndex ? columnIndex + 1 : toIndex + 1;
                    if (this.model.scrollSettings.frozenColumns)
                        this._frozenColumnSelection(gridRows, startIndex, endIndex);
                    else
                    for (var i = startIndex; i < endIndex; i++) {
                        for (var j = 0; j < gridRows.length; j++) {
                            bbdesigner$(gridRows[j].cells[i]).addClass("e-columnselection");
                        }
                        bbdesigner$(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell')[i]).addClass("e-columnselection");
                        this.selectedColumnIndexes.push(i - indent);
                    }
                }
            }
            var args = { columnIndex: columnIndex == undefined ? toIndex : columnIndex, headerCell: bbdesigner$(this.getHeaderTable().find('.e-columnheader').last().find('th').not('.e-detailheadercell')[columnIndex]), column: this.model.columns[columnIndex], selectedColumnIndex: this.selectedColumnIndexes, previousColumnIndex: bbdesigner$precolIndex, prevColumnHeaderCell: prevColumnHeaderCell };
            if (this._trigger("columnSelected", args))
                return;
        },
        
        clearSelection: function (index) {
             var bbdesigner$gridRows, index;
            if (this._selectedRow() >= -1) {
                if (this.model.scrollSettings.frozenColumns)
                    bbdesigner$gridRows = this._excludeDetailRows();
                else
                    bbdesigner$gridRows = bbdesigner$(this.element.find("tr[aria-selected='true']"));
                if (!BoldBIDashboard.isNullOrUndefined(index)) {
                    this.getRowByIndex(index).removeAttr("aria-selected").find(".e-selectionbackground").removeClass("e-selectionbackground").removeClass("e-active");
					var row = this.getRowByIndex(index);
					if(this.model.scrollSettings.enableVirtualization && this.multiSelectCtrlRequest && bbdesigner$.inArray(index, this.selectedRowsIndexes) == -1){
						var limit = parseInt(row.attr("name"), 32) * this._virtualRowCount;
						var remain = this._virtualRowCount - row.index() % this._virtualRowCount;	
						index = limit - remain;
					}
                    index = bbdesigner$.inArray(index, this.selectedRowsIndexes);
                    if (index != -1)
                        this.selectedRowsIndexes.splice(index, 1);
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0)
                        bbdesigner$gridRows = bbdesigner$(bbdesigner$gridRows[0]).add(bbdesigner$gridRows[1]);
                    bbdesigner$gridRows.removeAttr("aria-selected").find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-selectionbackground").removeClass("e-active");
                    if(!this._clearVirtualSelection){
						this.selectedRowsIndexes = [];
						this.model.selectedRecords = [];
					}
                }
                if (!this.selectedRowsIndexes.length)
                    this._selectedRow(-1);
            }
            return true;
        },

        _excludeDetailRows:function()
		{
			var bbdesigner$gridRows;
			if (!BoldBIDashboard.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid || this.model.showSummary))
                    bbdesigner$gridRows = bbdesigner$(this.getRows()).not(".e-detailrow,.e-gridSummaryRows");
                else
                    bbdesigner$gridRows = bbdesigner$(this.getRows());
			return bbdesigner$gridRows;
		},
        
        clearCellSelection: function (rowIndex, columnIndex) {
            var bbdesigner$gridRows, cellIndex;
            if (this._allowcellSelection) {
                if (this.model.scrollSettings.frozenColumns || !BoldBIDashboard.isNullOrUndefined(rowIndex))
                    bbdesigner$gridRows = this._excludeDetailRows();
                else
                    bbdesigner$gridRows = bbdesigner$(this.element.find(".e-cellselectionbackground")).parent();
                if (BoldBIDashboard.isNullOrUndefined(rowIndex)) {
                    if (this.model.scrollSettings.frozenColumns)
                        bbdesigner$gridRows = bbdesigner$(bbdesigner$gridRows[0]).add(bbdesigner$gridRows[1]);
                    bbdesigner$gridRows.find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-cellselectionbackground").removeClass("e-activecell");
                    this.selectedRowCellIndexes = [];
                    this._rowIndexesColl = [];
                }
                else {
                    for (var i = 0; i < this.selectedRowCellIndexes.length ; i++) {
                        if (this.selectedRowCellIndexes[i].rowIndex == rowIndex) {
                            cellIndex = bbdesigner$.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex);
                            if (this.model.scrollSettings.frozenColumns)
                                this._frozenCell(rowIndex, columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
                            else
                            bbdesigner$gridRows.eq(rowIndex).find(".e-rowcell").eq(columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
                            break;
                        }
                    }
                    if (i != this.selectedRowCellIndexes.length) {
                        this.selectedRowCellIndexes[i].cellIndex.splice(cellIndex, 1);
                        if (this.selectedRowCellIndexes[i].cellIndex.length == 0) {
                            this.selectedRowCellIndexes.splice(i, 1);
                            this._rowIndexesColl.splice(bbdesigner$.inArray(rowIndex, this._rowIndexesColl), 1);
                        }
                    }
                }
            }
            return true;
        },

        
        clearColumnSelection: function (index) {
            if (this._allowcolumnSelection) {
                var bbdesigner$gridRows = bbdesigner$(this._excludeDetailRows());
                if (!BoldBIDashboard.isNullOrUndefined(index)) {
                    var indent = 0;
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                        ++index; indent = 1;
                    }
                    if (this.model.scrollSettings.frozenColumns) {
                        var frozenDiv = 0; currentIndex = index;
                        if (index >= this.model.scrollSettings.frozenColumns) {
                            frozenDiv = 1;
                            currentIndex = index - this.model.scrollSettings.frozenColumns;
                        }
                        for (var j = 0; j < bbdesigner$gridRows[frozenDiv].length; j++) {
                            bbdesigner$(bbdesigner$gridRows[frozenDiv][j].cells[currentIndex]).removeClass("e-columnselection");
                        }
                    }
                    else
                        for (var i = 0; i < bbdesigner$gridRows.length; i++) {
                            bbdesigner$(bbdesigner$gridRows[i].cells[index]).removeClass("e-columnselection");
                        }
                    bbdesigner$(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[index]).removeClass("e-columnselection");
                    this.selectedColumnIndexes.splice(0, index - indent);

                } else {
                    if (this.model.scrollSettings.frozenColumns)
                        bbdesigner$gridRows = bbdesigner$(bbdesigner$gridRows[0]).add(bbdesigner$gridRows[1]);
                    bbdesigner$gridRows.find(".e-rowcell").removeClass("e-columnselection");
                    bbdesigner$(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")).removeClass("e-columnselection");
                    this.selectedColumnIndexes = [];
                }
            }
            return true;
        },
        getSelectedRows:function(){
            var bbdesigner$rows = bbdesigner$();
            for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
                if (this.model.scrollSettings.frozenColumns > 0) {
                    bbdesigner$rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[0]);
                    bbdesigner$rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[1]);
                }
                else
                    bbdesigner$rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[0]);
            }
            return bbdesigner$rows;
        },
        getSelectedRecords: function () {
            var records = [];
            if (this._virtualScrollingSelection)
                return this._virtualSelRecords;
            for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
                if (this.selectedRowsIndexes[i] != -1) {
                    if (this.model.scrollSettings.allowVirtualScrolling)
                        records.push(this._virtualSelectedRecords[this.selectedRowsIndexes[i]]);
                    else
                        records.push(this._currentJsonData[this.selectedRowsIndexes[i]]);
                }
            }
            return records;
        },
        _setCurrentRow: function (requestType) {
            if (requestType == BoldBIDashboard.Grid.Actions.Refresh || requestType == BoldBIDashboard.Grid.Actions.Ungrouping || requestType == BoldBIDashboard.Grid.Actions.Grouping || requestType == BoldBIDashboard.Grid.Actions.Filtering || requestType == BoldBIDashboard.Grid.Actions.Sorting || requestType == BoldBIDashboard.Grid.Actions.Delete || requestType == BoldBIDashboard.Grid.Actions.Save || requestType == BoldBIDashboard.Grid.Actions.Cancel || requestType == BoldBIDashboard.Grid.Actions.Paging) {
                this._selectedRow(-1);
				if(!this._virtualDataRefresh)
					this.selectedRowsIndexes = [];
            }
        },
        _renderMultiTouchDialog: function () {
            this._customPop = BoldBIDashboard.buildTag("div.e-gridpopup", "", { display: "none" });
            var bbdesigner$content = BoldBIDashboard.buildTag("div.e-content"), bbdesigner$downTail = BoldBIDashboard.buildTag("div.e-downtail e-tail");
            if (this.model.allowMultiSorting) {
                var bbdesigner$selElement = BoldBIDashboard.buildTag("span.e-sortdirect e-icon");
                bbdesigner$content.append(bbdesigner$selElement);
            }
            if (this.model.selectionType == BoldBIDashboard.Grid.SelectionType.Multiple) {
                var bbdesigner$selElement = BoldBIDashboard.buildTag("span.e-rowselect e-icon");
                bbdesigner$content.append(bbdesigner$selElement);
            }
            this._customPop.append(bbdesigner$content);
            this._customPop.append(bbdesigner$downTail);
            this.element.append(this._customPop);
        },
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    
    BoldBIDashboard.widget("BoldBIDashboardGrid", "BoldBIDashboard.Grid",  {
        
        _rootCSS: "e-grid",
        // widget element will be automatically set in this
        element: null,
        validTags: ["div"],
        // user defined model will be automatically set in this
        model: null,
        _requiresID: true,
        keyConfigs: /** @lends BoldBIDashboardGrid# */{
            focus: "e",
            insertRecord: "45", //Insert
            deleteRecord: "46", // delete
            editRecord: "113", //F2
            saveRequest: "13", // enter
            cancelRequest: "27", //Esc
            nextPage: "34", // PgDn
            previousPage: "33", // PgUp
            lastPage: "ctrl+alt+34", //"CtrlAltPgDn",
            firstPage: "ctrl+alt+33", //"CtrlPlusAltPlusPgUp",
            nextPager: "alt+34", //"AltPlusPgDown",
            previousPager: "alt+33", //"AltPlusPgUp",
            firstCellSelection: "36", //"Home",
            lastCellSelection: "35", //"End",
            firstRowSelection: "ctrl+36", //"CtrlPlusHome",
            lastRowSelection: "ctrl+35", //"CtrlPlusEnd",
            rowUpSelection: "ctrl+shift+38", //"CtrlPlusShiftplusUpArrow",
            rowDownSelection: "ctrl+shift+40", //"CtrlPlusShiftplusDownArrow",
            randomSelection: "ctrl+shift+83", // "CtrlPlusShiftplusSkey",
            upArrow: "38", //Up arrow
            downArrow: "40", //Down arrow
            rightArrow: "39", //Right arrow
            leftArrow: "37", //Left arrow
            moveCellRight: "9", //tab
            moveCellLeft: "shift+9", //shifttab
            selectedGroupExpand: "alt+40", //"AltPlusDownArrow",
            totalGroupExpand: "ctrl+40", //"CtrlPlusDownArrow",
            selectedGroupCollapse: "alt+38", //"AltPlusUpArrow",
            totalGroupCollapse: "ctrl+38", //"CtrlPlusUpArrow",
            multiSelectionByUpArrow: "shift+38",//"shiftPlusUpArrow",
            multiSelectionByDownArrow:"shift+40",//"shiftPlusDownArrow"
        },
        _ignoreOnPersist: [
            "query", "isEdit", "toolbarClick", "queryCellInfo", "mergeCellInfo", "currentViewData", "enableAltRow", "enableRTL", "contextClick", "contextOpen",
            "rowDataBound", "rowTemplate", "detailsDataBound", "detailsTemplate", "childGrid", "summaryRows", "toolbarSettings",
            "editSettings", "allowMultiSorting", "enableAutoSaveOnSelectionChange", "locale", "allowCellMerging",
            "allowTextWrap","textWrapSettings", "cssClass", "dataSource", "groupSettings.enableDropAreaAnimation", "enableRowHover", "showSummary", "allowGrouping",
            "enableHeaderHover", "allowKeyboardNavigation", "scrollSettings.frozenRows", "scrollSettings.frozenColumns", "enableTouch", "editSettings.rowPosition", "editSettings.showAddNewRow", "contextMenuSettings.enableContextMenu",
        ],
        ignoreOnExport: [
            "isEdit", "toolbarClick", "query", "queryCellInfo", "selectionType", "currentViewData", "rowDataBound", "rowTemplate",
            "detailsDataBound", "detailsTemplate", "editSettings", "pageSettings", "enableAutoSaveOnSelectionChange", "localization", "allowScrolling",
            "cssClass", "dataSource", "groupSettings.enableDropAreaAnimation", "enableRowHover", "allowSummary",
            "enableHeaderHover", "allowKeyboardNavigation"
        ],
        observables: ["dataSource", "selectedRowIndex", "pageSettings.currentPage"],
        _tags: [{
            tag: "columns",
            attr: ["allowEditing", "allowFiltering", "allowGrouping","allowResizing","allowSorting", "cssClass", "customAttributes", "dataSource", "defaultValue",
			"disableHtmlEncode", "editTemplate", "editType", "foreignKeyField", "foreignKeyValue", "headerTemplateID", "headerText", "isFrozen",
			"isIdentity", "isPrimaryKey","filterBarTemplate", "textAlign", "templateID", "textAlign", "headerTextAlign", "tooltip", "clipMode",
            "validationRules.minlength", "validationRules.maxlength", "validationRules.range", "validationRules.number", "validationRules.required",
            "editParams.decimalPlaces", [{ tag: "commands", attr: ["type", "buttonOptions"] }]
            ],
            content: "template"
        }, {
            tag: "summaryRows",
            attr: ["showCaptionSummary", "showTotalSummary", [{
                tag: "summaryColumns", attr: ["customSummaryValue", "dataMember", "displayColumn", "summaryType", "template"]
            }]]
        }, {
            tag: "stackedHeaderRows",
            attr: [
            [{
                tag: "stackedHeaderColumns", attr: ["headerText", "column"]
            }]]
        }, {
            tag: "filterSettings.filteredColumns", attr: []
        }, {
            tag: "sortSettings.sortedColumns", attr: []
        }],
        _dataSource: BoldBIDashboard.util.valueFunction("dataSource"),
        _selectedRow: BoldBIDashboard.util.valueFunction("selectedRowIndex"),
        _currentPage: BoldBIDashboard.util.valueFunction("pageSettings.currentPage"),
        // default model
        defaults: /** @lends BoldBIDashboardGrid# */ {            
            allowPaging: false,
            multiSelectCheckBox: false,            
            showColumnChooser: false,            
            gridLines: "both",            
            allowSorting: false,            
            showStackedHeader: false,            
            selectedRecords: [],
            stackedHeaderRows: [],
            allowFiltering: false,
            allowMultipleExporting: false,            
            allowSelection: true,            
            allowGrouping: false,            
            showSummary: false,            
            allowResizing: false,            
            allowResizeToFit: false,            
            allowTextWrap: false,            
            allowCellMerging: false,            
            enableRowHover: true,            
            enablePersistence: false,            
            selectedRowIndex: -1,            
            allowSearching: false,
            enableToolbarItems:false,            
            enableHeaderHover: false,            
            allowReordering: false,            
            allowKeyboardNavigation: true,
            allowRowDragAndDrop: false,
            enableTouch: true,
            columnLayout:'auto',            
            selectionType: "single",            
            dataSource: null,            
            cssClass: "",            
            allowScrolling: false,            
            locale: "en-US",            
            enableAutoSaveOnSelectionChange: true,            
            allowMultiSorting: false,
            exportToExcelAction: "",
            exportToWordAction: "",
            exportToPdfAction: "",
            _groupingCollapsed: [],
            editSettings:  {                
                allowEditing: false,                
                showAddNewRow: false,                
                allowAdding: false,                
                showAddNewRow: false,                
                allowDeleting: false,                
                editMode: "normal",                
                rowPosition: "top",                
                dialogEditorTemplateID: null,                
                allowEditOnDblClick: true,                
                externalFormTemplateID: null,                
                inlineFormTemplateID: null,                
                formPosition: "bottomleft",               
				titleColumn: null,			   
                showConfirmDialog: true,                
                showDeleteConfirmDialog: false
            },            
            selectionSettings:  {                
                selectionMode: ["row"],                
                enableToggle: false,                
                cellSelectionMode: "flow"
            },            
            pageSettings:  {               
                pageSize: 12,                
                pageCount: 8,                
                currentPage: 1,                
                totalPages: null,                
                enableTemplates: false,                
                showDefaults: false,                
                template: null,                
                totalRecordsCount: null,                
                enableQueryString: false,
                printMode: "allpages"
            },            
            groupSettings:  {               
                showDropArea: true,                
                showToggleButton: false,                     
                showGroupedColumn: true,                
                showUngroupButton: true,                
                enableDropAreaAutoSizing: true,                
                captionFormat: null,                
                groupedColumns: []
            },          
            contextMenuSettings: {                
                enableContextMenu: false,                
                contextMenuItems: ["Add Record", "Edit Record", "Delete Record", "Sort In Ascending Order", "Sort In Descending Order", "Next Page", "Last Page", "Previous Page", "First Page", "Save", "Cancel", "Grouping", "Ungrouping"],
                customContextMenuItems: [],
                subContextMenu: [],
                disableDefaultItems: false
            },            
            filterSettings:  {                
                filterType: "filterbar",                
                filterBarMode: "immediate",                
                showFilterBarStatus: true,
                statusBarWidth: 450,                
                showPredicate: false,                
                filteredColumns: [],
                enableInterDeterminateState: true,                
                maxFilterChoices: 1000,                
                enableCaseSensitivity: false,
                immediateModeDelay: 1500,
                enableComplexBlankFilter: true,
                blankValue: ""
            },
            searchSettings:  {                
                fields: [],                
                key: "",                
                operator: "contains",                
                ignoreCase: true
            },            
            sortSettings:  {                                             
                sortedColumns: []
            },            
            toolbarSettings:  {                
                showToolbar: false,                
                toolbarItems: [],                
                customToolbarItems: []
            },            
            minWidth: 0,
            currentIndex: 0,
            rowDropSettings: {
                dropMapper: null,
                dragMapper: null,
                dropTargetID: null,
            },
            scrollSettings: 
            {                
                width: "auto",                
                height: 0,                
                enableTouchScroll: true,                
                allowVirtualScrolling: false,                
                virtualScrollMode: "normal",                
                frozenRows: 0,                
                frozenColumns: 0,
                buttonSize: 18,
                autoHide: false,
                scrollerSize: 18,
                scrollOneStepBy: 57,
				enableVirtualization: false
            },  
            textWrapSettings: {
                wrapMode: "both"
            },                    
            summaryRows: [],            
            enableRTL: false,            
            enableAltRow: true,
            currentViewData: null,            
            detailsTemplate: null,            
            childGrid: null,            
            keySettings: null,            
            rowTemplate: null,            
            detailsDataBound: null,            
            rowDataBound: null,            
            queryCellInfo: null,                      
            mergeCellInfo: null,            
            create: null,            
            actionBegin: null,            
            actionComplete: null,            
            actionFailure: null,            
            beginEdit: null,            
            endEdit: null,            
            endAdd: null,            
            endDelete: null,            
            beforeBatchAdd: null,            
            beforeBatchSave: null,            
            beforeBatchDelete: null,            
            batchAdd: null,            
            batchDelete: null,            
            cellSave: null,            
            cellEdit: null,            
            resizeStart: null,            
            resizeEnd: null,            
            resized: null,            
            load: null,            
            destroy: null,            
            rowSelecting: null,            
            rowSelected: null,            
            cellSelecting: null,            
            cellSelected: null,            
            columnSelecting: null,            
            columnSelected: null,            
            columnDragStart: null,            
            columnDrag: null,            
            columnDrop: null,            
            dataBound: null,            
            recordClick: null,            
            recordDoubleClick: null,            
            templateRefresh: null,            
            rightClick: null,            
            detailsCollapse: null,            
            detailsExpand: null,            
            toolbarClick: null,           
            contextOpen: null,            
            contextClick: null,       
            filterClick: null,
            columns: [],            
            query: null,
            isEdit: false,            
            isResponsive: false,            
            enableResponsiveRow: false,
			virtualLoading: null
        },
        dataTypes: {
            dataSource: "data",
            query: "data",
            columns: "array",
            childGrid: "parent",
            gridLines: "enum",
            summaryRows: "array",
            stackedHeaderRows: "array",
            toolbarSettings: {
                toolbarItems: "array",
                customToolbarItems: "array"
            },
            contextMenuSettings: {
                contextMenuItems: "array",
                customContextMenuItems: "array",
                subContextMenu: "array"
            },
            selectionSettings: {
                selectionMode: "array",
                selectedRecords: "array"
            },
            sortSettings: {
                sortedColumns: "array"
            },
            filterSettings: {
                filteredColumns: "array",
                filterType: "enum",
                filterBarMode: "enum",
            },
            groupSettings: {
                groupedColumns: "array"
            },
            editSettings: {
                editMode: "enum",
                formPosition: "enum",
                rowPosition: "enum",
            },
            searchSettings: {
                fields: "array"
            },
            textWrapSettings: {
                wrapMode: "enum"
            }
        },

        _columns: function (index, property, value, old) {
            var bbdesigner$header = this.element.find(".e-gridheader");
            bbdesigner$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
            this._headerCellgDragDrop();
            this.refreshContent(true);
            this._trigger("refresh");
        },
        _summaryRows: function (index, property, value, old) {
            if (property == "showTotalSummary" || property == "showCaptionSummary") {
                var indx = index.summaryRows;
                var val = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? BoldBIDashboard.parseJSON(value) : false;
                this.option("summaryRows")[indx][property] = val;
            }
            this.element.find(".e-gridfooter").remove();
            this._renderGridFooter().insertAfter(this.getContent());
            if (property == "showCaptionSummary" || property == "title") {
                this._isCaptionSummary = this.option("summaryRows")[indx]["showCaptionSummary"];
                this.model.showSummary = this._isCaptionSummary;
                if (this.model.groupSettings.groupedColumns.length != 0)
                    this._refreshCaptionSummary();
            }
        },
        _summaryRows_summaryColumns: function (index, property, value, old) {
            if (property == "displayColumn" || property == "dataMember") {
                if (BoldBIDashboard.isNullOrUndefined(this.getColumnByField(value)))
                    return;
            }
            this._createSummaryRows(this.getFooterTable());
            if (this.element.find(".e-groupcaptionsummary").length != 0)
                this._refreshCaptionSummary();
        },
        _stackedHeaderRows_stackedHeaderColumns: function (index, property, value, old) {
            this._refreshStackedHeader();
        },
        _sortSettings_sortedColumns: function (index, property, value, old) {
            var colName, direction;
            var sortObj = this.model.sortSettings.sortedColumns[index["sortSettings.sortedColumns"]];
            if (property == "field") {
                colName = this.getColumnByField(value) != null ? value : null;
                direction = (sortObj.direction == "ascending" || sortObj.direction == "descending") ? sortObj.direction : null;
            }
            else if (property == "direction") {
                colName = this.getColumnByField(sortObj.field) != null ? sortObj.field : null;
                direction = (value == "ascending" || value == "descending") ? value : null;
            }
            if (colName != null && direction != null)
                this.sortColumn(colName, direction);
        },
        _filterSettings_filteredColumns: function (index, property, value, old) {
            var field, operator, matchcase, predicate, filtervalue;
            var filterObj = this.model.filterSettings.filteredColumns[index["filterSettings.filteredColumns"]];
            switch (property) {
                case "field":
                    field = this.getColumnByField(value) != null ? value : null;
                    operator = this._map(BoldBIDashboard.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "matchcase":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(BoldBIDashboard.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? BoldBIDashboard.parseJSON(value) : false;
                    break;
                case "operator":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(BoldBIDashboard.FilterOperators, value);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "predicate":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(BoldBIDashboard.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (value == "and" || value == "or") ? value : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "value":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(BoldBIDashboard.FilterOperators, filterObj.operator);
                    filtervalue = value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
            }
            if (field != null && operator != null && filtervalue != null && predicate != null && matchcase != null)
                this.filterColumn(field, operator, filtervalue, predicate, matchcase);
        },
        _map: function (object, value) {
            var data = bbdesigner$.map(object, function (obj) {
                if (obj === value)
                    return obj;
            });
            return data.length != 0 ? data[0] : null;
        },
        _refreshCaptionSummary: function () {
            var temp = document.createElement('div');
            temp.innerHTML = ['<table>', bbdesigner$.render[this._id + "_GroupingTemplate"](this.model.currentViewData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
            this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
            this.refreshContent();
        },
        
        getContentTable: function () {
            return this._gridContentTable;
        },

        setGridContentTable: function (value) {
            this._gridContentTable = value;
        },
        
        getContent: function () {
            return this._gridContent;
        },

        setGridContent: function (value) {
            this._gridContent = value;
        },
        
        getHeaderContent: function () {
            return this._gridHeaderContent;
        },

        setGridHeaderContent: function (value) {
            this._gridHeaderContent = value;
        },
        
        getHeaderTable: function () {
            return this._gridHeaderTable;
        },

        setGridHeaderTable: function (value) {
            this._gridHeaderTable = value;
        },
        
        getRows: function () {
            return this._gridRows;
        },
        
        getFilteredRecords: function () {
            return this._filteredRecords;
        },
        
        getRowByIndex: function (from, to) {
            try {
                var gridRows = this.getRows(), bbdesigner$gridRows = this._excludeDetailRows(), bbdesigner$row = bbdesigner$();
                if (bbdesigner$.isArray(from)) {
                    for (var i = 0; i < from.length; i++) {
                        if (this.model.scrollSettings.frozenColumns > 0) {
                            bbdesigner$row.push(gridRows[0][from[i]]);
                            bbdesigner$row.push(gridRows[1][from[i]]);
                        }
                        else
                            bbdesigner$row.push(gridRows[from[i]]);
                    }
                    return bbdesigner$row;
                }
                else if (BoldBIDashboard.isNullOrUndefined(to)) {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        bbdesigner$row.push(gridRows[0][from]);
                        bbdesigner$row.push(gridRows[1][from]);
                        return bbdesigner$row;
                    }
                    return bbdesigner$((bbdesigner$gridRows).not(".e-virtualrow")[from]);
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        bbdesigner$row.push(bbdesigner$(gridRows[0]).slice(from, to));
                        bbdesigner$row.push(bbdesigner$(gridRows[1]).slice(from, to));
                        return bbdesigner$row;
                    }
                    return bbdesigner$(bbdesigner$gridRows.not(".e-virtualrow").slice(from, to));
                }
            } catch (e) {
                return bbdesigner$();
            }
        },
        
        getColumnIndexByField: function (field) {
            for (var i = 0, col = this.model.columns, len = col.length ; i < len ; i++) {
                if (col[i]["field"] === field)
                    return i;
            }
            return -1;
        },
        
        getColumnIndexByHeaderText: function (headerText, field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["headerText"] == headerText) {
                    if (field) {
                        if (BoldBIDashboard.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
                            break;
                    }
                    else
                        break;
                }
            }
            return column;
        },
        
        getIndexByRow: function (bbdesigner$tr) {
            var gridRows = this.getRows(), bbdesigner$gridRows = this._excludeDetailRows(), rowIndex;
            if (this.model.scrollSettings.frozenColumns > 0) {
                rowIndex = bbdesigner$(gridRows[0]).index(bbdesigner$tr);
                if (rowIndex == -1)
                    rowIndex = bbdesigner$(gridRows[1]).index(bbdesigner$tr);
                return rowIndex;
            } else
                return bbdesigner$gridRows.not(".e-virtualrow").index(bbdesigner$tr);
        },
        
        getPrimaryKeyFieldNames: function () {
            if (this._primaryKeys.length != 0)
                return this._primaryKeys;
            for (var key = 0, col = this.model.columns, cLen = col.length; key < cLen; key++) {
                if (col[key]["isPrimaryKey"])
                    this._primaryKeys.push(col[key]["field"]);
            }
            return this._primaryKeys;
        },
        
        getVisibleColumnNames: function (headerText) {
            return this._visibleColumns;
        },
        
        getHiddenColumnNames: function (headerText) {
            return this._hiddenColumns;
        },
        
        getColumnByField: function (field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["field"] == field)
                    break;
            }
            return column == this.model.columns.length ? null : this.model.columns[column];
        },
        
        getsortColumnByField: function (field) {
            for (var column = 0; column < this.model.sortSettings.sortedColumns.length; column++) {
                if (this.model.sortSettings.sortedColumns[column]["field"] == field)
                    break;
            }
            return column == this.model.sortSettings.sortedColumns.length ? null : this.model.sortSettings.sortedColumns[column];
        },
        
        getColumnByHeaderText: function (headerText, field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["headerText"] == headerText) {
                    if (field) {
                        if (BoldBIDashboard.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
                            break;
                    }
                    else
                        break;
                }
            }
            return column == this.model.columns.length ? null : this.model.columns[column];
        },
        
        getCurrentViewData: function () {
            return this._currentJsonData;
        },
        
        getColumnFieldNames: function () {
            var columnNames = [];
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["field"])
                    columnNames.push(this.model.columns[column]["field"]);
            }
            return columnNames;
        },
        
        getBrowserDetails: function () {
            var b = navigator.userAgent.match(/(firefox|mozilla|chrome|opera|msie|safari)\s?\/?(\d+(.\d+)*)/i);
            if (!!navigator.userAgent.match(/Trident\/7\./))
                return { browser: "msie", version: bbdesigner$.uaMatch(navigator.userAgent).version };
            return { browser: b[1].toLowerCase(), version: b[2] };
        },
        _initPrivateProperties: function () {
            this._click = 0;
			this._tabKey = false;
            this._gridHeaderTable = null;
            this._gridWidth = this.element.width();
            this._id = this.element.attr("id");
            this._gridRows = null;
			this._unboundRow = null;
            this._gridContentTable = null;
            this._gridContent = null;
            this._remoteSummaryData = null;
            this._gridSort = null;
            this._gridHeaderContent = null;
            this._gridFooterContent = null;
            this._gridFooterTable = null;
            this._gridRecordsCount = this._dataSource() !== null ? (this.model.pageSettings.totalRecordsCount == null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount) : 0;
            this._links = null;
            this._gridPager = null;
            this._cSortedColumn = null;
            this._cSortedDirection = null;
            this._bbdesigner$curSElementTarget = null;
            this._gridFilterBar = null;
            this._bbdesigner$curFieldName = null;
            this._bbdesigner$prevFieldName = null;
            this._mediaStatus = false;
            this._bbdesigner$fDlgIsOpen = false;
            this._bbdesigner$menuDlgIsOpen = false;
            this._bbdesigner$colType = null;
            this._bbdesigner$colFormat = null;
            this._bbdesigner$prevColType = null;
            this._bbdesigner$prevSElementTarget = null;
            this._currentFilterColumn = null;
            this._filteredRecordsCount = null;
            this._filteredRecords = [];
            this._validatedColumns = [];
            this.filterColumnCollection = [];
            this._previousFilterCount = null;
            this._excelFilter = null;
            this._isExcelFilter = this.model.filterSettings.filterType == "excel";
            this._bbdesigner$fkColumn = false;
			this._fkParentTblData =[];
            this._primaryKeys = [];
            this._identityKeys = [];
            this._primaryKeyValues = [];
            this._modifiedRecords = [];
            this._addedRecords = [];
            this._tdsOffsetWidth = [];
            this._deletedRecords = [];
            this._disabledToolItems = bbdesigner$();
            this._validationRules = {};
            this._groupedColumns = [];
            this._scolumns = [];
            this._currentJsonData = [];
            this._groupingColumnIndex = 0;
            this._dataManager = this._dataSource() instanceof BoldBIDashboard.DataManager ? this._dataSource() : this._dataSource() != null ? BoldBIDashboard.DataManager(this._dataSource()) : null;
            if (this._dataManager != null && this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.totalRecordsCount != null && this._dataManager.dataSource.json != null)
                this._dataManager.dataSource.json.splice(this.model.pageSettings.totalRecordsCount);
            this._isRemoteSaveAdaptor = (this._dataSource() instanceof BoldBIDashboard.DataManager && this._dataSource().adaptor instanceof BoldBIDashboard.remoteSaveAdaptor);
            this._isLocalData = true;
            this._disabledResizingColumns = [];
            this._disabledSortableColumns = [];
            this._disabledGroupableColumns = [];
            this._disabledFilterableColumns = [];
            this._disabledEditableColumns = [];
            this._hiddenColumns = [];
            this._visibleColumns = [];
            this._visibleColumnsField = [];
            this._hiddenColumnsField = [];
            this._ccVisibleColumns = [];
            this._ccHiddenColumns = [];
            this._sortedColumns = [];
            this.multiSortRequest = false;
            this.multiSelectCtrlRequest = false;
            this.multiSelectShiftRequest = false;
            this._enableSelectMultiTouch = false;
            this._enableSortMultiTouch = false;
            this._templateRefresh = false;
            this.initialRender = false;
            this._selectDrag = false;
            this._isAddNew = false;
            this._fieldColumnNames = {};
            this._headerColumnNames = {};
             this._virtualLoadedRecords = {};
            this._virtualLoadedRows = {};
			this._virtualPageRecords = {};
			this._queryCellView = [];
			this._currentPageViews = [];
            this._virtualLoadedPages = [];                                  
            this._currentLoadedIndexes = [];
			this._prevVirtualSort = [];
			this._prevVirtualFilter = [];
            this._prevVirtualIndex = 0;
            this._currentVirtualIndex = 1;
            this._virtualRowCount = 0;
            this._virtualSelectedRecords = {};
            this.selectedRowsIndexes = [];
            this._isReorder = false;
            this._searchString = "";
            this._searchCount = null;
            this.columnsWidthCollection = [];
            this._Indicator = null;
            this._resizer = null;
            this._bulkEditCellDetails = {
                cellValue: null,
                rowIndex: -1,
                columnIndex: -1,
                fieldName: null,
                _data: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                rowData: null
            };
            this.batchChanges = {
                added: [],
                deleted: [],
                changed: []
            };
            this._bulkEditTemplate = bbdesigner$();
            this._confirmDialog = null;
            this._confirmedValue = false;
            this._lastRow = false;
            this._isVirtualRecordsLoaded = false;
            this._scrollValue = 0;
            this._currentTopFrozenRow = this.model.scrollSettings.frozenRows;
            this._rowHeightCollection = [];
            this._scrollObject = null;
            this._customPop = null;
            this.selectedRowCellIndexes = [];
            this._rowIndexesColl = [];
            this.selectedColumnIndexes = [];
			this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
            this.commonQuery = bbdesigner$.extend(true, {}, this.model.query);
            if (BoldBIDashboard.gridFeatures.group) {
                this._rowCol = this._captionSummary();
                this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
            }
            this.phoneMode = this.model.isResponsive && document.documentElement.clientWidth < 360 ? true : false;
            if (this.model.selectionSettings.selectionMode.length > 0 && this.model.allowSelection)
                this._initSelection();
            this._mediaQuery = false;
            this._columnChooserList = null;
            this._bbdesigner$headerCols = null;
            this._bbdesigner$contentCols = null;
            this._detailsOuterWidth = null;
            this._editForm = null;
            this._cloneQuery = null;
            this.localizedLabels = this._getLocalizedLabels();
            this._searchBar = null;
            this._relationalColumns = [];
            this._dropDownManager = {};
			if (this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1 && !this._remoteLastPageRendered)
                this._previousPageRendered = true;
            else
                this._previousPageRendered = false;
        },
        _init: function () {
            this._trigger("load");
            if (BoldBIDashboard.isNullOrUndefined(this.model.query) || !(this.model.query instanceof BoldBIDashboard.Query))
                this.model.query = BoldBIDashboard.Query();
			this._initPrivateProperties();
            if (BoldBIDashboard.gridFeatures.common)
                this._initScrolling();            
            if (this.model.enableResponsiveRow)
                this.element.addClass("e-responsive");
            this._checkForeignKeyBinding();
            this._checkDataBinding();
        },
        _initComplexColumn: function (obj, field, cxField) {
            var complexField = cxField || field;
            for (var field1 in obj) {

                if (typeof obj[field1] == "object" && !BoldBIDashboard.isNullOrUndefined(obj[field1])) {
                    complexField = complexField.concat(".").concat(field1);
                    this._initComplexColumn(obj[field1], field1, complexField);
                }
                else {
                    var cxFieldName = (complexField).concat(".").concat(field1), value = obj[field1];;
                    this.model.columns.push({
                        field: cxFieldName,
                        type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
                    });
                }
            }
        },
        _initColumns: function (object) {
            while (object != undefined && object.items != undefined)
                object = object.items[0];
            if (this.model.columns.length == 0 && object) {
                for (var field in object) {
                    if (object.hasOwnProperty(field) && (typeof (object[field]) != "object" || object[field] instanceof Date || object[field] == null)) {
                        var value = object[field];
                        this.model.columns.push({
                            field: field,
                            type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
                        });
                    }
                    else if (typeof (object[field]) == "object") {
                        this._initComplexColumn(object[field], field);
                    }
                }
                this.model.columns.length && this._renderAfterColumnInitialize();
            } else {
                for (var index = 0; index < this.model.columns.length; index++) {
                    this.model.columns[index].field = BoldBIDashboard.isNullOrUndefined(this.model.columns[index].field) ? "" : this.model.columns[index].field;
                    if (!BoldBIDashboard.isNullOrUndefined(this.model.columns[index].validationRules))
                        this._validatedColumns.push(this.model.columns[index].field);
                    if (BoldBIDashboard.isNullOrUndefined(this.model.columns[index].type)) {
                        var bbdesigner$field = !BoldBIDashboard.isNullOrUndefined(this.model.columns[index].field) ? BoldBIDashboard.getObject(this.model.columns[index].field, object) : null, coldata = this.model.columns[index].dataSource;
                        if (!!coldata && this.model.columns[index].foreignKeyValue) {
                            this.model.columns[index].originalType = bbdesigner$field != null ? (bbdesigner$field.getDay ? (bbdesigner$field.getHours() > 0 || bbdesigner$field.getMinutes() > 0 || bbdesigner$field.getSeconds() > 0 || bbdesigner$field.getMilliseconds() > 0 ? "datetime" : "date") : typeof (bbdesigner$field)) : null;
                            bbdesigner$field = !(coldata instanceof BoldBIDashboard.DataManager) ? coldata[0][this.model.columns[index].foreignKeyValue] : this.model.columns[index].foreignKeyData[0][this.model.columns[index].foreignKeyValue];
                        }
                        this.model.columns[index].type = bbdesigner$field != null ? (bbdesigner$field.getDay ? (bbdesigner$field.getHours() > 0 || bbdesigner$field.getMinutes() > 0 || bbdesigner$field.getSeconds() > 0 || bbdesigner$field.getMilliseconds() > 0 ? "datetime" : "date") : typeof (bbdesigner$field)) : null;
                    }
                    else if (this.model.columns[index]["type"] == "date" && this.model.columns[index].format == undefined && this._isReorder != true && this.model.allowGrouping !=true && !this._showHideColumns)
                        if (BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.globalize))
                            bbdesigner$.extend(this.model.columns[index], { format: "{0:" + BoldBIDashboard.preferredCulture().calendars.standard.patterns.d + "}" });
                        else
                            bbdesigner$.extend(this.model.columns[index], { format: "{0:M/d/yyyy}" });
                    else if (this.model.columns[index]["type"] == "datetime" && this.model.columns[index].format == undefined && this._isReorder != true && this.model.allowGrouping !=true && !this._showHideColumns)
                        if (BoldBIDashboard.isNullOrUndefined(BoldBIDashboard.globalize))
                            bbdesigner$.extend(this.model.columns[index], { format: "{0:" + BoldBIDashboard.preferredCulture().calendars.standard.patterns.d + " " + BoldBIDashboard.preferredCulture().calendars.standard.patterns.t + "}" });
                        else
                            bbdesigner$.extend(this.model.columns[index], { format: "{0:M/d/yyyy h:mm tt}" });                    
                  }
            }
        },
        _initSelection: function () {
            var mode = this.model.selectionSettings.selectionMode;
            for (i = 0; i < mode.length; i++) {
                this["_allow" + mode[i] + "Selection"] = true;
            }
        },
        _checkDataBinding: function () {
            if (!this.model.columns.length && (((this._dataSource() == null || !this._dataSource().length) && !(this._dataSource() instanceof BoldBIDashboard.DataManager)) || ((this._dataSource() instanceof BoldBIDashboard.DataManager) && this._dataManager.dataSource.url == undefined && !this._dataSource().dataSource.json.length))) {
                this._renderAlertDialog();
                this._alertDialog.find(".e-content").text(this.localizedLabels.EmptyDataSource);
                this._alertDialog.BoldBIDashboardDialog("open");
                return;
            }
            if (this.model.enablePersistence)
                this.model.query = new BoldBIDashboard.Query();
            this._initialRenderings();
            if (this.model.editSettings.allowDeleting && this.model.selectionType == "multiple")
                this.multiDeleteMode = true;
            this.initialRender = true;
            this.model.enableRTL && this.element.addClass("e-rtl");
            if (this.model.allowFiltering && this._isExcelFilter)
                this._renderExcelFilter();
            if (this.model.cssClass != null)
                this.element.addClass(this.model.cssClass);
            if (this.model.allowGrouping)
                this.element.append(this._renderGroupDropArea());
            if (this.model.toolbarSettings.showToolbar)
                this.element.append(this._renderToolBar());
            var columns = this.model.columns;
            if (columns && columns.length) {
                var expands = this.model.query._expands;                
                if (typeof columns[0] === "string")
                    for (var i = 0; i < columns.length; i++)
                        columns[i] = { field: columns[i] };
                for (var i = 0; i < columns.length; i++) {
                    if (!columns[i].field || columns[i].field.indexOf('.') === -1) continue;
                    this._getExpands(columns[i].field, expands);
                }
                this.model.query.expand(expands);
                this.commonQuery.expand(expands);
                this._renderAfterColumnInitialize();
            }
            if (this.model.allowPaging){
                this.element.append(this._renderGridPager());
				if(this.model.pageSettings.isResponsive)
					bbdesigner$(this.element.find(".e-pager")).BoldBIDashboardPager('instance')._reSizeHandler();
			}
            if (this.model.contextMenuSettings.enableContextMenu)
                this.element.append(this._renderContext());
            if (bbdesigner$.isFunction(bbdesigner$.fn.BoldBIDashboardWaitingPopup)) {
                this.element.BoldBIDashboardWaitingPopup({ showOnInit: false });
                bbdesigner$("#" + this._id + "_WaitingPopup").addClass("e-gridwaitingpopup");
            }
            if (this.model.scrollSettings.allowVirtualScrolling) {
                this._loadedJsonData = [];
                this._prevPage = 1;
            }
            if (this._dataSource() instanceof BoldBIDashboard.DataManager) {
                this.element.BoldBIDashboardWaitingPopup("show");
                if (this._dataSource().ready != undefined) {
                    var proxy = this;
                    this._dataSource().ready.done(function (args) {
                        proxy._initDataSource();
                        proxy.model.dataSource = BoldBIDashboard.DataManager(args.result);
                    });
                } else {
                    this.element.BoldBIDashboardWaitingPopup("show");
                    this._initDataSource();
                }
            } else {
                this._ensureDataSource();
                this._trigger("actionBegin");
                this._setForeignKeyData();
                this._relationalColumns.length == 0 && this._initGridRender();
				this._vRowHeight = Math.floor(this.getRowHeight());
            }
            if (this.model.showColumnChooser)
                this._renderColumnChooser();
        },
        _renderColumnChooser: function () {
            var bbdesigner$columnButton = BoldBIDashboard.buildTag("button .e-ccButton", this.localizedLabels.Columns, { 'float': (this.model.enableRTL ? 'left' : 'right') }).attr("type", "button");
            this.element.prepend(bbdesigner$columnButton);
            bbdesigner$columnButton.BoldBIDashboardButton({
                prefixIcon: "e-down-arrow",
                imagePosition: "imageright",
                contentType: "textandimage",
                type: 'button',
                click: bbdesigner$.proxy(this._ccClickHandler, this),
                width: 90
            });
            var buttHeight = bbdesigner$columnButton.outerHeight();
            bbdesigner$columnButton.css('margin-top', 0 - (buttHeight));
            var elementTop = parseInt(this.element.css('margin-top'),10);
            this.element.css('margin-top', elementTop + buttHeight);
            var bbdesigner$mainDiv = BoldBIDashboard.buildTag("div");
            var bbdesigner$outerDiv = BoldBIDashboard.buildTag("div .e-grid e-columnChooser", '', {}, { id: this._id + "ccDiv" });
            var bbdesigner$searchBox = BoldBIDashboard.buildTag("div.e-searchbox e-fields").append(BoldBIDashboard.buildTag("input#" + this._id + "_ccSearchBox.e-ejinputtext e-filtertext", {}, {}, { "type": "text" }))
            var bbdesigner$sapnDiv = BoldBIDashboard.buildTag('span .e-searchfind e-icon')
            bbdesigner$searchBox.append(bbdesigner$sapnDiv);
            var bbdesigner$listOuterDiv = BoldBIDashboard.buildTag('div', '', { 'height': '228px' }, { id: this._id + "liScrollerDiv" })
            this._renderColumnChooserData(false);
            bbdesigner$listOuterDiv.append(this._columnChooserList);
            bbdesigner$outerDiv.append(bbdesigner$searchBox);
            bbdesigner$outerDiv.append(bbdesigner$listOuterDiv);

            var bbdesigner$splitterDiv = BoldBIDashboard.buildTag('div .e-columnChooserSplitter', '', { 'border-bottom': '0px' });
            bbdesigner$outerDiv.append(bbdesigner$splitterDiv);
            if (this.model.enableRTL) {
                bbdesigner$buttonDiv = BoldBIDashboard.buildTag('div', '', { 'float': 'left', 'margin-top': '7px', 'margin-right': '-13px' });
                var bbdesigner$cancelButton = BoldBIDashboard.buildTag("button", this.localizedLabels.Cancel, { 'margin-right': '7px', 'margin-left': '9px' });
                bbdesigner$(bbdesigner$sapnDiv).addClass("e-rtl");
            }
            else {
                bbdesigner$buttonDiv = BoldBIDashboard.buildTag('div', '', { 'float': 'right', 'margin-top': '7px', 'margin-right': '-13px' });
                var bbdesigner$cancelButton = BoldBIDashboard.buildTag("button", this.localizedLabels.Cancel, { 'margin-right': '20px', 'margin-left': '6px' });
            }
            var bbdesigner$addButton = BoldBIDashboard.buildTag("button", this.localizedLabels.Done);
            bbdesigner$buttonDiv.append(bbdesigner$addButton);
            bbdesigner$buttonDiv.append(bbdesigner$cancelButton);
            bbdesigner$outerDiv.append(bbdesigner$buttonDiv);
            bbdesigner$addButton.BoldBIDashboardButton({
                click: bbdesigner$.proxy(this._addButtonCC, this),
                showRoundedCorner: true,
                width: 66
            });
            bbdesigner$cancelButton.BoldBIDashboardButton({
                click: bbdesigner$.proxy(this._cancelButtonHandler, this),
                showRoundedCorner: true,
                width: 66
            });
            bbdesigner$outerDiv.insertBefore(this.element)
            bbdesigner$outerDiv.BoldBIDashboardDialog({ width: 'auto', beforeClose: bbdesigner$.proxy(this._columnChooserBeforeClose, this), showOnInit: false, allowKeyboardNavigation: false, enableResize: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, showHeader: false, width: 260 });
            if (BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version < 10) {
                var searchBox = bbdesigner$(".e-columnChooser").find("input#" + this._id + "_ccSearchBox")[0];
                BoldBIDashboard.ieClearRemover(searchBox);
            }
        },
        _renderColumnChooserData: function (refresh) {
            var selectAllCheck = this.model.columns.length == this.getVisibleColumnNames().length;            
            this._ccCheckBoxList = [];
            var bbdesigner$listBox = BoldBIDashboard.buildTag("div", '', { 'margin-left': '0px', 'width': '250px' }), count = 0;
            for (var index = -1; index < this.model.columns.length; index++) {
                var isSelectAll = index == -1;
                if (isSelectAll || this.model.columns[index].showInColumnChooser) {
                    var column = this.model.columns[index];
                    var colValue = isSelectAll ? this.localizedLabels["SelectAll"] : BoldBIDashboard.isNullOrUndefined(column.headerText) || column.headerText == "" ? column.field == "" ? null : column.field : column.headerText,
                        labelValue = column && column.disableHtmlEncode ? this._htmlEscape(colValue) : colValue;
                    if (!BoldBIDashboard.isNullOrUndefined(colValue) || isSelectAll) {
                        var bbdesigner$innerDiv = BoldBIDashboard.buildTag('div', '', {}, { 'class': 'e-columnChooserListDiv' });
                        var styleAttr = {};
                        var id = isSelectAll ? this._id + 'selectAll' : this._id + colValue.replace(/\s|\.|[^a-zA-Z0-9]|&nbsp/g, "_");
                        var inDom = bbdesigner$listBox.find("#" + id).length; inDom && count++;
                        var bbdesigner$input = BoldBIDashboard.buildTag('input', '', styleAttr, { 'id': (!inDom ? id : id + count + ""), 'value': colValue, 'type': 'checkbox', "ej-field": isSelectAll ? '' : column.field, "ej-headertext": isSelectAll ? '' : column.headerText, 'class': isSelectAll ? 'e-selectall' : '' });
                        var label = BoldBIDashboard.buildTag('label', labelValue, { 'font-size': '13px' }, { 'for': (!inDom ? id : id + count + "") });
                        bbdesigner$innerDiv.append(bbdesigner$input);
                        bbdesigner$innerDiv.append(label);
                        bbdesigner$listBox.append(bbdesigner$innerDiv);
                        var checked = !isSelectAll && !BoldBIDashboard.isNullOrUndefined(column.visible) ? column.visible : true;
                        bbdesigner$input.BoldBIDashboardCheckBox({
                            checked: isSelectAll ? selectAllCheck : checked,
                            change: bbdesigner$.proxy(this._columnChooserCheckChange, this)
                        });
                        if (!isSelectAll && !BoldBIDashboard.isNullOrUndefined(column.visible))
                            bbdesigner$input[column.visible ? "attr" : "removeAttr"]("checked", true);
                    }
                }
            }
            if (!refresh)
                this._columnChooserList = bbdesigner$listBox;
            else {
                this._columnChooserList.empty().append(bbdesigner$listBox.children());
                bbdesigner$("#" + this._id + "liScrollerDiv").is(":visible") && bbdesigner$("#" + this._id + "liScrollerDiv").BoldBIDashboardScroller('refresh');
            }
            this._ccCheckBoxList = this._columnChooserList.find("input:checkbox.e-js").not(".e-selectall");
        },
        _checkFinder: function () {
            var bbdesigner$this = bbdesigner$(this), bbdesigner$parent = bbdesigner$this.closest(".e-columnChooserListDiv");
            if (bbdesigner$this.hasClass("e-checkbox") && !bbdesigner$parent.hasClass("e-hide") && bbdesigner$this.prop("checked"))
                return true;
        },
        _displayFinder: function () {            
            return !bbdesigner$(this).closest(".e-columnChooserListDiv").hasClass("e-hide");
        },
        _columnChooserCheckChange: function (args) {
             if (!args.isInteraction) {
                if (args.isChecked)
                    bbdesigner$("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub").removeClass("e-disable");
             return;
            }
            var checked = args.isChecked, displayedCheckBoxes = this._ccCheckBoxList.filter(this._displayFinder), checkedBoxes = this._ccCheckBoxList.filter(this._checkFinder),
                totalChecks = displayedCheckBoxes.length, checkedLen = checkedBoxes.length;
            if (args.model.id == this._id + 'selectAll') {
                if (!checked)
                    checkedBoxes.BoldBIDashboardCheckBox({ checked: checked });                
                else           
                    displayedCheckBoxes.not(":checked").BoldBIDashboardCheckBox({ checked: checked });                
            }
            else {
                this._columnChooserList.find('input.e-selectall').BoldBIDashboardCheckBox('model.checked', totalChecks == checkedLen);
                checked = checkedLen != 0;
                this.element[checked ? "attr" : "removeAttr"]("checked", true);
            }
            var operation = !checked ? "addClass" : "removeClass";
            bbdesigner$("#" + this._id + "ccDiv").find("button[aria-describedby='Done']")[operation]("e-disable");
        },
        _columnChooserBeforeClose: function () {
            bbdesigner$(".e-columnChoosertail").remove();
            bbdesigner$(".e-columnChoosertailAlt").remove();
            bbdesigner$("#" + this._id + "ccDiv").find("button[aria-describedby='Done']").removeClass("e-disable");
            bbdesigner$("#" + this._id + "_ccSearchBox").val('');
            var args = {};
            args.target = {}; args.target.value = '';
            this._columnChooserSearch(args);
        },
        _columnChooserSearch: function (e) {
            if (e.type == 'click') {
                e.target.value = '';
                bbdesigner$("#" + this._id + "_ccSearchBox").val('');
            }
            var val = e.target.value;
            var span = bbdesigner$("#" + this._id + "_ccSearchBox").next('span');
            if (val != '') {
                span.removeClass("e-searchfind");
                span.addClass("e-cancel");
            }
            else {
                span.removeClass("e-cancel");
                span.addClass("e-searchfind");
            }
            bbdesigner$(".e-cancel").bind('click', bbdesigner$.proxy(this._columnChooserSearch, this));
            var currentCheckedItemsData = this.model.columns;
            var columnCollection = [], gridColumns = [], tempCollection = [], proxy = this, 
                isHiddenByGroup = function (field) {
                    var model = proxy.model.groupSettings;
                    return !model.showGroupedColumn && bbdesigner$.inArray(field, model.groupedColumns) > -1;
                };
            if (val != '') {
                currentCheckedItemsData = BoldBIDashboard.DataManager(this.model.columns).executeLocal(BoldBIDashboard.Query().where("headerText", BoldBIDashboard.FilterOperators.startsWith, val, true));
                tempCollection = BoldBIDashboard.DataManager(this.model.columns).executeLocal(BoldBIDashboard.Query().where("field", BoldBIDashboard.FilterOperators.startsWith, val, true));
                tempCollection.forEach(function (obj) {
                    if (obj.headerText == "" && bbdesigner$.inArray(obj, currentCheckedItemsData) == -1)
                        currentCheckedItemsData.push(obj);
                })
            }
             currentCheckedItemsData.forEach(function (obj) {
                 if (obj.showInColumnChooser && !isHiddenByGroup(obj.field)) {
                    var headerText = BoldBIDashboard.isNullOrUndefined(obj.headerText) || obj.headerText == "" ? obj.field == "" ? null : obj.field : obj.headerText;
                    columnCollection.push(headerText);
                }
            });
            if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$("#nomatches")[0]))
                bbdesigner$("#nomatches").remove();
            var div = bbdesigner$("#" + this._id + "ccDiv").find("#" + this._id + "liScrollerDiv")

            var divs = this._columnChooserList.find(".e-columnChooserListDiv");

            for (i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i].showInColumnChooser && !BoldBIDashboard.isNullOrUndefined(this.model.columns[i].headerText)) {
                    if (this.model.columns[i].headerText != "")
                        gridColumns.push(this.model.columns[i].headerText)
                    else if (this.model.columns[i].field != "")
                        gridColumns.push(this.model.columns[i].field)
                }
            }

            for (var index = 0; index < gridColumns.length; index++) {
                var colValue = gridColumns[index];
                var indx = columnCollection.indexOf(colValue)
                if (!BoldBIDashboard.isNullOrUndefined(colValue))
                    divs.eq(index + 1)[indx == -1 ? "addClass" : "removeClass"]("e-hide");
            }

            if (columnCollection.length == 0) {
                var bbdesigner$labeldiv = BoldBIDashboard.buildTag('div#nomatches', '');
                var bbdesigner$label = BoldBIDashboard.buildTag('span', this.localizedLabels.NoResult);
                bbdesigner$labeldiv.append(bbdesigner$label);
                bbdesigner$(div).append(bbdesigner$labeldiv);
            }
            var checkDisplay = this._ccCheckBoxList.filter(this._displayFinder).length, checkChecked = this._ccCheckBoxList.filter(this._checkFinder).length, isChk = checkChecked == checkDisplay;
            if (columnCollection.length)
                divs.eq(0).find("input.e-js").BoldBIDashboardCheckBox({ checked: isChk });
            divs.eq(0)[columnCollection.length == 0 ? "addClass" : "removeClass"]("e-hide");
            bbdesigner$("#" + this._id + "ccDiv").find("button[aria-describedby='Done']")[!checkChecked ? "addClass" : "removeClass"]("e-disable");
            bbdesigner$("#" + this._id + "liScrollerDiv").BoldBIDashboardScroller('refresh');
        },
        _addButtonCC: function () {
            this._visibleColumns = [];
            this._hiddenColumns = [];
            this._visibleColumnsField = [];
            this._hiddenColumnsField = [];
            this._columnChooserClick = true;
            var args = {}; args.requestType = "columnchooser";
            var chbxs = this._columnChooserList.find("input:checkbox.e-js").not('.e-selectall');
            for (var i = 0, len = chbxs.length; i < len; i++) {
                var ele = bbdesigner$(chbxs[i]), hTxt = ele.attr("ej-headertext"), field = ele.attr("ej-field");
                if(this._id+"selectAll"!=ele.attr("id")){
                    this[chbxs[i].checked ? "_visibleColumns" : "_hiddenColumns"].push(hTxt);
                    this[chbxs[i].checked ? "_visibleColumnsField" : "_hiddenColumnsField"].push(field != "" ? field : hTxt);
                }
            }
            var array1 = this._visibleColumns;
            var array2 = this._hiddenColumns;
            var arr = [], obj, duparr;
            obj = bbdesigner$.merge(bbdesigner$.merge([], array1), array2);
            duparr = this._isDuplicate(obj);
            this._trigger("actionBegin", args);
            if (duparr) {
                this.showColumns(this._visibleColumnsField);
                this.hideColumns(this._hiddenColumnsField);
            }
            else {
                this.showColumns(this._visibleColumns);
                this.hideColumns(this._hiddenColumns);
            }
            bbdesigner$("#" + this._id + "ccDiv").BoldBIDashboardDialog('close');
            bbdesigner$(".e-columnChoosertail").remove();
            this.refreshScrollerEvent();
            args = { requestType: "columnchooser", removedcolumns: [], addedcolumns: [], visiblecolumns: this.getVisibleColumnNames(), hiddencolumns: this.getHiddenColumnNames() };
            this._ccColumnUpdate(args.addedcolumns, this.getVisibleColumnNames(), this._ccVisibleColumns);
            this._ccColumnUpdate(args.removedcolumns, this.getHiddenColumnNames(), this._ccHiddenColumns);
            this._trigger("actionComplete", args);
        },
        _ccColumnUpdate: function (args, getColumns, ccColumns) {
            for (i = 0; i < getColumns.length; i++) {
                if (bbdesigner$.inArray(getColumns[i], ccColumns) == -1)
                    args.push(getColumns[i]);
            }
        },
        _isDuplicate: function (arr) {
            var temp, count = [], duplicate = [];
            for (var i = 0; i < arr.length; i++) {
                temp = arr[i];
                if (count[temp] >= 1)
                    count[temp] = count[temp] + 1;
                else
                    count[temp] = 1;
            }
            for (temp in count) {
                if (count[temp] > 1)
                    return true;
            }
            return false;
        },
        _cancelButtonHandler: function () {
            bbdesigner$("#" + this._id + "ccDiv").BoldBIDashboardDialog('close');
            bbdesigner$(".e-columnChoosertailAlt").remove();
            bbdesigner$(".e-columnChoosertail").remove();
        },
        _ccClickHandler: function (e) {
            var dlgWidth = 230, xPos;
            var chooserButton = this.element.find(".e-ccButton");
            xPos = chooserButton.offset().left + chooserButton.width();
            var dialogObj = bbdesigner$("#" + this._id + "ccDiv").data('BoldBIDashboardDialog')
            if (dialogObj && dialogObj.isOpened()) {
                dialogObj.close();
                bbdesigner$(".e-columnChoosertail").remove();
                bbdesigner$(".e-columnChoosertailAlt").remove();
            }
            else {
                bbdesigner$("#" + this._id + "ccDiv").BoldBIDashboardDialog({ width: '230px', height: '309px', position: { X: (this.model.enableRTL ? (xPos - dlgWidth + 143) : (xPos - dlgWidth)), Y: chooserButton.offset().top + 35 } })
                   .BoldBIDashboardDialog("open");
                var maxZindex = parseInt(bbdesigner$("#" + this._id + "ccDiv_wrapper").css('z-index'));
                var bbdesigner$tailDiv = BoldBIDashboard.buildTag("div #" + this._id + "_ccTail .e-columnChoosertail", '', { 'display': 'block', 'position': 'absolute', 'left': (this.model.enableRTL ? (xPos - 78) : (xPos - 29)), 'top': chooserButton.offset().top + 15 });
                var bbdesigner$tailDiv2 = BoldBIDashboard.buildTag("div #" + this._id + "_ccTailAlt .e-columnChoosertailAlt", '', { 'display': 'block', 'z-index': maxZindex + 2, 'position': 'absolute', 'left': (this.model.enableRTL ? (xPos - 78) : (xPos - 29)), 'top': chooserButton.offset().top + 16 });
                bbdesigner$tailDiv.insertBefore(bbdesigner$("#" + this._id + "ccDiv_wrapper"));
                bbdesigner$tailDiv2.insertBefore(bbdesigner$("#" + this._id + "ccDiv_wrapper"));
            }
            this._refreshColumnChooserList();
            this._ccVisibleColumns = this.getVisibleColumnNames();
            this._ccHiddenColumns = this.getHiddenColumnNames();
            bbdesigner$("#" + this._id + "liScrollerDiv").BoldBIDashboardScroller({ height: '228', width: '228', buttonSize: 0 });
            bbdesigner$("#" + this._id + "liScrollerDiv").BoldBIDashboardScroller('refresh');
            if (this.getBrowserDetails().browser == 'chrome')
                bbdesigner$('.e-columnChooser .e-hscrollbar').attr('style', 'height: 10px !important;');
            bbdesigner$(".e-ejinputtext").bind('keyup', bbdesigner$.proxy(this._columnChooserSearch, this))
        },
        _refreshColumnChooserList: function (collection) {
            var chbxs = this._columnChooserList.find("input:checkbox.e-js").not('.e-selectall');
			var duparr = this._isDuplicate(bbdesigner$.merge(bbdesigner$.merge([], this._visibleColumns), this._hiddenColumns));
            for (var i = 0, len = chbxs.length; i < len; i++) {
                var ele = bbdesigner$(chbxs[i]), hTxt = ele.attr("ej-headertext"), field = ele.attr("ej-field"), flag = undefined, isDup = chbxs.filter("[ej-headertext='" + hTxt + "']").length;
                if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && bbdesigner$.inArray(bbdesigner$(chbxs[i]).attr("ej-field"), this.model.groupSettings.groupedColumns) != -1) {
                    bbdesigner$(chbxs[i]).parents(".e-columnChooserListDiv").addClass("e-hide");
                    chbxs[i].checked = false;
                }
                else {
                    bbdesigner$(chbxs[i]).parents(".e-columnChooserListDiv").removeClass("e-hide");
                    chbxs[i].checked = true;
                }
                var colValue = duparr ? (field == "" ? hTxt : field) : hTxt;
				flag = this[duparr ? "_hiddenColumnsField" : "_hiddenColumns"].indexOf(colValue) != -1;
                ele[!flag ? "attr" : "removeAttr"]("checked", true);
                ele.BoldBIDashboardCheckBox("model.checked", !flag);
            }
            this._columnChooserList.find("input:checkbox.e-selectall").BoldBIDashboardCheckBox({ checked: chbxs.filter(this._displayFinder).length == chbxs.filter(this._checkFinder).length });
        },
        _initDataSource: function () {
            this._isLocalData = (!(this._dataSource() instanceof BoldBIDashboard.DataManager) || (this._dataSource().dataSource.offline || this._isRemoteSaveAdaptor || this._dataSource().adaptor instanceof BoldBIDashboard.ForeignKeyAdaptor));
            this._ensureDataSource();
            this._trigger("actionBegin");
            var queryPromise = this._dataSource().executeQuery(this.model.query), subPromises, proxy = this;
            if (this._dataManager.dataSource.table != null)
                this._dataManager.dataSource.table.css("display", "none");
            if (!this.element.is(":visible"))
                this.element.BoldBIDashboardWaitingPopup("hide");
            queryPromise.done(BoldBIDashboard.proxy(function (e) {
                this._relationalColumns.length == 0 && this.element.BoldBIDashboardWaitingPopup("hide");
                if (!this.model.columns.length && !e.count) {
                    proxy._renderAlertDialog();
                    proxy._alertDialog.find(".e-content").text(proxy.localizedLabels.EmptyDataSource);
                    proxy._alertDialog.BoldBIDashboardDialog("open");
                    proxy.element.BoldBIDashboardWaitingPopup("hide");
                    return;
                }
                if (!BoldBIDashboard.isNullOrUndefined(e.aggregates))
                    this._remoteSummaryData = e.aggregates;
				if(!this.model.scrollSettings.enableVirtualization)
				    this.model.currentViewData = e.result;
				if (this._bbdesigner$fkColumn && this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "excel")
				    this._fkParentTblData = e.result;
                if (this.model.pageSettings.totalRecordsCount != null && this.model.filterSettings.filteredColumns.length == 0)
                    this._gridRecordsCount = this.model.pageSettings.totalRecordsCount;
                else if (e.count == 0 && e.result.length)
                    this._gridRecordsCount = e.result.length;
                else
                    this._gridRecordsCount = e.count;
                if (this.model.filterSettings.filteredColumns.length > 0)
                    this._filteredRecordsCount = e.count;
                if (this.getPager() != null)
                    this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
				if(this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
					this._refreshVirtualViewDetails();
					if(this._isInitNextPage || this._remoteRefresh){					
						this._setInitialCurrentIndexRecords(e.result, this._currentPage());							
						this._isInitNextPage = this._remoteRefresh = false;
					}
					else
						this._setVirtualLoadedRecords(e.result, this._currentPage());					
					if(this._isThumbScroll && !this._checkCurrentVirtualView(this._virtualLoadedRecords, this._currentVirtualIndex))
						this._checkPrevNextViews(this._currentPage()); 										
					if(this.initialRender){												
						this.model.currentViewData = [];
						for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
							var currentView = this._currentLoadedIndexes[i];
							bbdesigner$.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView]);
						}            
					}
					else						
						this.model.currentViewData = e.result;					
                }
				this._setForeignKeyData();
				this._relationalColumns.length == 0 && this._initGridRender();
            }, this));
            var proxy = this;
            queryPromise.fail(function (e) {
                var args = { error: e.error };
                proxy._trigger("actionFailure", args)
            })
        },
        _initialRenderings: function () {
            if (this.model.groupSettings.groupedColumns.length) {
                var sortedColumns = new Array();
                for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                    if (BoldBIDashboard.isNullOrUndefined(this.model.sortSettings.sortedColumns[i].direction))
                        this.model.sortSettings.sortedColumns[i].direction = BoldBIDashboard.sortOrder.Ascending;
                    sortedColumns.push(this.model.sortSettings.sortedColumns[i].field);
                }
                if(this.model.allowGrouping){
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
						if (bbdesigner$.inArray(this.model.groupSettings.groupedColumns[i], sortedColumns) == -1)
							this.model.sortSettings.sortedColumns.push({ field: this.model.groupSettings.groupedColumns[i], direction: BoldBIDashboard.sortOrder.Ascending });
					}
                }
            }
        },
        _getExpands: function (field, arr) {
            var splits = field.split('.'), tmp = "";
            splits.splice(splits.length - 1, 1);
            for (var i = 0; i < splits.length; i++, tmp = "") {
                for (var j = 0; j < i; j++)
                    tmp += splits[j] + "/";
                tmp = tmp + splits[i];
                if (arr.indexOf(tmp) === -1)
                    arr.push(tmp);
            }
        },
        _renderAfterColumnInitialize: function () {
            this.element.append(this._renderGridHeader());
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
                this._renderFiltering();
                this._renderFilterBarTemplate();
            }
			if(this.model.gridLines != "both")
				this._showHeaderGridLines();
            if (this.model.allowPaging)
                this.element.append(this.element.find(".e-pager").first());
        },
        _ensureDataSource: function (args) {
            if (this._dataSource() == null && !(this._dataSource() instanceof BoldBIDashboard.DataManager)) {
                if (!BoldBIDashboard.isNullOrUndefined(args) && args.requestType == "add")
                    this.dataSource([]);
                else
                    return;
            }
            this.model.query.requiresCount();
            var queryManagar = this.model.query;
            var cloneQuery = queryManagar.clone();
            if (!(this._dataSource() instanceof BoldBIDashboard.DataManager))
                this.model.currentViewData = this._dataSource();
            if (this._isLocalData && (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && (!BoldBIDashboard.isNullOrUndefined(this._cModifiedData) || !BoldBIDashboard.isNullOrUndefined(this._cAddedRecord))) {
                if (BoldBIDashboard.isNullOrUndefined(this._cAddedRecord)) {
                    for (var index = 0; index < this._primaryKeys.length; index++)
                        queryManagar = queryManagar.where(this._primaryKeys[index], BoldBIDashboard.FilterOperators.equal, this._primaryKeyValues[index]);
                    var currentData = this._dataManager.executeLocal(queryManagar);
                    if (!(this._dataSource() instanceof BoldBIDashboard.DataManager))
                        bbdesigner$.extend(this._dataSource()[bbdesigner$.inArray(currentData.result[0], this._dataSource())], this._cModifiedData);
                    else
                        bbdesigner$.extend(this._dataSource().dataSource.json[bbdesigner$.inArray(currentData.result[0], this._dataSource().dataSource.json)], this._cModifiedData);
                    this._cModifiedData = null;
                } else {
                    var tmpRcrd = this._cAddedRecord;
                    this._cAddedRecord = null;
                    (this._dataSource() instanceof BoldBIDashboard.DataManager) ? this._dataSource().dataSource.json.unshift(tmpRcrd) : this._dataSource(undefined, true).splice(0, 0, tmpRcrd);
                }
                queryManagar.queries = cloneQuery.queries;
                if (!this.model.editSettings.showAddNewRow)
                    this.model.isEdit = false;
            }
            if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && (this._excludeDetailRows().length == 1 || (this.multiDeleteMode == "multiple" && this.selectedRowsIndexes.length == this._excludeDetailRows().length)) && this.model.pageSettings.currentPage != 1)
                this._currentPage(this.model.pageSettings.totalPages - 1)
            if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && !BoldBIDashboard.isNullOrUndefined(this._cDeleteData) && this._isLocalData) {
                if (!(this._dataSource() instanceof BoldBIDashboard.DataManager)) {
                    var index = bbdesigner$.inArray(this._cDeleteData[0], this._dataSource());
                    this._dataSource(undefined, true).splice(index, 1);
                }
                else {
                    var index = bbdesigner$.inArray(this._cDeleteData[0], this._dataSource().dataSource.json);
                    this._dataSource().dataSource.json.splice(index, 1);
                }
            }
            if (this.model.sortSettings.sortedColumns.length) {
                 var sortedGrp = [], sortedColumns = this.model.sortSettings.sortedColumns;
                for (var i = sortedColumns.length - 1; i >= 0; i--){
                    if(this.model.groupSettings.groupedColumns.indexOf(sortedColumns[i].field) == -1){
                        queryManagar.sortBy(sortedColumns[i].field, sortedColumns[i].direction);
						if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization && bbdesigner$.inArray(sortedColumns[i], this._prevVirtualSort) == -1){
							for(var j = 0; j < this._prevVirtualSort.length; j++){
								if(sortedColumns[i].field == this._prevVirtualSort[j].field)
									this._prevVirtualSort.splice(j, 1);
							}
							this._needVPaging = this._currentVirtualIndex * this._virtualRowCount % this.model.pageSettings.pageSize <= this._virtualRowCount;
							this._prevVirtualSort.push(sortedColumns[i]);	
							this._virtualDataRefresh = true;
							this._refreshVirtualViewData();							
						}
					}
                    else
                        sortedGrp.push({field: sortedColumns[i].field, direction: sortedColumns[i].direction })
				}
				if (this.model.scrollSettings.virtualScrollMode == "continuous" && !BoldBIDashboard.isNullOrUndefined(args) && args.requestType == "sorting") {
                    this._currentPage(1);
                }
                for (var j = 0; j < sortedGrp.length ; j++){
                    queryManagar.sortBy(sortedGrp[j].field, sortedGrp[j].direction);
                }
            }

            if (this.model.allowSearching && this.model.searchSettings.key.length) {
                var searchDetails = this.model.searchSettings;
                searchDetails.fields = searchDetails.fields.length != 0 ? searchDetails.fields : this.getColumnFieldNames();
                queryManagar.search(searchDetails.key ,searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase || true);
                if (!this.initialRender && args.requestType == "searching")
                    this._currentPage(1);
                if (!(this._dataSource() instanceof BoldBIDashboard.DataManager))
                    this._filteredRecords = this._dataManager.executeLocal(queryManagar).result;
            }

            if (this.model.allowFiltering && this.model.filterSettings.filteredColumns.length) {
                var predicate, firstFilterCondition = this.model.filterSettings.filteredColumns[0];
				var filteredColumns = this.model.filterSettings.filteredColumns;
                if (this._isExcelFilter || this._excelFilterRendered) {
                    if (!BoldBIDashboard.isNullOrUndefined(this._excelFilter)) {
                        this._excelFilter.getPredicate(filteredColumns, null, true);
                    }
                    var predicates = this._excelFilter._predicates[0];
                    for (var prop in predicates) {
                        var obj = predicates[prop], isTake = obj["from"] != undefined;
                        if (isTake)
                            queryManagar.skip(obj["from"] == "top" ? 0 : this._gridRecordsCount - obj["take"]).take(obj["take"]);
                        else
                            predicate = predicate != undefined ? predicate["and"](obj) : obj;
                    }
                }
                else {
                    if (!(firstFilterCondition instanceof BoldBIDashboard.Predicate))
                        predicate = BoldBIDashboard.Predicate(firstFilterCondition.field, firstFilterCondition.operator, firstFilterCondition.value, !firstFilterCondition.matchcase);
                    else
                        predicate = firstFilterCondition;
                    for (var i = 1; i < filteredColumns.length; i++) {
                        if (!(filteredColumns[i] instanceof BoldBIDashboard.Predicate)) {
                            if (!this._isLocalData && filteredColumns.length > 2 && i > 1 && filteredColumns[i].predicate == "or")
                                predicate.predicates.push(BoldBIDashboard.Predicate(filteredColumns[i].field, filteredColumns[i].operator, filteredColumns[i].value, filteredColumns[i].ignoreCase || !filteredColumns[i].matchcase));
                            else
                                predicate = predicate[filteredColumns[i].predicate || "and"](filteredColumns[i].field, filteredColumns[i].operator, filteredColumns[i].value, !filteredColumns[i].matchcase);
                        }
                        else
                            predicate = predicate[filteredColumns[i].predicate || "and"](filteredColumns[i]);
                    }
                }
                predicate && queryManagar.where(predicate);
                if (this._isLocalData) {
                    var fresults = this._dataManager.executeLocal(queryManagar);
                    this._filteredRecordsCount = isTake ? fresults.result.length : fresults.count;
                    var lastPage = (this._filteredRecordsCount % this.model.pageSettings.pageSize == 0) ? (this._filteredRecordsCount / this.model.pageSettings.pageSize) : (parseInt(this._filteredRecordsCount / this.model.pageSettings.pageSize, 10) + 1);
                    if (this._currentPage() > lastPage)
                        this._currentPage(lastPage);
                    this._filteredRecords = this._dataManager.executeLocal(queryManagar).result;
                    if (this._bbdesigner$fkColumn && this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "excel")
                        this._fkParentTblData  = this._filteredRecords;
                } else if (!BoldBIDashboard.isNullOrUndefined(args) && args.requestType == BoldBIDashboard.Grid.Actions.Filtering)
                    this._currentPage(1);
				if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
					for(var i = 0; i < filteredColumns.length; i++){
						for(var j = 0; j < this._prevVirtualFilter.length; j++){
							if(filteredColumns[i] == this._prevVirtualFilter[j] && args.requestType == BoldBIDashboard.Grid.Actions.Filtering)
								this._prevVirtualFilter.splice(j, 1);
						}
						if(bbdesigner$.inArray(filteredColumns[i], this._prevVirtualFilter) == -1){
							this._prevVirtualFilter.push(filteredColumns[i]);	
							this._gridRecordsCount = this._filteredRecordsCount;
							this._refreshViewPageDetails();							
							this._refreshVirtualViewData();
							this._refreshVirtualViewDetails();							 
						}
					}
				}
            }
			if (this._isLocalData && this.model.allowFiltering && this.model.filterSettings.filteredColumns.length==0){
				if(!BoldBIDashboard.isNullOrUndefined(this._filteredRecordsCount) || this._filteredRecordsCount > 0){
					if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
						this._refreshViewPageDetails();
						this._refreshVirtualViewDetails(true);						
					}
					this._filteredRecordsCount = null;
					this._filteredRecords = [];
				}
			}

            if (this.model.summaryRows.length) {
                this._setSummaryAggregate(queryManagar);
            }

            if (this.model.allowPaging || (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling && !this.model.scrollSettings.enableVirtualization)) {
                if (this._isLocalData) {
                    var fresults = this._dataManager.executeLocal(queryManagar);
                    this._recordsCount = fresults.count;
                    var lastPage = (this._recordsCount % this.model.pageSettings.pageSize == 0) ? (this._recordsCount / this.model.pageSettings.pageSize) : (parseInt(this._recordsCount / this.model.pageSettings.pageSize, 10) + 1);
                    if (this._currentPage() > lastPage)
                        this._currentPage(lastPage);
                } else if (BoldBIDashboard.isNullOrUndefined(args)) {
                    this._currentPage(1);
                }
                if (this._currentPage() == 0) {
                    if (this._prevPageNo == 0 || this._prevPageNo == null)
                        this._currentPage(1);
                    else
                        this._currentPage(this._prevPageNo);
                }
                
                queryManagar.page(this._currentPage(), this.model.pageSettings.pageSize);
            }
			
			 if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {                              
                this._needPaging = true; 				
                if (this.initialRender && this.model.currentIndex > 1 && (this.model.currentIndex <= this._getVirtualTotalRecord() || !this._isLocalData)) { 					
					if(this.model.scrollSettings.virtualScrollMode == "continuous")
						this.model.currentIndex = 1;
                    this._currentVirtualIndex = Math.ceil(this.model.currentIndex / this._virtualRowCount);
                    this._isThumbScroll = true;
                    this._currentPage(Math.ceil(this.model.currentIndex / this.model.pageSettings.pageSize));
					this._virtualLoadedPages.push(this._currentPage());
                }
				if(this._virtualDataRefresh){					
                    this._isThumbScroll = true;
					this._refreshVirtualViewData(true);
					this._gridRecordsCount = this._dataSource() !== null ? (this.model.pageSettings.totalRecordsCount == null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount) : 0;
                    this._currentPage(Math.ceil(this._currentVirtualIndex * this._virtualRowCount / this.model.pageSettings.pageSize));
					this._virtualLoadedPages.push(this._currentPage());					
				}
                if(this.model.virtualLoading != null)
                    this._gridRecordsCount = this.model.pageSettings.totalRecordsCount;
				if(this.model.filterSettings.filteredColumns == 0 && this._prevVirtualFilter.length){
					this._refreshVirtualViewData();
					this._prevVirtualFilter = [];
				}									
				if(this._isLocalData && this.initialRender)
					this._refreshVirtualViewDetails();								
				this._getVirtualLoadedRecords(queryManagar);
            }	

            if (this.model.allowGrouping) {
                var cloned = queryManagar.clone();
                if (this.model.allowPaging && this.model.groupSettings.groupedColumns.length) {
                    cloned.queries = cloned.queries.slice(0, cloned.queries.length - 1);
                }
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                    queryManagar.group(this.model.groupSettings.groupedColumns[i]);
                    cloned.group(this.model.groupSettings.groupedColumns[i]);
                }
                if (this.model.groupSettings.groupedColumns.length)
                    this._setAggreatedCollection(cloned);
            }
            if (args != undefined && args.requestType == "add" && this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
                !(this._dataSource() instanceof BoldBIDashboard.DataManager) ? this._dataSource().unshift(args.data) : this._dataSource().dataSource.json.unshift(args.data);
            if ((!BoldBIDashboard.isNullOrUndefined(args) && args.action == "add") && !BoldBIDashboard.isNullOrUndefined(this.model.parentDetails)) {
                var column = this.getColumnByField(this.model.parentDetails.parentKeyField);
                var ix = bbdesigner$.inArray(column, this.model.columns)
                if (ix == -1) {
                    var newdata = {};
                    newdata[this.model.parentDetails.parentKeyField] = this.model.parentDetails.parentKeyFieldValue;
                    bbdesigner$.extend(true, this.model.currentViewData[0], newdata);
                }
            }
            this._cloneQuery = queryManagar.clone();
                if (this._isLocalData && (!this.model.scrollSettings.enableVirtualization || this._virtualDataRefresh)) {
                var dataMgrJson = this._dataManager.dataSource.json;
                var dataSource = this._dataSource().dataSource;
                if (!BoldBIDashboard.isNullOrUndefined(dataSource) && this._dataSource() instanceof BoldBIDashboard.DataManager)
                    this._dataManager.dataSource.json = dataMgrJson != dataSource.json ? dataSource.json : dataMgrJson;
                var result = this._dataManager.executeLocal(queryManagar);
                if (this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1)
                    this._prevPageRendered = true;
                if (this.model.scrollSettings.allowVirtualScrolling && !this._prevPageRendered && result.result.length != this.model.pageSettings.pageSize && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage) {
                    var pageQuery = BoldBIDashboard.pvt.filterQueries(queryManagar.queries, "onPage");
                    queryManagar.queries.splice(bbdesigner$.inArray(pageQuery[0], queryManagar.queries), 1);
                    queryManagar.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
                    var lastPageResult = this._dataManager.executeLocal(queryManagar);
                    lastPageResult.result.splice(0, result.result.length);
                    this._previousPageRecords = bbdesigner$.extend(true, [], lastPageResult.result);
                    this._previousPageLength = result.result.length;
                    this._currentPageData = result.result;
                    BoldBIDashboard.merge(lastPageResult.result, result.result);
                    this.model.currentViewData = lastPageResult.result;
                    this._lastPageRendered = true;
                }
                else if (this._lastPageRendered && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1 && !this.model.scrollSettings.enableVirtualization) {
                    var count = this.model.pageSettings.pageSize - this._previousPageLength;
                    for (var dupRow = 0; dupRow < count; dupRow++) {
                        var removeEle = this.getRows()[this.getRows().length - (this.model.pageSettings.pageSize - dupRow)];
                        removeEle.remove();
                    }
                    this._tempPageRendered = true;
                    this.model.currentViewData = result.result;
                }
                else
                    this.model.currentViewData = result.result;
                this._gridRecordsCount = result.count;
                this._remoteSummaryData = result.aggregates;
                this._searchCount = this._searchString.length ? result.count : null;
                this.model.groupSettings.groupedColumns.length && this._setAggregates();
            }
        },
		_refreshViewPageDetails: function(){
			this._currentPage(1);
			this.model.currentIndex = 0;
			this._currentVirtualIndex = 1;
			this.getContent().BoldBIDashboardScroller("model.scrollTop", 0);
		},
		_refreshVirtualViewDetails: function(dataRefreshed){
			if(dataRefreshed)
				this._gridRecordsCount = this._dataSource() !== null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount;
			this._totalVirtualViews = Math.ceil(this._getVirtualTotalRecord() / this._virtualRowCount);
			this._maxViews = Math.ceil(this.model.pageSettings.pageSize / this._virtualRowCount);			
			this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
			this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;			
			this._lastViewData = this._virtualRowCount - ((this._totalVirtualViews * this._virtualRowCount) - this._getVirtualTotalRecord());		
		},
		_getVirtualLoadedRecords: function (queryManagar) {                                        
            var currentPage = this._currentPage();
			if (this._needPaging){
				this._isLastVirtualpage = needTwoPage = this._isThumbScroll && currentPage == this.model.pageSettings.totalPages && !this._virtualPageRecords[currentPage];				
				if(this.initialRender || this._virtualDataRefresh) needTwoPage = true;
				if (this.model.virtualLoading && this._isLocalData && (this.model.currentIndex != 0 || currentPage != 1) && this.model.currentIndex < this.model.pageSettings.totalRecordsCount)
					this._getVirtualOnLoadingData(currentPage, !needTwoPage);
				else
					this._setVirtualPaging(queryManagar, currentPage, !needTwoPage);
				if(!this.initialRender && this._isThumbScroll && this._virtualPageRecords[currentPage] && !this._virtualDataRefresh)
					this._checkPrevNextViews(currentPage, queryManagar);
			}		                            
			this._needPaging = false;			
            this._setVirtualLoadedIndexes(this._currentVirtualIndex);
            if(this.initialRender && this._isLocalData){
                this.model.currentViewData = [];
                for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
                    var currentView = this._currentLoadedIndexes[i];
					if(this._virtualLoadedRecords[currentView])
						bbdesigner$.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView]);
                }
            }
        },
        _setVirtualPaging: function(queryManagar, currentPage, isCurrentIndex){     
            var pageQuery = BoldBIDashboard.pvt.filterQueries(queryManagar.queries, "onPage");
			if(pageQuery.length)
				queryManagar.queries.splice(bbdesigner$.inArray(pageQuery[0], queryManagar.queries), 1);
			if((!isCurrentIndex || this._needVPaging) && this.model.currentIndex > this._virtualRowCount){
				this._initCurrentIndex(queryManagar, currentPage);	
				this._needVPaging = false;
			}
			else
				queryManagar.page(currentPage, this.model.pageSettings.pageSize);
            if(this._isLocalData && !this._virtualPageRecords[currentPage]) {								 
				var result = this._dataManager.executeLocal(queryManagar);   
				if(!this.initialRender) this.model.currentViewData = result.result;
				if(result.result.length){
					this._setVirtualLoadedRecords(result.result, currentPage);					
					if(bbdesigner$.inArray(currentPage, this._virtualLoadedPages) == -1)
						this._virtualLoadedPages.push(currentPage);
				}
				else
					this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();					
			}                   						
        },
		_checkPrevNextViews: function(currentPage){
			var currentVirtualIndex = this._currentVirtualIndex;
			var prevView = this._virtualLoadedRecords[currentVirtualIndex - 1], nextView = this._virtualLoadedRecords[currentVirtualIndex + 1];			
				var adjust = this._maxViews == 3 ? 1 : 2, sTop;																	
				if(currentVirtualIndex != 1 && currentVirtualIndex != this._totalVirtualViews){				
					if(!prevView || prevView.length != this._virtualRowCount){
						var currentIndex = currentVirtualIndex + adjust;
						this._currentVirtualIndex = this._virtualLoadedRecords[currentVirtualIndex] ? currentIndex : currentIndex + 1;
						sTop = this._scrollValue + (adjust * this._virtualRowCount * this._vRowHeight);
					}
					else if((!nextView || nextView.length != this._virtualRowCount) && this._totalVirtualViews != currentVirtualIndex - 1){
						var currentIndex = currentVirtualIndex - adjust;
						this._currentVirtualIndex = this._virtualLoadedRecords[currentVirtualIndex] ? currentIndex : currentIndex - 1;
						sTop = this._scrollValue - (adjust * this._virtualRowCount * this._vRowHeight);
					}			
					if(sTop){					
						this._scrollValue = sTop;
						this._setVirtualLoadedIndexes(this._currentVirtualIndex);
						this.model.currentIndex = sTop == 0 ? sTop : Math.floor(sTop / this._vRowHeight);
					}
				}			
		},
		_initCurrentIndex: function(queryManagar, currentPage){			
			var pageResultCount = currentPage * this.model.pageSettings.pageSize;
			var nextDataCount = (this._currentVirtualIndex * this._virtualRowCount) + this._virtualRowCount;
			var prevDataCount = (this._currentVirtualIndex *  this._virtualRowCount) - (this._virtualRowCount * 2);	
			var needTwoPage = nextDataCount > pageResultCount || prevDataCount < pageResultCount - this.model.pageSettings.pageSize;
			if(needTwoPage || this._isLastVirtualpage){
				if(nextDataCount > pageResultCount){
					var skipValue = (currentPage - 1) * this.model.pageSettings.pageSize, takeValue = this.model.pageSettings.pageSize * 2;	
					this._isInitNextPage = true;					
				}
				else if(prevDataCount < pageResultCount - this.model.pageSettings.pageSize  || this._isLastVirtualpage){
					var skipValue = (currentPage - 2) * this.model.pageSettings.pageSize, takeValue = this.model.pageSettings.pageSize * 2;
					this._isInitNextPage = false; this._remoteRefresh = true;					
				}
				if(this.model.virtualLoading && this._isLocalData){
					var args = {};					
					args.endIndex = skipValue + takeValue;
					args.endIndex = args.endIndex > this._getVirtualTotalRecord() ? this._getVirtualTotalRecord() : args.endIndex;
					args.startIndex = skipValue;	
					args.currentPage = this._currentPage();
					args.result = null;
					this._trigger("virtualLoading", args);
					var currentData = args.result;
					this._setInitialCurrentIndexRecords(currentData, currentPage);
				}
				else{
					queryManagar.skip(skipValue).take(takeValue);					
					if(this._isLocalData){
						var result = this._dataManager.executeLocal(queryManagar);                                    
						var currentData = result.result; 
						this._isLastVirtualpage = false;
						this._setInitialCurrentIndexRecords(currentData, currentPage);						
					}
				}
			}			
			else{
				this._needVPaging = false;
				if(this.model.virtualLoading && this._isLocalData && (this.model.currentIndex != 0 || currentPage != 1))
					this._getVirtualOnLoadingData(currentPage, true);
				else
					this._setVirtualPaging(queryManagar, currentPage, true);						
			}
		},
		_setInitialCurrentIndexRecords: function(currentData, currentPage){
			for(i = 0; i < 2; i++){
				var start = i * this.model.pageSettings.pageSize, end = start + this.model.pageSettings.pageSize;
				var data = currentData.slice(start, end), page;
				if(this._isInitNextPage)
					page = i == 0 ? currentPage : currentPage + 1;
				else
					page = i == 0 ? currentPage - 1 : currentPage;
				this._setVirtualLoadedRecords(data, page);
			}
		},
        _getVirtualOnLoadingData: function(currentPage, isCurrentIndex){
            if(currentPage > 0){
				if(this.model.currentIndex > this._virtualRowCount && (!isCurrentIndex || this._needVPaging) && this.model.currentIndex < this.model.pageSettings.totalRecordsCount)
					this._initCurrentIndex(undefined, currentPage);
				else{
					var args = {};
					args.endIndex = (currentPage * this.model.pageSettings.pageSize) > this._gridRecordsCount ? this._gridRecordsCount : currentPage * this.model.pageSettings.pageSize;
					args.startIndex = (currentPage * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
					args.currentPage = this._currentPage();	args.result = null;			
					this._trigger("virtualLoading", args);
					var currentData = args.result;
					this._setVirtualLoadedRecords(currentData, currentPage);
				}
            }
        },
        _setVirtualLoadedRecords: function(currentData, currentPage){
            var virtualRowCount = this._virtualRowCount, pageSize = this.model.pageSettings.pageSize; 
            var pageIndex = pageSize / virtualRowCount, prevIndex;  
			var maxIndex = Math.ceil(currentPage * pageSize / virtualRowCount);
			var lastPage = currentPage == this.model.pageSettings.totalPages;
			if(!this._virtualPageRecords[currentPage])
				this._virtualPageRecords[currentPage] = currentData;
			if(lastPage){									
			    var lastPageData = this._getVirtualTotalRecord() % pageSize;
				if((!this._virtualLoadedRecords[this._totalVirtualViews] || this._virtualLoadedRecords[this._totalVirtualViews].length != this._lastViewData) && lastPageData < this._lastViewData && lastPageData != 0)
					maxIndex = this._totalVirtualViews + 1;
				else
					maxIndex = this._totalVirtualViews;	
				if(this._getVirtualTotalRecord() < virtualRowCount)
					this._singleView = true;
			}						
            for (var i = 0; i < pageIndex; i++) {
                var startIndex, endIndex;                                                      
                var viewIndex = Math.ceil((currentPage - 1) * pageIndex + (i + 1));				
                if((viewIndex <= this._totalVirtualViews || lastPage) && viewIndex <= maxIndex){					
                    if(this._virtualLoadedRecords[viewIndex - 1] && this._virtualLoadedRecords[viewIndex - 1].length != virtualRowCount) {
                        var start = this._virtualLoadedRecords[viewIndex - 1].length + (i * virtualRowCount);
                        startIndex = virtualRowCount - start + (i * virtualRowCount);
                        bbdesigner$.merge(this._virtualLoadedRecords[viewIndex - 1], currentData.slice(0, startIndex));
                        prevIndex = endIndex = startIndex + virtualRowCount;
						if(viewIndex <= this._totalVirtualViews)
							this._virtualLoadedRecords[viewIndex] = currentData.slice(startIndex, prevIndex);						
                    }									
                    else {
                        if (viewIndex != 1 && !this._virtualLoadedRecords[viewIndex - 1]) {                                        
                            var prevEnd = endIndex = (viewIndex - 1) * virtualRowCount % pageSize;
                            if(prevEnd != 0)
                                this._virtualLoadedRecords[viewIndex - 1] = currentData.slice(0, prevEnd);
                            startIndex = prevEnd, endIndex = prevIndex = prevEnd + virtualRowCount;
                        }
                        else {
                            startIndex = prevIndex ? prevIndex : i * virtualRowCount % pageSize;       
                            prevIndex = endIndex = startIndex + virtualRowCount;
                        }                                   
                    }                    
					if(this._virtualLoadedRecords[viewIndex] && this._virtualLoadedRecords[viewIndex].length != virtualRowCount){
						var	data = currentData.slice(startIndex, endIndex);						
						if(data.length + this._virtualLoadedRecords[viewIndex].length <= virtualRowCount){
							var viewData = bbdesigner$.merge(data, this._virtualLoadedRecords[viewIndex]); 
							this._virtualLoadedRecords[viewIndex] = viewData;
						}
					}
					else if(!this._virtualLoadedRecords[viewIndex] && viewIndex <= this._totalVirtualViews)
						this._virtualLoadedRecords[viewIndex] = currentData.slice(startIndex, endIndex);					
                }
            }
			if(bbdesigner$.inArray(currentPage, this._virtualLoadedPages) == -1)
				this._virtualLoadedPages.push(currentPage);
        },
        _setVirtualLoadedIndexes: function(currentIndex){
			this._currentLoadedIndexes = [];            
            var virtualCount = currentIndex == this._totalVirtualViews ? currentIndex : currentIndex + 1;			
            if(currentIndex != 1)                               
                currentIndex = currentIndex - 1;            
            for (var i = currentIndex; i <= virtualCount; i++) {
                this._currentLoadedIndexes.push(i);                    
            }  
        },
        _getVirtualTotalRecord: function(){
            var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;    
            return recordCount;
        },
        _initGridRender: function () {
            this.addInitTemplate();
            if (this.model.scrollSettings.frozenColumns > 0)
                this.addFrozenTemplate();
            this.model.allowGrouping && this.addGroupingTemplate();
            this.model.showSummary && this.addSummaryTemplate();
            if (this.model.allowResizing || this.model.allowResizeToFit)
                this._resizer = new BoldBIDashboard.gridFeatures.gridResize(this);
            if (this.model.keySettings)
                bbdesigner$.extend(this.model.keyConfigs, this.model.keySettings);
           
            this.render();
            this._setTextWrap();
            if (this.model.columnLayout == "fixed") {
                var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
                var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
                var headerTable = this.getHeaderTable();
                var contentTable = this.getContentTable();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
                    contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
                }
                headerTable[operation]('e-tableLastCell');
                contentTable[operation]('e-tableLastCell');
            }
            if (this.model.allowGrouping && BoldBIDashboard.gridFeatures.dragAndDrop)
                this._headerCellgDragDrop();
            if (this.model.allowReordering && BoldBIDashboard.gridFeatures.dragAndDrop) {
                this._headerCellreorderDragDrop();
                this._initIndicators();
            }
            this._wireEvents();
            if (this.model.allowGrouping && !BoldBIDashboard.isNullOrUndefined(this.model.serverProperties)) {
                this.model._groupingCollapsed = this.model.serverProperties._groupingCollapsed;
                for (var i = 0; i < this.model._groupingCollapsed.length; i++) {
                    var content = this.getContent().find(".e-recordplusexpand");
                    var tr = content.filter("td[ej-mappingname='" + this.model._groupingCollapsed[i].key + "'    ][ej-mappingvalue='" + this.model._groupingCollapsed[i].value + "']");
                    if (tr.length > 1 && !BoldBIDashboard.isNullOrUndefined(this.model._groupingCollapsed[i].parent)) {
                        var parent = this.model._groupingCollapsed[i].parent;
                        tr = tr.filter(function (e) { return bbdesigner$(this).parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand[ej-mappingvalue=" + parent + "]").length })
                    }

                    this.expandCollapse(tr);
                }
            }
            this.initialRender = false;
            if (this.model.width && !this.model.allowScrolling)
                this.element.width(this.model.width);
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding)
                this._processEditing();
            this._trigger("dataBound", {});
			this._trigger("refresh");
            if (this.model.parentDetails) {  //refreshes parent scroller on child expand
                var id = this.model.parentDetails.parentID, parentObj = bbdesigner$("#" + id).data("BoldBIDashboardGrid");
                parentObj.model.allowScrolling && parentObj._refreshScroller({ requestType: "refresh" });
            }
            if (this.element.closest('tr').hasClass('e-detailrow') && !this.model.parentDetails) {
                var parentObj = this.element.closest('tr.e-detailrow').closest('.e-grid').data("BoldBIDashboardGrid");
                parentObj.model.allowScrolling && parentObj.getScrollObject().refresh();
            }
            if (this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel")) {
                this._renderFilterDialogs();
                if (this.model.enableResponsiveRow)
                    this._renderResponsiveFilter();
            }
            if (this.model.allowGrouping && this.model.showSummary)
                this._refreshGroupSummary();
        },
        _setTextWrap: function () {
            if (this.model.allowTextWrap == true) {
                switch (this.model.textWrapSettings.wrapMode) {
                    case "content":
                        this.element.find(".e-columnheader").removeClass("e-wrap");
                        this.element.removeClass("e-wrap");
                        this.getContent().addClass("e-wrap");
                        break;
                    case "header":
                        this.element.removeClass("e-wrap");
                        this.getContent().removeClass("e-wrap");
                        this.element.find(".e-columnheader").addClass("e-wrap");
                        break;
                    default:
                        this.getContent().removeClass("e-wrap");
                        this.element.find(".e-columnheader").removeClass("e-wrap");
                        this.element.addClass("e-wrap");
                        break;
                }
            } else {
                this.getContent().removeClass("e-wrap").find(".e-rowcell").removeClass("e-nwrap");
                this.element.find(".e-columnheader").removeClass("e-wrap").find(".e-headercelldiv").removeClass("e-nwrap");
                this.element.removeClass("e-wrap");
            }
        },
        _getMetaColGroup: function () {
            var bbdesigner$colgroup = BoldBIDashboard.buildTag("colgroup");
            for (var i = 0; i < this.model.columns.length; i++) {
                var bbdesigner$col = bbdesigner$(document.createElement("col"));
                this.model.columns[i]["visible"] === false && bbdesigner$col.css("display", "none");
				if(this.model.rowTemplate!=null && !BoldBIDashboard.isNullOrUndefined(this.model.columns[i]["cssClass"]))
					bbdesigner$col.addClass(this.model.columns[i]["cssClass"]);
                if ( this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && bbdesigner$.inArray(this.model.columns[i]["field"], this.model.groupSettings.groupedColumns) != -1)
                    bbdesigner$col.css("display", "none");
                bbdesigner$colgroup.append(bbdesigner$col);
            }
            return bbdesigner$colgroup;
        },
        _alternateRow: function () {
            return this.getIndex() % 2 == 0 ? "e-row" : "e-alt_row";
        },
        addInitTemplate: function () {
            var headerCellDiv = this.element.find(".e-headercelldiv:not(.e-emptyCell)"), templates = {}, firstVisible = true;
            var tbody = document.createElement('tbody'), bbdesigner$tbody = bbdesigner$(tbody);
            if (this.model.rowTemplate == null) {
                var tr = document.createElement('tr'),
                    bbdesigner$tr = bbdesigner$(tr),
                    columns = this.model.columns,
                    i;
                if (this._gridRecordsCount && !this._virtualDataRefresh)
                    this._initColumns(this.model.currentViewData[0] != undefined ? this.model.currentViewData[0] : this.model.currentViewData.value);
                else if (this._isLocalData && (this._dataSource() != null && this._dataSource().length || (this._dataManager && this._dataManager.dataSource.json.length)))
                    this._initColumns(this._dataSource()[0] != undefined ? this._dataSource()[0] : this._dataManager.dataSource.json[0]);
                var helpers = { _gridFormatting: this.formatting };
                bbdesigner$.views.helpers(helpers);

                var viewHelper = {};
                viewHelper["_foreignKey"] = this._foreignKeyBinding; 
                bbdesigner$.views.helpers(viewHelper);

                if (this.model.childGrid || this.model.detailsTemplate ) {
                    var bbdesigner$tdDetailCell = BoldBIDashboard.buildTag("td.e-detailrowcollapse", "<div class='e-icon e-gnextforward'></div>");
                    bbdesigner$tr.append(bbdesigner$tdDetailCell);
                }
                for (i = 0; i < this.model.columns.length; i++) {
                    var bbdesigner$tdCell = BoldBIDashboard.buildTag("td.e-rowcell");
                    if (!BoldBIDashboard.isNullOrUndefined(columns[i]["tooltip"]) || columns[i]["clipMode"] == BoldBIDashboard.Grid.ClipMode.EllipsisWithTooltip)
                        bbdesigner$tdCell.addClass("e-gridtooltip")
                    if (columns[i]["clipMode"] == BoldBIDashboard.Grid.ClipMode.Ellipsis || columns[i]["clipMode"] == BoldBIDashboard.Grid.ClipMode.EllipsisWithTooltip)
                        bbdesigner$tdCell.addClass("e-gridellipsis");
                    if (this.model.isResponsive)
                        bbdesigner$tdCell.attr("data-cell", this._decode(this.model.columns[i]["headerText"]));
                    if (columns[i]["visible"] == false)
                        bbdesigner$tdCell.addClass("e-hide");
                    else {
                        if (firstVisible && (this.model.detailsTemplate != null || this.model.childGrid != null))
                            bbdesigner$tdCell.addClass('e-detailrowvisible');
                        firstVisible = false;
                    }
                    !this.model.groupSettings.showGroupedColumn && bbdesigner$tdCell.addClass("{{for ~groupedColumns}}" +
                        " {{if #data == '" + this.model.columns[i]["field"] + "'}}e-hide{{/if}}" +
                        "{{/for}}");
                    if (!BoldBIDashboard.isNullOrUndefined(columns[i]["templateID"] || columns[i]["template"])) {
                        var viewHelper = {}, index, htxt = columns[i].headerText;
                        viewHelper["_" + this._id + "ColumnTemplating"] = BoldBIDashboard.proxy(this._gridTemplate, null, this, index);
                        bbdesigner$.views.helpers(viewHelper);
                        if(!BoldBIDashboard.isNullOrUndefined(htxt) && !BoldBIDashboard.isNullOrUndefined(htxt.match(/[^0-9A-z-_]/g)))
                            htxt = htxt.replace(/[^0-9A-z-_]/g, "");
                        bbdesigner$("#" + this._id + htxt + i + "_Template").remove();
                        var scriptElement = this._createTemplateElement(columns[i]);
                        if ((columns[i].field == "") || BoldBIDashboard.isNullOrUndefined(columns[i].field))
                            this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                        if (columns[i]["template"] != false)
                            bbdesigner$tdCell.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "','" + i + "')}}");
                    } else {
                        var splits = (columns[i].field || "").split("."), sLen = splits.length - 1, braces = "";
                        while (sLen) {
                            braces += "(";
                            sLen--;
                        }
                        var columnType = columns[i].type || columns[i].editType
                        switch (columnType) {
                            case "boolean":
                            case "booleanedit":
                                if (BoldBIDashboard.isNullOrUndefined(columns[i].displayAsCheckbox)) columns[i].displayAsCheckbox = true;
                                if (!columns[i]["displayAsCheckbox"])
                                    bbdesigner$tdCell.html('{{if ' + columns[i].field + '}}' + this.localizedLabels.True + '{{else}}' + this.localizedLabels.False + '{{/if}}');
                                else
                                    bbdesigner$tdCell.addClass("e-boolrowcell").html("{{if #data['" + splits.join("']['") + "']=='true'||#data['" + splits.join("']['") + "']==true}} <input type ='checkbox' disabled='disabled' checked='checked'></input>{{else}} <input type ='checkbox' disabled='disabled'></input> {{/if}}");
                                break;
                            case "checkbox":
                                this._enableCheckSelect = true;
                                this.model.selectionType = "multiple";
                                if(this.model.editSettings.allowDeleting) this.multiDeleteMode = true;
                                this.model.selectionSettings.enableToggle = true;
                                this._isMapSelection = (!BoldBIDashboard.isNullOrUndefined(columns[i].field) && (columns[i].field != ""));
                                this._selectionMapColumn = columns[i].field;
                                columns[i]["textAlign"] = "center";
                                if (!this._isMapSelection)
                                    this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                                bbdesigner$tdCell.addClass("e-checkcell").html("<div class = 'e-checkcelldiv'>{{if #data['" + splits.join("']['") + "']}} <input type ='checkbox' checked='checked'></input>{{else}} <input type ='checkbox'></input> {{/if}}</div>");
                                if (this.getBrowserDetails().browser == 'msie' || this.getBrowserDetails().browser == 'edge') {
                                    this._on(this.element, 'dblclick', this._checkboxDblClick);
                                }
                                this.model.columns[i].editType = BoldBIDashboard.Grid.EditingType.Boolean;
                                this.model.scrollSettings.frozenColumns > 0 && $tdCell.addClass("e-frozenunbound");
                                this.model.enableAutoSaveOnSelectionChange = false;
                                break;
                            default:
                                if (columns[i].disableHtmlEncode)
                                    bbdesigner$tdCell.html("{{html:" + braces + "#data['" + splits.join("'] || {})['") + "']}}");
                                else
                                    bbdesigner$tdCell.html("{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}");
                        }
                        if (columns[i]["format"] != undefined && (!columns[i]["foreignKeyValue"]))
                            bbdesigner$tdCell.html("{{:~_gridFormatting('" + columns[i]["format"] + "'," + braces + "#data['" + splits.join("'] || {})['") + "'],'" + this.model.locale + "')}}");
                        if (columns[i]["foreignKeyValue"] && columns[i]["dataSource"]) {
                            bbdesigner$tdCell.html("{{:~_foreignKey(" + i + "," + braces + "#data['" + splits.join("'] || {})['") + "'],'" + this._id + "')}}");
                        }
                        if (columns[i]["commands"]) {
                            var viewHelper = {};
                            viewHelper["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                            bbdesigner$.views.helpers(viewHelper);
                            if ((BoldBIDashboard.isNullOrUndefined(columns[i]["field"])) || (columns[i].field == ""))
                                this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                            if (!BoldBIDashboard.isNullOrUndefined(columns[i].headerText))
                            bbdesigner$("#" + this._id + columns[i].headerText.replace(/[^a-z0-9|s_]/gi, '')+ "_UnboundTemplate").remove();
                            divElement = this._createUnboundElement(columns[i]);
                            if (!BoldBIDashboard.isNullOrUndefined(columns[i].headerText))
                            bbdesigner$tdCell.addClass("e-unboundcell").addClass("e-" + columns[i]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+i).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                            this.model.scrollSettings.frozenColumns > 0 && bbdesigner$tdCell.addClass("e-frozenunbound");
                            this._isUnboundColumn = true;
                        }

                    }
                    if (columns[i]["textAlign"] == undefined)
                        columns[i]["textAlign"] = "left";
                    if (columns[i]["isPrimaryKey"] === true) {
                        this._primaryKeys.push(bbdesigner$.trim(columns[i].field));
                        this._primaryKeys = bbdesigner$.unique(this._primaryKeys);
                    }
                    if (!this.phoneMode && columns[i]["textAlign"] != undefined) {
                        bbdesigner$tdCell.css("text-align", columns[i]["textAlign"]);
                        bbdesigner$(headerCellDiv[i]).css("text-align", columns[i]["textAlign"]);
                    }
                    if (!this.phoneMode && !BoldBIDashboard.isNullOrUndefined(columns[i]["headerTextAlign"])) {
                        bbdesigner$(headerCellDiv[i]).css("text-align", columns[i]["headerTextAlign"]);
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(columns[i]["cssClass"])) {
                        bbdesigner$tdCell.addClass(columns[i]["cssClass"]);
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(columns[i]["priority"]))
                        bbdesigner$tdCell.addClass("e-table-priority-" + columns[i]["priority"]);
                    if (!BoldBIDashboard.isNullOrUndefined(columns[i]["customAttributes"]))
                        bbdesigner$tdCell.attr(columns[i]["customAttributes"]);
                    bbdesigner$tdCell.attr("role", "gridcell");
                    bbdesigner$tr.append(bbdesigner$tdCell);
                    if (this.model.enableAltRow) {
                        helpers["_" + this._id + "AlternateRow"] = this._alternateRow;
                        bbdesigner$.views.helpers(helpers);
                        bbdesigner$tr.addClass("{{:~_" + this._id + "AlternateRow()}}");
                    }
                    else
                        bbdesigner$tr.addClass("e-row");
                    bbdesigner$tr.attr("role", "row");
                    if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenColumns == i + 1) {
                        tbody.appendChild(tr);
                        templates[this._id + "_JSONFrozenTemplate"] = bbdesigner$tbody.html();
                        bbdesigner$tr.empty();
                        bbdesigner$tbody.empty();
                    }
                }
                tbody.appendChild(tr);
            }
            templates[this._id + "_JSONTemplate"] = this.model.rowTemplate != null ? bbdesigner$(this.model.rowTemplate).html() : bbdesigner$tbody.html();
            bbdesigner$.templates(templates);
        },
        
        
        render: function () {
            this.model.showSummary = this.model.summaryRows.length > 0 || this.model.showSummary;
            this.model.showStackedHeader = this.model.stackedHeaderRows.length > 0 || this.model.showStackedHeader;
            this._renderGridContent().insertAfter(this.element.children(".e-gridheader"));
            this.model.allowResizeToFit && this.setWidthToColumns();
            if (this.model.allowGrouping && BoldBIDashboard.gridFeatures.dragAndDrop)
                this._groupHeaderCelldrag();
            if (this.model.showSummary && this._currentJsonData.length) {
                this._renderGridFooter().insertAfter(this.getContent());
                this._hideCaptionSummaryColumn();
            }
            this._initialEndRendering();

        },
        _createStackedRow: function (stackedHeaderRow, frozenHeader) {
            var bbdesigner$tr = BoldBIDashboard.buildTag('tr.e-columnheader e-stackedHeaderRow');
            var sHeader = [], sCss = []; tAl = [], tp = [];
            for (var c = 0; c < this.model.columns.length; c++) {
                var column = this.model.columns[c];
                if (column.visible != false) {
                    if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && this.model.groupSettings.groupedColumns.length > 0) {
                        if (bbdesigner$.inArray(column.field, this.model.groupSettings.groupedColumns) != -1)
                            continue;
                    }
                    var headerText = '', cssClass = '', txtAlign = '', ttp = "";
                    var sColumn = stackedHeaderRow.stackedHeaderColumns;
                    for (var col = 0; col < sColumn.length; col++) {
                        var _column = bbdesigner$.isArray(sColumn[col].column) ? sColumn[col].column : bbdesigner$.map(sColumn[col].column.split(","), bbdesigner$.trim),
                            className = "e-row" + bbdesigner$.inArray(stackedHeaderRow, this.model.stackedHeaderRows) + "-column" + col;
                        if (bbdesigner$.inArray(column.field, _column) != -1)
                        {
                            headerText = sColumn[col].headerText;
                            cssClass = sColumn[col]["cssClass"];
                            txtAlign = sColumn[col].textAlign;
                            ttp = sColumn[col]["tooltip"] ? " e-gridtooltip " + className : '';
                        }                        
                    }
                    sHeader.push(headerText);
                    sCss.push(cssClass);
                    tAl.push(txtAlign);
                    tp.push(ttp);
                }
            }
            var colsPanList = []
            for (var i = 0; i < sHeader.length; i++) {
                var colSpan = 1;
                for (var j = i + 1; j < sHeader.length; j++) {
                    if (sHeader[i] == sHeader[j]) {
                        colSpan++;
                    }
                    else
                        break;
                }
                colsPanList.push({ sapnCount: colSpan, headerText: sHeader[i], cssClass: sCss[i], txtAlign: tAl[i], tooltip: tp[i] });
                i += colSpan - 1;
            }
            var bbdesigner$tr = BoldBIDashboard.buildTag('tr.e-columnheader e-stackedHeaderRow');
            var frzCol = this.model.scrollSettings.frozenColumns;
            if (this.model.allowScrolling && frzCol > 0) {
                var frozenColspanList = [];
                var forzenColumn = 0, index = 0, frzHideCol = 0;
                for (var i = 0; i < this.model.columns.length; i++) {
                    var col = this.model.columns[i];
                    if (i < frzCol && col.visible == false)
                        frzHideCol++;
                }
                forzenColumn = frzCol - frzHideCol;
                while (forzenColumn > 0) {
                    var spanC = colsPanList[index].sapnCount;
                    if (colsPanList[index].sapnCount < forzenColumn) {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                        else
                            index++;
                    }
                    else if (colsPanList[index].sapnCount > forzenColumn) {
                        colsPanList[index].sapnCount = colsPanList[index].sapnCount - forzenColumn
                        if (frozenHeader)
                            frozenColspanList.push({ sapnCount: forzenColumn, headerText: colsPanList[index].headerText });
                    }
                    else {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                    }
                    forzenColumn -= spanC;
                }
                if (frozenHeader)
                    colsPanList = frozenColspanList
            }
            if (this.model.detailsTemplate || this.model.childGrid)
                bbdesigner$tr.append(BoldBIDashboard.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
            for (var c = 0; c < colsPanList.length; c++) {
                var bbdesigner$th = BoldBIDashboard.buildTag('th.e-headercell e-stackedHeaderCell e-default' + colsPanList[c].tooltip, colsPanList[c].headerText, {}, { 'colspan': colsPanList[c].sapnCount });
                bbdesigner$th.css("textAlign", colsPanList[c].txtAlign);
                bbdesigner$tr.append(bbdesigner$th);
                if (colsPanList[c]["cssClass"] != undefined)
                    bbdesigner$th.addClass(colsPanList[c]["cssClass"]);
            }
            return bbdesigner$tr;
        },
        _renderGridHeaderInternalDesign: function (columns, frozenHeader) {
            var bbdesigner$table = BoldBIDashboard.buildTag('table.e-table', "", {}, { cellspacing: "0.25px", role: "grid" });
            var bbdesigner$thead = BoldBIDashboard.buildTag('thead');
            var bbdesigner$tbody = BoldBIDashboard.buildTag('tbody.e-hide');
            var bbdesigner$columnHeader = BoldBIDashboard.buildTag('tr.e-columnheader');
            var bbdesigner$colGroup = bbdesigner$(document.createElement('colgroup'));
            var bbdesigner$rowBody = bbdesigner$(document.createElement('tr'));
            if (this.model.childGrid || this.model.detailsTemplate ) {
                bbdesigner$columnHeader.append(BoldBIDashboard.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
                bbdesigner$colGroup.append(this._getIndentCol());
            }
            if (this.model.showStackedHeader) {
                for (var index = 0; index < this.model.stackedHeaderRows.length; index++) {
                    var bbdesigner$tr = this._createStackedRow(this.model.stackedHeaderRows[index], frozenHeader);
                    bbdesigner$thead.append(bbdesigner$tr);
                }
            }
            for (var columnCount = 0; columnCount < columns.length; columnCount++) {
                var bbdesigner$headerCell = BoldBIDashboard.buildTag('th.e-headercell e-default', "", {}, { role: "columnheader" });
                var bodyCell = document.createElement('td');
                var bbdesigner$headerCellDiv = BoldBIDashboard.buildTag('div.e-headercelldiv', columns[columnCount]["headerText"] === undefined ? columns[columnCount]["headerText"] = columns[columnCount]["field"] : columns[columnCount]["headerText"], {}, { "ej-mappingname": columns[columnCount]["field"] });
                if (columns[columnCount].disableHtmlEncode)
                    bbdesigner$headerCellDiv.text(columns[columnCount]["headerText"]);
                if (!BoldBIDashboard.isNullOrUndefined(columns[columnCount]["tooltip"]) || columns[columnCount]["clipMode"] == BoldBIDashboard.Grid.ClipMode.EllipsisWithTooltip)
                    bbdesigner$headerCellDiv.addClass("e-gridtooltip")
                if (columns[columnCount]["clipMode"] == BoldBIDashboard.Grid.ClipMode.Ellipsis || columns[columnCount]["clipMode"] == BoldBIDashboard.Grid.ClipMode.EllipsisWithTooltip)
                    bbdesigner$headerCellDiv.addClass("e-gridellipsis");
                bbdesigner$headerCell.append(bbdesigner$headerCellDiv);
                if (this.model.allowFiltering && ((this.model.filterSettings.filterType == "menu" || (this.model.filterSettings.filterType == "excel" && !columns[columnCount].IsMeasure)) && columns[columnCount].dateFormat == "None") &&
                                (columns[columnCount]["allowFiltering"] == undefined || columns[columnCount]["allowFiltering"] === true) && (!BoldBIDashboard.isNullOrUndefined(columns[columnCount].field) || columns[columnCount].field == "")) {
                        var filtericon = 'e-filterset';
                    if (!this.initialRender && this.model.filterSettings.filteredColumns) {
                        for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
                            if (this.model.filterSettings.filteredColumns[i].field == columns[columnCount].field) {
                                filtericon = 'e-filterset e-filteredicon e-filternone';
                            }
                        }
                    }
                    bbdesigner$headerCell.append(BoldBIDashboard.buildTag('div.e-filtericon e-icon ' + filtericon));
                    bbdesigner$headerCell.addClass("e-headercellfilter");
                    if (BoldBIDashboard.browserInfo().name == "msie" && BoldBIDashboard.browserInfo().version == "8.0" && this.model.enableRTL)
                        bbdesigner$(bbdesigner$headerCellDiv).css("padding", "0 0 0 2em");
                }
                var col = document.createElement('col');
                if (columns[columnCount]["priority"])
                    bbdesigner$(bodyCell).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                bbdesigner$rowBody.append(bodyCell);
                bbdesigner$columnHeader.append(bbdesigner$headerCell);
                bbdesigner$colGroup.append(col);
                if (columns[columnCount]["visible"] === false) {
                    bbdesigner$headerCell.addClass("e-hide") && bbdesigner$(col).css("display", "none")
                    if (bbdesigner$.inArray(columns[columnCount].headerText, this._hiddenColumns) == -1 && bbdesigner$.inArray(columns[columnCount].field, this._hiddenColumnsField) == -1)
                        this._hiddenColumns.push(columns[columnCount].headerText) && columns[columnCount].field != ("" || undefined) ? this._hiddenColumnsField.push(columns[columnCount].field) : this._hiddenColumnsField.push(columns[columnCount].headerText);
                    if (bbdesigner$.inArray(columns[columnCount].field, this._visibleColumnsField) != -1)
                        this._visibleColumnsField.splice(bbdesigner$.inArray(columns[columnCount].field, this._visibleColumnsField), 1) && this._visibleColumns.splice(bbdesigner$.inArray(columns[columnCount].headerText, this._visibleColumns), 1)
                }
                else {
                    this._visibleColumns.push(columns[columnCount].headerText) && columns[columnCount].field != ("" || undefined) ? this._visibleColumnsField.push(columns[columnCount].field) : this._visibleColumnsField.push(columns[columnCount].headerText);
                    columns[columnCount]["visible"] = true;
                    if (bbdesigner$.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField) != -1)
                        this._hiddenColumnsField.splice(bbdesigner$.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField), 1) && this._hiddenColumns.splice(bbdesigner$.inArray(columns[columnCount].headerText, this._hiddenColumns), 1)
                }
                if (this.model.showColumnChooser && columns[columnCount]["showInColumnChooser"] !== false)
                    columns[columnCount]["showInColumnChooser"] = true;
                if (this.model.allowResizing && columns[columnCount]["allowResizing"] !== false)
                    columns[columnCount]["allowResizing"] = true;
                if (!BoldBIDashboard.isNullOrUndefined(columns[columnCount]["headerTextAlign"]))
                    bbdesigner$headerCellDiv.css("text-align", columns[columnCount]["headerTextAlign"]);
                else if (columns[columnCount]["textAlign"] != undefined)
                    bbdesigner$headerCellDiv.css("text-align", columns[columnCount]["textAlign"]);
				else if (this.model.enableRTL)
					bbdesigner$headerCellDiv.css("text-align",columns[columnCount]["textAlign"] = "right");
                columns[columnCount]["allowResizing"] === false && this._disabledResizingColumns.push(columns[columnCount].field);
                columns[columnCount]["allowSorting"] === false && this._disabledSortableColumns.push(columns[columnCount].field);
                columns[columnCount]["allowGrouping"] === false && this._disabledGroupableColumns.push(columns[columnCount].field);
                columns[columnCount]["allowEditing"] === false && this._disabledEditableColumns.push(columns[columnCount].field);
                if (!BoldBIDashboard.isNullOrUndefined(columns[columnCount]["cssClass"])) {
                    bbdesigner$headerCell.addClass(columns[columnCount]["cssClass"]);
                    bbdesigner$(col).addClass(columns[columnCount]["cssClass"]);
                }
                if (!BoldBIDashboard.isNullOrUndefined(columns[columnCount]["headerTemplateID"])) {
                    bbdesigner$headerCellDiv.html(bbdesigner$(columns[columnCount]["headerTemplateID"]).hide().html()).parent().addClass("e-headertemplate");
                    var index = bbdesigner$.inArray(columns[columnCount].field, this._disabledGroupableColumns);
                    index == -1 && BoldBIDashboard.isNullOrUndefined(columns[columnCount].field) && this._disabledGroupableColumns.push(columns[columnCount].field);
                }
                if (this.model.allowGrouping && this.model.groupSettings.showToggleButton && bbdesigner$.inArray(columns[columnCount].field, this._disabledGroupableColumns) == -1 && !BoldBIDashboard.isNullOrUndefined(columns[columnCount].field) && columns[columnCount].field != "") {
                    if (bbdesigner$.inArray(columns[columnCount].field, this.model.groupSettings.groupedColumns) != -1)
                        bbdesigner$headerCellDiv.append(this._getToggleButton().addClass("e-toggleungroup"));
                    else
                        bbdesigner$headerCellDiv.append(this._getToggleButton().addClass("e-togglegroup"));
                }
                if (this.model.isResponsive)
                    bbdesigner$headerCell.attr("title", this._decode(columns[columnCount].headerText));
                if (columns[columnCount]["priority"]) {
                    bbdesigner$headerCell.attr("data-priority", columns[columnCount]["priority"]).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                    bbdesigner$(col).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                }
                if (this.initialRender) {
                    if (typeof (columns[columnCount].width) == "string" && columns[columnCount].width.indexOf("%") != -1)
                        this.columnsWidthCollection.push(parseInt(columns[columnCount]["width"]) / 100 * this.element.width());
                    else
                        this.columnsWidthCollection.push(columns[columnCount]["width"]);
                }
                if (columns[columnCount]["width"] == undefined && this.model.commonWidth !== undefined)
                    this.columnsWidthCollection[columnCount] = this.model.commonWidth;
                this._fieldColumnNames[columns[columnCount].headerText] = columns[columnCount].field;
                this._headerColumnNames[columns[columnCount].field] = columns[columnCount].headerText;                
            }
            bbdesigner$thead.append(bbdesigner$columnHeader);
            bbdesigner$tbody.append(bbdesigner$rowBody);
            bbdesigner$table.append(bbdesigner$colGroup).append(bbdesigner$thead).append(bbdesigner$tbody);
            return bbdesigner$table;
        },
        _renderGridHeader: function () {
            var bbdesigner$div = BoldBIDashboard.buildTag('div.e-gridheader'), temp, bbdesigner$frozenDiv, bbdesigner$movableDiv;
            var bbdesigner$innerDiv = BoldBIDashboard.buildTag('div');
            if (this.model.allowScrolling)
                bbdesigner$innerDiv.addClass("e-headercontent");
            this.setGridHeaderContent(bbdesigner$div);
            if (this.initialRender) {
                this.columnsWidthCollection = [];
                this._hiddenColumns = [];
                this._hiddenColumnsField = [];
            }
            this._visibleColumns = [];
            this._visibleColumnsField = [];
            this._disabledGroupableColumns = [];
            this._fieldColumnNames = {};
            this._headerColumnNames = {};
            if (this.model.scrollSettings.frozenColumns > 0) {
                bbdesigner$frozenDiv = BoldBIDashboard.buildTag("div.e-frozenheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(0, this.model.scrollSettings.frozenColumns), true));
                bbdesigner$movableDiv = BoldBIDashboard.buildTag("div.e-movableheader", BoldBIDashboard.buildTag("div.e-movableheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(this.model.scrollSettings.frozenColumns), false)));
                bbdesigner$innerDiv.append(bbdesigner$frozenDiv).append(bbdesigner$movableDiv);
            } else
                bbdesigner$innerDiv.append(this._renderGridHeaderInternalDesign(this.model.columns));
            bbdesigner$div.html(bbdesigner$innerDiv);
            if (this.model.isResponsive)
                bbdesigner$div.addClass("e-textover");
            this.setGridHeaderTable(this.getHeaderContent().find(".e-table"));
            return bbdesigner$div;
        },
        _renderGridContent: function () {
            var bbdesigner$div = BoldBIDashboard.buildTag('div.e-gridcontent');
            var bbdesigner$innderDiv = BoldBIDashboard.buildTag('div');
            var bbdesigner$table = BoldBIDashboard.buildTag('table.e-table', "", {}, { cellspacing: "0.25px" });
            var bbdesigner$tbody = bbdesigner$(document.createElement('tbody'));
            bbdesigner$table.append(this.getHeaderTable().find('colgroup').clone()).append(bbdesigner$tbody);
            bbdesigner$innderDiv.html(bbdesigner$table);
            bbdesigner$div.html(bbdesigner$innderDiv);
            this.setGridContentTable(bbdesigner$table);
            this.setGridContent(bbdesigner$div);
            bbdesigner$table.attr("role", "grid");
            var args = {};
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length) {
                if (this.initialRender) {
                    args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
                    if (!this.model.groupSettings.showGroupedColumn) {
                        for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                            var col = this.model.groupSettings.groupedColumns[i];
                            if (bbdesigner$.inArray(col, this._hiddenColumnsField) == -1) {//updated for
                                this._hiddenColumnsField.push(col);//updated for
                                this.getColumnByField(col).visible = false;
                            }
                        }
                    }
                }
                args.requestType = BoldBIDashboard.Grid.Actions.Grouping;
            } else
                args.requestType = BoldBIDashboard.Grid.Actions.Refresh;
            if (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0) {
                var bbdesigner$emptyTd = BoldBIDashboard.buildTag('td.emptyrecord', this.localizedLabels.EmptyRecord, {}, { colSpan: this.model.columns.length });
                bbdesigner$tbody.append(bbdesigner$(document.createElement("tr")).append(bbdesigner$emptyTd));
                this.setWidthToColumns();
                if (this.initialRender)
                    this.sendDataRenderingRequest(args)
            } else
                this.sendDataRenderingRequest(args);
            if (this._isCaptionSummary && args.requestType == "grouping" && this.model.groupSettings.groupedColumns.length > 1) {
                var colgroup = this.getContentTable().find(".e-table").not(".e-recordtable").children("colgroup");
                var bbdesigner$cols1 = bbdesigner$(this.getContentTable().find(".e-recordtable")[0]).children("colgroup").find("col");
                for (i = 0; i < colgroup.length; i++) {
                    var colCount = bbdesigner$(colgroup[i]).find("col").length;
                    bbdesigner$(colgroup[i]).find("col:gt(" + (colCount - bbdesigner$cols1.length - 1) + ")").remove();
                    bbdesigner$(colgroup[i]).append(bbdesigner$cols1.clone());
                }
            }
            return bbdesigner$div;
        },
        
        print: function () {
            var args = {}; args.requestType = "print";
            this._printselectrows = this.getContentTable().find('tr[aria-selected="true"]');
            
            this._trigger("actionBegin", args);
            var allowPaging = this.model.allowPaging;
			if(this._bbdesigner$fDlgIsOpen){
                 this.element.find('.e-excelfilter:visible').css("display","none");
                 this.element.find('.e-filterdialoglarge:visible').css("display","none");
            }
            var elementClone = this.element.clone();
			var printWin = window.open('', 'print', "height=452,width=1024,tabbar=no");
            if (this.model.allowPaging && this.model.pageSettings.printMode == "currentpage") {
                this.getPager().css('display', 'none');
                elementClone = this.element.clone();
                if (!this.model.allowScrolling) {
                    this.refreshContent();
                    this.getPager().css('display', 'block');
                }
            }
            else if (allowPaging) {
                this.model.allowPaging = false;
                this.refreshContent();
                this.getPager().css('display', 'none');
                elementClone = this.element.clone();
                this.model.allowPaging = true;
                if (!this.model.allowScrolling) {
                    this.refreshContent();
                    this.getPager().css('display', 'block');
                }
            }
            if (this.model.allowScrolling) {
                var scrollWidth = this.model.scrollSettings.width, scrollHeight = this.model.scrollSettings.height;
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && (this.getScrollObject().isVScroll() || this.getScrollObject().isHScroll())) {
					var scrollContent = this.getContent().find('.e-content')[0];
					elementClone.find('.e-gridcontent').height(scrollContent.scrollHeight);
					elementClone.find('.e-gridcontent').BoldBIDashboardScroller({ width: scrollContent.scrollWidth, height: scrollContent.scrollHeight });
					elementClone.width(scrollContent.scrollWidth);
				}
                if (this.model.allowPaging) {
                    this.refreshContent();
                    this.getPager().css('display', 'block');
                }
            }
            if (this.model.toolbarSettings.showToolbar)
                elementClone.find(".e-gridtoolbar").remove();
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                elementClone.find(".e-filterbar").remove();
            args = { requestType: "print", element: elementClone, selectedRows: this._printselectrows };
            this._trigger("beforePrint", args);
            if (!BoldBIDashboard.isNullOrUndefined(args.element))
                elementClone = args.element;
            BoldBIDashboard.print(elementClone, printWin);
            args.requestType = "print";
            this._trigger("actionComplete", args);
        },
        
         "export": function (action, serverEvent, multipleExport,gridIds) {
           var modelClone = bbdesigner$.extend(true, {}, this.model);
            var proxy = this;
            var attr = { action: action, method: 'post', "data-ajax": "false" };
            var form = BoldBIDashboard.buildTag('form', "", null, attr);
            if (multipleExport && !BoldBIDashboard.isOnWebForms) {
                var gridCol=bbdesigner$('div.e-grid');
                if (gridIds && gridIds.length > 0) {
                    gridCol = bbdesigner$.map(gridIds, function (i) { return document.getElementById(i) })
                }
                bbdesigner$.each(gridCol,function (index, object) {
                        var gridobjectArray = {};
                        var gridObject = bbdesigner$(object).data('BoldBIDashboardGrid');
                        if (!BoldBIDashboard.isNullOrUndefined(gridObject)) {
                            var modelClone = bbdesigner$.extend(true, {}, gridObject.model);
                            modelClone = proxy._getModifyExportModel(modelClone);
                            if (gridObject.ignoreOnExport) {
                                for (var i = 0; i < gridObject.ignoreOnExport.length; i++) {
                                    delete modelClone[gridObject.ignoreOnExport[i]];
                                }
                                var inputAttr = { name: 'GridModel', type: 'hidden', value: JSON.stringify(modelClone) }
                                var input = BoldBIDashboard.buildTag('input', "", null, inputAttr);
                                form.append(input);
                            }
                        }
                    });
                    bbdesigner$('body').append(form);
                    form.submit();
            }
            else{
                this._locale = this.model.locale;
                modelClone = this._getModifyExportModel(modelClone);
                var gridob = this;
                if (this.ignoreOnExport) {
                    for (var i = 0; i < this.ignoreOnExport.length; i++) {
                        delete modelClone[this.ignoreOnExport[i]];
                    }
                }
                if (BoldBIDashboard.raiseWebFormsServerEvents) {
                    var args = { model: modelClone, originalEventType: serverEvent };
                    var clientArgs = { model: JSON.stringify(modelClone) };
                    BoldBIDashboard.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
                    setTimeout(function () {
                        BoldBIDashboard.isOnWebForms = true;
                    }, 1000);
                }
                else {
                        var inputAttr = { name: 'GridModel', type: 'hidden', value: JSON.stringify(modelClone) }
                        var input = BoldBIDashboard.buildTag('input', "", null, inputAttr);
                        form.append(input);
                        form.append(this);
                        bbdesigner$('body').append(form);
                        form.submit();
                }
                setTimeout(function () {
                    proxy.model.locale = proxy._locale;
                }, 0);
            }
            return true;
        },
        _getModifyExportModel:function(modelClone){
            var tempObj = {}
            bbdesigner$.extend(tempObj, BoldBIDashboard.Grid.Locale["en-US"], BoldBIDashboard.Grid.Locale[modelClone.locale]);
            var temp = tempObj.GroupCaptionFormat;
            var split1 = temp.indexOf("{{if");
            var split2 = temp.indexOf(" {{else}}");
            var grpText = temp.slice(split1, split2).replace("{{if count == 1 }}", "");
            var localeProp = { EmptyRecord: tempObj.EmptyRecord, GroupCaptionFormat: temp.slice(0, split1), GroupText: grpText,True:tempObj.True,False:tempObj.False };
            if (!BoldBIDashboard.isNullOrUndefined(this.model))
                this.model.locale = modelClone.locale.concat(JSON.stringify(localeProp));
            modelClone.locale = modelClone.locale.concat(JSON.stringify(localeProp));
            for (var i = 0; i < modelClone.columns.length; i++) {
                if (modelClone.columns[i].editType != undefined) {
                    switch (modelClone.columns[i].editType) {
                        case "stringedit":
                        case "edittemplate":
                            modelClone.columns[i].editType = "string";
                            break;
                        case "numericedit":
                            modelClone.columns[i].editType = "numeric";
                            break;
                        case "dropdownedit":
                            modelClone.columns[i].editType = "dropdown";
                            break;
                        case "booleanedit":
                            modelClone.columns[i].editType = "boolean";
                            break;
                        default:
                            break;
                    }
                }
            }
            for (var i = 0; i < modelClone.filterSettings.filteredColumns.length; i++) {
                if (modelClone.filterSettings.filteredColumns[i].operator == "equal")
                    modelClone.filterSettings.filteredColumns[i].operator = "equals";
                else if (modelClone.filterSettings.filteredColumns[i].operator == "notequal")
                    modelClone.filterSettings.filteredColumns[i].operator = "notequals";
            }
            if (modelClone.showStackedHeader) {
                modelClone.stackedHeaderRow = modelClone.stackedHeaderRows;
                for (var i = 0; i < modelClone.stackedHeaderRow.length; i++) {
                    modelClone.stackedHeaderRow[i].stackedHeaderColumn = modelClone.stackedHeaderRow[i].stackedHeaderColumns;
                    var a = modelClone.stackedHeaderRow[i].stackedHeaderColumn;
                    for (var j = 0; j < a.length; j++) {
                        modelClone.stackedHeaderRow[i].stackedHeaderColumn[j].column = bbdesigner$.isArray(a[j].column) ? a[j].column : a[j].column.split(',');
                    }
                }
            }
            return modelClone
        },
        sendDataRenderingRequest: function (args) {
            if (this._templateRefresh) {
                this.refreshTemplate();
                this._templateRefresh = false;
            }
            this.setFormat();
            if(!this.model.scrollSettings.enableVirtualization){
				this._previousColumnIndex = null;
				this._previousRowCellIndex = null;
				this._previousIndex = null;
			}
            if (args.requestType == "add" || args.requestType == "grouping" || (this.model.currentViewData != null && this.model.currentViewData.length)) {
                switch (args.requestType) {
                    case BoldBIDashboard.Grid.Actions.Refresh:
                    case BoldBIDashboard.Grid.Actions.Paging:
                    case BoldBIDashboard.Grid.Actions.Sorting:
                    case BoldBIDashboard.Grid.Actions.Filtering:
                    case BoldBIDashboard.Grid.Actions.Save:
                    case BoldBIDashboard.Grid.Actions.Cancel:
                    case BoldBIDashboard.Grid.Actions.Delete:
                    case BoldBIDashboard.Grid.Actions.Search:
                    case BoldBIDashboard.Grid.Actions.Reorder:
                    case BoldBIDashboard.Grid.Actions.BatchSave:
                        var cloneGroupedColumns = this.model.groupSettings.groupedColumns
                        if(this.model.allowGrouping && args.requestType == BoldBIDashboard.Grid.Actions.Refresh && cloneGroupedColumns.length == 0 && this.element.find(".e-grouptopleftcell").length > 0) {
                            var bbdesigner$header = this.element.children(".e-gridheader");
                            bbdesigner$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
                        }
                        if(!this.model.allowGrouping)
                            cloneGroupedColumns = [];
                        if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                            bbdesigner$("#" + this._id + "_externalEdit").css("display", "none");
                        if (cloneGroupedColumns.length == 0) {
                            var temp = document.createElement('div'), temp1, insertIndex = -1, isRemoteAdaptor = false;
                            if (!this.phoneMode)
                                this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
                            (this.model.childGrid != null || this.model.detailsTemplate != null) && this.getContentTable().find("colgroup").first().prepend(this._getIndentCol());
                            var currentPage = this._currentPage();
                            if ((this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "normal") && (args.requestType == "cancel" || args.requestType == "save"))
                                this._editFormHeight = this.element.find(".gridform").closest("tr").height();
     
                            if (this.model.scrollSettings.frozenColumns > 0)
                                temp.innerHTML = this._renderByFrozenDesign();
                            else {                                
                                if (args.data) {
                                    temp1 = document.createElement('div');
                                    temp1.innerHTML = ['<table>', bbdesigner$.render[this._id + "_JSONTemplate"](args.data), '</table>'].join("");
                                    if (this._dataSource() instanceof BoldBIDashboard.DataManager && args.requestType == BoldBIDashboard.Grid.Actions.Save) {
                                        insertIndex = this._getDataIndex(this.model.currentViewData, args.data);
                                        isRemoteAdaptor = this._dataSource().adaptor instanceof BoldBIDashboard.remoteSaveAdaptor;
                                    }
                                }
                                temp.innerHTML = ['<table>', bbdesigner$.render[this._id + "_JSONTemplate"](this.model.currentViewData), '</table>'].join("");
                                var tableEle = this.getContentTable().get(0);
                                var tbodyEle = tableEle.lastChild;
                                var rindex = this.getContentTable().first().find('tbody').first();
                                if ((args.requestType == "save" || args.requestType == "cancel") && this.model.editSettings.editMode != "batch") {
                                    if (this.model.editSettings.editMode.indexOf("inlineform") != -1)
                                        rowIndex = !BoldBIDashboard.isNullOrUndefined(args.selectedRow) ? args.selectedRow : this._selectedRow();
                                    else
                                        rowIndex = this.getContentTable().find('.e-' + args.action + 'edrow').index();
                                    var a = this._currentTrIndex;
                                    if (rowIndex == -1)
                                        rowIndex = a;
                                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                                        if (this.model.editSettings.editMode == "inlineform")
                                            var rowTr = bbdesigner$(bbdesigner$(tbodyEle.childNodes).not('.e-detailrow')[rowIndex]);
                                        else
                                            var rowTr = bbdesigner$(tbodyEle.childNodes[rowIndex]);
                                        var rowEle = bbdesigner$(tbodyEle.childNodes).not('.e-detailrow');
                                        for (var i = 0; i < rowEle.length; i++) {
                                            if (rowTr.is(rowEle[i]))
                                                rowIndex = i;
                                        }
                                    }

                                    if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                        if (args.action == "add" && !this.getContentTable().find(".e-addedrow").length) break;
                                        bbdesigner$oldChild = this.getContentTable().find('.e-addedrow').get(0);
                                        bbdesigner$editedTr = this.getContentTable().find('.e-editedrow');
                                        bbdesigner$newChild = (bbdesigner$editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;                       
                                        if (bbdesigner$editedTr.length) {
                                            if (this.model.editSettings.showAddNewRow && this.model.editSettings.rowPosition == "top")
                                                rowIndex = rowIndex - 1;
                                            bbdesigner$newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                                bbdesigner$oldChild = bbdesigner$editedTr.prev('tr').get(0);
                                                bbdesigner$editedTr.remove();
                                            } else
                                                bbdesigner$oldChild = bbdesigner$editedTr.get(0);
                                            var bbdesigner$newChildObj = bbdesigner$(bbdesigner$newChild), bbdesigner$oldChildObj = bbdesigner$(bbdesigner$oldChild);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && bbdesigner$oldChildObj.next('tr.e-detailrow:visible').length) {
                                                var bbdesigner$target = bbdesigner$newChildObj.find('.e-detailrowcollapse');
                                                bbdesigner$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            if (args.requestType == "cancel") {
                                                if (this.model.editSettings.showAddNewRow)
                                                    this.getContentTable().find('.e-addedrow').addClass("e-showaddrow");
                                                bbdesigner$oldChildObj.replaceWith(bbdesigner$newChildObj);
                                            } else if (!BoldBIDashboard.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
                                                if (this.model.detailsTemplate != null && bbdesigner$oldChildObj.next('tr.e-detailrow').length)
                                                    tbodyEle.removeChild(bbdesigner$oldChildObj.next('tr.e-detailrow').get(0));
                                                bbdesigner$oldChildObj.remove();
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0)
                                                    tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
                                            } else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !BoldBIDashboard.isNullOrUndefined(this._searchCount))
                                                this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                            else {
                                                tbodyEle.replaceChild(bbdesigner$newChild, bbdesigner$oldChild);
                                            }
                                        } else {
                                            var bbdesigner$newChildObj = bbdesigner$(bbdesigner$newChild), bbdesigner$oldChildObj = bbdesigner$(bbdesigner$oldChild);
                                            if (args.action == "add" && args.requestType == "save" && this.model.editSettings.showAddNewRow && this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length)
                                                this.model.editSettings.rowPosition == "bottom" ? tbodyEle.lastChild.previousSibling.remove() : tbodyEle.lastChild.remove();
                                            if (args.requestType == "cancel" || this._dataSource() instanceof BoldBIDashboard.DataManager || this._currentPage() != 1 || (args.requestType == "save" && !BoldBIDashboard.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
                                                if (!BoldBIDashboard.isNullOrUndefined(bbdesigner$oldChild)) {
                                                    bbdesigner$oldChildObj.remove();
                                                    if (this._dataSource() instanceof BoldBIDashboard.DataManager && insertIndex != -1) {
                                                        if (insertIndex == 0)
                                                            tbodyEle.insertBefore(bbdesigner$newChild, tbodyEle.children[insertIndex]);
                                                        else
                                                            bbdesigner$newChildObj.insertAfter(tbodyEle.children[insertIndex - 1]);
                                                    }
                                                    else if ((!(this._dataSource() instanceof BoldBIDashboard.DataManager) || isRemoteAdaptor) && this._currentPage() != 1 && args.requestType == "save")
                                                        bbdesigner$(tbodyEle).prepend(bbdesigner$(temp.firstChild.firstChild.firstChild));
                                                    if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0 &&
                                                        ((this._dataSource() instanceof BoldBIDashboard.DataManager && insertIndex == -1 && (!isRemoteAdaptor && args.requestType != "save")) ||
                                                        (args.requestType != "save" && !(this._dataSource() instanceof BoldBIDashboard.DataManager))) && (args.requestType == "cancel" && !this.model.editSettings.showAddNewRow))
                                                        tableEle.lastChild.appendChild(temp.firstChild.firstChild.lastChild);
                                                }
                                                if (args.requestType == "cancel" && this._selectedRow() != -1)
                                                    this.clearSelection();

                                            } else if (this.model.currentViewData.length == 1) {
                                                bbdesigner$(tbodyEle).empty();
                                                tbodyEle.appendChild(bbdesigner$newChild);
                                            } else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !BoldBIDashboard.isNullOrUndefined(this._searchCount)) {
                                                this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                            } else if (this.model.editSettings.rowPosition == "bottom") {
                                                rindex.prepend(bbdesigner$oldChild);
                                                tbodyEle.replaceChild(bbdesigner$newChild, bbdesigner$oldChild);
                                            } else
                                                tbodyEle.replaceChild(bbdesigner$newChild, bbdesigner$oldChild);
                                        }
                                    } else if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                                        if (args.action == "add" && !this.element.find(".e-addedrow").length) break;
                                        bbdesigner$editedTr = this.element.find('.e-editedrow');
                                        if (args.requestType == "cancel" || (!bbdesigner$editedTr.length && !BoldBIDashboard.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
                                            bbdesigner$newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            bbdesigner$oldChild = tbodyEle.childNodes[rowIndex];
                                            var bbdesigner$newChildObj = bbdesigner$(bbdesigner$newChild), bbdesigner$oldChildObj = bbdesigner$(bbdesigner$oldChild);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && bbdesigner$oldChildObj.next('.e-detailrow:visible').length) {
                                                var bbdesigner$target = bbdesigner$newChildObj.find('.e-detailrowcollapse');
                                                bbdesigner$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            bbdesigner$oldChildObj.replaceWith(bbdesigner$newChildObj);
                                            this.clearSelection();
                                            this.model.allowPaging && this._refreshGridPager();

                                        } else if (bbdesigner$editedTr.length) {
                                            bbdesigner$newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            bbdesigner$oldChild = this._excludeDetailRows(tbodyEle.childNodes)[rowIndex];
                                            if (this.model.allowCellMerging != null) {
                                                var bbdesigner$oldChildObj = bbdesigner$(bbdesigner$oldChild);
                                                if (bbdesigner$(bbdesigner$oldChild.childNodes).hasClass("e-merged")) {
                                                    var index = bbdesigner$oldChildObj.children('.e-merged').index();
                                                    var count = bbdesigner$oldChild.children[index].colSpan;
                                                    for (var i = 0 ; i < count; i++) {
                                                        bbdesigner$newChild.childNodes[index + i].className += " e-merged e-hide";
                                                        bbdesigner$newChild.childNodes[index].colSpan = i + 1;
                                                    }
                                                }
                                            }
                                            if (this.model.detailsTemplate != null)
                                                bbdesigner$oldChild = bbdesigner$(tbodyEle.childNodes).not('.e-detailrow').eq(rowIndex).get(0);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && bbdesigner$oldChildObj.next('tr.e-detailrow:visible').length) {
                                                var bbdesigner$target = bbdesigner$(bbdesigner$newChild).find(".e-detailrowcollapse");
                                                bbdesigner$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            if (!BoldBIDashboard.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
                                                var bbdesigner$oldChildObj = bbdesigner$(bbdesigner$oldChild);
                                                if (this.model.detailsTemplate != null && bbdesigner$oldChildObj.next('tr.e-detailrow').length)
                                                    tbodyEle.removeChild(bbdesigner$oldChildObj.next('tr.e-detailrow').get(0));
                                                bbdesigner$oldChildObj.remove();
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
                                                    tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
                                            } else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !BoldBIDashboard.isNullOrUndefined(this._searchCount))
                                                this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                            else
                                                tbodyEle.replaceChild(bbdesigner$newChild, bbdesigner$oldChild);
                                        } else if (this.model.currentViewData.length == 1 && this.getContentTable().find('td.e-rowcell').length == 0) {
                                            bbdesigner$newChild = temp.firstChild.firstChild.firstChild;
                                            bbdesigner$(tbodyEle).empty();
                                            tbodyEle.appendChild(bbdesigner$newChild);
                                        } else {
                                            newChild = (bbdesigner$editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;
                                            if (!(this._dataSource() instanceof BoldBIDashboard.DataManager)) {
                                                if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !BoldBIDashboard.isNullOrUndefined(this._searchCount))
                                                    this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                                else if (this._currentPage() == 1)
                                                    this.getContentTable().find('tbody').first().prepend(bbdesigner$(newChild));
                                                else
                                                    this.getContentTable().find('tbody').first().prepend(bbdesigner$(temp.firstChild.firstChild.firstChild));
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
                                                    tbodyEle.removeChild(tbodyEle.lastChild);
                                            }
                                            else if (insertIndex != -1) {
                                                if (insertIndex == 0)
                                                    tbodyEle.insertBefore(newChild, tbodyEle.children[insertIndex]);
                                                else
                                                    bbdesigner$(newChild).insertAfter(tbodyEle.children[insertIndex - 1]);
                                                if (this.model.allowPaging && (this.model.pageSettings.pageSize <= this.model.currentViewData.length || insertIndex == this.model.pageSettings.pageSize - 1))
                                                    tbodyEle.removeChild(tbodyEle.lastChild);
                                            }
                                            if (this.model.detailsTemplate != null && bbdesigner$(tableEle.lastChild.lastChild).children('.e-detailrowexpand').length)
                                                tbodyEle.removeChild(tbodyEle.lastChild);
                                        }
                                    }
                                    this._gridRows = tableEle.rows;
                                    if (this.model.enableAltRow)
                                        this._refreshAltRow();
                                } else if (args.requestType == "delete") {
                                    if (this._isUnboundColumn) {
                                        bbdesigner$editedrow = this.element.find('.e-editedrow');
                                        bbdesigner$oldChild = this.getContentTable().find('.e-editedrow').get(0);
                                        bbdesigner$newChild = (bbdesigner$editedrow.length) ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;

                                        if (bbdesigner$editedrow.length != 0 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")) {
                                            bbdesigner$(bbdesigner$oldChild).replaceWith(bbdesigner$(bbdesigner$newChild));
                                        }
                                        else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                            bbdesigner$oldChild = bbdesigner$editedrow.prev('tr').get(0);
                                            bbdesigner$editedrow.remove();
                                        }
                                        else
                                            bbdesigner$oldChild = bbdesigner$editedrow.get(0);
                                    }
                                    if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.getContentTable()[0].rows.length != this.model.currentViewData.length) {
                                        if (this.getContentTable().find("tr").length && this._excludeDetailRows().length) {
                                            if (this.multiDeleteMode) {
                                                var rowLength = temp.firstChild.firstChild.rows.length;
                                                var rows = bbdesigner$(temp.firstChild.firstChild.rows).slice(rowLength - this.selectedRowsIndexes.length, rowLength);
                                                bbdesigner$(tbodyEle).append(rows);
                                            }
                                            else
                                                tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);

                                        }
                                        else
                                            bbdesigner$(tbodyEle).prepend(temp.firstChild.firstChild.rows);
                                    }
                                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                                        var visibleRow = this.getContentTable().find('.e-detailrow:visible');
                                        bbdesigner$.each(visibleRow, function (indx, item) {
                                            if (visibleRow.eq(indx).closest('tr').prev().children('.e-detailrowexpand').length == 0)
                                                visibleRow.eq(indx).remove();
                                        });
                                    }
                                    this._gridRows = tableEle.rows;
                                    if (this.model.enableAltRow)
                                        this._refreshAltRow();
                                } else
                                    this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);

                            }
                            this._currentJsonData = this.model.currentViewData;
                            this._gridRows = this.getContentTable().get(0).rows;
                            if (this.model.scrollSettings.frozenColumns > 0)
                                this._gridRows = [this._gridRows, this.getContentTable().get(1).rows];

                            var model = {};
                            if ((args.requestType == "sorting" || args.requestType == "filtering") && this.model.scrollSettings.allowVirtualScrolling) {
                                if (args.requestType == "filtering") {
                                    !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getContent().first().BoldBIDashboardScroller("refresh").BoldBIDashboardScroller("isVScroll") ? this.element.find(".gridheader").addClass("e-scrollcss") : this.element.find(".gridheader").removeClass("e-scrollcss");
                                    var model = this._refreshVirtualPagerInfo();
                                }
                                if(this.model.scrollSettings.enableVirtualization)
									this._refreshVirtualView(this._currentVirtualIndex);
								else
									this._refreshVirtualContent(currentPage);
                                args.requestType == "filtering" && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getContent().first().BoldBIDashboardScroller("refresh");
                            }
                            if (this.model.allowPaging) {
                                if (this.model.filterSettings.filteredColumns.length)
                                    this.getPager().BoldBIDashboardPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
                                else
                                    this.getPager().BoldBIDashboardPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
                                this._refreshGridPager();
                            }
							if(!this.model.scrollSettings.enableVirtualization)
								this._eventBindings();
                            break;
                        }
                    case BoldBIDashboard.Grid.Actions.Grouping:
                        this._group(args);
                        this._refreshStackedHeader();
                        break;
                    case BoldBIDashboard.Grid.Actions.BeginEdit:
                        this._edit(args);
                        break;
                    case BoldBIDashboard.Grid.Actions.Add:
                        this._add(args);
                        break;
                    case BoldBIDashboard.Grid.Actions.Ungrouping:
                        this._ungroup(args);
                        break;
                    case BoldBIDashboard.Grid.Actions.VirtualScroll:
						if(!this._isVirtualRecordsLoaded){
							if(!this.model.scrollSettings.enableVirtualization)
								this._replacingContent();
							else
								this._replacingVirtualContent();
						}                        
                        break;
                }
            } else
                this._newungroup(args);
            this._showGridLines();
            this._completeAction(args);
        },
        _showGridLines: function () {
            var bbdesigner$lines = this.model.gridLines;
            if (bbdesigner$lines != "both") {
				this.getContent().addClass(bbdesigner$lines != "none" ? "e-" + bbdesigner$lines + "lines" : "e-hidelines");
            }
        },
		_showHeaderGridLines: function(){
			var bbdesigner$lines = this.model.gridLines;
			if (bbdesigner$lines != "both") 
				this.getHeaderContent().addClass(bbdesigner$lines != "none" ? "e-"+bbdesigner$lines+"lines" : "e-hidelines");
		},
        _newungroup: function (args) {
            if (args.requestType == "ungrouping")
                this._ungroup(args);
            else
                this.getContentTable().find('tbody').empty().first().append(this._getEmptyTbody());
        },
        setFormat: function () {
            var column = [];
            for (var i = 0 ; i < this.model.columns.length ; i++) {
                if (this.model.columns[i].type == "date") {
                    column.push(this.model.columns[i]);
                }
            }
            if (column.length > 0) {
                for (var i = 0 ; i < this.model.currentViewData.length ; i++) {
                    for (var j = 0 ; j < column.length ; j++) {
                        var data = this.model.currentViewData[i][column[j].field];
                        if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(data))
                            this.model.currentViewData[i][column[j].field] = new Date(this.model.currentViewData[i][column[j].field]);
                    }
                }
            }
        },
        _completeAction: function (args) {
            if (this.model.editSettings.editMode.indexOf("dialog") != -1 && args.requestType == "save" && bbdesigner$("#" + this._id + "_dialogEdit").data("BoldBIDashboardDialog"))
                bbdesigner$("#" + this._id + "_dialogEdit").BoldBIDashboardDialog("close");
            if (!this.model.editSettings.showAddNewRow)
                this.model.isEdit = false;
            this._confirmedValue = false;
            if (BoldBIDashboard.Grid.Actions.Grouping == args.requestType && BoldBIDashboard.isNullOrUndefined(args.columnName))
                return;
            if ((args.columnSortDirection == "ascending" || args.columnSortDirection == "descending") && !BoldBIDashboard.isNullOrUndefined(args.columnName)) {
                var scolumn = this.getColumnByField(args.columnName);
                if (this.model.allowSorting && this.model.allowMultiSorting)
                    this._scolumns.push(scolumn.field);
                else
                    this._gridSort = scolumn.field;
            }
            if (args.requestType != 'beginedit' && args.requestType != 'add' && (!this.model.allowScrolling || !this.initialRender || this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
                this.setWidthToColumns();
            if (args.requestType == "save" || args.requestType == "cancel" ||  args.requestType == "delete") {
                this._isAddNew = false;
                if (this.model.isResponsive && this.model.minWidth)
                    this.windowonresize();
            }
            if (!this.initialRender && (BoldBIDashboard.Grid.Actions.UnGrouping == args.requestType || this.model.groupSettings.groupedColumns.length > 0) && !bbdesigner$("#" + this._id + "EditForm").length)
                this._recalculateIndentWidth();
            if (BoldBIDashboard.Grid.Actions.Paging == args.requestType || BoldBIDashboard.Grid.Actions.BatchSave == args.requestType)
                this._refreshGridPager();
            else if ((BoldBIDashboard.Grid.Actions.Sorting == args.requestType && this.model.allowSorting) || BoldBIDashboard.Grid.Actions.Refresh == args.requestType  || BoldBIDashboard.Grid.Actions.Cancel == args.requestType) {
                if (BoldBIDashboard.gridFeatures.sort && this.getHeaderTable() !== null)
                    this._sortCompleteAction(args);
                if (this.model.allowPaging) {
                    var pageModel = this.getPager().BoldBIDashboardPager("option");
                    this._currentPage(pageModel.currentPage);
                    delete pageModel.currentPage;
                    bbdesigner$.extend(this.model.pageSettings, pageModel);
                    delete this.model.pageSettings.masterObject;
                    this._refreshGridPager();
                }
				if (!this.initialRender && (this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
                    this._refreshScroller(args);
                
            } else if (BoldBIDashboard.Grid.Actions.Delete == args.requestType || BoldBIDashboard.Grid.Actions.Save == args.requestType || BoldBIDashboard.Grid.Actions.Search == args.requestType) {
                this._editEventTrigger(args);
				if (!this.initialRender && (this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
					this._refreshScroller(args);
                if (this.model.allowPaging)
                    this._refreshPagerTotalRecordsCount();
            } else if (BoldBIDashboard.Grid.Actions.Filtering == args.requestType)
                this._filterCompleteAction();
            else if (BoldBIDashboard.Grid.Actions.BeginEdit == args.requestType || BoldBIDashboard.Grid.Actions.Add == args.requestType)
                this._editCompleteAction(args);
            else if (BoldBIDashboard.Grid.Actions.Grouping == args.requestType || BoldBIDashboard.Grid.Actions.Ungrouping == args.requestType)
                this["_" + args.requestType + "CompleteAction"](args);
            if (this.model.toolbarSettings.showToolbar)
                this.refreshToolbar();
            if (!this.initialRender && this.model.showSummary && this.model.summaryRows.length > 0) {
                if (this.model.currentViewData.length) {
                    if (!this.element.children(".e-gridfooter").length)
                        this._renderGridFooter().insertAfter(this.getContent());
                    this.getFooterTable().find('colgroup').remove();
                    this.getFooterTable().append(this.getHeaderTable().find("colgroup").clone());
                    this._createSummaryRows(this.getFooterTable());
                }
                else
                    this.element.children(".e-gridfooter").remove();
            }
            if (!this.initialRender && BoldBIDashboard.gridFeatures.selection) {
                if (!this.getContent().find("td.e-selectionbackground").length)
                    this._setCurrentRow(args.requestType);
                if (args.requestType != "virtualscroll" && this.clearColumnSelection())
                    bbdesigner$(this.getHeaderTable().find("th.e-headercell")).removeClass("e-columnselection");
            }
            this.model.editSettings.editMode == "batch" && this.refreshBatchEditMode();
            if (!this.initialRender && (this.model.allowScrolling || this.model.isResponsive) && (this._checkScrollActions(args.requestType) || (this.model.editSettings.editMode.indexOf("inline") != -1 && args.requestType == "beginedit")) ||
                (this.model.scrollSettings.virtualScrollMode == "continuous" && args.requestType == "virtualscroll")){
                if(this.model.isResponsive && this.model.minWidth)
                    this.windowonresize()
                else
                    this._refreshScroller(args);
             }    
            if (this.model.scrollSettings.virtualScrollMode == "normal" && args.requestType == "virtualscroll" && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")))
                this.getContent().find("div:first").scrollLeft(this.getScrollObject().scrollLeft());
            if (this._customPop != null && args.requestType != "sorting") {
                this._customPop.hide();
            }
            if (this.model.allowScrolling && !this.initialRender && !this.model.scrollSettings.enableVirtualization)
                this.getContentTable().find("tr:last").find("td").addClass("e-lastrowcell");

            if (this.model.allowGrouping && this.model.showSummary)
                this._refreshGroupSummary();
            if (BoldBIDashboard.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0)
                this._groupingCompleteAction(args);
            if (BoldBIDashboard.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length < 1)
                this._ungroupingCompleteAction(args);
            if (this.model.textWrapSettings)
                this._setTextWrap();
            this._trigger("actionComplete", args);
			if(args.requestType != "refresh")
				this._trigger("refresh");		 			
            if ((this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {
                
                if (!this.initialRender && this.getContentTable().find("tr.e-addedrow").length == 0 && this.element.find(".e-gridcontent").find("tr").length != 0)
                    this._startAdd();
                 if (args.requestType == "searching")
                    this.element.find(".e-gridtoolbar").find("li#" + this._id + "_search input").focus();
            }
            
            if ((BoldBIDashboard.Grid.Actions.BeginEdit == args.requestType || BoldBIDashboard.Grid.Actions.Add == args.requestType) && bbdesigner$.isFunction(bbdesigner$.validator))
                this.setValidation();
            if (!this.initialRender)
                this.model._groupingCollapsed = [];
		    if(!this.initialRender && args.requestType =="refresh")
				{
					for(var i =0 ; i<this.model.filterSettings.filteredColumns.length; i++)
					this.getHeaderTable().find('.e-headercelldiv').eq(this.getColumnIndexByField(this.model.filterSettings.filteredColumns[i].field)).parent().find('.e-filtericon').addClass("e-filteredicon e-filternone");
			};
		    if (this.model.columnLayout == "fixed" && !this.model.isEdit)
		        this.setWidthToColumns();
		    if (this.model.allowRowDragAndDrop)
		        this._rowsDragAndDrop();
        },        
        _getDataIndex: function (data, item) {
            var flag = 0, _plen;
            for (var d = 0, len = data.length; d < len; d++) {
                for (var key = 0, _plen = this._primaryKeys.length; key < _plen; key++) {
                    if (this._checkPrimaryValue(data[d][this._primaryKeys[key]], item[this._primaryKeys[key]], this._primaryKeys[key]))
                        continue;
                    else if (key == _plen - 1)
                        flag = 1;
                }
                if (flag) return d;
            }
            return -1;
        },
        _checkPrimaryValue: function (keyData, keyItem, field) {
            if (this.getColumnByField(field).type == "string")
                keyData = keyData.trim();
            if (keyData != keyItem)
                return true;
            else
                return false;
        },
        _eventBindings: function () {
            var rowLength = this.model.scrollSettings.frozenColumns > 0 ? this._gridRows[0].length : this._gridRows.length;
            var trIndex = 0;
            var prev;
            var pageSize = this.model.pageSettings.pageSize;
            if (BoldBIDashboard.gridFeatures.common)
                this._refreshUnboundTemplate(this.getContentTable());
            if (this._gridRecordsCount != 0) {
                if (this.model.queryCellInfo != null || this.model.rowDataBound != null || this.model.mergeCellInfo != null || this.model.templateRefresh != null) {
                    for (var row = 0; row < rowLength; row++) {
                        var rowIndex = null, trIndex = row, viewIndex, viewData;
                        if (this.model.scrollSettings.allowVirtualScrolling && row < pageSize) {
							if(!this.model.scrollSettings.enableVirtualization){
								for (var i = 0; i < this._cloneQuery.queries.length; i++)
									prev = this._cloneQuery.queries[i].fn == "onPage" &&  this._cloneQuery.queries[i].e.pageIndex - 1;
								var value = pageSize * prev; 
								if (value != 0) {
									rowIndex = this.getContentTable().find("tr[name=" + value + "]").eq(row);
									trIndex = rowIndex.index();
								}
							}
							else{
								rowIndex = bbdesigner$(this._gridRows).eq(row);
								viewIndex = parseInt(bbdesigner$(rowIndex).attr("name"), 32);	
								if(bbdesigner$.inArray(viewIndex, this._queryCellView) != -1)		
									continue;
								if(this._virtualLoadedRecords[viewIndex])
									viewData = this._virtualLoadedRecords[viewIndex][row % this._virtualRowCount];
								trIndex = viewIndex * this._virtualRowCount + (row % this._virtualRowCount);								
							}
                        }
						else if(this.model.scrollSettings.enableVirtualization)
							rowIndex = bbdesigner$(this._gridRows).eq(row);
                        rowIndex = rowIndex || this.getRowByIndex(trIndex);
                        if (rowIndex.hasClass("e-virtualrow") || BoldBIDashboard.isNullOrUndefined(this._currentJsonData[row] || viewData))
                            break;
						var rowData = this.model.scrollSettings.enableVirtualization ? viewData : this._currentJsonData[row];
                        this._rowEventTrigger(rowIndex, rowData);                       
                    }
                }
            }
        },
        _rowEventTrigger: function (row, data) {
            var args = { row: row, data: data };
            this._trigger("rowDataBound", args);
            var tdCells = row.cells;
            var bbdesigner$tdRowcells = bbdesigner$(row).find(".e-rowcell");
            for (var cellIndex = 0; cellIndex < bbdesigner$tdRowcells.length; cellIndex++) {
                var args = { cell: bbdesigner$tdRowcells[cellIndex], data: data, text: bbdesigner$tdRowcells[cellIndex].innerHTML };
                var foreignKeyData = this._getForeignKeyData(args.data);
                if (bbdesigner$(bbdesigner$tdRowcells[cellIndex]).hasClass("e-rowcell"))
                    args.column = this.model.columns[cellIndex];
                if (!BoldBIDashboard.isNullOrUndefined(foreignKeyData))
                    args.foreignKeyData = foreignKeyData;
                if (this.model.allowCellMerging == true) {
                    this._cellMerging(args);
                    this._trigger("mergeCellInfo", args);
                }
                this._trigger("queryCellInfo", args);
                if (bbdesigner$(bbdesigner$tdRowcells[cellIndex]).hasClass("e-templatecell")) {
                    var args = { cell: bbdesigner$tdRowcells[cellIndex], column: this.model.columns[cellIndex], data: data, rowIndex: bbdesigner$(row).index() };
                    this._trigger("templateRefresh", args);
                }
            }

        },

        setWidthToColumns: function () {
            var bbdesigner$cols1 = this.getContentTable().children("colgroup").find("col");
            var bbdesigner$cols2 = this.getHeaderTable().children("colgroup").find("col");
            var extendWidth = 0, colsIndex = [], columnsWidth;
            var undefinedColsCollection = [], hCellIndex;
            var width = this.element.width(), frozenWidth = 0, columnsTotalWidth = 0, finalWidth = 0, browserDetails = !BoldBIDashboard.isIOSWebView() && this.getBrowserDetails();
            if (this.model.groupSettings.groupedColumns.length && !this.model.allowScrolling && this.model.groupSettings.showGroupedColumn) {
                 if (browserDetails && browserDetails.browser == "msie" && parseInt(browserDetails.version, 10) > 8)
                    bbdesigner$cols1.first().css("width", ((30 / width) * 100) + "%");
            }
            if (!BoldBIDashboard.isNullOrUndefined(this.model.detailsTemplate)) {
                var headerIndx = this.model.groupSettings.groupedColumns.length;
                var contentIndx = this.model.groupSettings.groupedColumns.length != 0 ? 1 : 0;
                bbdesigner$cols1.eq(contentIndx).css("width", this._detailsOuterWidth);
                bbdesigner$cols2.eq(headerIndx).css("width", this._detailsOuterWidth);
            }
            this._detailColsRefresh();
            bbdesigner$cols1 = this._bbdesigner$headerCols;
            bbdesigner$cols2 = this._bbdesigner$contentCols;
			 if (this.model.allowResizeToFit) {
							var visibleColumnsWidth = 0; var undefinedWidthColumnsCount = 0;
							for (j = 0; j < this.model.columns.length; j++) {
								if (this.model.columns[j].visible) {
									if (this.model.columns[j]["width"] != undefined)
										visibleColumnsWidth = visibleColumnsWidth + parseInt(this.model.columns[j]["width"]);
									else
										undefinedWidthColumnsCount = undefinedWidthColumnsCount + 1;
								}
							}
						}

            for (var i = 0; i < bbdesigner$cols2.length; i++) {
                if (this.model.allowResizeToFit && this.model.columns[i]["width"] === undefined) {
                    hCellIndex = this.model.groupSettings.groupedColumns.length ? (i + this.model.groupSettings.groupedColumns.length) : i;
                    var contentWidth = this._resizer._getContentWidth(i);
                    var cellDiv = this.getHeaderTable().find('.e-headercelldiv').eq(hCellIndex);
                    var headerWidth = this._resizer._getHeaderContentWidth(cellDiv);
                    if (this.model.editSettings.editMode == "normal" && (this.model.isEdit || this._isAddNew))
                        finalWidth = browserDetails.browser == "firefox" ? parseInt(bbdesigner$cols1[i].style.width, 10) : bbdesigner$cols1.eq(i).width();
                    else if (undefinedWidthColumnsCount > 0) {
                        columnsWidth = finalWidth = this.model.columns[i].visible ? parseInt(this.element.width() - visibleColumnsWidth) / undefinedWidthColumnsCount : 0;
                    }
                    if ((finalWidth < contentWidth && finalWidth < headerWidth) && undefinedWidthColumnsCount > 0) {
                        finalWidth = contentWidth > headerWidth ? contentWidth : headerWidth;
                        finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
                        visibleColumnsWidth += finalWidth;                       
                        undefinedWidthColumnsCount -= 1;
                        this.columnsWidthCollection[i] = finalWidth;
                        columnsTotalWidth += this.model.columns[i].visible ? finalWidth : 0;
                        extendWidth += finalWidth - columnsWidth;
                    }
                    else if (undefinedWidthColumnsCount > 0 && (contentWidth > 0 || (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0))) {
                        var cWidth = contentWidth > headerWidth ? contentWidth : headerWidth;
                        if (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0) {
                            if (cWidth > finalWidth) {
                                finalWidth = cWidth;
                                finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
                            }
                        }
                        else {
                            if (cWidth > finalWidth || (this.element.width() / undefinedWidthColumnsCount < visibleColumnsWidth-finalWidth && !this.model.allowTextWrap)) {
                                finalWidth = cWidth;
                                finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
                            }
                        }
                        if (this.model.columns[i].visible) {
                            visibleColumnsWidth += finalWidth;
                            undefinedWidthColumnsCount -= 1;
                        }
                        if(columnsWidth < contentWidth || columnsWidth < headerWidth) {
                            extendWidth += finalWidth - columnsWidth;
                        }
                        else
                            colsIndex.push({ index : i, contentWidth : contentWidth, headerWidth : headerWidth });
                        this.columnsWidthCollection[i] = finalWidth;
                        columnsTotalWidth += this.model.columns[i].visible ? finalWidth : 0;
                    }
                } else {
                    if (typeof (this.model.columns[i].width) == "string" && this.model.columns[i].width.indexOf("%") != -1) {
                        this._columnsPixelConvert(this.model.columns[i],i);
                    }
                    else
                        var columnWidth = parseInt(this.model.columns[i]["width"], 10);
                    columnsTotalWidth += this.model.columns[i].visible ? columnWidth : 0;
                }
                if (this.model.columns[i]["priority"])
                    bbdesigner$cols2.eq(i).addClass("e-table-priority-" + this.model.columns[i]["priority"]);
                if (!BoldBIDashboard.isNullOrUndefined(this.columnsWidthCollection[i])) {
                    bbdesigner$cols1.eq(i).width(this.columnsWidthCollection[i]);
                    bbdesigner$cols2.eq(i).width(this.columnsWidthCollection[i]);
                } else if (this.model.allowScrolling) {
					undefinedColsCollection.push(this.model.columns[i]);
                }
            }var colsIndexLength = colsIndex.length;
             for (var i = 0; i < colsIndexLength; i++) { 
                extendWidth = extendWidth / colsIndexLength;
                if(this.columnsWidthCollection[colsIndex[i]["index"]] > extendWidth) {      
                  if(this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth > colsIndex[i]["headerWidth"] && 
				  this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth > colsIndex[i]["contentWidth"] ) {        
                    bbdesigner$cols1.eq(colsIndex[i]["index"]).width(this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth);
                    bbdesigner$cols2.eq(colsIndex[i]["index"]).width(this.columnsWidthCollection[colsIndex[i]["index"]]- extendWidth);
                  }
                  else {
                      if(colsIndex[i]["headerWidth"] > colsIndex[i]["contentWidth"]) {
                        bbdesigner$cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"]);
                        bbdesigner$cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"]);
                    }
                    else {
                        bbdesigner$cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"]);
                        bbdesigner$cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"]);
                    }
                  }                  
                }
                else {
                     if(colsIndex[i]["headerWidth"] > colsIndex[i]["contentWidth"]) {
                        bbdesigner$cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"]);
                        bbdesigner$cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"]);
                    }
                    else {
                        bbdesigner$cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"]);
                        bbdesigner$cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"]);
                    }
                }
                 if (this.columnsWidthCollection[colsIndex[i]["index"]] > extendWidth) {
                     this.columnsWidthCollection[colsIndex[i]["index"]] = this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth;
                 }
            }
            var hiddenColLength = undefinedColsCollection.filter(function (e) { return !e.visible }).length;
            var headercell = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
            var totalColWidth = BoldBIDashboard.sum(this.columnsWidthCollection);
            for (var i = 0; i < undefinedColsCollection.length; i++) {
                if (!undefinedColsCollection[i].visible)
                    continue;
                var colIndex = BoldBIDashboard.isNullOrUndefined(undefinedColsCollection[i].field) ? this.getColumnIndexByField(undefinedColsCollection[i].field) : this.getColumnIndexByHeaderText(undefinedColsCollection[i].headerText);
                var cell = headercell.eq(colIndex)[0];
                var colWidth;
                if (!BoldBIDashboard.isNullOrUndefined(this.model.commonWidth))
                    colWidth = this.model.commonWidth;
                else {
                    var gridWidth = typeof (this.model.scrollSettings.width) == "string" ? this.element.width() : this.model.scrollSettings.width || this.model.width;
                    var cellWidth = (gridWidth - totalColWidth) / (undefinedColsCollection.length - hiddenColLength);
                    colWidth = !this.model.scrollSettings.frozenColumns ? cell.getBoundingClientRect().width : cellWidth;
                }
                if (BoldBIDashboard.isNullOrUndefined(colWidth))
                    colWidth = cell.offsetWidth;
                if (parseInt(colWidth) < 15) {
                    colWidth = (width / this.model.columns.length).toFixed(2);
                    var bSize = (width / (this.model.scrollSettings.buttonSize || 18) / 100).toFixed(2);
                    colWidth = colWidth - bSize;
                }
                bbdesigner$cols1.eq(colIndex).css("width", colWidth + "px");
                bbdesigner$cols2.eq(colIndex).css("width", colWidth + "px");
                this.model.columns[colIndex].width = colWidth;
                this.columnsWidthCollection[colIndex] = parseFloat(colWidth);
            }
            if (!hiddenColLength)
                this._undefinedColsCollection = null;

            if (this.model.columnLayout == "fixed") {
                if (this.model.scrollSettings && this.model.scrollSettings.frozenColumns == 0) {
                    this.getHeaderTable().width(columnsTotalWidth);
                    this.getContentTable().width(columnsTotalWidth);
					if(!BoldBIDashboard.isNullOrUndefined(this.getFooterTable()))
                        this.getFooterTable().width(columnsTotalWidth);
                }
                var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
                var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
                var headerTable = this.getHeaderTable();
                var contentTable = this.getContentTable();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
                    contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
                }
                headerTable[operation]('e-tableLastCell');
                contentTable[operation]('e-tableLastCell');
            }
           if (!this.model.allowScrolling && this.model.allowResizeToFit && BoldBIDashboard.isNullOrUndefined(this.model._isPrinting) && !this.model.isResponsive 
		   && columnsTotalWidth > width) {
                this.model.allowScrolling = true;
                this.model.scrollSettings.width = width;
                this.getHeaderTable().parent().addClass("e-headercontent");
                this._renderScroller();
            }
            if (this.model.isEdit) {
                var clonedCol = bbdesigner$cols1.clone();
                var editedTr;
                if (this.model.editSettings.showAddNewRow)
                    editedTr = this.getContentTable().find(".e-editedrow");
                var bbdesigner$colGroup = this.model.scrollSettings.frozenColumns > 0 ? this.getContent().find(".gridform").find("colgroup") : !BoldBIDashboard.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr.find("colgroup") : bbdesigner$("#" + this._id + "EditForm").find("colgroup");
                this.model.scrollSettings.frozenColumns > 0 && bbdesigner$colGroup.first().empty().append(clonedCol.splice(0, this.model.scrollSettings.frozenColumns));
                bbdesigner$colGroup.last().empty().append(clonedCol);
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    bbdesigner$colGroup.prepend(this._getIndentCol());
            }
            if (this.model.groupSettings.groupedColumns.length) {
                var bbdesigner$grouedColGroup = this.getContentTable().find(".e-recordtable").children("colgroup");
                for (var i = 0; i < bbdesigner$grouedColGroup.length; i++) {
                    var clonedCol = bbdesigner$cols1.clone();
                    var detailsWidth = this._detailsOuterWidth != null ? this._detailsOuterWidth : "30px";
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) clonedCol.splice(0, 0, bbdesigner$(this._getIndentCol()).width(detailsWidth)[0]);
                    bbdesigner$grouedColGroup.eq(i).empty().append(clonedCol);
                }
            }
            if (this.model.scrollSettings.frozenColumns > 0) {
                var totalWidth = 0, frozenWidth;
                for (var i = 0; i < this.model.columns.length; i++) {
                    totalWidth += this.model.columns[i].visible ? parseInt(this.columnsWidthCollection[i], 10) : 0;
                    if (this.model.scrollSettings.frozenColumns - 1 == i)
                        frozenWidth = Math.ceil(totalWidth);
                }
                this.element.width(this.model.scrollSettings.width || this.model.width);
                var gridContentWidth = this.element.find(".e-gridcontent").children().first().width();
                if (gridContentWidth > totalWidth)
                    totalWidth = gridContentWidth + ((this.getContentTable().height() < this.model.scrollSettings.height && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) &&  this.getScrollObject()._vScroll) ? this.model.scrollSettings.buttonSize : 0);
                else
                    totalWidth += ((this.getContentTable().height() > this.model.scrollSettings.height) ? this.model.scrollSettings.buttonSize : 0);
                if (totalWidth < this.element.width()) {
                    totalWidth = "100%";
                }
                var finalcolWidth = typeof (totalWidth) == "string" && totalWidth.indexOf("%") != -1 ? totalWidth : totalWidth - frozenWidth;
                this.getContent().find(".e-frozencontentdiv").outerWidth(frozenWidth)
                    .end().find(".e-movablecontentdiv").outerWidth(finalcolWidth);
                this.getHeaderContent().find(".e-frozenheaderdiv").outerWidth(frozenWidth)
                    .end().find(".e-movableheaderdiv").outerWidth(finalcolWidth);
                if (this.getFooterContent())
                    this.getFooterContent().find(".e-frozenfooterdiv").outerWidth(frozenWidth)
                        .end().find(".e-movablefooterdiv").outerWidth(finalcolWidth);
            }
            if(!this.initialRender && this.model.allowResizeToFit && this.model.allowScrolling && this.model.scrollSettings.enableVirtualization ){			
               var width = this.getHeaderTable().width() > this.getContentTable().width() ? this.getHeaderTable().width() : this.getContentTable().width();
                if(!BoldBIDashboard.isNullOrUndefined(this.getFooterTable()))
                    this.getFooterTable().width(width);
			}
        },
        _initialEndRendering: function () {
            // use this method to add behaviour after grid render.
            if (this.model.allowRowDragAndDrop)
                this._rowsDragAndDrop();
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
                    this.element.append(this._renderDialog());
                else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                    this.element.append(this._renderExternalForm());
            }
            
            (this.model.editSettings.editMode == "batch" || this.model.editSettings.showDeleteConfirmDialog) && this._renderConfirmDialog();
            (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && bbdesigner$("#" + this._id + 'AlertDialog') == null && this._renderAlertDialog();
            if (this.model.allowMultiSorting || this.model.selectionType == "multiple")
                this._renderMultiTouchDialog();
            if (this.model.scrollSettings.frozenColumns > 0 && !this.model.allowScrolling) {
                this.getContent().remove();
                this.getHeaderTable().eq(1).remove();
                this._alertDialog.find(".e-content").text(this.localizedLabels.FrozenColumnsScrollAlert);
                this._alertDialog.BoldBIDashboardDialog("open");
                return;
            }
            this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && this._createPagerStatusBar();
            this._getRowHeights();
            if (this.element.width() != 0 && this.element.is(":visible") && this.model.allowScrolling) {
                this._renderScroller();
                 if (!(this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0)){ 
                    this.setWidthToColumns();
		    var scrollObj = !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) ? this.getScrollObject() : null;
                    scrollObj != null && scrollObj.refresh();
		    this._isHscrollcss();
                    this.refreshScrollerEvent();
                    this._scrollFooterColgroup(true);
		}
            }
            else if (this.model.allowScrolling && this.element.width() == 0) {
                var proxy = this, myVar = setInterval(function () {
                    if (proxy.element.width() != 0 && !BoldBIDashboard.isNullOrUndefined(proxy.element.width())) {
                        proxy._renderScroller();
                        if (!(proxy.model.scrollSettings.frozenRows > 0 || proxy.model.scrollSettings.frozenColumns > 0)) 
                        proxy.setWidthToColumns();
                        proxy._endRendering();
                        clearInterval(myVar);
                    }
                }, 100);
                return;
            }
           this._endRendering();
        },
        _scrollFooterColgroup: function (initialfooter) {
            if(BoldBIDashboard.isNullOrUndefined(initialfooter))
            {
		if (this.model.scrollSettings.frozenColumns > 0 && !this.getFooterTable().find("colgroup").length) 
                {
                    this.getFooterTable().eq(0).append(this.getHeaderTable().eq(0).find("colgroup").clone());
                    this.getFooterTable().eq(1).append(this.getHeaderTable().eq(1).find("colgroup").clone());
                }
                if(!this.getFooterTable().find("colgroup").length)
                    this.getFooterTable().append(this.getHeaderTable().find("colgroup").clone());
                else
                    this.getFooterTable().find("colgroup").first().replaceWith(this.getHeaderTable().find("colgroup").clone());                
            }
            var scrollObj = !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) ? this.getScrollObject() : null;
            if(scrollObj && scrollObj.isVScroll() && !BoldBIDashboard.isNullOrUndefined(this.getFooterContent()))
            {
                this.getFooterContent().find("colgroup").append("<col style='width : " + this.model.scrollSettings.scrollerSize + "px'></col>");
                if(!this.getFooterContent().find("tr.e-gridSummaryRows td.e-scrollindent").length)
                this.getFooterContent().find("tr.e-gridSummaryRows").append("<td class='e-scrollindent'></td>");
            }
        },
        _endRendering: function () {
            if(this.model.allowScrolling && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")))
                var scroller = this.getScrollObject();
            var css = this.model.enableRTL ? "e-summaryscroll e-rtl" : "e-summaryscroll";
            if (this.model.allowScrolling && this.model.showSummary) {
                if(!BoldBIDashboard.isNullOrUndefined(scroller) && scroller._vScroll)
                    this.element.find(".e-summaryrow.e-scroller").addClass(css);
                this.getFooterTable() && this._scrollFooterColgroup();
            }
            this._addMedia();
            if(this.model.allowScrolling && this.model.allowTextWrap && !this.model.scrollSettings.allowVirtualScrolling && !BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller"))) this.getContent().first().BoldBIDashboardScroller("refresh");
            if (this.model.scrollSettings.allowVirtualScrolling) {
                if (this._currentPage() == 1 && !this.model.scrollSettings.enableVirtualization)
                    this._virtualLoadedRecords[this._currentPage()] = this._currentJsonData;
                if(this.model.scrollSettings.enableVirtualization)
                    this._refreshVirtualView();				
                else
                    this._refreshVirtualContent();
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")))
                this.getContent().first().BoldBIDashboardScroller("refresh");
                if (!BoldBIDashboard.isNullOrUndefined(this.getContent().data("BoldBIDashboardScroller")) && this.getContent().BoldBIDashboardScroller("isVScroll")) {
                    this.element.find(".e-gridheader").addClass("e-scrollcss");
                    this.getHeaderTable().first().width(this.getContentTable().width());
                }
                else
                    this.element.find(".e-gridheader").removeClass("e-scrollcss");
            }
            if (this._selectedRow() != -1){
                this.model.currentIndex = this._selectedRow();
                this.selectRows(this._selectedRow());
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar" && !this.model.allowPaging && !this.model.scrollSettings.allowVirtualScrolling)
                this._createPagerStatusBar();
            if (BoldBIDashboard.gridFeatures.common)
                this.rowHeightRefresh()
            if (BoldBIDashboard.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1)
                this._refreshFilterIcon();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this._recalculateIndentWidth();
            if (this.initialRender && (!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount))
                this._addLastRow();
        },

        _addLastRow: function () {
            var lastRowtd = this.getContentTable().find("tr:last").find("td"), rowHeight = 0;

            if (this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling && !BoldBIDashboard.isNullOrUndefined(this.model.dataSource) && !BoldBIDashboard.isNullOrUndefined(this.getRows())) {
                for (var i = 0; i < this.getRows().length; i++)
                    rowHeight += bbdesigner$(this.getRows()[i]).height();

                if (rowHeight < this.getContent().height() - 1)
                    lastRowtd.addClass("e-lastrowcell");
            }
            if(this.model.scrollSettings.allowVirtualScrolling && this.getContentTable().height() < this.getContent().height())
                lastRowtd.addClass("e-lastrowcell");
        },
        _addMedia: function () {
            if (typeof (this.model.scrollSettings.width) != "string" && this.model.scrollSettings.width > 0)
                this._responsiveScrollWidth = this.model.scrollSettings.width;
            if (typeof (this.model.scrollSettings.height) != "string" && this.model.scrollSettings.height > 0)
                this._responsiveScrollHiehgt = this.model.scrollSettings.height;
            if (this.model.minWidth && this.model.isResponsive) {
                this._bbdesigner$onresize = bbdesigner$.proxy(this.windowonresize, this);
                bbdesigner$(window).bind("resize", this._bbdesigner$onresize);
                if (bbdesigner$.isFunction(window.matchMedia)) {
                    var mediaFilterObj = window.matchMedia("(max-width: 768px)");
                    this._mediaStatus = mediaFilterObj.matches;
                }
                this.windowonresize();
            }
        },
        _getNoncontentHeight: function () {
            var height = this.getHeaderContent().outerHeight();
            if (this.model.toolbarSettings.showToolbar)
                height += this.element.find('.e-gridtoolbar').outerHeight();
            if (this.model.allowPaging)
                height += this.element.find('.e-pager').outerHeight();
            if (this.model.allowGrouping && this.model.groupSettings.showDropArea)
                height += this.element.find('.e-groupdroparea').outerHeight();
            return height;
        },
        
        setDimension: function (height, width) {
            var originalHeight = height - this._getNoncontentHeight();
            this.model.scrollSettings.height = originalHeight;
            this.model.scrollSettings.width = width;
            this._renderScroller();
        },
        _mediaQueryUpdate: function (isScroller, elemHeight, width, winHeight) {
            if (window.innerWidth <= 320 && this.model.enableResponsiveRow) {
                var contentStyle=this.getContentTable()[0].style;
               if(contentStyle.removeAttribute)
                   contentStyle.removeAttribute('min-width');
               else        
                   contentStyle.removeProperty('min-width');
                var scrollObj = this.getContent().data('BoldBIDashboardScroller');
                if (scrollObj)
                    this.getContent().BoldBIDashboardScroller('destroy');
                return;
            }
            if (isScroller) {
                this.model.scrollSettings.width = BoldBIDashboard.isNullOrUndefined(this._responsiveScrollWidth) ? width : Math.min(this._responsiveScrollWidth, width);
                var height = Math.min(winHeight, elemHeight) - this._getNoncontentHeight();
                height = BoldBIDashboard.isNullOrUndefined(this._responsiveScrollHiehgt) ? height : Math.min(this._responsiveScrollHiehgt, height);
                height -= parseInt(this.element.parent().css('margin-bottom')) + 1;
                 if (this.model.minWidth > width && elemHeight > winHeight)
                    height = height + this.model.scrollSettings.buttonSize;
                if (BoldBIDashboard.isNullOrUndefined(this.getRows()))
                    height = 'auto';
                this.model.scrollSettings.height = height;
                this.element.find(".e-gridheader").first().find("div").first().addClass("e-headercontent");
                this._renderScroller();
            }
            else {
                this.model.scrollSettings.width = '100%';
                if (!BoldBIDashboard.isNullOrUndefined(this._responsiveScrollWidth))
                    this.model.scrollSettings.width = Math.min(this._responsiveScrollWidth, width);
                var modifyHeight = Math.min(winHeight, elemHeight);
                var height = modifyHeight - this._getNoncontentHeight();
                if (!BoldBIDashboard.isNullOrUndefined(this._responsiveScrollHiehgt))
                    height = Math.min(this._responsiveScrollHiehgt, winHeight);
                height -= parseInt(this.element.parent().css('margin-bottom'));
                 if (BoldBIDashboard.isNullOrUndefined(this.getRows()))
                    height = 'auto';
                this.model.scrollSettings.height = height;
                this.element.find(".e-gridheader").first().find("div").first().addClass("e-headercontent");
                this._renderScroller();
            }
        },
        windowonresize: function () {
            this.model.scrollSettings.width = this._responsiveScrollWidth;
            var width, height;
            this.element.width('100%');
            this.getContentTable().width('100%');
            this.getHeaderTable().width('100%');
            this.getContentTable().css('minWidth', this.model.minWidth);
            width = this.element.width();
            var winHeight = bbdesigner$(window).height() - this.element.offset()['top'];
            var rowCount = !BoldBIDashboard.isNullOrUndefined(this.getRows()) ? this.getRows().length : 1;
            var isBody = this.element.parent().is(bbdesigner$('body')) || this.element.parent().height() == bbdesigner$('body').height();
            var originalElemHeight=this.getContentTable()[0].scrollHeight + this._getNoncontentHeight();
            var elemHeight = isBody ? winHeight : this.element.parent().height();
            originalElemHeight += parseInt(this.element.parent().css('margin-top'));
            var isScroller = this.model.minWidth > width || elemHeight <= originalElemHeight;
            this._mediaQueryUpdate(isScroller, elemHeight, width, originalElemHeight)
        },
        _removeMedia: function () {
            bbdesigner$(window).unbind("resize", this._bbdesigner$onresize);
            this.getContentTable().css("min-width", "");
            this.getHeaderTable().css("min-width", "");
            this.getContentTable().css("width", "");
            this.model.scrollSettings.width = "auto";
            if (this.getContent().data("BoldBIDashboardScroller"))
                this.getContent().BoldBIDashboardScroller("destroy");
        },
        _getRowHeights: function () {
            var trs = this.getRows();
            if (trs !== null) {
                this._rowHeightCollection = [];
                if (trs[1] !== undefined && trs[1].length && ((this.model.scrollSettings.frozenColumns > 0 && trs[0] !== undefined) || (trs[0] !== undefined && typeof trs[0].item !== "undefined" && typeof trs[0].length == "number" && typeof trs[1].item !== "undefined" && typeof trs[1].length == "number"))) {
                    frotrs = trs[0];
                    movtrs = trs[1];
                    for (var i = 0 ; i < frotrs.length ; i++) {
                        this._rowHeightCollection[i] = frotrs[i].offsetTop >= movtrs[i].offsetTop ? frotrs[i].offsetTop : movtrs[i].offsetTop;
                    }
                }
                else {
                    for (var i = 0 ; i < trs.length ; i++) {
                        this._rowHeightCollection[i] = trs[i].offsetTop;
                    }
                }
            }
            return this._rowHeightCollection;
        },
        _getEmptyTbody: function () {
            var bbdesigner$emptyTd = BoldBIDashboard.buildTag('td.emptyrecord', this.localizedLabels.EmptyRecord, {}, { colSpan: this.model.columns.length });
            return bbdesigner$(document.createElement("tr")).append(bbdesigner$emptyTd);
        },
        _getIndentCol: function () {
            return BoldBIDashboard.buildTag("col", "", { width: "30px" });
        },
        _createSortElement: function () {
            return BoldBIDashboard.buildTag('span.e-icon', "&nbsp;");
        },
        _createSortNumber: function (number, header) {
            if (header.css("text-align") == "right")
                return BoldBIDashboard.buildTag('span.e-number', number, { "color": "white", "font-size": "9px", "float": "left" });
            else
                return BoldBIDashboard.buildTag('span.e-number', number, { "color": "white", "font-size": "9px", "float": "right" });
        },
        _wireEvents: function () {
            this._on(this.element, (bbdesigner$.isFunction(bbdesigner$.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
            this._on(this.element, (bbdesigner$.isFunction(bbdesigner$.fn.tap) && this.model.enableTouch) ? "tap" : "click", ".e-gridheader", this._mouseClickHandler);
            if (BoldBIDashboard.gridFeatures.common) {
                this._on(this.element, (bbdesigner$.isFunction(bbdesigner$.fn.doubletap) && this.model.enableTouch) ? "doubletap" : "dblclick", ".e-gridcontent > div:first", this._recorddblClickHandler);
                if (this.model.rightClick)
                    this._on(this.element, "contextmenu", this._rightClickHandler);
                this._on(this.element, "click", ".e-gridcontent", this._recordClick);
                this._enableRowHover();
                if (this.model.enableTouch)
                    this._on(this.element, "swipeleft swiperight", ".e-gridcontent div > .e-table", bbdesigner$.proxy(this._touchGrid, this));
                else
                    this.element.addClass("e-touch");
                this._on(this.element, "mousedown", ".e-gridheader", this._headerMouseDown);
                if (this.model.allowRowDragAndDrop && this.model.selectionType == "multiple")
                    this._on(this.element, "mousedown", ".e-gridcontent", this._contentMouseDown);
                this._on(this.element, "mouseover mouseleave", ".e-gridheader:first", this._headerHover);
                this._on(this.element, BoldBIDashboard.eventType.mouseMove, ".e-gridheader:first", this._headerHover);
                this.model.allowResizeToFit && this._on(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
                if (this.model.allowResizing) {
                    this._on(this.element, BoldBIDashboard.eventType.mouseMove,".e-gridheader:first", this._mouseMove);
                    this._on(this.element, "mouseup", this._mouseUp);
                }
                if (this.model.allowKeyboardNavigation) {
                    this.element[0].tabIndex = this.element[0].tabIndex == -1 ? 0 : this.element[0].tabIndex;
                    this.element[0].accessKey = (!BoldBIDashboard.isNullOrUndefined(this.element[0].accessKey) && this.element[0].accessKey != "") ? this.element[0].accessKey : "e";
                    this._on(this.element, "keyup", this._keyDownHandler);
                }
            }
            if (BoldBIDashboard.gridFeatures.edit) {
                this._enableEditingEvents();
                this._on(this.element, "click", ".e-gridcontent .e-unboundcelldiv", this._unboundClickHandler);
            }
            if (this.model.allowGrouping) {
                this._enableGroupingEvents();
                this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);

            }
            this._enableFilterEvents();
        },
        _enableFilterEvents: function () {
            if (this.model.allowMultiSorting || this.model.selectionType == "multiple" || this.model.allowFiltering)
                this._on(bbdesigner$(document), "mousedown", this._docClickHandler);
            if (this.model.allowFiltering) {
                var proxy = this, bbdesigner$target;
                this._off(this.element, "keyup", ".e-filterbar input")._on(this.element, "keyup", ".e-filterbar input", this._filterBarHandler);
                this._on(this.element, "focus click", ".e-filterbar", this._filterBarClose);
            }
        },
        _docClickHandler: function (e) {
            var details = this.getBrowserDetails(), bbdesigner$target = bbdesigner$(e.target);
            if (this._customPop != null && this.element.find(e.target).length == 0)
                this._customPop.hide();
            if (this.model.allowFiltering) {
                if (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") {
                    if (this._bbdesigner$colType && (bbdesigner$(e.target).find(".e-grid.e-dlgcontainer").length > 1 || bbdesigner$(e.target).find(".e-excelfilter").length > 1))
                        if (details.browser == "msie")
                            e.target.tagName != "BODY" && (!this.isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e));
                        else
                            !this._isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e);
                } else if (!bbdesigner$target.hasClass("e-filtertext") && !bbdesigner$target.hasClass("e-cancel"))
                    this.getFilterBar().find(".e-cancel").addClass("e-hide");
            }

        },
        _mouseClickHandler: function (e) {
            var bbdesigner$temp = bbdesigner$(e.target), bbdesigner$target;
            if (!(this.model.isResponsive || this.model.enableResponsiveRow) && bbdesigner$temp.closest(".e-grid").length != 0 && bbdesigner$temp.closest(".e-grid").attr("id") !== this._id) return;
            if (this.getHeaderTable().find('.e-columnheader').not('.e-stackedHeaderRow').css('cursor') == "col-resize")
                return;
            if (bbdesigner$(e.target).is(".e-ascending, .e-descending"))
                bbdesigner$target = bbdesigner$(e.target.parentNode);
            else if (bbdesigner$temp.hasClass('e-groupheadercell'))
                bbdesigner$target = bbdesigner$temp.children("div");
            else
                bbdesigner$target = bbdesigner$(e.target);
            if (this._bbdesigner$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter)) {
                bbdesigner$.fx.off = true;
                this._closeFDialog();
                bbdesigner$.fx.off = false;
            }
            this.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive").removeClass("e-active");
            if (bbdesigner$target.hasClass("e-headercelldiv") || (!bbdesigner$target.hasClass("e-togglegroupbutton") && bbdesigner$target.closest(".e-headercelldiv").length && bbdesigner$.inArray(bbdesigner$target[0].tagName, ["SELECT", "INPUT", "TEXTAREA"]) == -1)
                || (bbdesigner$target.closest(".e-groupheadercell").length && bbdesigner$(e.target).is(".e-ascending, .e-descending"))) {
                if (!this.model.allowSorting || BoldBIDashboard.gridFeatures.sort === undefined)
                    return;
                bbdesigner$target = (bbdesigner$target.hasClass("e-headercelldiv") || bbdesigner$target.closest(".e-groupheadercell").length) ? bbdesigner$target : bbdesigner$target.closest(".e-headercelldiv");
                var columnName = bbdesigner$target.attr("ej-mappingname");
                var columnSortDirection = BoldBIDashboard.sortOrder.Ascending;
                this._bbdesigner$prevSElementTarget = this._bbdesigner$curSElementTarget;
                this._bbdesigner$curSElementTarget = bbdesigner$target;
                if (bbdesigner$target.find('span').hasClass("e-ascending"))
                    var columnSortDirection = BoldBIDashboard.sortOrder.Descending;
                else
                    var columnSortDirection = BoldBIDashboard.sortOrder.Ascending;
                if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-sortdirect").hasClass("e-spanclicked"))
                    this._customPop.show();
                if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-rowselect").is(":visible") || !this._customPop.find(".e-sortdirect").hasClass("e-spanclicked")) && this.model.allowMultiSorting) {
                    var bbdesigner$offset = bbdesigner$target.offset();
                    this._customPop.removeAttr("style");
                    this._customPop.offset({ left: bbdesigner$offset.left, top: bbdesigner$offset.top - this.getHeaderTable().find(".e-columnheader").height() }).find(".e-sortdirect").show().end()
                        .find(".e-rowselect").hide().end().show();
                }
                if (this.model.allowMultiSorting && (e.ctrlKey || this._enableSortMultiTouch))
                    this.multiSortRequest = true;
                if (this._isExcelFilter && !BoldBIDashboard.isNullOrUndefined(columnName)) {
                    var args = {
                        action: "sorting",
                        sortDetails: {field: columnName, direction: columnSortDirection},
                    }
                    this._filterHandler(args);
                } else {
                    if (e.shiftKey && bbdesigner$.inArray(columnName, this.model.groupSettings.groupedColumns) == -1) {
                        this._removeSortedColumnFromCollection(columnName);
                        this.multiSortRequest = true;
                        columnName = null;
                        this.sortColumn(columnName, columnSortDirection);
                    }
                    if (!BoldBIDashboard.isNullOrUndefined(columnName))
                        this.sortColumn(columnName, columnSortDirection);
                }
            } else if (bbdesigner$target.hasClass("e-togglegroupbutton") && this.model.allowGrouping) {
                var field = bbdesigner$target.parent().attr("ej-mappingname");
                bbdesigner$target.hasClass("e-togglegroup") && this.groupColumn(field);
                bbdesigner$target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
            } else if (bbdesigner$target.hasClass("e-filtericon") || bbdesigner$target.hasClass("e-filteredicon") || bbdesigner$target.hasClass('e-responsivefilterColDiv') || bbdesigner$target.parent().hasClass('e-responsivefilterColDiv')) {
                var columnName = bbdesigner$target.parent().find(".e-headercelldiv").attr("ej-mappingname") || bbdesigner$target.attr("ej-mappingname") || bbdesigner$(bbdesigner$target.parent()).attr("ej-mappingname");
                this._bbdesigner$prevFieldName = this._bbdesigner$curFieldName, currentColumn = this.getColumnByField(columnName);
                var localXFLabel = { True: this.localizedLabels.True, False: this.localizedLabels.False };
                if (this.model.allowFiltering) {
                    var proxy = this;
                    bbdesigner$.each(this.model.columns, function (indx, col) {
                        if (col.field == columnName) {
                            proxy._bbdesigner$colType = col.type;
                            proxy._bbdesigner$curFieldName = col.field;
                            proxy._bbdesigner$colFormat = col.format;
                            proxy._bbdesigner$filterType = col.filterType;
                            proxy._bbdesigner$colForeignKeyField = col.foreignKeyField ? col.foreignKeyField : col.field;
                            proxy._bbdesigner$colForeignKeyValue = col.foreignKeyValue;
                            proxy._bbdesigner$colDropdownData = col.dataSource;
                        }
                    });
                    if ((this.model.filterSettings.filterType == "menu" && this._bbdesigner$filterType != "excel") || (this.model.filterSettings.filterType == "excel" && this._bbdesigner$filterType == "menu")) {
                        var bbdesigner$id = "#" + this._id + "_" + this._bbdesigner$colType + "Dlg";
                        this._bbdesigner$menuDlgIsOpen = true;
                        if (this._bbdesigner$colType == "string") {
                            if (this._bbdesigner$colForeignKeyValue && this._bbdesigner$colDropdownData)
                                bbdesigner$("#" + this._id + "_acString").BoldBIDashboardAutocomplete({ fields: { text: proxy._bbdesigner$colForeignKeyValue, key: proxy._bbdesigner$colForeignKeyField }, dataSource: proxy._bbdesigner$colDropdownData });
                            else
                                bbdesigner$("#" + this._id + "_acString").BoldBIDashboardAutocomplete({ fields: { text: proxy._bbdesigner$curFieldName, key: this._getIdField() }, dataSource: this._dataSource() });
                        } else if (this._bbdesigner$colType == "date") {
                            if (this._bbdesigner$colFormat != undefined) {
                                this._bbdesigner$colFormat = this._bbdesigner$colFormat.replace("{0:", "").replace("}", "");
                                bbdesigner$(bbdesigner$id).find(".e-datewidget .e-datepicker").BoldBIDashboardDatePicker({ dateFormat: this._bbdesigner$colFormat.replace("{0:", "").replace("}", "") });
                            }
                            else
                                bbdesigner$(bbdesigner$id).find(".e-datewidget .e-datepicker").BoldBIDashboardDatePicker({ dateFormat: "MM/dd/yyyy" });
                        }
                        else if (this._bbdesigner$colType == "datetime") {
                            if (this._bbdesigner$colFormat != undefined) {
                                this._bbdesigner$colFormat = this._bbdesigner$colFormat.replace("{0:", "").replace("}", "");
                                bbdesigner$(bbdesigner$id).find(".e-datetimewidget input").BoldBIDashboardDateTimePicker({ dateFormat: this._bbdesigner$colFormat.replace("{0:", "").replace("}", "") });
                            }
                            this._setFilterFieldValues(bbdesigner$id);
                        }
                    }
                    this._mediaStatus = document.documentElement.clientWidth < 768;
                    if (this.model.isResponsive && this._mediaStatus) {
                        var gridObj = this;
                        var bbdesigner$headerDiv = BoldBIDashboard.buildTag('div.e-resFilterDialogHeaderDiv');
                        var bbdesigner$titleSapn = BoldBIDashboard.buildTag('div.labelRes', '<span>Filter</span>');
                        if (bbdesigner$(".e-filterMenuBtn").length > 0)
                            bbdesigner$(".e-filterMenuBtn").remove();
                        var bbdesigner$dlgBtn = BoldBIDashboard.buildTag('div.e-filterMenuBtn');
                        var bbdesigner$inputOk = BoldBIDashboard.buildTag('input.e-resposnsiveFilterBtnLeft');
                        var bbdesigner$inputCancel = BoldBIDashboard.buildTag('input.e-resposnsiveFilterBtnRight');

                        bbdesigner$headerDiv.append(bbdesigner$titleSapn);
                        bbdesigner$headerDiv.css('width', '100%');
                        var bbdesigner$dlgClone = bbdesigner$(bbdesigner$id).css('padding-left', '0px');
                        if (bbdesigner$target.parent().hasClass('e-responsivefilterColDiv') && bbdesigner$target.hasClass('e-filternone')) {
                            proxy._fltrClrHandler();
                            bbdesigner$target.remove();
                            bbdesigner$("#responsiveFilter").css('display', 'block');
                            // this.element.css('display', 'block');
                        }
                        else {
                            this.element.css('display', 'none');
                            setTimeout(function () { bbdesigner$("#responsiveFilter").css('display', 'none'), 0 });
                            if (!this._isExcelFilter && this._bbdesigner$filterType != "excel") {
                                var btnText = this.model.enableResponsiveRow ? 'OK' : 'Filter', clearText = this.model.enableResponsiveRow ? 'Cancel' : 'Clear';
                                bbdesigner$inputOk.BoldBIDashboardButton({ text: btnText, type: 'button', click: bbdesigner$.proxy(this._fltrBtnHandler, this) });
                                bbdesigner$inputCancel.BoldBIDashboardButton({
                                    text: clearText, type: 'button', click: function () {
                                        if (clearText == 'Clear') {
                                            proxy.element.css('display', 'block');
                                            proxy._fltrClrHandler();
                                        }
                                        bbdesigner$(bbdesigner$id).css('display', 'none');
                                        if (bbdesigner$inputCancel.hasClass("e-resposnsiveFilterBtnRight"))
                                            proxy.element.css('display', 'block');
                                    }
                                });
                                if (bbdesigner$target.parent().hasClass('e-responsivefilterColDiv') && bbdesigner$target.hasClass('e-filternone')) {
                                    proxy._fltrClrHandler();
                                    bbdesigner$target.remove();
                                }
                                else {
                                    bbdesigner$dlgClone.addClass('e-resMenuFltr');
                                    bbdesigner$dlgClone.css('height', bbdesigner$(window).height() - 1).css('width', bbdesigner$(window).width() - 2);
                                    bbdesigner$dlgClone.find('.e-operator').addClass('e-resFilterOperator');
                                    bbdesigner$dlgClone.find('.e-value').addClass('e-resFilterOperator');
                                    var bbdesigner$btnContainer = bbdesigner$dlgClone.find('.e-dlgBtns').remove().addClass('e-filterMenuBtn');
                                    bbdesigner$dlgClone.append(bbdesigner$dlgBtn.append(bbdesigner$inputOk).append(bbdesigner$inputCancel));
                                    if (BoldBIDashboard.isNullOrUndefined(bbdesigner$dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                        bbdesigner$dlgClone.insertAfter(this.element);
                                        var bbdesigner$backIcon = BoldBIDashboard.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: bbdesigner$id.slice(1), openDialogue: 'responsiveFilter' });
                                        var bbdesigner$spanIcon = BoldBIDashboard.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: bbdesigner$id.slice(1), openDialogue: 'responsiveFilter' })
                                        bbdesigner$backIcon.click(function (e) {
                                            bbdesigner$dlgClone.css('display', 'none');
                                            if (gridObj.model.enableResponsiveRow)
                                                bbdesigner$("#responsiveFilter").css('display', 'block');
                                            else
                                                gridObj.element.css('display', 'block');
                                        })
                                        bbdesigner$headerDiv.append(bbdesigner$backIcon.append(bbdesigner$spanIcon));
                                        var bbdesigner$closeIcon = BoldBIDashboard.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: bbdesigner$id.slice(1), gridEle: true });
                                        var bbdesigner$closeSpan = BoldBIDashboard.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, { closeDialogue: bbdesigner$id.slice(1), gridEle: true })
                                        bbdesigner$closeIcon.click(function (e) {
                                            bbdesigner$dlgClone.css('display', 'none');
                                            gridObj.element.css('display', 'block');
                                        });
                                        var bbdesigner$ejWid = bbdesigner$(bbdesigner$dlgClone.find('.e-value').find('input:last'));
                                        if (proxy._bbdesigner$colType == 'string') {
                                            var model = bbdesigner$(bbdesigner$dlgClone.find('.e-value').find('input:last')).BoldBIDashboardAutocomplete('model');
                                            bbdesigner$ejWid.BoldBIDashboardAutocomplete('destroy').BoldBIDashboardAutocomplete({
                                                enableDistinct: true, dataSource: model.dataSource, fields: model.fields, width: model.width, focusIn: function (args) {
                                                    var bbdesigner$dropdown = this.element.closest(".e-filterDialoge").find(".e-dropdownlist");
                                                    this.model.filterType = bbdesigner$dropdown.val();
                                                }
                                            });
                                        }
                                        bbdesigner$headerDiv.append(bbdesigner$closeIcon.append(bbdesigner$closeSpan));
                                        bbdesigner$dlgClone.prepend(bbdesigner$headerDiv);
                                    }
                                    bbdesigner$dlgClone.find('.e-responsiveLabelDiv').remove();
                                    var bbdesigner$label = BoldBIDashboard.buildTag('div.e-responsiveLabelDiv', '', { 'margin-left': '5%', 'font-size': '17px', 'margin-top': '5%' }).append(BoldBIDashboard.buildTag('span', this.getHeaderTextByFieldName(columnName), { 'font-weight': 'bold' }));
                                    bbdesigner$label.insertAfter(bbdesigner$dlgClone.find('.e-resFilterDialogHeaderDiv'));
                                    bbdesigner$dlgClone.fadeIn(100, "easeOutQuad", function () {
                                    });
                                }
                            }
                            else {
                                this._excelDlg = bbdesigner$id = "#" + this._id + this._bbdesigner$colType + "_excelDlg";
                                if (BoldBIDashboard.isNullOrUndefined(bbdesigner$dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                    bbdesigner$inputOk.BoldBIDashboardButton({
                                        text: 'OK', type: 'button', click: function (sender) {
                                            gridObj._excelFilter._openedFltr = bbdesigner$(gridObj._excelDlg);
                                            gridObj._excelFilter._fltrBtnHandler();
                                            gridObj._setResponsiveFilterIcon();
                                            gridObj.element.css('display', 'block');
                                        }
                                    });
                                    bbdesigner$inputCancel.BoldBIDashboardButton({ text: 'Cancel', type: 'button', click: function () { bbdesigner$(bbdesigner$id).css('display', 'none'); proxy.element.css('display', 'block') } });
                                    bbdesigner$(bbdesigner$id).children().not('.e-searchcontainer').remove();
                                    var excelObj = this._excelFilter;
                                    var bbdesigner$backIcon = BoldBIDashboard.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: bbdesigner$id.slice(1), openDialogue: 'responsiveFilter' });
                                    var bbdesigner$spanIcon = BoldBIDashboard.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: bbdesigner$id.slice(1), openDialogue: 'responsiveFilter' })
                                    bbdesigner$backIcon.click(function (e) {
                                        bbdesigner$.proxy(gridObj._closeDivIcon(e), this);
                                    })
                                    bbdesigner$headerDiv.append(bbdesigner$backIcon.append(bbdesigner$spanIcon));
                                    var bbdesigner$closeIcon = BoldBIDashboard.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: bbdesigner$id.slice(1), gridEle: true });
                                    var bbdesigner$closeSpan = BoldBIDashboard.buildTag('span.e-icon e-resIcon e-responisveCustomFilter', '', {}, { closeDialogue: bbdesigner$id.slice(1), gridEle: true })
                                    bbdesigner$closeIcon.click(function (e) {
                                        bbdesigner$.proxy(gridObj._closeDivIcon(e), this);
                                    })
                                    if (proxy._bbdesigner$colType != 'boolean')
                                        bbdesigner$headerDiv.append(bbdesigner$closeIcon.append(bbdesigner$closeSpan));
                                    bbdesigner$(bbdesigner$id).css('padding', '0px');
                                    var bbdesigner$searchContainer = bbdesigner$(bbdesigner$id).css('height', bbdesigner$(window).height() - 2);
                                    bbdesigner$searchContainer.css('width', bbdesigner$(window).width() - 2);
                                    var bbdesigner$searchBox = bbdesigner$searchContainer.find('.e-searchcontainer .e-searchbox').css('margin-top', '10px');
                                    bbdesigner$searchBox.children().css('margin-top', '10px');
                                    var bbdesigner$checkBoxDiv = bbdesigner$searchContainer.find('.e-checkboxlist');
                                    var scrolWidth = bbdesigner$(window).width() * (97 / 100), scrollHeight = bbdesigner$(window).height() * (65 / 100);
                                    bbdesigner$(bbdesigner$searchContainer.find('.e-searchcontainer')).addClass('e-resSearch');
                                    var bbdesigner$btn = bbdesigner$searchContainer.find('.e-resSearch .e-btncontainer').remove();
                                    bbdesigner$btn.find('input:first').css('width', '45.6%');
                                    bbdesigner$btn.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
                                    bbdesigner$btn.find('input:last').addClass('e-resposnsiveFilterBtnRight');
                                    bbdesigner$searchContainer.find('.e-excelLabel').remove();
                                    var bbdesigner$labelDiv = BoldBIDashboard.buildTag('div.e-excelLabel', 'Order Id', { 'font-weight': 'bold', 'margin-top': '10px' });
                                    var bbdesigner$searchBox = bbdesigner$searchContainer.find('.e-searchcontainer');
                                    bbdesigner$labelDiv.insertAfter(bbdesigner$searchContainer.find('.e-searchcontainer .e-searchbox'));
                                    bbdesigner$searchContainer.prepend(bbdesigner$headerDiv);
                                    bbdesigner$(bbdesigner$id).append(bbdesigner$dlgBtn.append(bbdesigner$inputOk).append(bbdesigner$inputCancel))
                                    bbdesigner$checkBoxDiv.BoldBIDashboardScroller({ height: scrollHeight, width: scrolWidth }).BoldBIDashboardScroller('refresh');
                                }
                                this._excelFilter.openXFDialog({ field: columnName, enableResponsiveRow: true, displayName: currentColumn.headerText, dataSource: this._dataSource(), position: { X: xPos, Y: yPos }, dimension: { height: bbdesigner$(window).height(), width: bbdesigner$(window).width() }, cssClass: "resFilter", type: this._bbdesigner$colType, format: this._bbdesigner$colFormat, localizedStrings: localXFLabel });
                                bbdesigner$(bbdesigner$id).insertAfter(this.element);
                                !BoldBIDashboard.isNullOrUndefined(bbdesigner$(bbdesigner$id).parents('.e-grid')[0]) && bbdesigner$(bbdesigner$id).remove();
                                bbdesigner$closeIcon.click(function (e) {
                                    bbdesigner$(gridObj._excelDlg).css('display', 'none');
                                    var height = bbdesigner$(window).height() - 5, width = bbdesigner$(window).width();
                                    excelObj._openCustomFilter('equal');
                                    var bbdesigner$dlgClone = bbdesigner$id = bbdesigner$("#" + gridObj._id + gridObj._bbdesigner$colType + "_CustomFDlg").addClass('e-responsviesExcelFilter');
                                    if (BoldBIDashboard.isNullOrUndefined(bbdesigner$dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                        var bbdesigner$headerDivCustom = BoldBIDashboard.buildTag('div.e-resFilterDialogHeaderDiv');
                                        var bbdesigner$titleSapn = BoldBIDashboard.buildTag('div.labelRes', '<span>Custom Filter</span>');
                                        bbdesigner$headerDivCustom.append(bbdesigner$titleSapn);
                                        var bbdesigner$backIcon = BoldBIDashboard.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: gridObj._id + gridObj._bbdesigner$colType + "_CustomFDlg", openDialogue: gridObj._excelDlg.slice(1) });
                                        var bbdesigner$spanIcon = BoldBIDashboard.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: gridObj._id + gridObj._bbdesigner$colType + "_CustomFDlg", openDialogue: gridObj._excelDlg.slice(1) })
                                        bbdesigner$backIcon.click(function (e) {
                                            bbdesigner$dlgClone.css('display', 'none');
                                            if (gridObj.model.enableResponsiveRow)
                                                bbdesigner$("#responsiveFilter").css('display', 'block');
                                            else
                                                gridObj.element.css('display', 'block');
                                        });
                                        bbdesigner$headerDivCustom.append(bbdesigner$backIcon.append(bbdesigner$spanIcon));
                                        var bbdesigner$closeIconCust = BoldBIDashboard.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: gridObj._id + gridObj._bbdesigner$colType + "_CustomFDlg", gridEle: true });
                                        var bbdesigner$closeSpan = BoldBIDashboard.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, { closeDialogue: gridObj._id + gridObj._bbdesigner$colType + "_CustomFDlg", gridEle: true })
                                        bbdesigner$headerDivCustom.append(bbdesigner$closeIconCust.append(bbdesigner$closeSpan));
                                        bbdesigner$closeIconCust.click(function (e) {
                                            bbdesigner$dlgClone.css('display', 'none');
                                            gridObj.element.css('display', 'block');
                                        })
                                        bbdesigner$dlgClone.prepend(bbdesigner$headerDivCustom);
                                        bbdesigner$dlgClone.insertAfter(gridObj.element);
                                        bbdesigner$dlgClone.find('.e-dlgfields').css('width', '100%');
                                        var bbdesigner$firstDiv = bbdesigner$dlgClone.find('.e-dlgfields:first').css('width', '92%').css('margin-left', '6%');
                                        bbdesigner$firstDiv.css('margin-top', '4%');
                                        var colName = bbdesigner$dlgClone.find('.e-dlgfields').find('.e-fieldset legend').text();
                                        var bbdesigner$labelDiv = BoldBIDashboard.buildTag('div.e-responsiveLabelDiv', colName, { 'margin-left': '6%' });
                                        bbdesigner$labelDiv.insertAfter(bbdesigner$firstDiv);
                                        var bbdesigner$fieldSet = bbdesigner$dlgClone.find('.e-dlgfields').find('.e-fieldset').find('table').css('width', '61%');
                                        bbdesigner$dlgClone.find('.e-dlgfields').find('.e-fieldset').replaceWith(bbdesigner$fieldSet);
                                        var bbdesigner$fieldDiv = bbdesigner$fieldSet.parent('div').addClass('e-responsiveExcelFilterFieldDiv');
                                        var bbdesigner$ddl = bbdesigner$fieldSet.find('.e-dropdownlist')
                                        bbdesigner$fieldSet.find('.e-dropdownlist').each(function (index, object) {
                                            var ds = bbdesigner$(object).BoldBIDashboardDropDownList('model.dataSource');
                                            var wid = bbdesigner$(window).width() * (40 / 100);
                                            bbdesigner$(object).BoldBIDashboardDropDownList('destroy').BoldBIDashboardDropDownList({ width: wid, popupWidth: wid + "px", dataSource: ds });
                                        });
                                        bbdesigner$fieldSet.find('.e-autocomplete').each(function (index, object) {
                                            var model = bbdesigner$(object).BoldBIDashboardAutocomplete('model.dataSource');
                                            var wid = bbdesigner$(window).width() * (40 / 100);
                                            bbdesigner$(object).BoldBIDashboardAutocomplete('destroy').BoldBIDashboardAutocomplete({ width: wid, dataSource: model.dataSource, fields: model.fields });
                                        });
                                        bbdesigner$fieldSet.find('.e-datepicker').each(function (index, object) {
                                            var ds = bbdesigner$(object).BoldBIDashboardDatePicker('model.dataSource');
                                            var wid = bbdesigner$(window).width() * (40 / 100);
                                            bbdesigner$(object).BoldBIDashboardDatePicker('destroy').BoldBIDashboardDatePicker({ width: wid });
                                        });
                                        var bbdesigner$okClone = bbdesigner$inputOk.clone(), bbdesigner$cancelClone = bbdesigner$inputCancel.clone();
                                        bbdesigner$okClone.BoldBIDashboardButton({
                                            text: 'OK', type: 'button', click: function (sender) {
                                                gridObj._excelFilter._openedFltr = bbdesigner$dlgClone;
                                                gridObj._excelFilter._fltrBtnHandler();
                                                if (bbdesigner$dlgClone.hasClass('e-dlgcustom'))
                                                    bbdesigner$dlgClone.BoldBIDashboardDialog('close');
                                                gridObj._setResponsiveFilterIcon();
                                                gridObj.element.css('display', 'block');
                                            }
                                        });
                                        bbdesigner$cancelClone.BoldBIDashboardButton({ text: 'Cancel', type: 'button', click: function () { bbdesigner$dlgClone.BoldBIDashboardDialog('close'); proxy.element.css('display', 'block') } });
                                        bbdesigner$dlgClone.append(bbdesigner$dlgBtn.clone().append(bbdesigner$okClone).append(bbdesigner$cancelClone))
                                        var bbdesigner$btnContainer = bbdesigner$dlgClone.find('.e-dlgfields .e-btncontainer').remove();
                                        bbdesigner$btnContainer.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
                                        bbdesigner$btnContainer.find('input:first').css('width', '45.6%')
                                        bbdesigner$btnContainer.find('input:last').addClass('e-resposnsiveFilterBtnRight');
                                    }
                                    gridObj.element.css('display', 'none');
                                    bbdesigner$dlgClone.BoldBIDashboardDialog({ enableModal: false, height: height, width: width, position: { X: 0, Y: 0 }, enableResize: false, showHeader: false }).BoldBIDashboardDialog('open');
                                })
                                var bbdesigner$searchdiv = BoldBIDashboard.buildTag('div');
                            }
                        }
                    }
                    else {
                        bbdesigner$(bbdesigner$id).BoldBIDashboardDialog({ position: { X: "", Y: "" } });
						var docWidth = bbdesigner$(document).width(), dlgWidth = document.documentElement.clientWidth < 800 ? 200 : 250, xPos = bbdesigner$target.position().left + 18, yPos = bbdesigner$target.position().top + 2;
                        var filterDlgLargeCss = "e-filterdialoglarge";
                        dlgWidth = this._isExcelFilter ? this._excelFilter._dialogContainer.width() : dlgWidth;
                        if (bbdesigner$target.offset().left + 18 + dlgWidth > docWidth)
                            xPos = xPos - dlgWidth;
                        if (dlgWidth == 200)
                            filterDlgLargeCss = "";
                        if (!BoldBIDashboard.isNullOrUndefined(this._bbdesigner$colType)) {
                            if ((this.model.filterSettings.filterType == "menu" && this._bbdesigner$filterType != "excel") || (this.model.filterSettings.filterType == "excel" && this._bbdesigner$filterType == "menu"))
                                bbdesigner$(bbdesigner$id).BoldBIDashboardDialog({ position: { X: xPos, Y: yPos }, width: dlgWidth, cssClass: filterDlgLargeCss })
                                .BoldBIDashboardDialog("open");
                            else
                                this._excelFilter.openXFDialog({ field: columnName, displayName: currentColumn.headerText, dataSource: this._dataSource(), position: { X: xPos, Y: yPos }, type: this._bbdesigner$colType, format: currentColumn.format, foreignKey: currentColumn.foreignKeyField, foreignKeyType: currentColumn.originalType, foreignKeyValue: currentColumn.foreignKeyValue, foreignDataSource: currentColumn.dataSource, localizedStrings: localXFLabel });
                        }
                    }
                    this._setFilterFieldValues(bbdesigner$id);
                    if (this._bbdesigner$colType == "number" && currentColumn["serverType"] != undefined)
                        bbdesigner$(bbdesigner$id).find(".e-numerictextbox").ejNumericTextbox({ width: "100%",decimalPlaces: 0 });
                    else if(this._bbdesigner$colType == "number")
                        bbdesigner$(bbdesigner$id).find(".e-numerictextbox").ejNumericTextbox({ width: "100%",decimalPlaces: 2 });
                    this._bbdesigner$prevColType = this._bbdesigner$colType;
                    this._bbdesigner$fDlgIsOpen = true;
					this._trigger("filterClick", e);
                }
            }
        },
        _responsiveFilterClose: function () {
            this.element.css('display', 'block');
        },
        _clickHandler: function (e) {
            var bbdesigner$target = bbdesigner$(e.target),tempChooser = bbdesigner$("[id$='ccDiv'].e-grid.e-columnChooser"),fieldName, bbdesigner$form = bbdesigner$("#" + this._id + "EditForm"), index, columnIndex, rowIndex;
			if(tempChooser.length) {
                var  flag = true;
                for(var i = 0; i < tempChooser.length; i++){
                    if(bbdesigner$target.parents(".e-ccButton").length|| bbdesigner$target.hasClass('e-ccButton')) flag = bbdesigner$(e.target).closest(".e-grid").attr("id")+"ccDiv" != tempChooser[i].id;
                    var obj = bbdesigner$("#"+tempChooser[i].id).BoldBIDashboardDialog("instance");
                    if(obj.isOpened() && flag) {
                        obj.close();
                        bbdesigner$(".e-columnChoosertail").remove();
                        bbdesigner$(".e-columnChoosertailAlt").remove();
                    }
                }
            }
            if (bbdesigner$target.hasClass("e-button") && (bbdesigner$target.hasClass("e-disable") || bbdesigner$target.prop("disabled"))) return;
            if (bbdesigner$target.closest(".e-grid").attr("id") !== this._id) return;
            if (bbdesigner$target.closest("#" + this._id + "EditForm").length)
                return;
            if (bbdesigner$target.hasClass("e-rowcell") || bbdesigner$target.closest("td").is(".e-rowcell") || (bbdesigner$target.hasClass("e-headercell") && ((e.clientY - bbdesigner$target.offset().top) < (bbdesigner$target.height() / 4)))) {
                if (this._bulkEditCellDetails.cancelSave) {
                    this._bulkEditCellDetails.cancelSave = false;
                    return;
                }
                if (this.model.editSettings.editMode == "batch" && (bbdesigner$.isFunction(bbdesigner$.validator) && bbdesigner$form.length && bbdesigner$form.validate().errorList.length > 0))
                    return;
                this.model.editSettings.editMode == "batch" && this.element.focus();
                index = bbdesigner$target.closest("tr").hasClass("e-insertedrow") ? this.model.groupSettings.groupedColumns.length : 0;
                var tempIndex = bbdesigner$target.closest(".e-rowcell").index() != -1 ? bbdesigner$target.closest(".e-rowcell").index() : bbdesigner$target.closest(".e-headercell").index() - this.model.groupSettings.groupedColumns.length;
                columnIndex = bbdesigner$target.hasClass("e-rowcell") ? bbdesigner$target.index() - index : tempIndex - index;
                columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? columnIndex - 1 : columnIndex;
                if (this.model.scrollSettings.frozenColumns && (bbdesigner$target.closest(".e-movableheaderdiv").length || bbdesigner$target.closest(".e-movablecontentdiv").length))
                    columnIndex = columnIndex + this.model.scrollSettings.frozenColumns;
                rowIndex = this.getIndexByRow(bbdesigner$target.closest("tr"));
                this._bulkEditCellDetails.columnIndex = columnIndex;
                this._bulkEditCellDetails.rowIndex = rowIndex;
                if (this.model.allowSelection && BoldBIDashboard.gridFeatures.selection) {
                    if (this.model.selectionType == "multiple") {
                        if (e.ctrlKey || this._enableSelectMultiTouch) {
                            this.multiSelectCtrlRequest = true;
                        }
                        if (e.shiftKey) {
                            this.multiSelectShiftRequest = true;
                            if (this._allowcellSelection && rowIndex > -1)
                                this.selectCells([[rowIndex, [columnIndex]]]);
                            if (this._allowrowSelection && rowIndex > -1)
                                this.selectRows(this._previousIndex, this.getIndexByRow(bbdesigner$target.closest('tr')), bbdesigner$target, e);
                                this._selectedRow(this.getIndexByRow(bbdesigner$target.closest('tr')));
                            if (this._allowcolumnSelection && bbdesigner$target.hasClass("e-headercell") && !bbdesigner$target.hasClass("e-stackedHeaderCell") && ((e.clientY - bbdesigner$target.offset().top) < (bbdesigner$target.height() / 4)))
                                this.selectColumns(this._previousColumnIndex, columnIndex);
                        }
                        if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-rowselect").hasClass("e-spanclicked") && this.model.selectionSettings.selectionMode == "row")
                            this._customPop.show();
                        if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-sortdirect").is(":visible") || !this._customPop.find(".e-rowselect").hasClass("e-spanclicked")) && this.model.selectionType == "multiple") {
                            this._customPop.removeAttr("style");
                            var offset = bbdesigner$target.offset();
                            this._customPop.offset({ top: 0, left: 0 }).offset({ left: offset.left, top: offset.top - this.getRowHeight() }).find(".e-sortdirect").hide().end()
                                .find(".e-rowselect").show().end().show();
                        }
                    }
                    if (!this.multiSelectShiftRequest) {
                        if (this._allowcellSelection && rowIndex > -1) {
                            var cellProto = this._checkCellSelectionByRow(rowIndex, columnIndex);
                            if ((this.model.selectionSettings.enableToggle && this.selectedRowCellIndexes.length == 1 && this.selectedRowCellIndexes[0].cellIndex.length==1 || (e.ctrlKey && this.model.selectionType == 'multiple')) && (cellProto != -1 && this.selectedRowCellIndexes.length > 0 && this.selectedRowCellIndexes[0].cellIndex.length > 0))
                                this.clearCellSelection(cellProto.rowIndex, columnIndex);
                            else
                                this.selectCells([[rowIndex, [columnIndex]]]);
                        }
                        if (this._allowrowSelection && rowIndex > -1) {
							var selectedIndex = this.getIndexByRow(bbdesigner$target.closest('tr'));
							if(this.model.scrollSettings.enableVirtualization){
								var remain = rowIndex % this._virtualRowCount, viewIndex;							
								viewIndex = parseInt(bbdesigner$(bbdesigner$target).closest("tr").attr("name"), 32);																												
								selectedIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);	
							}
                            if (this.model.selectionSettings.enableToggle && this.getSelectedRecords().length == 1 && bbdesigner$.inArray(this.getIndexByRow(bbdesigner$target.closest('tr')), this.selectedRowsIndexes) != -1)
                                this.clearSelection(selectedIndex);
                            else
                                this.selectRows(this.getIndexByRow(bbdesigner$target.closest('tr')), null, bbdesigner$target, e);
                        }
                        if (this._allowcolumnSelection && bbdesigner$target.hasClass("e-headercell") && !bbdesigner$target.hasClass("e-stackedHeaderCell") && ((e.clientY - bbdesigner$target.offset().top) < (bbdesigner$target.height() / 4))) {
                            if (this.model.selectionSettings.enableToggle && this.selectedColumnIndexes.length == 1 && bbdesigner$.inArray(columnIndex, this.selectedColumnIndexes) != -1)
                                this.clearColumnSelection(columnIndex);
                            else
                                this.selectColumns(columnIndex);
                        }
                        this.multiSelectCtrlRequest = false;
                    }
                    this.multiSelectShiftRequest = false;
                }

                if (this._bulkEditCellDetails.columnIndex >= 0)
                    fieldName = this.model.columns[this._bulkEditCellDetails.columnIndex]["field"];
                if (bbdesigner$target.closest(".e-rowcell").length && fieldName) {
                    this._tabKey = false;
                    this.model.editSettings.allowEditing && this.model.editSettings.editMode == BoldBIDashboard.Grid.EditMode.Batch && this.editCell(bbdesigner$.inArray(bbdesigner$target.closest("tr").get(0), this.getRows()), fieldName);
                }
            }
            if (bbdesigner$target.hasClass("e-rowselect") || bbdesigner$target.hasClass("e-sortdirect")) {
                if (!bbdesigner$target.hasClass("e-spanclicked")) {
                    bbdesigner$target.addClass("e-spanclicked");
                    if (bbdesigner$target.hasClass("e-rowselect"))
                        this._enableSelectMultiTouch = true;
                    if (bbdesigner$target.hasClass("e-sortdirect"))
                        this._enableSortMultiTouch = true;
                } else {
                    bbdesigner$target.removeClass("e-spanclicked");
                    if (bbdesigner$target.hasClass("e-rowselect"))
                        this._enableSelectMultiTouch = false;
                    if (bbdesigner$target.hasClass("e-sortdirect"))
                        this._enableSortMultiTouch = false;
                    this._customPop.hide();
                }
            }
            if (BoldBIDashboard.gridFeatures.common) {
                this.expandCollapse(bbdesigner$target);
            }
            if (bbdesigner$target.is(".e-filtericon") && bbdesigner$target.closest(".e-detailrow").length != 0)
                e.preventDefault();
            if (this._bbdesigner$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) && !bbdesigner$target.is(".e-filtericon") && bbdesigner$target.closest(".e-dlgcontainer").length != 1)
                this._closeFDialog();
            if (this.model.allowSearching && this._searchBar != null) {
                if (bbdesigner$target.is(this._searchBar.find(".e-cancel")))
                    this._searchBar.find("input").val("");
                else {
                    if (e.target.id == this._id + "_searchbar")
                        this._searchBar.find(".e-cancel").removeClass("e-hide");
                    else if (!this._searchBar.find(".e-cancel").hasClass("e-hide"))
                        this._searchBar.find(".e-cancel").addClass("e-hide");
                }
            }
        },
        _checkCellSelectionByRow: function (rowIndex, columnIndex) {
            for (var i = 0; i < this.selectedRowCellIndexes.length; i++) {
                if (this.selectedRowCellIndexes[i].rowIndex == rowIndex)
                    break;
            }
            if (i != this.selectedRowCellIndexes.length && bbdesigner$.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex) != -1)
                return this.selectedRowCellIndexes[i];
            return -1;
        },
        
        _destroy: function () {
            /// <summary>This function is  used to destroy the Grid Object</summary>
            this.element.off();
            this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader")
                .add(this.getContent().find(".e-content,.e-movablecontent")).unbind('scroll');
            var editForm = bbdesigner$("#" + this._id + "EditForm");
            if (editForm.length) {
                var bbdesigner$formEle = editForm.find('.e-field'), bbdesigner$element;
                for (var i = 0; i < bbdesigner$formEle.length; i++) {
                    bbdesigner$element = bbdesigner$(bbdesigner$formEle[i]);
                    if (bbdesigner$element.hasClass('e-datetimepicker'))
                        bbdesigner$element.BoldBIDashboardDateTimePicker("destroy");
                    else if (bbdesigner$element.hasClass('e-datepicker'))
                        bbdesigner$element.BoldBIDashboardDatePicker("destroy");
                    else if (bbdesigner$element.hasClass('e-dropdownlist'))
                        bbdesigner$element.BoldBIDashboardDropDownList("destroy");
                }
                editForm.remove();
            }
            if (this._confirmDialog)
                this._confirmDialog.BoldBIDashboardDialog("destroy");
            this.element.find('.e-dropdownlist').BoldBIDashboardDropDownList('model.dataSource', []);
            if (this.model.showColumnChooser) {
                bbdesigner$("#" + this._id + "ccDiv").BoldBIDashboardDialog("destroy");
                bbdesigner$("#" + this._id + "ccDiv").remove();
                bbdesigner$("#" + this._id + "_ccTail").remove();
                bbdesigner$("#" + this._id + "_ccTailAlt").remove();
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "excel")
                this._excelFilter.resetExcelFilter()
            if (this.model.allowReordering)
                bbdesigner$(".e-columndropindicator").remove();
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "menu") {
                var proxy = this, bbdesigner$colType;
                bbdesigner$.each(this.model.columns, function (indx, col) {
                    bbdesigner$colType = col.type;
                    bbdesigner$("#" + proxy._id + bbdesigner$colType + "_ddinput_popup_wrapper").remove();
                    if (bbdesigner$colType == "string")
                        bbdesigner$("#" + proxy._id + "_stringDlg").find('.e-autocomplete').BoldBIDashboardAutocomplete("destroy");
                    else if (bbdesigner$colType == "date")
                        bbdesigner$("#" + proxy._id + "_dateDlg").find('.e-datepicker').BoldBIDashboardDatePicker("destroy");
                    else if (bbdesigner$colType == "datetime")
                        bbdesigner$("#" + proxy._id + "_datetimeDlg").find('.e-datetimepicker').BoldBIDashboardDateTimePicker("destroy");
                    else if (bbdesigner$colType == "number")
                        bbdesigner$("#" + proxy._id + "_numberDlg").find('.e-numerictextbox').ejNumericTextbox("destroy");
                });
            }
            if (this._bbdesigner$onresize)
                bbdesigner$(window).unbind("resize", this._bbdesigner$onresize);
            this.element.empty().removeClass("e-grid " + this.model.cssClass);
            this.element.BoldBIDashboardWaitingPopup("destroy");
            if (this.model.contextMenuSettings.enableContextMenu) {
                bbdesigner$("#" + this._id + "_Context").BoldBIDashboardMenu('destroy');
                bbdesigner$("#" + this._id + "_Context").remove();
            }
        },
        _getLocalizedLabels: function (property) {
            return BoldBIDashboard.getLocalizedConstants(this.sfType, this.model.locale);
        },
    });
    if (BoldBIDashboard.gridFeatures.common)
        bbdesigner$.extend(BoldBIDashboard.Grid.prototype, BoldBIDashboard.gridFeatures.common);
    if (BoldBIDashboard.gridFeatures.edit)
        bbdesigner$.extend(BoldBIDashboard.Grid.prototype, BoldBIDashboard.gridFeatures.edit);
    if (BoldBIDashboard.gridFeatures.filter)
        bbdesigner$.extend(BoldBIDashboard.Grid.prototype, BoldBIDashboard.gridFeatures.filter);
    if (BoldBIDashboard.gridFeatures.group)
        bbdesigner$.extend(BoldBIDashboard.Grid.prototype, BoldBIDashboard.gridFeatures.group);
    if (BoldBIDashboard.gridFeatures.selection)
        bbdesigner$.extend(BoldBIDashboard.Grid.prototype, BoldBIDashboard.gridFeatures.selection);
    if (BoldBIDashboard.gridFeatures.sort)
        bbdesigner$.extend(BoldBIDashboard.Grid.prototype, BoldBIDashboard.gridFeatures.sort);
    if (BoldBIDashboard.gridFeatures.dragAndDrop)
        bbdesigner$.extend(BoldBIDashboard.Grid.prototype, BoldBIDashboard.gridFeatures.dragAndDrop);

    BoldBIDashboard.Grid.Locale = BoldBIDashboard.Grid.Locale || {};

    BoldBIDashboard.Grid.Locale["default"] = BoldBIDashboard.Grid.Locale["en-US"] = {
        EmptyRecord: "No records to display",
        GroupDropArea: "Drag a column header here to group its column",
        DeleteOperationAlert: "No records selected for delete operation",
        EditOperationAlert: "No records selected for edit operation",
        SaveButton: "Save",
        OkButton: "OK",
        CancelButton: "Cancel",
        EditFormTitle: "Details of ",
        AddFormTitle: "Add New Record",
        Notactionkeyalert: "This Key-Combination is not available",
        Keyconfigalerttext: "This Key-Combination has already been assigned to ",
        GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} item {{else}} items {{/if}} ",
        BatchSaveConfirm: "Are you sure you want to save changes?",
        BatchSaveLostChanges: "Unsaved changes will be lost. Are you sure you want to continue?",
        ConfirmDelete: "Are you sure you want to Delete Record?",
        CancelEdit: "Are you sure you want to Cancel the changes?",
        PagerInfo: "{0} of {1} pages ({2} items)",
        FrozenColumnsViewAlert: "Frozen columns should be in grid view area",
        FrozenColumnsScrollAlert: "Enable allowScrolling while using frozen Columns",
        FrozenNotSupportedException: "Frozen Columns and Rows are not supported for Grouping, Row Template, Detail Template, Hierarchy Grid and Batch Editing",
        Add: "Add",
        Edit: "Edit",
        Delete: "Delete",
        Update: "Update",
        Cancel: "Cancel",
        Done: "Done",
        Columns: "Columns",
        SelectAll: "(Select All)",
        PrintGrid: "Print",
        ExcelExport: "Excel Export",
        WordExport: "Word Export",
        PdfExport: "PDF Export",
        StringMenuOptions: [{ text: "StartsWith", value: "StartsWith" }, { text: "EndsWith", value: "EndsWith" }, { text: "Contains", value: "Contains" }, { text: "Equal", value: "In" }, { text: "NotEqual", value: "NotContains" }],
        NumberMenuOptions: [{ text: "LessThan", value: "LessThan" }, { text: "GreaterThan", value: "GreaterThan" }, { text: "LessThanOrEqual", value: "LessThanOrEqual" }, { text: "GreaterThanOrEqual", value: "GreaterThanOrEqual" }, { text: "Equal", value: "Equal" }, { text: "NotEqual", value: "NotEqual" }],
        PredicateAnd: "AND",
        PredicateOr: "OR",
        Filter: "Filter",
        FilterMenuCaption: "Filter Value",
        FilterbarTitle: "'s filter bar cell",
        MatchCase: "Match Case",
        Clear: "Clear",
        ResponsiveFilter: "Filter",
        ResponsiveSorting: "Sort",
        Search: "Search",
        DatePickerWaterMark: "Select date",
        EmptyDataSource: "DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid",
        ForeignKeyAlert: "The updated value should be a valid foreign key value",
        True: "true",
        False: "false",
        UnGroup: "Click here to ungroup",
        AddRecord: "Add Record",
        EditRecord: "Edit Record",
        DeleteRecord: "Delete Record",
        Save: "Save",
        Grouping: "Group",
        Ungrouping: "Ungroup",
        SortInAscendingOrder: "Sort In Ascending Order",
        SortInDescendingOrder: "Sort In Descending Order",
        NextPage: "Next Page",
        PreviousPage: "Previous Page",
        FirstPage: "First Page",
        LastPage: "Last Page",
        EmptyRowValidationMessage:"Atleast one field must be updated",
		NoResult: "No Matches Found"
    };
    BoldBIDashboard.Grid.Actions = {
        /** Used to specify paging action in grid   */
        Paging: "paging",
        /** Used to specify sorting action in grid   */
        Sorting: "sorting",
        /** Used to specify filtering action in grid   */
        Filtering: "filtering",
        /** Used to specify begin edit action in grid   */
        BeginEdit: "beginedit",
        /** Used to specify saving action in grid   */
        Save: "save",
        /** Used to specify adding action in grid   */
        Add: "add",
        /** Used to specify deleting action in grid   */
        Delete: "delete",
        /** Used to specify cancelling action in grid   */
        Cancel: "cancel",
        /** Used to specify grouping action in grid   */
        Grouping: "grouping",
        /** Used to specify un-grouping action in grid   */
        Ungrouping: "ungrouping",
        /** Used to specify refresh action in grid   */
        Refresh: "refresh",
        /** Used to specify reordering action in grid   */
        Reorder: "reorder",
        /** Used to specify searching action in grid   */
        Search: "searching",
        /** Used to specify batch save action in grid   */
        BatchSave: "batchsave",
        /** Used to specify virtual scroll action in grid   */
        VirtualScroll: "virtualscroll"
    };

    BoldBIDashboard.Grid.SummaryType = {
        /**  Creates grid with summary type as Average */
        Average: "average",
        /**  Creates grid with summary type as Minimum */
        Minimum: "minimum",
        /**  Creates grid with summary type as Maximum */
        Maximum: "maximum",
        /**  Creates grid with summary type as Count */
        Count: "count",
        /**  Creates grid with summary type as Sum */
        Sum: "sum",
        /**  Creates grid with summary type as TrueCount */
        TrueCount: "truecount",
        /**  Creates grid with summary type as FalseCount */
        FalseCount: "falsecount",
        /**  Creates grid with summary type as Custom */
        Custom: "custom"
    };

    BoldBIDashboard.Grid.EditMode = {
        /**  Creates grid with editMode as Normal */
        Normal: "normal",
        /**  Creates grid with editMode as Dialog */
        Dialog: "dialog",
        /**  Creates grid with editMode as DialogTemplate */
        DialogTemplate: "dialogtemplate",
        /**  Creates grid with editMode as Batch */
        Batch: "batch",
        /**  Creates grid with editMode as ExternalForm */
        ExternalForm: "externalform",
        /**  Creates grid with editMode as ExternalFormTemplate */
        ExternalFormTemplate: "externalformtemplate",
        /**  Creates grid with editMode as InlineForm */
        InlineForm: "inlineform",
        /**  Creates grid with editMode as InlineTemplateForm */
        InlineTemplateForm: "inlineformtemplate"
    };

    BoldBIDashboard.Grid.PrintMode = {
        /**  print all pages in grid */
        AllPages: "allpages",
        /**   print current pages in grid */
        CurrentPage: "currentpage",
    };

    BoldBIDashboard.Grid.Rowposition = {
        /** Add new row in the top of the grid */
        Top: "top",
        /** Add new row in the bottom of the grid */
        Bottom: "bottom",
    };

    BoldBIDashboard.Grid.FormPosition = {
        /**  Creates grid with formPosition as BottomLeft */
        BottomLeft: "bottomleft",
        /**  Creates grid with formPosition as TopRight */
        TopRight: "topright"
    };

    BoldBIDashboard.Grid.ClipMode = {
        /** Render an ellipsis ("...") to represent clipped text **/
        Ellipsis: "ellipsis",
        /** Clips the text **/
        Clip: "clip",
        /** Render an ellipsis ("...") to represent clipped text and tooltip would be shown **/
        EllipsisWithTooltip: "ellipsiswithtooltip"
    };

    BoldBIDashboard.Grid.EditingType = {
        /**  Allows to set edit type as string edit type */
        String: "stringedit",
        /**  Allows to set edit type as boolean edit type */
        Boolean: "booleanedit",
        /**  Allows to set edit type as numeric edit type */
        Numeric: "numericedit",
        /**  Allows to set edit type as drop down edit type */
        Dropdown: "dropdownedit",
        /**  Allows to set edit type as date picker edit type */
        DatePicker: "datepicker",
        /**  Allows to set edit type as date time picker edit type */
        DateTimePicker: "datetimepicker",
    };

    BoldBIDashboard.Grid.UnboundType = {
        /** Used to specify unbound type as Edit   */
        Edit: "edit",
        /** Used to specify unbound type as Save   */
        Save: "save",
        /** Used to specify unbound type as Delete   */
        Delete: "delete",
        /** Used to specify unbound type as Cancel   */
        Cancel: "cancel"
    };

    BoldBIDashboard.Grid.ToolBarItems = {
        /** Used to add toolbar item for adding records    */
        Add: "add",
        /** Used to add toolbar item for editing records    */
        Edit: "edit",
        /** Used to add toolbar item for deleting records    */
        Delete: "delete",
        /** Used to add toolbar item for updating records    */
        Update: "update",
        /** Used to add toolbar item for cancelling records    */
        Cancel: "cancel",
        /** Used to add toolbar item for searching records    */
        Search: "search",
        /** Used to add toolbar item for printing grid    */
        PrintGrid: "printGrid",
        /** Used to add toolbar item for exproting grid to excel    */
        ExcelExport: "excelExport",
        /** Used to add toolbar item for exporting grid to word    */
        WordExport: "wordExport",
        /** Used to add toolbar item for exporting grid to pdf    */
        PdfExport: "pdfExport"
    };

    BoldBIDashboard.Grid.FilterType = {
        /**  Creates grid with filtering type as Menu */
        Menu: "menu",
        /**  Creates grid with filtering type as FilterBar */
        FilterBar: "filterbar",
        /** Creates grid with filtering type as Excel */
        Excel: "excel"
    };

    BoldBIDashboard.Grid.FilterBarMode = {
        /** Used to set filter bar mode as Immediate mode */
        Immediate: "immediate",
        /** Used to set filter bar mode as OnEnter mode */
        OnEnter: "onenter"
    };

    BoldBIDashboard.Grid.SelectionType = {
        /**  Support for Single selection only in grid */
        Single: "single",
        /**  Support for multiple selections in grid */
        Multiple: "multiple"
    };
    BoldBIDashboard.Grid.ColumnLayout = {
         /**  Support for auto width in grid */
        Auto: "auto",
        /**  Support for fixed column width in grid */
        Fixed: "fixed"
    };
    BoldBIDashboard.Grid.GridLines = {
        /**  Support for Show both the vertical and horizontal line in grid  */
        Both: "both",
        /**  Support for Hide both the vertical and horizontal line in grid  */
        None: "none",
        /**  Support for Shows the horizontal line only in grid */
        Horizontal: "horizontal",
        /**  Support for Shows the vertical line only in grid  */
        Vertical: "vertical",
    };

    BoldBIDashboard.Grid.VirtualScrollMode = {
        /** Used to set the Normal mode virtual paging*/
        Normal: "normal",
        /** Used to set the Continuous mode virtual paging*/
        Continuous: "continuous"
    };

    BoldBIDashboard.Grid.SelectionMode = {
        /**  Support for Row selection in grid */
        Row: "row",
        /**  Support for Cell selection in grid */
        Cell: "cell",
        /**  Support for Column selection in grid */
        Column: "column"
    };

    BoldBIDashboard.Grid.WrapMode = {
        /**  Support for text wrap with both header and content in grid */
        Both: "both",
        /**  Support for text wrap with content alone in grid */
        Content: "content",
        /**  Support for text wrap with header alone in grid */
        Header: "header"
    };

    BoldBIDashboard.Grid.exportAll = function (exportAction, gridIds) {
        BoldBIDashboard.Grid.prototype["export"](exportAction, null, true, gridIds);
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
(function (bbdesigner$, BoldBIDashboard, undefined) {
    BoldBIDashboard.gridFeatures = BoldBIDashboard.gridFeatures || {};
    BoldBIDashboard.gridFeatures.gridResize = function (instance) {
        this.bbdesigner$headerTable = instance.getHeaderTable();
        this.gridInstance = instance;
        this._colMinWidth = 15;
        this._bbdesigner$visualElement = bbdesigner$();
        this._currentCell = -1;
        this._allowStart = false;
        this._oldWidth = null;
        this._orgX = null;
        this._orgY = null;
        this._extra = null;
        this._expand = false;
        this._target = null;
        this._cellIndex = -1;
    }

    BoldBIDashboard.gridFeatures.gridResize.prototype = {
        _mouseHover: function (e) {
            if (this._bbdesigner$visualElement.is(":visible"))
                return;
            this._allowStart = false;
            if (bbdesigner$(e.target).is(".e-headercelldiv"))
                e.target = e.target.parentNode;
            var bbdesigner$target = bbdesigner$(e.target);
			if (bbdesigner$(e.target).hasClass("e-filtericon") && (bbdesigner$(e.target).css("cursor") == "col-resize" || bbdesigner$(e.target).closest("tr").css("cursor") == "col-resize")) {
                bbdesigner$(e.target).css("cursor", "pointer");
                bbdesigner$(e.target).closest("tr").css("cursor", "pointer");
            }
            if (bbdesigner$target.hasClass("e-headercell")) {
                var _resizableCell = e.target;
                var location = _resizableCell.getBoundingClientRect(), _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                    var _nlx = this.gridInstance.getHeaderContent().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                else
                    var _nlx = this.gridInstance.getHeaderTable().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 5)) || ((_x <= (location.left + 3)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
                    if (_x > location.left + 3)
                        var tempTarget = bbdesigner$(e.target).find(".e-headercelldiv");
                    else
                        var tempTarget = bbdesigner$(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
                    if ((this.gridInstance.model.enableRTL && _x >= (location.left + 10)) || (_x >= ((this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - window.pageXOffset))) {
                        if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && bbdesigner$.inArray(bbdesigner$(tempTarget).attr("ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {
                            this.gridInstance.model.showStackedHeader && bbdesigner$(bbdesigner$target.parents('thead')).find('tr').css("cursor", "col-resize");
                            !this.gridInstance.model.showStackedHeader && bbdesigner$target.parent().css("cursor", "col-resize");
                            if (bbdesigner$(e.target).hasClass('e-stackedHeaderCell'))
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
                            else
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell").index(_resizableCell);
                            this._allowStart = true;
                        }
                        else {
                            bbdesigner$target.parent().css("cursor", "pointer");
                            this._currentCell = -1;
                        }
                    }
                }
                else {
                    if (this.gridInstance.model.scrollSettings.frozenColumns)
                        this.gridInstance.element.find(".e-columnheader").css("cursor", "pointer");
                    else
                        bbdesigner$target.parent().css("cursor", "pointer");
                    this._currentCell = -1;
                }
            }
        },
        _start: function (_x, _y) {
            var _myrow = this.gridInstance.getHeaderTable().find(".e-columnheader"), _top;
            var _cells, _mycel;
            if (bbdesigner$(this._target).hasClass('e-stackedHeaderCell'))
                _cells = _myrow.find(".e-headercell").not(".e-hide");
            else
                _cells = _myrow.find(".e-headercell").not(".e-stackedHeaderCell,.e-hide");
            if (this._currentCell != -1 && this._currentCell < _cells.length)
                _mycel = _cells[this._currentCell];
            if (typeof (_mycel) == 'undefined')
                return;
            var _j = _mycel.getBoundingClientRect();
            _top = this._tableY = _j.top + parseInt(navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollTop : document.documentElement.scrollTop);
            if (this._allowStart) {
                var vElement = this._bbdesigner$visualElement = bbdesigner$(document.createElement('div'));
                _height = this.gridInstance.element.find(".e-gridcontent").first().height() + this.gridInstance.element.find(".e-gridheader").height();
                if (this.gridInstance.model.showStackedHeader && this.gridInstance.model.stackedHeaderRows.length > 0) {
                    var headerRow = this.gridInstance.getHeaderTable().find('tr.e-columnheader')
                    var lenght = headerRow.length;
                    var currentIndex = bbdesigner$(this._target).parent('tr')[0].rowIndex;
                    for (var i = 0; i < currentIndex; i++) {
                        _height = _height - bbdesigner$(headerRow[i]).height();
                    }
                    // _height = _height - bbdesigner$(".e-stackedHeaderRow").height();
                }
                vElement.addClass("e-reSizeColbg").appendTo(this.gridInstance.element).attr("unselectable", "on").css("visibility", "hidden");
                this.gridInstance._resizeTimeOut = setTimeout(function() {
                    vElement.css({ visibility: "visible", height: _height + 'px', cursor: 'col-resize', left: _x, top: _top, position: 'fixed' });
                }, 100);
                this._oldWidth = _mycel.offsetWidth;
                this._orgX = _x;
                this._orgY = _y;
                this._extra = _x - this._orgX;
                this._expand = true;
            }
            else {
                this._currentCell = -1;
            }
        },
        _mouseMove: function (e) {
            if (this._expand) {
                var _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                _x += document.documentElement.scrollLeft;
                e.preventDefault();
                this._moveVisual(_x);
            }
            else
                this._mouseHover(e);
        },
        _getCellIndex: function (e) {
            var bbdesigner$target = bbdesigner$(e._target);
            var targetCell = e._target;
            var location = targetCell.getBoundingClientRect();
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            if (this._orgX < location.left + 5 + scrollLeft)
                targetCell = bbdesigner$(targetCell).prevAll(":visible:first")[0];
            var hCellIndex = targetCell.cellIndex;
            var cellIndex = hCellIndex;
            if (e.gridInstance.model.groupSettings.groupedColumns.length) {
                cellIndex = hCellIndex - e.gridInstance.model.groupSettings.groupedColumns.length;
            }
            return cellIndex;
        },
        _reSize: function (_x, _y) {
            // Function used for Resizing the column
            var proxy = this;
            var resized = false, bbdesigner$content;
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                this._initialTableWidth = this.gridInstance.getHeaderTable().first().parent().width() + this.gridInstance.getHeaderTable().last().parent().width();
            else
                this._initialTableWidth = this.gridInstance.getHeaderTable().parent().width();
            !this.gridInstance.model.enableRTL && this._getResizableCell();
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0)
                var _rowobj = this.gridInstance.getHeaderTable().find('thead');
            else
                var _rowobj = bbdesigner$(this._target).parents('thead');
            if (this._currentCell != -1 && this._expand) {
                this._expand = false;
                var _childTH = bbdesigner$(this._target).hasClass('e-stackedHeaderCell') ? _rowobj.find(".e-headercell:not(.e-detailheadercell)").filter(":visible") : _rowobj.find(".e-headercell:not(.e-detailheadercell,.e-stackedHeaderCell)").filter(":visible");
                var _outerCell = _childTH[this._currentCell];
                var _oldWidth = _outerCell.offsetWidth;
                var _extra = _x - this._orgX;
                //Check whether the column minimum width reached
                if (parseInt(_extra) + parseInt(_oldWidth) > this._colMinWidth) {
                    if (_extra != 0)
                        _rowobj.css("cursor", 'default');
                    this._resizeColumnUsingDiff(_oldWidth, _extra);
                    bbdesigner$content = this.gridInstance.element.find(".e-gridcontent").first();
                    var scrollContent = bbdesigner$content.find("div").hasClass("e-content");                    
                    var browser = this.gridInstance.getBrowserDetails();
                    if (browser.browser == "msie" && this.gridInstance.model.allowScrolling) {
                        var oldWidth = this.gridInstance.getContentTable().width(), newwidth = this.gridInstance._calculateWidth();
                        if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0) {
                            this.gridInstance.getHeaderTable().last().width(newwidth - this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width());
                            this.gridInstance.getContentTable().last().width(newwidth - this.gridInstance.getContent().find(".e-frozencontentdiv").width());
                            this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().last().width(newwidth - this.gridInstance.getFooterContent().find(".e-frozenfootertdiv").width());
                        }
                        else {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getHeaderTable().width(newwidth);
                                this.gridInstance.getContentTable().width(newwidth);
                                this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().width(newwidth);
                            }
                        }
                        if (parseInt(browser.version, 10) > 8 && this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getContentTable().width(newwidth);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", (20 / bbdesigner$content.find("table").first().width()) * 100 + "%");
                            }
                            else {
                                this.gridInstance.getContentTable().css("width", "100%");
                                this.gridInstance._groupingAction(true);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", ((this.gridInstance.getHeaderTable().find("colgroup").find("col").first().width() / bbdesigner$content.find("table").first().width()) * 100).toFixed(2) + "%");
                            }
                        }
                        this.gridInstance.getHeaderTable().parent().scrollLeft(bbdesigner$content.find(".e-content").scrollLeft() - 1);
                    }
                    this.gridInstance._colgroupRefresh();
                    if (this.gridInstance.model.allowTextWrap)
                        this.gridInstance.rowHeightRefresh();
                    if (this.gridInstance.model.groupSettings.groupedColumns.length && !this.gridInstance.model.isEdit)
                        this.gridInstance._recalculateIndentWidth();
                    if (!(browser.browser == "msie") && this.gridInstance.model.allowScrolling && this.gridInstance.model.scrollSettings.frozenColumns == 0) {
                        this.gridInstance.getHeaderTable().width("100%");
                        this.gridInstance.getContentTable().width("100%");
                        var tableWidth = this.gridInstance._calculateWidth();
                        if (tableWidth <= this.gridInstance.getContentTable().width() || this.gridInstance.getHeaderTable().width() > this.gridInstance.getContentTable().width()) {
                            this.gridInstance.getHeaderTable().width(tableWidth);
                            this.gridInstance.getContentTable().width(tableWidth);
                        }
                    }
                    if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'default') {
                        var cellIndex = this._currentCell;
                        var target = bbdesigner$(this._target), columnIndex = [], col = [];
                        var newWidth = _oldWidth + _extra;
                        var args = {};
                        if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                            var rowindex = target.parent(".e-stackedHeaderRow").index();
                            var stackedHeaderCell = target.parent(".e-stackedHeaderRow").children()[this._cellIndex].cellIndex;
                            var stackedHeaderColumns = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns[stackedHeaderCell].column;
                            var columns = stackedHeaderColumns;
                            if (!(stackedHeaderColumns instanceof Array))
                                columns = stackedHeaderColumns.split(",");
                            for (var i = 0 ; i < columns.length; i++) {
                                var index = this.gridInstance.getColumnIndexByField(columns[i]);
                                columnIndex.push(index)
                                col.push(this.gridInstance.model.columns[index]);
                            }
                            args = { columnIndex: columnIndex, column: col, oldWidth: _oldWidth, newWidth: newWidth };
                        }
                        else
                        args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], oldWidth: _oldWidth, newWidth: newWidth };
                        this.gridInstance._trigger("resized", args);
                    }
                    if (this.gridInstance.model.allowScrolling) {
                       this.gridInstance.getScrollObject().refresh(this.gridInstance.model.scrollSettings.frozenColumns > 0);
                        if (!scrollContent && bbdesigner$content.find("div").hasClass("e-content"))
                            this.gridInstance.refreshScrollerEvent();
                        this.gridInstance._isHscrollcss();
                    }
                }

            }

            this._target = null;
            this._bbdesigner$visualElement.remove();
            this._expand = false;
            this._currentCell = -1;
            this._allowStart = false;

        },
        _getFrozenResizeWidth: function () {
            var bbdesigner$frozenColumnsCol = this.gridInstance.getHeaderTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0), width = 0;
            for (var i = 0; i < bbdesigner$frozenColumnsCol.length; i++) {
                if (bbdesigner$frozenColumnsCol.eq(i).css("display") != "none")
                    width += parseInt(bbdesigner$frozenColumnsCol[i].style.width.replace("px", ""));
            }
            return width;
        },
        _diaplayFinder: function () {
            return bbdesigner$(this).css('display') != 'none';
        },
        _resizeColumnUsingDiff: function (_oldWidth, _extra) {
            var proxy = this, _extraVal;			
            this._currntCe = this._currentCell;
            
            var bbdesigner$headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
            var bbdesigner$ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
            if (!BoldBIDashboard.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                this.gridInstance._detailColsRefresh();
                bbdesigner$headerCols = this.gridInstance._bbdesigner$headerCols;
                bbdesigner$ContentCols = this.gridInstance._bbdesigner$contentCols;
            }
            var bbdesigner$headerCol = bbdesigner$headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !BoldBIDashboard.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                    , bbdesigner$ContentCol, bbdesigner$footerCol, bbdesigner$frozenCols = bbdesigner$headerCols.slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0);
            var colWidth = bbdesigner$headerCol[0].style.width, isPercent = colWidth.indexOf("%") != -1;
            var _inlineWidth = (!colWidth || isPercent)? bbdesigner$(this._target).outerWidth() : colWidth;
            var indent = !isPercent ? _oldWidth / parseInt(_inlineWidth) : 1;
            _extraVal = _extra = _extra / indent
            var _newWidth = parseInt(_extra) + parseInt(_inlineWidth);
            if (_newWidth > 0 && _extra != 0) {
                if (_newWidth < this._colMinWidth)
                    _newWidth = this._colMinWidth;
                var _extra = _newWidth - _oldWidth;
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                    if (this._currentCell >= 0 && this._currentCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                        return;
                    bbdesigner$ContentCol = bbdesigner$ContentCols.filter(this._diaplayFinder).eq(this._currentCell);
                }
                else
                    bbdesigner$ContentCol = bbdesigner$ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !BoldBIDashboard.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                if (this.gridInstance.model.showSummary) {
                    this._bbdesigner$footerCols = this.gridInstance.getFooterTable().find('colgroup').find("col");
                    var colCount = this.gridInstance.model.columns.length;
                    if (this._bbdesigner$footerCols.length > colCount) this._bbdesigner$footerCols.splice(0, (this._bbdesigner$footerCols.length - colCount));
                    bbdesigner$footerCols = this._bbdesigner$footerCols;
                    bbdesigner$footerCol = bbdesigner$footerCols.filter(this._diaplayFinder).eq(this._currentCell);
                    bbdesigner$footerCol.outerWidth(_newWidth);
                }
                if (bbdesigner$(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    this._resizeStackedHeaderColumn(bbdesigner$(this._target).parent('tr'), _extraVal, this._currntCe);
                }
                else
                    bbdesigner$headerCol.outerWidth(_newWidth);
                if (bbdesigner$(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var bbdesigner$tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var bbdesigner$colGroup = bbdesigner$tables.find("colgroup");
                        for (var i = 0; i < this._changedcell.length; i++) {
                            var cellIndex = this._changedcell[i];
                            for (var j = 0 ; j < bbdesigner$colGroup.length; j++) {
                                var visibleCols = bbdesigner$(bbdesigner$colGroup[j]).children().filter(this._diaplayFinder);
                                var width = parseInt((_extraVal)) + parseInt(visibleCols[cellIndex].style.width);
                                if (width < this._colMinWidth)
                                    width = this._colMinWidth
                                bbdesigner$(visibleCols[cellIndex]).width(width);
                            }
                        }
                    }
                    var length = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder).length;
                    for (var i = 0; i < this._changedcell.length; i++) {
                        var bbdesigner$conCol = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder)[this._changedcell[i]]
                        var width = parseInt((_extraVal)) + parseInt(bbdesigner$conCol.style.width);
                        if (width < this._colMinWidth)
                            width = this._colMinWidth
                        bbdesigner$(bbdesigner$conCol).outerWidth(width);
                        if (this.gridInstance.model.isEdit && (this.gridInstance.model.allowGrouping && this.gridInstance.model.groupSettings.groupedColumns.length == 0)) {
                            bbdesigner$sEditCol = this.gridInstance.getContentTable().find(".gridform").find("colgroup col").filter(this._diaplayFinder)[this._changedcell[i]];
                            bbdesigner$(bbdesigner$sEditCol).outerWidth(width);
                        }
                    }
                }
                else {
                    if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var bbdesigner$tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var bbdesigner$colGroup = bbdesigner$tables.find("colgroup");
                        var cellIndex = this._currentCell;
                        var colCount = this.gridInstance.getVisibleColumnNames().length;
                        if (this.gridInstance.getContentTable().find('.e-detailrow').length)
                            bbdesigner$colGroup = bbdesigner$colGroup.not(bbdesigner$tables.find(".e-detailrow").find("colgroup")).get();
                        for (var i = 0 ; i < bbdesigner$colGroup.length; i++) {
                            var cols = bbdesigner$(bbdesigner$colGroup[i]).find("col").filter(this._diaplayFinder);
                            if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                            bbdesigner$(cols[cellIndex]).width(_newWidth);
                        }
                    }
                    bbdesigner$ContentCol.outerWidth(_newWidth);
                    if (this.gridInstance.model.isEdit) {
                        var bbdesigner$editableRow = this.gridInstance.getContentTable().find(".e-editedrow,.e-addedrow");
                        var bbdesigner$editCols = bbdesigner$editableRow.find("table").find("colgroup col");
                        var addCol;
                        if (bbdesigner$editableRow.hasClass("e-addedrow") && this.gridInstance.model.groupSettings.groupedColumns.length)
                            addCol = this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length - 1;
                        else
                            addCol = this._currentCell;
                        var bbdesigner$editCol = bbdesigner$editCols.filter(this._diaplayFinder).eq(addCol);
                        bbdesigner$editCol.outerWidth(_newWidth);
                    }
                }
                this.gridInstance._findColumnsWidth();
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                    var frozenColumns = this.gridInstance.getContentTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings.frozenColumns)
                        , width = 0, direction;
                    for (i = 0; i < frozenColumns.length; i++)
                        width += parseInt(frozenColumns[i].style.width.replace("px", ""));
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
                    direction = this.gridInstance.model.enableRTL ? "margin-right" : "margin-left";
                    this.gridInstance.getContent().find(".e-frozencontentdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.model.showSummary && this.gridInstance.getFooterContent().find(".e-frozenfooterdiv").width(width);
                }
                this.gridInstance.getHeaderTable().find(".e-columnheader").css("cursor", "default");
            }
        },
        _resizeStackedHeaderColumn: function (currentTr, extra, currentCell) {
            // var currentIndex = this._currntCe;
            this._changedcell = [];
            var headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
            var preCol = 0, limit = 0, currentTh = headerCells[currentCell], currentSpan = bbdesigner$(currentTh).attr('colspan'), commonExtra = extra / currentSpan, tr = bbdesigner$(currentTh).parent('tr');
            var nextTr = tr.next();
            var currentIndex = currentTh.cellIndex;
            if (this.gridInstance.model.groupSettings.showGroupedColumn) {
                limit = this.gridInstance.model.groupSettings.groupedColumns.length;
                preCol += limit
            }
            while (currentIndex > limit) {
                currentIndex--;
                var th = bbdesigner$(tr).children('th').not(".e-detailheadercell")[currentIndex];
                preCol += parseInt(bbdesigner$(th).attr('colspan'));
            }
            this._currentCell = preCol;
            var length = preCol + parseInt(currentSpan);
            for (var i = preCol; i < length; i++) {
                var bbdesigner$colG = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder)[i];
                this._changedcell.push(i - limit)
                var width = parseInt(extra) + parseInt(bbdesigner$colG.style.width);
                if (width < this._colMinWidth)
                    width = this._colMinWidth;
                bbdesigner$(bbdesigner$colG).outerWidth(width);
             }
        },
        _triggerResizeEvents: function (event, _x) {
            var _rowobj = this.gridInstance.getHeaderTable().find(".e-columnheader");
            var _childTH = _rowobj.find(".e-headercell").filter(":visible");
            var cellIndex = this._cellIndex;
            var target = bbdesigner$(this._target), columnIndex = []; col = [];
            if (event == "resizeStart") {
                this._orgX = _x;
                cellIndex = this._cellIndex = this._getCellIndex(this, _x);
            }
            var _outerCell = _childTH[this._currentCell];
            var _oldWidth = _outerCell.offsetWidth;
            if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                var rowindex = target.parent(".e-stackedHeaderRow").index();
                var stackedHeaderCell = target.parent(".e-stackedHeaderRow").children()[this._cellIndex].cellIndex;
                var stackedHeaderColumns = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns[stackedHeaderCell].column;
                var columns = stackedHeaderColumns;
                if (!(stackedHeaderColumns instanceof Array))
                    columns = stackedHeaderColumns.split(",");
                for (var i = 0 ; i < columns.length; i++) {
                    var index = this.gridInstance.getColumnIndexByField(columns[i]);
                    columnIndex.push(index)
                    col.push(this.gridInstance.model.columns[index]);
                }
            }
            if (event == "resizeStart") {
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: target, oldWidth: _oldWidth };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: bbdesigner$(_outerCell), oldWidth: _oldWidth };
                return this.gridInstance._trigger("resizeStart", args);
            }
            else {
                var _childth = _rowobj.find(".e-headercell").not(".e-detailheadercell").filter(":visible");
                var _extra = _x - this._orgX;
                var newWidth = _oldWidth + _extra;
                this.gridInstance._colgroupRefresh();
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: bbdesigner$(_outerCell), oldWidth: _oldWidth, newWidth: newWidth, extra: _extra };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: bbdesigner$(_outerCell), oldWidth: _oldWidth, newWidth: newWidth, extra: _extra };
                return this.gridInstance._trigger("resizeEnd", args);
            }
        },
        _mouseUp: function (e) {
            if (this.gridInstance._resizeTimeOut){
                clearTimeout(this.gridInstance._resizeTimeOut);
                this.gridInstance._resizeTimeOut = 0;
            }
            if (this._expand) {
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize') {
                    if (this._triggerResizeEvents("resizeEnd", _x)) {
                        this.gridInstance.element.find(".e-reSizeColbg").remove();
                        return;
                    }
                }
                _x += document.documentElement.scrollLeft;
                this._reSize(_x, _y);
                var index = this.gridInstance.model.showStackedHeader ? this._currntCe - this.gridInstance.getHeaderTable().find(".e-stackedHeaderCell").length : this._currntCe;
                if (index >= 0)
                if (!BoldBIDashboard.isNullOrUndefined(index))
                    this.gridInstance.model.columns[index].width = this.gridInstance.columnsWidthCollection[index];
            }
        },
        _getResizableCell: function () {
            var row;
            if (bbdesigner$(this._target).hasClass('e-stackedHeaderCell'))
                row = this.gridInstance.getHeaderTable().find(".e-columnheader");
            else
                row = this.gridInstance.getHeaderTable().find(".e-columnheader").not('.e-stackedHeaderRow');
            var cell = row.find(".e-headercell").not(".e-hide,.e-detailheadercell");
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            for (var i = 0; i < cell.length; i++) {
                point = cell[i].getBoundingClientRect();
                var xlimit = point.left + scrollLeft + 5;
                if (xlimit > this._orgX && bbdesigner$(cell[i]).height() + point.top >= this._orgY) {
                    this._currentCell = i - 1;
                    return;
                }
                if (i == cell.length - 1 || (this.gridInstance.model.showStackedHeader && bbdesigner$(this._target).get(0) === cell[i])) {
                    this._currentCell = i;
                    return;
                }
            }
        },
        _moveVisual: function (_x) {
            /// Used to move the visual element in mouse move
            var _bounds = this.gridInstance.getHeaderContent().find("div").first()[0].getBoundingClientRect();
            if ((_bounds.left + document.documentElement.scrollLeft + _bounds.width < _x) || (_x < _bounds.left + document.documentElement.scrollLeft))
                this._bbdesigner$visualElement.remove();
            else if (this._currentCell != -1)
                this._bbdesigner$visualElement.css({ left: _x, top: this._tableY });
        },
        _mouseDown: function (e) {
            if (this._allowStart && (bbdesigner$(e.target).closest("tr").css("cursor") == 'col-resize')) {
                this._target = e.target;
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY - document.body.scrollTop;
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize') {
                    if (bbdesigner$(e.target).is(".e-headercelldiv"))
                        e.target = e.target.parentNode;
                    this._target = e.target;
                    if (this._triggerResizeEvents("resizeStart", _x))
                        return;
                }
                var gridobj = this;
                _x += document.documentElement.scrollLeft;
                if (e.button != 2)
                    this._start(_x, _y);
                return false;
            }
            return true;
        },
        _columnResizeToFit: function (e) {
            var resize = this.gridInstance.getHeaderTable().find(".e-columnheader").filter(function (e) {
                return bbdesigner$(this).css("cursor") == "col-resize";
            });
            if (this.gridInstance.model.allowResizeToFit && resize.length) {
                if (bbdesigner$(e.target).is(".e-headercelldiv"))
                    e.target = e.target.parentNode;
                var bbdesigner$target = bbdesigner$(e.target);
                var headerCells, preCol = 0, indent = 0;
                if (bbdesigner$target.hasClass('e-stackedHeaderCell'))
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
                else
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-stackedHeaderCell,.e-detailheadercell");
                this._target = bbdesigner$target;
                if (bbdesigner$target.hasClass("e-headercell")) {
                    var targetCell = e.target;
                    var hCellIndex = bbdesigner$.inArray(targetCell, headerCells);
                    var cellIndex = hCellIndex;
                    this._orgX = e.pageX;
                    if(!this.gridInstance.model.enableRTL) 
						this._getResizableCell();
					else
						this._currentCell = hCellIndex;
                    if (hCellIndex != this._currentCell) {
                        hCellIndex = cellIndex = this._currentCell;
                        targetCell = e.target.previousSibling;
                    }
                    var currentTh = headerCells.filter(":visible")[cellIndex], changesCellIndex = [], changesFinalWdith = [], changesOldWidth = [];
                    indent = this.gridInstance.model.groupSettings.groupedColumns.length;
                    if (!BoldBIDashboard.isNullOrUndefined(this.gridInstance.model.detailsTemplate) || !BoldBIDashboard.isNullOrUndefined(this.gridInstance.model.childGrid))
                        indent += 1;
                    if (bbdesigner$(targetCell).parent("tr").hasClass('e-stackedHeaderRow')) {
                        currentSpan = bbdesigner$(currentTh).attr('colspan'), tr = bbdesigner$(currentTh).parent('tr'), tHeadIndex = currentTh.cellIndex;
                        var nextTr = tr.next();
                        while (tHeadIndex > indent) {
                            tHeadIndex--
                            var th = bbdesigner$(tr).children('th')[tHeadIndex];
                            preCol += parseInt(bbdesigner$(th).attr('colspan'))
                        };
                        var length = preCol + parseInt(currentSpan);
                    }
                    else {

                        preCol = cellIndex; length = cellIndex + 1;
                    }
                    var finalWidth = 0, headerWidth = 0, contentWidth = 0, argCols = [], argExtra = [];
                    if (preCol != -1) {
                        var hiddenLen = headerCells.slice(0, preCol + 1).filter(".e-hide").length;
                        var args = { columnIndex: preCol + hiddenLen, column: this.gridInstance.model.columns[preCol + hiddenLen], target: bbdesigner$target, oldWidth: oldWidth };
                        this.gridInstance._trigger("resizeStart", args);
                        for (var i = preCol; i < length; i++) {
                            hiddenLen = headerCells.slice(0, i + 1).filter(".e-hide").length;
                            contentWidth = this._getContentWidth(i + hiddenLen);
                            bbdesigner$cellDiv = this.gridInstance.getHeaderTable().find('.e-headercell:not(.e-hide, .e-stackedHeaderCell)').children(".e-headercelldiv").eq(i);
                            headerWidth = this._getHeaderContentWidth(bbdesigner$cellDiv);
                            finalWidth = headerWidth > contentWidth ? headerWidth : contentWidth;
                            finalWidth += parseInt(bbdesigner$cellDiv.css("padding-left"), 10);
                            var oldWidth = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder).eq(i + indent).width();
                            finalWidth = oldWidth > finalWidth ? finalWidth : (this._colMinWidth < finalWidth ? finalWidth : this._colMinWidth);

                            var headerCols = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                headerCols.splice(0, 1);
                            headerCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var bbdesigner$colGroups = this.gridInstance.getContentTable().find('.e-recordtable').find('colgroup');
                                var proxy = this;
                                bbdesigner$.each(bbdesigner$colGroups, function (indx, colgroup) {
                                    bbdesigner$(colgroup).find('col').filter(proxy._diaplayFinder).eq(i).width(finalWidth);
                                });
                            }
                            var contentCols = this.gridInstance.getContentTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                contentCols.splice(0, 1);
                            contentCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.isEdit) {
                                var bbdesigner$editableCol = this.gridInstance.getContentTable().find(".e-editedrow").find("col");
                                bbdesigner$editableCol.eq(i + indent).width(finalWidth);
                            }
                            argCols.push(this.gridInstance.model.columns[i + hiddenLen]);
                            argExtra.push(Math.abs(finalWidth - oldWidth))
                            changesCellIndex.push(i + hiddenLen); changesFinalWdith.push(finalWidth); changesOldWidth.push(oldWidth);
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 || (this.gridInstance.model.groupSettings.groupedColumns.length && this.gridInstance.model.isEdit)) {
                                var colIndex = i + hiddenLen;
                                this.gridInstance.columnsWidthCollection[colIndex] = finalWidth;
                                this.gridInstance.setWidthToColumns();
                                if (this.gridInstance.model.scrollSettings.frozenColumns <= colIndex + 1) {
                                    this.gridInstance.getHeaderContent().find(".e-movableheader").css("margin-left", finalWidth);
                                    this.gridInstance.getContent().find(".e-movablecontent").css("margin-left", finalWidth);
                                }
                            }
                        }

                    }
                    this.gridInstance._colgroupRefresh();
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resizeEnd", args);
                    for (var i = 0; i < changesCellIndex.length; i++) {
                        this.gridInstance.columnsWidthCollection[changesCellIndex[i]] = changesFinalWdith[i];
                        this.gridInstance.model.columns[changesCellIndex[i]]["width"] = changesFinalWdith[i];
                    }
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resized", args);
                    if (this.gridInstance.model.summaryRows.length > 0)
                        this.gridInstance._summaryColRrefresh();
					this.gridInstance._findColumnsWidth();
                }				
            }
        },
        _getContentWidth: function (cellindx) {
            var contentWidth = 0;
            var bbdesigner$span = BoldBIDashboard.buildTag('span', {}, {}), proxy = this.gridInstance, tdWidth;
            if (!BoldBIDashboard.isNullOrUndefined(proxy._gridRows)) {
                var rows = proxy._gridRows;
                if (this.gridInstance.model.scrollSettings.frozenColumns && cellindx >= this.gridInstance.model.scrollSettings.frozenColumns) {
                    rows = rows[1];
                    cellindx = cellindx - this.gridInstance.model.scrollSettings.frozenColumns;
                }
                bbdesigner$.each(rows, function (indx, row) {
                    if (bbdesigner$(row).is('.e-row,.e-alt_row') && !bbdesigner$(row).is('.e-editedrow')){
					    var td = bbdesigner$(row).find('td.e-rowcell').eq(cellindx);
					    var content = bbdesigner$(td).html();
					    if (proxy.model.columns[cellindx]["commands"])
					        bbdesigner$span.html(bbdesigner$(content).children());
					    else if (td.hasClass("e-validError"))
					        bbdesigner$span.html(bbdesigner$(content).attr("value"));
					    else
						    bbdesigner$span.html(content);
					    bbdesigner$(td).html(bbdesigner$span);
					    tdWidth = td.find('span:first').width() > 0 ? td.find('span:first').width() + parseInt(td.css("padding-left")) + parseInt(td.css("padding-right")) : td.find('span:first').width();
					    if (tdWidth > contentWidth)
						    contentWidth = tdWidth;
					    bbdesigner$(td).html(content);
                    }
				});
			}
            proxy._refreshUnboundTemplate(this.gridInstance.getContentTable());
            return contentWidth;
        },
        _getHeaderContentWidth: function (bbdesigner$cellDiv) {
            var headerWidth = 0, bbdesigner$span = BoldBIDashboard.buildTag('span', {}, {});
			var IE = this.gridInstance.getBrowserDetails().browser == "msie" ;
			if(IE)
			    bbdesigner$span.css("position","absolute");
            var content = bbdesigner$cellDiv.html();
            bbdesigner$span.html(content);
            bbdesigner$cellDiv.html(bbdesigner$span);
             headerWidth = bbdesigner$cellDiv.find('span:first').width() + parseInt(bbdesigner$cellDiv.css("padding-left")) + parseInt(bbdesigner$cellDiv.css("padding-right"));
			if(IE)
                headerWidth += 2;
            if (this.gridInstance.model.allowFiltering && (this.gridInstance.model.filterSettings.filterType == "menu" || this.gridInstance.model.filterSettings.filterType == "excel"))
                headerWidth = headerWidth + bbdesigner$cellDiv.parent().find(".e-filtericon").width() + 10 + parseInt(bbdesigner$cellDiv.parent().find(".e-filtericon").css("margin-left"));
            bbdesigner$cellDiv.html(content);
            return headerWidth;
        },
    };
})(bbdesigner$, SyncfusionBoldBIDashboard);
;
/**
* @fileOverview Plugin to style the Progressbar elements
* @copyright Copyright SyncfusionBoldBIDashboard Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">SyncfusionBoldBIDashboard Inc</a>
*/
(function (bbdesigner$, BoldBIDashboard, undefined) {

    BoldBIDashboard.widget("BoldBIDashboardProgressBar", "BoldBIDashboard.ProgressBar", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _addToPersist: ["value", "percentage"],
        _setFirst: false,
        _rootCSS: "e-progressbar",

        defaults: {

            text: "",

            cssClass: "",

            minValue: 0,

            maxValue: 100,

            value: 0,

            percentage: 0,

            height: null,

            htmlAttributes: {},

            width: null,

            enabled: true,

            enableRTL: false,

            showRoundedCorner: false,

            enablePersistence: false,

            start: null,

            complete: null,

            change: null,

            create: null,

            destroy: null

        },


        dataTypes: {
            cssClass: "string",
            minValue: "number",
            maxValue: "number",
            enabled: "boolean",
            enableRTL: "boolean",
            showRoundedCorner: "boolean",
            htmlAttributes: "data"
        },


        _setValue: function (value) {
            if (value == null) value = this.model.minValue;
            else if (typeof value === "string") value = parseFloat(value);
            if (this._isNumber(value)) this.model.value = value;
            else if (!this._isNumber(this.model.value)) this.model.value = this.model.minValue;
            this.model.value = this._validateRange(this.model.value, this.model.minValue, this.model.maxValue);
            this._setProgressValue();
        },

        _setPercent: function (percent) {
            this.initial = this.model.percentage;
            if (this.initial == 100) this.initial = 0;
            if (percent == null) percent = 0;
            else if (typeof percent === "string") percent = parseFloat(percent);
            if (this._isNumber(percent)) this.model.percentage = percent;
            else if (!this._isNumber(this.model.percentage)) this.model.percentage = 0;
            this.model.percentage = this._validateRange(this.model.percentage, 0, 100);
            this.model.value = this._percentToValue(this.model.percentage);
            this._increaseProgressWidth();
        },

        _validateMinMax: function () {
            if (isNaN(this.model.minValue)) this.model.minValue = 0;
            if (isNaN(this.model.maxValue)) this.model.maxValue = 100;
        },

        _setText: function (text) {
            if (text) {
                if (this.text) this.text.html(text);
                else {
                    this.text = BoldBIDashboard.buildTag("div.e-progress-txt", text);
                    this.text.appendTo(this.element.find(".e-progress"));
                    this._setTop();
                }
            }
            else if (this.text) {
                this.text.remove();
                this.text = null;
            }
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
            }
        },


        enable: function () {
            this.element.removeClass("e-disable");
            this.model.enabled = true;
        },

        disable: function () {
            this.element.addClass("e-disable");
            this.model.enabled = false;
        },

        getValue: function () {
            return this.model.value;
        },

        getPercentage: function () {
            return this.model.percentage;
        },


        _init: function () {
            this._initialize();
            this._render();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "value":
                        this._setValue(options[option]);
                        options[option] = this.model.value; break;
                    case "percentage":
                        this._setPercent(options[option]);
                        options[option] = this.model.percentage; break;
                    case "minValue":
                        if (!isNaN(options[option])) this._minValidation(options[option]);
                        options[option] = this.model.minValue;
                    case "maxValue":
                        if (!isNaN(options[option])) this._maxValidation(options[option]);
                        options[option] = this.model.maxValue;
                    case "text": this._setText(options[option]); break;
                    case "height": this._setHeight(options[option]); if (this.text) this._setTop(); break;
                    case "width": this._setWidth(options[option]); break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "enableRTL": this._rtl(options[option]); break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                }
            }
        },

        _destroy: function () {
            this.element.empty();
            this.element.removeClass("e-widget e-box e-corner " + this.model.cssClass);
        },


        _initialize: function () {
            this.text = null;
            this.header = null;
            this._preVal = null;
        },


        _render: function () {
            this.initialRender = true;
            this.element.addClass("e-widget e-box " + this.model.cssClass).attr("role", "ProgressBar");
            this._setDimention();
            this.header = BoldBIDashboard.buildTag("div.e-progress");
            this.element.append(this.header);
            this._setText(this.model.text);
            this._setInitialValue();
            this._addAttr(this.model.htmlAttributes);
            this._checkProperties();
            this._roundedCorner(this.model.showRoundedCorner);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            bbdesigner$.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._disabled(false);
                else proxy.element.attr(key, value)
            });
        },


        _setDimention: function () {
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
        },

        _setHeight: function (height) {
            if (height) this.element.height(height);
        },

        _setWidth: function (width) {
            if (width) this.element.css("width", width);
        },


        _setInitialValue: function () {
            this._validateMinMax();
            if (this.model.percentage) this._setPercent(this.model.percentage);
            else this._setValue(this.model.value);
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _checkProperties: function () {
            if (this.model.enableRTL) this._rtl(this.model.enableRTL);
            this._minValidation(this.model.minValue);
            this._maxValidation(this.model.maxValue);
            if (!this.model.enabled) this._disabled(true);
        },

        _rtl: function (boolean) {
            if (boolean) this.element.addClass("e-rtl");
            else this.element.removeClass("e-rtl");
        },

        _roundedCorner: function (value) {
            if (value && !this.element.hasClass('e-corner'))
                this.element.addClass('e-corner');
            else if (this.element.hasClass('e-corner'))
                this.element.removeClass('e-corner');
        },

        _minValidation: function (minvalue) {
            if (this.model.maxValue && this.model.maxValue < minvalue) this.model.maxValue = minvalue;
            if (this.model.value < minvalue)
                this.model.value = minvalue;
            this.model.minValue = minvalue;
            this._setProgressValue();
        },

        _maxValidation: function (maxValue) {
            if (this.model.minValue && this.model.minValue > maxValue) this.model.minValue = maxValue;
            if (this.model.value > maxValue)
                this.model.value = maxValue;
            this.model.maxValue = maxValue;
            this._setProgressValue();
        },


        _setTop: function () {
            if (this.text.height() != 0){
                var top = (this.element.height() - this.text.height()) / 2;
                this.text.css("top", Math.floor(top));
            }
        },


        _increaseProgressWidth: function () {
            this.header.css("width", this.model.percentage + "%");
            if (this.initial == 0 && this.model.percentage != this.initial)
                this._raiseEvent("start");
            if (this._preVal != this.model.value) {
                this._preVal = this.model.value;
                bbdesigner$(this.header).attr("aria-label", this.model.percentage);
                if (this.header.hasClass("e-complete"))
                    this.header.removeClass("e-complete");
				this.initialRender ? this.initialRender = false : this._raiseEvent("change");
                if (this.model.percentage == 100) {
                    this.header.addClass("e-complete");
                    this._raiseEvent("complete");
                }
            }
        },

        _raiseEvent: function (event) {
            this._trigger(event, { value: this.model.value, percentage: this.model.percentage });
        },

        _setProgressValue: function () {
            this.initial = this.model.percentage;
            this.model.percentage = this._valueToPercent(this.model.value);
            this._increaseProgressWidth();
        },


        _isNumber: function (number) {
            return typeof number === "number" && !isNaN(number);
        },


        _validateRange: function (value, minvalue, maxValue) {
            if (value < minvalue) return minvalue;
            else if (value > maxValue) return maxValue;
            return value;
        },


        _valueToPercent: function (value) {
            if (this.model.maxValue <= this.model.minValue) return 100;
            value = this._validateRange(value, this.model.minValue, this.model.maxValue);
            value = (100 * (value - this.model.minValue)) / (this.model.maxValue - this.model.minValue);
            return value;
        },


        _percentToValue: function (percent) {
            if (this.model.maxValue <= this.model.minValue) { return this.model.minValue; }
            if (percent >= 0 && percent <= 100) {
                var diff = this.model.maxValue - this.model.minValue;
                var val = diff * percent / 100;
                percent = val + this.model.minValue;
            }
            else if (percent < 0) percent = this.model.minValue;
            else if (percent > 100) percent = this.model.maxValue;
            return percent;
        }
    });

})(bbdesigner$, SyncfusionBoldBIDashboard);
;