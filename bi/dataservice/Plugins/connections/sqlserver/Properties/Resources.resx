<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Between" xml:space="preserve">
    <value>BETWEEN</value>
  </data>
  <data name="Contains" xml:space="preserve">
    <value>CONTAINS</value>
  </data>
  <data name="EndsWith" xml:space="preserve">
    <value>ENDS WITH</value>
  </data>
  <data name="In" xml:space="preserve">
    <value>IN</value>
  </data>
  <data name="Null" xml:space="preserve">
    <value>NULL</value>
  </data>
  <data name="SqlAnd" xml:space="preserve">
    <value>AND</value>
  </data>
  <data name="SqlAs" xml:space="preserve">
    <value>AS</value>
  </data>
  <data name="SqlAsc" xml:space="preserve">
    <value>ASC</value>
  </data>
  <data name="SqlAvg" xml:space="preserve">
    <value>AVG</value>
  </data>
  <data name="SqlBetweenFormat" xml:space="preserve">
    <value>BETWEEN {0} AND {1}</value>
  </data>
  <data name="SqlBigInt" xml:space="preserve">
    <value>BIGINT</value>
  </data>
  <data name="SqlBinary" xml:space="preserve">
    <value>BINARY</value>
  </data>
  <data name="SqlBit" xml:space="preserve">
    <value>BIT</value>
  </data>
  <data name="SqlCaseWhenElseFormat" xml:space="preserve">
    <value>CASE WHEN {0} THEN {1} ELSE {2} END</value>
  </data>
  <data name="SqlCastFormat" xml:space="preserve">
    <value>CAST( {0} AS {1} )</value>
  </data>
  <data name="SqlChar" xml:space="preserve">
    <value>CHAR</value>
  </data>
  <data name="SqlComparisonFormat" xml:space="preserve">
    <value>{0} {1} {2}</value>
  </data>
  <data name="SqlConditionalConversionFormat" xml:space="preserve">
    <value>CASE WHEN {0} THEN {1} ELSE NULL END</value>
  </data>
  <data name="SqlContainsFormat" xml:space="preserve">
    <value>CASE WHEN {0} like {1} THEN 1 ELSE 0 END</value>
  </data>
  <data name="SqlCount" xml:space="preserve">
    <value>COUNT</value>
  </data>
  <data name="SqlCreateTableFormat" xml:space="preserve">
    <value>CREATE TABLE {0} ( {1} );</value>
  </data>
  <data name="SqlDate" xml:space="preserve">
    <value>DATE</value>
  </data>
  <data name="SqlDateAdd" xml:space="preserve">
    <value>DATEADD</value>
  </data>
  <data name="SqlDateDiff" xml:space="preserve">
    <value>DATEDIFF</value>
  </data>
  <data name="SqlDatePart" xml:space="preserve">
    <value>DATEPART</value>
  </data>
  <data name="SqlDatetime" xml:space="preserve">
    <value>DATETIME</value>
  </data>
  <data name="SqlDateTime2" xml:space="preserve">
    <value>DATETIME2</value>
  </data>
  <data name="SqlDateTimeOffset" xml:space="preserve">
    <value>DATETIMEOFFSET</value>
  </data>
  <data name="SqlDay" xml:space="preserve">
    <value>DAY</value>
  </data>
  <data name="SqlDayOfYear" xml:space="preserve">
    <value>DAYOFYEAR</value>
  </data>
  <data name="SqlDecimal" xml:space="preserve">
    <value>DECIMAL</value>
  </data>
  <data name="SqlDeclare" xml:space="preserve">
    <value>DECLARE</value>
  </data>
  <data name="SqlDeclareTableFormat" xml:space="preserve">
    <value>{0} {1} {2}( {3} )</value>
  </data>
  <data name="SqlDesc" xml:space="preserve">
    <value>DESC</value>
  </data>
  <data name="SqlDifferent" xml:space="preserve">
    <value>&lt;&gt;</value>
  </data>
  <data name="SqlDistinct" xml:space="preserve">
    <value>DISTINCT</value>
  </data>
  <data name="SqlDropTableFormat" xml:space="preserve">
    <value>DROP TABLE {0}</value>
  </data>
  <data name="SqlEquals" xml:space="preserve">
    <value>=</value>
  </data>
  <data name="SqlExec" xml:space="preserve">
    <value>EXEC</value>
  </data>
  <data name="SqlFloat" xml:space="preserve">
    <value>FLOAT</value>
  </data>
  <data name="SqlFormatFormat" xml:space="preserve">
    <value>FORMAT( {0} )</value>
  </data>
  <data name="SqlFrom" xml:space="preserve">
    <value>FROM</value>
  </data>
  <data name="SqlFull" xml:space="preserve">
    <value>FULL</value>
  </data>
  <data name="SqlFunctionFormat" xml:space="preserve">
    <value>{0}({1})</value>
  </data>
  <data name="SqlGeography" xml:space="preserve">
    <value>GEOGRAPHY</value>
  </data>
  <data name="SqlGeometry" xml:space="preserve">
    <value>GEOMETRY</value>
  </data>
  <data name="SqlGreaterOrEquals" xml:space="preserve">
    <value>&gt;=</value>
  </data>
  <data name="SqlGreaterThan" xml:space="preserve">
    <value>&gt;</value>
  </data>
  <data name="SqlGroupBy" xml:space="preserve">
    <value>GROUP BY</value>
  </data>
  <data name="SqlHierarchyId" xml:space="preserve">
    <value>HIERARCHYID</value>
  </data>
  <data name="SqlHour" xml:space="preserve">
    <value>HOUR</value>
  </data>
  <data name="SqlImage" xml:space="preserve">
    <value>IMAGE</value>
  </data>
  <data name="SqlInFormat" xml:space="preserve">
    <value>IN( {0} )</value>
  </data>
  <data name="SqlInner" xml:space="preserve">
    <value>INNER</value>
  </data>
  <data name="SqlInsert" xml:space="preserve">
    <value>INSERT</value>
  </data>
  <data name="SqlInsertExecFormat" xml:space="preserve">
    <value>{0} {1} {2} {3} {4}</value>
  </data>
  <data name="SqlInsertIntoFormat" xml:space="preserve">
    <value>INSERT INTO {0} VALUES ( {1} )</value>
  </data>
  <data name="SqlInsertIntoFromQueryFormat" xml:space="preserve">
    <value>SELECT * INTO {0} FROM ( {1} ) AS QUERY</value>
  </data>
  <data name="SqlInt" xml:space="preserve">
    <value>INT</value>
  </data>
  <data name="SqlIsDateFormat" xml:space="preserve">
    <value>ISDATE( {0} ) = 1</value>
  </data>
  <data name="SqlIsNotNull" xml:space="preserve">
    <value>IS NOT NULL</value>
  </data>
  <data name="SqlIsNull" xml:space="preserve">
    <value>IS NULL</value>
  </data>
  <data name="SqlIsNullFunction" xml:space="preserve">
    <value>ISNULL</value>
  </data>
  <data name="SqlIsNumberFormat" xml:space="preserve">
    <value>ISNUMERIC( {0} ) = 1</value>
  </data>
  <data name="SqlJoin" xml:space="preserve">
    <value>JOIN</value>
  </data>
  <data name="SqlLeft" xml:space="preserve">
    <value>LEFT OUTER</value>
  </data>
  <data name="SqlLessOrEquals" xml:space="preserve">
    <value>&lt;=</value>
  </data>
  <data name="SqlLessThan" xml:space="preserve">
    <value>&lt;</value>
  </data>
  <data name="SqlLike" xml:space="preserve">
    <value>LIKE</value>
  </data>
  <data name="SqlLikeFormat" xml:space="preserve">
    <value>{0} LIKE {1}</value>
  </data>
  <data name="SqlMax" xml:space="preserve">
    <value>MAX</value>
  </data>
  <data name="SqlMin" xml:space="preserve">
    <value>MIN</value>
  </data>
  <data name="SqlMinute" xml:space="preserve">
    <value>MINUTE</value>
  </data>
  <data name="SqlMoney" xml:space="preserve">
    <value>MONEY</value>
  </data>
  <data name="SqlNChar" xml:space="preserve">
    <value>NCHAR</value>
  </data>
  <data name="SqlNot" xml:space="preserve">
    <value>NOT</value>
  </data>
  <data name="SqlNow" xml:space="preserve">
    <value>GETDATE()</value>
  </data>
  <data name="SqlNText" xml:space="preserve">
    <value>NTEXT</value>
  </data>
  <data name="SqlNumeric" xml:space="preserve">
    <value>NUMERIC</value>
  </data>
  <data name="SqlNVarchar" xml:space="preserve">
    <value>NVARCHAR</value>
  </data>
  <data name="SqlOn" xml:space="preserve">
    <value>ON</value>
  </data>
  <data name="SqlOr" xml:space="preserve">
    <value>OR</value>
  </data>
  <data name="SqlOrderBy" xml:space="preserve">
    <value>ORDER BY</value>
  </data>
  <data name="SqlOuter" xml:space="preserve">
    <value>OUTER</value>
  </data>
  <data name="SqlParameterLessFunctionFormat" xml:space="preserve">
    <value>{0}()</value>
  </data>
  <data name="SqlQuarter" xml:space="preserve">
    <value>QUARTER</value>
  </data>
  <data name="SqlReal" xml:space="preserve">
    <value>REAL</value>
  </data>
  <data name="SqlRemoveTableFormat" xml:space="preserve">
    <value>DROP TABLE {0};</value>
  </data>
  <data name="SqlRight" xml:space="preserve">
    <value>RIGHT</value>
  </data>
  <data name="SqlSecond" xml:space="preserve">
    <value>SECOND</value>
  </data>
  <data name="SqlSelect" xml:space="preserve">
    <value>SELECT</value>
  </data>
  <data name="SqlSmallDateTime" xml:space="preserve">
    <value>SMALLDATETIME</value>
  </data>
  <data name="SqlSmallInt" xml:space="preserve">
    <value>SMALLINT</value>
  </data>
  <data name="SqlSmallMoney" xml:space="preserve">
    <value>SMALLMONEY</value>
  </data>
  <data name="SqlSql_Variant" xml:space="preserve">
    <value>SQL_VARIANT</value>
  </data>
  <data name="SqlStar" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="SqlStdev" xml:space="preserve">
    <value>STDEV</value>
  </data>
  <data name="SqlStdevP" xml:space="preserve">
    <value>STDEVP</value>
  </data>
  <data name="SqlSubstring" xml:space="preserve">
    <value>SUBSTRING</value>
  </data>
  <data name="SqlSum" xml:space="preserve">
    <value>SUM</value>
  </data>
  <data name="SqlTable" xml:space="preserve">
    <value>TABLE</value>
  </data>
  <data name="SqlText" xml:space="preserve">
    <value>TEXT</value>
  </data>
  <data name="SqlTime" xml:space="preserve">
    <value>TIME</value>
  </data>
  <data name="SqlTimeStamp" xml:space="preserve">
    <value>TIMESTAMP</value>
  </data>
  <data name="SqlTinyInt" xml:space="preserve">
    <value>TINYINT</value>
  </data>
  <data name="SqlTop" xml:space="preserve">
    <value>TOP</value>
  </data>
  <data name="SqlUniqueIdentifier" xml:space="preserve">
    <value>UNIQUEIDENTIFIER</value>
  </data>
  <data name="SqlVar" xml:space="preserve">
    <value>VAR</value>
  </data>
  <data name="SqlVarBinary" xml:space="preserve">
    <value>VARBINARY</value>
  </data>
  <data name="SqlVarChar" xml:space="preserve">
    <value>VARCHAR</value>
  </data>
  <data name="SqlVarP" xml:space="preserve">
    <value>VARP</value>
  </data>
  <data name="SqlWeek" xml:space="preserve">
    <value>WEEK</value>
  </data>
  <data name="SqlWeekDay" xml:space="preserve">
    <value>WEEKDAY</value>
  </data>
  <data name="SqlWhere" xml:space="preserve">
    <value>WHERE</value>
  </data>
  <data name="SqlXml" xml:space="preserve">
    <value>XML</value>
  </data>
  <data name="StartsWith" xml:space="preserve">
    <value>STARTS WITH</value>
  </data>
  <data name="SqlHaving" xml:space="preserve">
    <value>HAVING</value>
  </data>
  <data name="Err_FailToParseRelativeDateExpression" xml:space="preserve">
    <value>Failed to parse relative date expression. Bad arguments</value>
  </data>
  <data name="SqlMonth" xml:space="preserve">
    <value>MONTH</value>
  </data>
  <data name="SqlYear" xml:space="preserve">
    <value>YEAR</value>
  </data>
  <data name="SqlNull" xml:space="preserve">
    <value>NULL</value>
  </data>
  <data name="SqlNotBetweenFormat" xml:space="preserve">
    <value>NOT BETWEEN {0} AND {1}</value>
  </data>
  <data name="SqlInt32" xml:space="preserve">
    <value>INT32</value>
  </data>
  <data name="SqlInt64" xml:space="preserve">
    <value>INT64</value>
  </data>
  <data name="SqlIs" xml:space="preserve">
    <value>IS</value>
  </data>
  <data name="SqlInnerJoin" xml:space="preserve">
    <value>INNER JOIN</value>
  </data>
  <data name="SqlAndNot" xml:space="preserve">
    <value>AND NOT</value>
  </data>
  <data name="SqlOrNot" xml:space="preserve">
    <value>OR NOT</value>
  </data>
  <data name="SqlAcos" xml:space="preserve">
    <value>ACOS</value>
  </data>
  <data name="SqlAsin" xml:space="preserve">
    <value>ASIN</value>
  </data>
  <data name="SqlBeginFormat" xml:space="preserve">
    <value>BEGIN SELECT {0} FROM {1} END ELSE BEGIN SELECT TOP 1({0}) FROM {1} END</value>
  </data>
  <data name="SqlTopOne" xml:space="preserve">
    <value>TOP (1)</value>
  </data>
  <data name="AcosFunctionFormat" xml:space="preserve">
    <value>IF EXISTS(SELECT {0} FROM {1} WHERE {2} )</value>
  </data>
  <data name="PartitionBy" xml:space="preserve">
    <value>PARTITION BY</value>
  </data>
  <data name="RowUnderscoreNumber" xml:space="preserve">
    <value>ROW_NUMBER</value>
  </data>
  <data name="SqlOver" xml:space="preserve">
    <value>OVER</value>
  </data>
  <data name="SqlByte" xml:space="preserve">
    <value>VarBinary</value>
  </data>
  <data name="RowNumber" xml:space="preserve">
    <value>, ROW_NUMBER() OVER ({0} {1}) AS {2}</value>
  </data>
  <data name="Pagination" xml:space="preserve">
    <value>SELECT {0} FROM ({1}) AS {2} WHERE {3} &gt;= {4} ORDER BY {5} ASC</value>
  </data>
  <data name="CustomSortOrderTableAliasName" xml:space="preserve">
    <value>Custom_Sort_Order_Table</value>
  </data>
  <data name="RowNumberColumnName" xml:space="preserve">
    <value>¤RowNumber</value>
  </data>
  <data name="SqlSuperQuery" xml:space="preserve">
    <value>¤Super_Query</value>
  </data>
  <data name="SqlCountD" xml:space="preserve">
    <value>COUNTD</value>
  </data>
  <data name="RemoveMilliSecondsFromDateTime" xml:space="preserve">
    <value>DATEADD(ms, -DATEPART(ms, {0}), {1})</value>
  </data>
  <data name="SqlCountAll" xml:space="preserve">
    <value>COUNT(*)</value>
  </data>
  <data name="YearFormatCount" xml:space="preserve">
    <value>120</value>
  </data>
  <data name="SQLConvertFunction" xml:space="preserve">
    <value>CONVERT( {0} , {1} )</value>
  </data>
  <data name="UnSupport" xml:space="preserve">
    <value>UNSUPPORT</value>
  </data>
  <data name="SqlWith" xml:space="preserve">
    <value>WITH</value>
  </data>
  <data name="SqlConvertCastDateFormat" xml:space="preserve">
    <value>CONVERT(VARCHAR, CAST({0} AS DATE), 112)</value>
  </data>
  <data name="SqlConvertFormat" xml:space="preserve">
    <value>CONVERT(VARCHAR(8), {0}, 112)</value>
  </data>
  <data name="SqlCase" xml:space="preserve">
    <value>CASE</value>
  </data>
  <data name="SqlCast" xml:space="preserve">
    <value>CAST</value>
  </data>
  <data name="SqlElse" xml:space="preserve">
    <value>ELSE</value>
  </data>
  <data name="SqlEnd" xml:space="preserve">
    <value>END</value>
  </data>
  <data name="SqlThen" xml:space="preserve">
    <value>THEN</value>
  </data>
  <data name="SqlWhen" xml:space="preserve">
    <value>WHEN</value>
  </data>
  <data name="SqlPagingRunningQuery" xml:space="preserve">
    <value>SELECT {0}({1}) FROM(SELECT TOP({2}) {1} FROM {3}) AS RESULT</value>
  </data>
  <data name="SqlDefaultGuid" xml:space="preserve">
    <value>00000000-0000-0000-0000-000000000000</value>
  </data>
  <data name="SqlUnionAll" xml:space="preserve">
    <value>UNION ALL</value>
  </data>
  <data name="StoredProcedureWithOutParameter" xml:space="preserve">
    <value>(SELECT * FROM OPENQUERY([{0}],'EXEC [{1}].[{2}].[{3}]')) [{3}]</value>
  </data>
  <data name="StoredProcedureWithParameter" xml:space="preserve">
    <value>(SELECT * FROM OPENQUERY([{0}],'EXEC [{1}].[{2}].[{3}]  {4}')) [{3}]</value>
  </data>
  <data name="SqlConnectionFailException" xml:space="preserve">
    <value>The connection is broken and recovery is not possible.  The client driver attempted to recover the connection one or more times and all attempts failed.  Increase the value of ConnectRetryCount to increase the number of recovery attempts.</value>
  </data>
  <data name="SqlConvertTimeFormat" xml:space="preserve">
    <value>LEFT(REPLACE(CONVERT(VARCHAR(8), CAST({0} AS DATETIME), 114),':',''),6)</value>
  </data>
  <data name="SqlConvertFormat_Time" xml:space="preserve">
    <value>CONVERT(VARCHAR(8), {0}, 108)</value>
  </data>
  <data name="StoredProcedureWithOutParameterforDataSampling" xml:space="preserve">
    <value>(SELECT TOP {4} * FROM OPENQUERY([{0}],'EXEC [{1}].[{2}].[{3}]')) [{3}]</value>
  </data>
  <data name="SqlCeil" xml:space="preserve">
    <value>CEIL</value>
  </data>
  <data name="SqlMod" xml:space="preserve">
    <value>MOD</value>
  </data>
  <data name="SqlCurrentmonth" xml:space="preserve">
    <value>DATEPART(month, CAST(GETDATE() AS DATE))</value>
  </data>
  <data name="SqlCurrentyear" xml:space="preserve">
    <value>DATEPART(year, CAST(GETDATE() AS DATE))</value>
  </data>
  <data name="SqlPreviousmonth" xml:space="preserve">
    <value>DATEPART(month, DATEADD(month, -1, CAST(GETDATE() AS DATE)))</value>
  </data>
  <data name="SqlPreviousyear" xml:space="preserve">
    <value>DATEPART(year, DATEADD(year, -1, CAST(GETDATE() AS DATE)))</value>
  </data>
  <data name="SqlYesterday" xml:space="preserve">
    <value>DATEADD(day, -1, CAST(GETDATE() AS DATE))</value>
  </data>
  <data name="SqlLeftJoin" xml:space="preserve">
    <value>LEFT JOIN</value>
  </data>
  <data name="StoredProcedureWithParameterforDataSampling" xml:space="preserve">
    <value>(SELECT TOP {5} * FROM OPENQUERY([{0}],'EXEC [{1}].[{2}].[{3}]  {4}')) [{3}]</value>
  </data>
  <data name="SqlAvgD" xml:space="preserve">
    <value>AVGD</value>
  </data>
  <data name="SqlSumD" xml:space="preserve">
    <value>SUMD</value>
  </data>
  <data name="SqlCount_Big" xml:space="preserve">
    <value>COUNT_BIG</value>
  </data>
  <data name="RestrictOrderByErrorMessage" xml:space="preserve">
    <value>Bold BI restricts the usage of ORDER BY in SQLServer codeview mode unless TOP, OFFSET or FOR XML is also specified.</value>
  </data>
  <data name="SqlCross" xml:space="preserve">
    <value>CROSS</value>
  </data>
  <data name="SqlFetch" xml:space="preserve">
    <value> FETCH NEXT {0} ROWS ONLY </value>
  </data>
  <data name="SqlOffset" xml:space="preserve">
    <value> OFFSET {0} ROWS </value>
  </data>
  <data name="SqlTotalPercentage" xml:space="preserve">
    <value>TOTALPERCENTAGE</value>
  </data>
  <data name="SqlStringAgg" xml:space="preserve">
    <value>STRING_AGG</value>
  </data>
  <data name="SqlFiscalQuarterYear" xml:space="preserve">
    <value>CAST(YEAR(DATEADD(MONTH, -({1} - 1), {0})) AS NVARCHAR(4)) + CAST( CASE WHEN ((MONTH({0}) - {1} + 12) % 12) + 1 BETWEEN 1 AND 3 THEN 1 WHEN ((MONTH({0}) - {1} + 12) % 12) + 1 BETWEEN 4 AND 6 THEN 2 WHEN ((MONTH({0}) - {1} + 12) % 12) + 1 BETWEEN 7 AND 9 THEN 3 ELSE 4 END AS NVARCHAR(1))</value>
  </data>
  <data name="SqlFiscalQuarter" xml:space="preserve">
    <value>CAST( CASE WHEN ((MONTH({0}) - {1} + 12) % 12) + 1 BETWEEN 1 AND 3 THEN 1 WHEN ((MONTH({0}) - {1} + 12) % 12) + 1 BETWEEN 4 AND 6 THEN 2 WHEN ((MONTH({0}) - {1} + 12) % 12) + 1 BETWEEN 7 AND 9 THEN 3 ELSE 4 END AS NVARCHAR(1))</value>
  </data>
  <data name="SqlFiscalMonthYear" xml:space="preserve">
    <value>CASE WHEN MONTH({0}) >= {1} THEN YEAR({0}) * 100 + MONTH({0}) ELSE (YEAR({0}) + 1) * 100 + MONTH({0}) END</value>
  </data>
</root>