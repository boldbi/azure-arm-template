<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BoldBi.Ai.Base</name>
    </assembly>
    <members>
        <member name="T:BoldBi.Ai.Base.AiAssistanceOperations">
            <summary>
            Handles operations related to AI assistance including processing chat queries,
            generating AI responses, validating JSON, and logging activities.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.AiAssistanceOperations"/> class.
            </summary>
            <param name="memoryCache">Memory cache to store items.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.#ctor(BoldBi.Ai.Base.Contracts.IUsageProcessor,BoldBi.Ai.Base.Contracts.IResponseBuilder,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.AiAssistanceOperations"/> class.
            </summary>
            <param name="usageProcessor">Processor to calculate and log AI usage metrics.</param>
            <param name="responseBuilder">Builder to construct AI responses.</param>
            <param name="memoryCache">Memory cache to store items.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.ReleventQuestionProcess(System.String,System.String)">
            <summary>
            Processes the provided JSON input to generate relevant questions based on the provided table schema.
            </summary>
            <param name="jsonInput">JSON string containing the input data for question generation.</param>
            <param name="licenseKey">Unique license key identifying the user or tenant.</param>
            <returns>An object containing the processed relevant questions or error details if an exception occurs.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.WidgetSummarizationProcess(System.String,System.String)">
            <summary>
            Processes the widget summarization request by validating input,
            generating a kernel, and retrieving summarization results.
            </summary>
            <param name="jsonInput">The JSON string containing the widget summarization request details.</param>
            <param name="licenseKey">The license key required for AI services authorization.</param>
            <returns>
            Returns a <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.SummarizationResponse"/> object if the operation is successful,
            or an error response if an exception occurs.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.DashboardSummarizationProcess(System.String,System.String)">
            <summary>
            Processes the dashboard summarization request by validating input,
            generating a kernel, and retrieving summarization results.
            </summary>
            <param name="jsonInput">The JSON string containing the widget summarization request details.</param>
            <param name="licenseKey">The license key required for AI services authorization.</param>
            <returns>
            Returns a <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.SummarizationResponse"/> object if the operation is successful,
            or an error response if an exception occurs.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.GenerateWidgetSummarizationAsync(BoldBi.Ai.Core.Enums.AiOperation,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.String)">
            <summary>
            Process for generating widget summary.
            </summary>
            <param name="operation">The AI operation to perform.</param>
            <param name="aiAssistanceRequest">Details of the AI assistance request.</param>
            <param name="licenseKey">The license key for the operation.</param>
            <returns>Summary of a widget.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.GenerateDashboardSummarizationAsync(BoldBi.Ai.Core.Enums.AiOperation,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.String)">
            <summary>
            Process for generating dashboard summary.
            </summary>
            <param name="operation">The AI operation to perform.</param>
            <param name="aiAssistanceRequest">Details of the AI assistance request.</param>
            <param name="licenseKey">The license key for the operation.</param>
            <returns>Summary of a dashboard.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.ProcessQnaQuery(System.String,System.String)">
            <summary>
            Processes the question answer widget creation based on the provided JSON input for relevant field information.
            </summary>
            <param name="jsonInput">JSON string containing input data for processing question answer widgets.</param>
            <param name="licenseKey">Unique license key identifying the user or tenant.</param>
            <returns>An object containing information about widget creation or an error message if an exception occurs.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.ProcessChatQueryUsingStructureOutput(System.String,System.String)">
            <summary>
            Processes the provided JSON input to extract and provide widget creation or widget update information for the AI Chat Assistant.
            </summary>
            <param name="jsonInput">A JSON string containing the input data for processing.</param>
            <param name="licenseKey">Tenant ID information for each user.</param>
            <returns>The result contains an object with information about widget creation or widget property updates.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.ProcessChatQuery(System.String,System.String)">
            <summary>
            Processes the chat-based queries to determine if widgets need to be created or updated based on the JSON input.
            </summary>
            <param name="jsonInput">JSON string containing input data for processing chat queries.</param>
            <param name="licenseKey">Unique license key identifying the user or tenant.</param>
            <returns>An object containing information about widget operations or error details if an exception occurs.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.UpdateAssistanceResponseAsync(System.String)">
            <summary>
            Asynchronously updates the assistance response based on the provided JSON input.
            </summary>
            <param name="jsonInput">The JSON string containing the input data for the response update.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.ProcessFormatQueryOutput(System.String,System.String)">
            <summary>
            Processes the formatted query output based on the given JSON input and license key.
            </summary>
            <param name="jsonInput">The JSON input containing query details.</param>
            <param name="licenseKey">The license key for AI operations.</param>
            <returns>A task that represents the asynchronous operation, returning the formatted response as an object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.IsValidResponse(System.String)">
            <summary>
            Checks if a given JSON string has a valid response structure.
            </summary>
            <param name="jsonString">The JSON string to validate.</param>
            <returns>True if the JSON is valid; otherwise, false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.GetMessage(System.String,System.String)">
            <summary>
            Retrieves a greeting message from AI response based on content.
            </summary>
            <param name="content">Response content from the AI.</param>
            <param name="question">User's original question.</param>
            <returns>A ChatResponse containing a greeting message if matched, otherwise the AI's raw response.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.GenerateAIResponseAsync(BoldBi.Ai.Base.Contracts.IBoldAiProcess,BoldBi.Ai.Core.Enums.AiOperation,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates an AI response using the provided AI process and parameters.
            </summary>
            <param name="process">The AI process instance.</param>
            <param name="operation">The AI operation to perform.</param>
            <param name="question">The input question to the AI.</param>
            <param name="licenseKey">The license key for the operation.</param>
            <param name="tableInfo">Optional table information for the AI.</param>
            <param name="previousHistories">Optional history of previous queries.</param>
            <param name="modeType">Optional mode type of the dashboard.</param>
            <returns>The AI-generated response as <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.GetTableInfoContent(System.String)">
            <summary>
            Retrieves the table information, such as column names, data types, etc.,
            by deserializing the provided table information string and converting
            it into a formatted string representation.
            </summary>
            <param name="tableInfo">A JSON string containing the table information (e.g., column names, data types, etc.).</param>
            <returns>A string containing the formatted table information based on the provided table details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.ValidateInput(System.String)">
            <summary>
            Validates and converts the input JSON string into an <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest"/> object.
            </summary>
            <param name="jsonInput">The JSON string to validate and parse.</param>
            <returns>The parsed <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.GenerateJsonResponseUsingAi(System.String,System.String)">
            <summary>
            Generates a JSON response using the AI for a specified operation and mode.
            </summary>
            <param name="question">The input question to the AI.</param>
            <param name="licenseKey">The license key for the operation.</param>
            <returns>The AI-generated response as <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.FormatAndValidateJson(BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Formats and validates a JSON response generated by the AI.
            </summary>
            <param name="response">The AI-generated response.</param>
            <param name="licenseKey">The license key for the operation.</param>
            <param name="request">The AI assistance request details.</param>
            <returns>A validated and formatted JSON string.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if the JSON is invalid after formatting.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.ProcessAiService(BoldBi.Ai.Core.Enums.AiOperation,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.String,System.String)">
            <summary>
            Processes an AI service operation and generates the appropriate AI response.
            </summary>
            <param name="aiOperation">The AI operation to perform.</param>
            <param name="question">The input question to the AI.</param>
            <param name="licenseKey">The license key for the operation.</param>
            <param name="aiAssistanceRequest">Details of the AI assistance request.</param>
            <param name="tableInfo">Optional table information for the AI.</param>
            <param name="previousHistories">Optional history of previous queries.</param>
            <returns>The AI-generated response as an <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.IChatResponse"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.HandleVisualPropertyUpdation(BoldBi.Ai.Core.Enums.AiOperation,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.String,System.String)">
            <summary>
            Processes an AI service operation and generates the appropriate AI response.
            </summary>
            <param name="aiOperation">The AI operation to perform.</param>
            <param name="question">The input question to the AI.</param>
            <param name="licenseKey">The license key for the operation.</param>
            <param name="aiAssistanceRequest">Details of the AI assistance request.</param>
            <param name="tableInfo">Optional table information for the AI.</param>
            <param name="previousHistories">Optional history of previous queries.</param>
            <returns>The AI-generated response as an <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.IChatResponse"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.HandleWidgetOperations(BoldBi.Ai.Core.Models.AIInputBuilder.InputDataBuilder,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.String)">
            <summary>
            Handles the widget creation, update, and deletion operations based on the provided input data.
            </summary>
            <param name="result">InputDataBuilder containing details about widgets to create, update, or delete.</param>
            <param name="aiAssistanceRequest">AI assistance request object containing details such as Query ID and session info.</param>
            <param name="licenseKey">Unique license key identifying the user or tenant.</param>
            <returns>A ChatResponse containing information about widget operations including created, updated or deleted widgets.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.HandleWidgetForStructureOutputOperations(BoldBi.Ai.Core.Models.AIInputBuilder.InputDataBuilder,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.String)">
            <summary>
            Handles the widget creation, update, and deletion operations based on the provided input data.
            </summary>
            <param name="result">InputDataBuilder containing details about widgets to create, update, or delete.</param>
            <param name="aiAssistanceRequest">AI assistance request object containing details such as Query ID and session info.</param>
            <param name="licenseKey">Unique license key identifying the user or tenant.</param>
            <returns>A ChatResponse containing information about widget operations including created, updated or deleted widgets.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.PreProcessQuery(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Pre-processes the query by updating the chat history from the cache.
            </summary>
            <param name="aiAssistanceRequest">The AI assistance request containing session details and previous context.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.PostProcessQuery(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Post-processes the query by updating the chat history to the cache.
            </summary>
            <param name="aiAssistanceRequest">The AI assistance request containing session details and updated context.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.UpdateHistoryFromCache(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Retrieves the chat history from the memory cache and updates the AI assistance request's previous context.
            </summary>
            <param name="aiAssistanceRequest">The AI assistance request to update with the cached chat history.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.UpdateHistoryToCache(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Updates the memory cache with the current chat history from the AI assistance request.
            </summary>
            <param name="aiAssistanceRequest">The AI assistance request containing the updated chat history to cache.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.AiAssistanceOperations.CheckAndRemoveFromCache(System.String)">
            <summary>
            Checks the chat history for the specified session in the memory cache and removes the oldest entries
            if the history exceeds a specified limit.
            </summary>
            <param name="sessionId">The session ID used to identify the chat history in the memory cache.</param>
            <remarks>
            If the number of entries in the chat history reaches 50, the oldest 20 entries are removed to prevent
            excessive memory usage. The updated history is then saved back to the memory cache.
            </remarks>
        </member>
        <member name="T:BoldBi.Ai.Base.Constants">
            <summary>
            Contains constant values used throughout the BoldBi AI application.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.GetUmsToken">
            <summary>
            The endpoint to obtain the UMS (User Management System) token.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.ActivateAILicense">
            <summary>
            The endpoint to activate the AI license for a specific tenant.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.CreateWidget">
            <summary>
            The log message for calling the CreateWidget function in the Semantic Kernel.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.MemoryCollectionName">
            <summary>
            The name of the memory collection for semantic search.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.EmbeddingModel">
            <summary>
            The identifier for the embedding model used in AI processing.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.AiRequestTable">
            <summary>
            name of the ai request table.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.AiDatasourceTable">
            <summary>
            name of the ai datasource table.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.AiUsersTable">
            <summary>
            name of the ai user table.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.AiSiteInfoTable">
            <summary>
            name of the ai site info table.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.AiChatTable">
            <summary>
            name of the ai chat table.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.AiSessionTable">
            <summary>
            name of the ai session table.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Constants.AiLicenseTable">
            <summary>
            name of the ai license table.
            </summary>
        </member>
        <member name="T:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations">
            <summary>
            Defines operations for AI assistance, including processing chat and question answer widget queries, and handling relevant question retrieval.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.ProcessChatQuery(System.String,System.String)">
            <summary>
            Processes a chat-based query from the user and returns a response.
            </summary>
            <param name="jsonInput">The JSON input containing the user's chat query.</param>
            <param name="licenseKey">The license key required for processing the request.</param>
            <returns>A task representing the asynchronous operation, with an object containing the result of the chat query processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.ProcessQnaQuery(System.String,System.String)">
            <summary>
            Processes a question answer widget query from the user and returns a response.
            </summary>
            <param name="jsonInput">The JSON input containing the user's question answer widget query.</param>
            <param name="licenseKey">The license key required for processing the request.</param>
            <returns>A task representing the asynchronous operation, with an object containing the result of the question answer widget query processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.ReleventQuestionProcess(System.String,System.String)">
            <summary>
            Retrieves responses for relevant questions based on the user's input.
            </summary>
            <param name="jsonInput">The JSON input containing the user's relevant question query.</param>
            <param name="licenseKey">The license key required for processing the request.</param>
            <returns>A task representing the asynchronous operation, with an object containing the result of processing the relevant question query.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.ProcessChatQueryUsingStructureOutput(System.String,System.String)">
            <summary>
            Processes a chat-based query from the user and returns a response.
            </summary>
            <param name="jsonInput">The JSON input containing the user's chat query.</param>
            <param name="licenseKey">The license key required for processing the request.</param>
            <returns>A task representing the asynchronous operation, with an object containing the result of the chat query processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.ProcessFormatQueryOutput(System.String,System.String)">
            <summary>
            Processes a formatted query from the user and returns a response.
            </summary>
            <param name="jsonInput">The JSON input containing the user's formnat query.</param>
            <param name="licenseKey">The license key required for processing the request.</param>
            <returns>A task representing the asynchronous operation, with an object containing the result of the format query processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.WidgetSummarizationProcess(System.String,System.String)">
            <summary>
            Retrieves responses for summarization of widget.
            </summary>
            <param name="jsonInput">The JSON input containing the user's relevant question query.</param>
            <param name="licenseKey">The license key required for processing the request.</param>
            <returns>A task representing the asynchronous operation, with an object containing the result of processing the relevant question query.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.DashboardSummarizationProcess(System.String,System.String)">
            <summary>
            Retrieves responses for summarization of dashboard.
            </summary>
            <param name="jsonInput">The JSON input containing the user's relevant question query.</param>
            <param name="licenseKey">The license key required for processing the request.</param>
            <returns>A task representing the asynchronous operation, with an object containing the result of processing the relevant question query.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IAiAssistanceOperations.UpdateAssistanceResponseAsync(System.String)">
            <summary>
            Asynchronously updates the assistance response based on the provided JSON input.
            </summary>
            <param name="jsonInput">The JSON-formatted string containing the assistance response details.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Contracts.IBoldAiProcess">
            <summary>
            Defines processes for AI-based operations, including input building, output generation, and message execution.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Contracts.IBoldAiProcess.RawInput">
            <summary>
            Gets the raw input string used in the AI process.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Contracts.IBoldAiProcess.RawOutput">
            <summary>
            Gets the raw output string generated by the AI process.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IBoldAiProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Builds an input string for the specified AI operation.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A string representing the built input for the AI operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IBoldAiProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Builds an output response based on the AI assistance request and response from OpenAI.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation, with an <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.IChatResponse"/> containing the final output.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IBoldAiProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes a message processing operation with the AI connection.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation, with <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/> containing the response text from OpenAI.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Contracts.IFieldBuilder">
            <summary>
            Defines the contract for a field builder, responsible for building fields based on the provided input.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IFieldBuilder.Build(System.String,System.String)">
            <summary>
            Builds a field based on the given input JSON and table information.
            </summary>
            <param name="inputJson">The JSON input containing the field construction parameters.</param>
            <param name="tableInfo">The table information required for the field construction process.</param>
            <returns>A task representing the asynchronous operation, with an <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse"/> as the result.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Contracts.IResponseBuilder">
            <summary>
            Defines the contract for processing AI responses, including validation, formatting, and conversion of JSON data.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IResponseBuilder.IsValidJson(System.String)">
            <summary>
            Validates whether the provided JSON string is in a valid format.
            </summary>
            <param name="json">The JSON string to be validated.</param>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the JSON is valid (<c>true</c>) or not (<c>false</c>).</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IResponseBuilder.FormatToValidJson(System.String)">
            <summary>
            Formats the given text into a valid JSON string.
            </summary>
            <param name="text">The text to be formatted into JSON.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the formatted valid JSON string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IResponseBuilder.GetAiService(BoldBi.Ai.Core.Enums.AiOperation)">
            <summary>
            Retrieves the appropriate AI service based on the specified operation type.
            </summary>
            <param name="type">The type of AI operation to be performed.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the corresponding <see cref="T:BoldBi.Ai.Base.Contracts.IBoldAiProcess"/> service.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IResponseBuilder.ConvertAiResponseToFieldInfo(System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Converts the AI response JSON into a <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse"/> object.
            </summary>
            <param name="json">The JSON response from the AI service.</param>
            <param name="aiAssistanceRequest">The original request used to process the AI query.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the converted <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse"/> object.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Contracts.ISessionManager">
            <summary>
            Defines the contract for managing AI sessions, including creating and ending sessions.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.ISessionManager.CreateSession(System.String)">
            <summary>
            Creates a new session based on the provided input.
            </summary>
            <param name="jsonInput">The input data in JSON format used to create the session.</param>
            <returns>An object representing the created session.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.ISessionManager.EndSession(System.String)">
            <summary>
            Ends the session based on the provided input and performs any necessary cleanup.
            </summary>
            <param name="jsonInput">The input data in JSON format used to end the session.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an object representing the result of the session end process.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Contracts.IUsageProcessor">
            <summary>
            Defines the contract for processing usage data for AI operations, including tracking the usage of models and handling license details.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IUsageProcessor.ProcessUsage(BoldBi.Ai.Core.Models.AIResponseBuilder.AIUsage,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Processes the usage data for a specific AI operation.
            </summary>
            <param name="chatMessageContent">The usage data related to a chat message, typically including token counts and other related usage details.</param>
            <param name="licenseKey">The license key used to validate the usage of AI services.</param>
            <param name="modelId">The ID of the AI model being used in the operation.</param>
            <param name="request">The request object that contains additional information related to the AI operation, such as the context and the operation type.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Contracts.IUsageProcessor.ProcessUsage(System.Int32,System.Int32,System.Int32,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Processes and updates the usage information for a specified AI operation.
            </summary>
            <param name="inputToken">Input Token.</param>
            <param name="outputToken">Output Token.</param>
            <param name="totalToken">Total Token.</param>
            <param name="licenseKey">The license key used to validate the usage of AI services.</param>
            <param name="modelId">The ID of the AI model being used in the operation.</param>
            <param name="request">The request object that contains additional information related to the AI operation, such as the context and the operation type.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.BoldAiProcessFactory">
            <summary>
            Factory class for creating instances of different AI processes based on the specified AI operation.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.BoldAiProcessFactory.GetProcess(BoldBi.Ai.Core.Enums.AiOperation)">
            <summary>
            Gets an instance of an AI process based on the provided operation type.
            </summary>
            <param name="aiOperaton">The type of AI operation for which the process is to be created.</param>
            <returns>An instance of <see cref="T:BoldBi.Ai.Base.Contracts.IBoldAiProcess"/> corresponding to the specified operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess">
            <summary>
            A process for updating chart properties. It interacts with the AI connection to retrieve the chart's updated properties
            and formats the response to match the expected properties for a chart.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.RawInput">
            <summary>
            Gets the raw input for the process. This functionality is not implemented for the current process.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.RawOutput">
            <summary>
            Gets the raw output for the process. This functionality is not implemented for the current process.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the process of retrieving text content based on a message and question.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/> response.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Builds the output based on the AI response and assistance request, formatting the response to match chart properties.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.IChatResponse"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Builds the input required for the process, specifically the visualization prompt.
            </summary>
            /// <param name="args">The input which contains parameters required for the input building.</param>
            <returns>The prepared input string for the operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.FindPropertyMatchForStructuredOutput(System.String)">
            <summary>
            Finds and corrects any property matches from the AI response by matching properties to known chart properties.
            </summary>
            <param name="answer">The raw response text from the AI.</param>
            <returns>A string representing the corrected chart properties in key-value format.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.FindPropertyMatch(System.String)">
            <summary>
            Finds and corrects any property matches from the AI response by matching properties to known chart properties.
            </summary>
            <param name="answer">The raw response text from the AI.</param>
            <returns>A string representing the corrected chart properties in key-value format.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.ProcessFuzzyMatching(System.String)">
            <summary>
            Performs fuzzy matching to find the best matching property name from a predefined list of property names.
            </summary>
            <param name="key">The key to match against the property names.</param>
            <returns>
            Returns the best matching property name if a match is found with a similarity score greater than or equal to 80.
            If no match is found, the original key is returned.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.PrepareVisualizationPrompt">
            <summary>
            Prepares the visualization prompt for chart updation operations.
            </summary>
            <returns>The prepared visualization prompt string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ChartUpdationProcess.PrepareSystemMessage">
            <summary>
            Prepares the system message to instruct the AI on how to handle chart property-related queries.
            </summary>
            <returns>The system message string.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess">
            <summary>
            Represents a process for creating and processing SQL queries based on input messages and questions.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.RawInput">
            <summary>
            Gets the raw input message and question used to generate the SQL query.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.RawOutput">
            <summary>
            Gets the raw output response from the AI that contains the generated SQL query.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Builds the input for the query generation process based on the provided arguments.
            </summary>
            <param name="args">The arguments containing schema and user question information.</param>
            <returns>A string representing the formatted input for query generation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Builds the output of the query process by deserializing the AI response into a query structure.
            </summary>
            <param name="args">The arguments containing the AI response and request details.</param>
            <returns>A task representing the asynchronous operation that returns the query response.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the SQL query generation process based on the provided message and question.
            </summary>
            <param name="args">The arguments containing the AI connection, message, and question.</param>
            <returns>A task representing the asynchronous operation that returns the response from the AI.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.FormatTableInfo(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails})">
            <summary>
            Formats the table information, ensuring consistency in connection type and filtering out unnecessary fields.
            </summary>
            <param name="tableInfo">The JSON string containing table information.</param>
            <returns>A formatted JSON string representing the table information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.PrepareTableQueryContent(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails})">
            <summary>
            Prepares the content for each table, formatting it as a structured string containing table and column details.
            </summary>
            <param name="requiredDs">The list of data sources to process.</param>
            <returns>A string representing table names and their corresponding columns in JSON-like format.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateQueryProcess.PrepareTableContent(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails})">
            <summary>
            Prepares the content for each table, formatting it as a structured string containing table and column details.
            </summary>
            <param name="requiredDs">The list of data sources to process.</param>
            <returns>A string representing table names and their corresponding columns in JSON-like format.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.CreateVisualProcess">
            <summary>
            Handles the process of preparing inputs and outputs for creating a visual.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateVisualProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Constructs and prepares an input string for visualization based on the operation, table information, and a previous question.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A formatted string ready for AI processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateVisualProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Processes the AI response and prepares the output based on the provided request and AI response data.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation, with a result containing the prepared output object.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if there is an error in general AI processing.</exception>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.ConnectionException">Thrown if there is an error with the AI connection.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateVisualProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the AI process to generate a response from an AI connection based on the provided message and question.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation, with a result containing the processed output as a <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateVisualProcess.GetPreviousCreateWidgetHistory(System.String)">
            <summary>
            Get previous History information for create widget.
            </summary>
            <param name="previousHistories"> information about previous information.</param>
            <returns>create widget history information. </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateVisualProcess.PrepareSystemMessage(System.String)">
            <summary>
            Generates a system message for an AI assistant based on the type of operation and provided details.
            For `DataConfiguration` operations, the message instructs the assistant to provide chart fields from the given table schema and includes previous questions for context.
            For other operations, the message details rules for creating Bold BI charts, specifying required key names, their order, and constraints for the `Name` field.
            </summary>
            <param name="tableInfoContent">The content of the table schema used for visualization.</param>
            <returns>A formatted string containing the instructions and rules for the AI assistant based on the operation type.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess">
            <summary>
            Handles the process of preparing inputs and outputs for creating a widget.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess.RawInput">
            <summary>
            Gets the raw input data prepared for AI processing.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess.RawOutput">
            <summary>
            Gets the raw output data returned by AI processing.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Constructs and prepares an input string for visualization based on the operation, table information, and a previous question.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A formatted string ready for AI processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Processes the AI response and prepares the output based on the provided request and AI response data.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation, with a result containing the prepared output object.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if there is an error in general AI processing.</exception>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.ConnectionException">Thrown if there is an error with the AI connection.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the AI process to generate a response from an AI connection based on the provided message and question.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation, with a result containing the processed output as a <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess.GetPreviousCreateWidgetHistory(System.String)">
            <summary>
            Retrieves previous history specific to widget creation from provided history data.
            </summary>
            <param name="previousHistories">Serialized history data in JSON format.</param>
            <returns>A string containing previous relevant history data for widget creation, or an empty string if none found.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.CreateWidgetProcess.PrepareSystemMessage(System.String,System.String,BoldBi.Ai.Core.Enums.AiOperation)">
            <summary>
            Generates a system message to instruct the AI assistant based on the operation type and relevant data.
            </summary>
            <param name="tableInfoContent">Serialized table schema information for visualization.</param>
            <param name="previousHistories">Serialized history data for additional context.</param>
            <param name="operation">The AI operation type (e.g., creating or updating a widget).</param>
            <returns>A formatted string with instructions for the AI assistant.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.DashboardSummarizationProcess">
            <summary>
            Handles input and output for widget summary.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.DashboardSummarizationProcess.RawInput">
            <summary>
            Gets the raw input data prepared for AI processing.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.DashboardSummarizationProcess.RawOutput">
            <summary>
            Gets the raw output data returned by AI processing.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.DashboardSummarizationProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Method to build input for widget summary.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A prompt for widget summarization.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.DashboardSummarizationProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Runs the AI connection and processes the provided message and question.
            This method is not implemented in this class.
            </summary>
            <param name="args">The input which contains parameters required for the run process building.</param>
            <returns>A task representing the asynchronous operation, with a result containing the processed output as a <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.DashboardSummarizationProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Processes the AI response and prepares the output based on the provided request and AI response data.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation, with a result containing the prepared output object.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if there is an error in general AI processing.</exception>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.ConnectionException">Thrown if there is an error with the AI connection.</exception>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.FormatResponseProcess">
            <summary>
            Represents the process to format AI responses.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.FormatResponseProcess.RawInput">
            <summary>
            Gets the raw input data.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.FormatResponseProcess.RawOutput">
            <summary>
            Gets the raw output data.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.FormatResponseProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Builds the input string for the AI assistant.
            </summary>
            <param name="args">The arguments required to build the input.</param>
            <returns>The input string for the AI assistant.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.FormatResponseProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Builds the output response from the AI assistant.
            </summary>
            <param name="args">The arguments required to build the output.</param>
            <returns>A task representing the asynchronous operation, with a chat response as the result.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.FormatResponseProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the process to run the AI assistant with the given arguments.
            </summary>
            <param name="args">The arguments required to run the process.</param>
            <returns>A task representing the asynchronous operation, with textual content as the result.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.GenerateQuestionProcess">
            <summary>
            Represents the process for generating relevant questions for creating visualizations based on table schema.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.GenerateQuestionProcess.RawInput">
            <summary>
            Gets the raw input data prepared for AI processing.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.GenerateQuestionProcess.RawOutput">
            <summary>
            Gets the raw output data returned by AI processing.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.GenerateQuestionProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Builds the input prompt for the AI model to generate questions based on the table schema.
            </summary><param name="args">The input which contains parameters required for the input building.</param>
            <returns>A string prompt instructing the AI model to generate questions.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.GenerateQuestionProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Processes the AI response and prepares the output in the form of relevant questions.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation, with a result of type <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.IChatResponse"/> containing the processed output.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.ConnectionException">Thrown if there is an error with the AI connection.</exception>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if there is an error in AI processing.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.GenerateQuestionProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the AI connection to retrieve text content based on the provided message and question.
            </summary><param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation, with a result of type <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/> containing the AI response.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.JsonFormatter">
            <summary>
            Processes and formats data as JSON output for AI-related operations.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.JsonFormatter.RawInput">
            <summary>
            Gets the raw input data for processing.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.JsonFormatter.RawOutput">
            <summary>
            Gets the raw output data after processing.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.JsonFormatter.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Builds the input message required by the AI service.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A string prompt instructing the AI service to format data as JSON.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.JsonFormatter.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Prepares the output data from the AI response.
            This method is currently not implemented.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation with the processed chat response.</returns>
            <exception cref="T:System.NotImplementedException">Thrown as the method is not yet implemented.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.JsonFormatter.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the AI connection to process the given message and question.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation with a result of <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.JsonFormatter.PrepareSystemMessage">
            <summary>
            Prepares a system message instructing the AI to format the output as JSON.
            </summary>
            <returns>A string message with JSON formatting instructions.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.QnaCreateWidgetProcess">
            <summary>
            Processes question answer widget to create widget requests by generating appropriate inputs and processing outputs for AI-based visualization tasks.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.QnaCreateWidgetProcess.RawInput">
            <summary>
            Gets the raw input data for processing.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.QnaCreateWidgetProcess.RawOutput">
            <summary>
            Gets the raw output data after processing.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.QnaCreateWidgetProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Builds the input message required for the AI operation.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A formatted string for system message preparation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.QnaCreateWidgetProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Builds the output based on the AI response and formats it for question answer widget creation.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task that represents the asynchronous operation to create a formatted response.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.ConnectionException">Thrown when there is an issue with the AI connection.</exception>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown when there is a general AI exception.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.QnaCreateWidgetProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the AI connection to process the given message and question.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation with a result of <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.QnaCreateWidgetProcess.PrepareSystemMessage(System.String)">
            <summary>
            Prepares a system message with given table information and operation context for AI processing.
            </summary>
            <param name="tableInfoContent">The table information content.</param>
            <returns>A formatted system message for AI input preparation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.ValidationProcess">
            <summary>
            Handles the process of preparing inputs and outputs for creating a visual.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.ValidationProcess.RawInput">
            <summary>
            Gets the raw input data for processing.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.ValidationProcess.RawOutput">
            <summary>
            Gets the raw output data after processing.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ValidationProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Constructs and prepares an input string for visualization based on the operation, table information, and a previous question.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A formatted string ready for AI processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ValidationProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Processes the AI response and prepares the output based on the provided request and AI response data.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation, with a result containing the prepared output object.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if there is an error in general AI processing.</exception>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.ConnectionException">Thrown if there is an error with the AI connection.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ValidationProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Executes the AI process to generate a response from an AI connection based on the provided message and question.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation, with a result containing the processed output as a <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ValidationProcess.GetPreviousCreateWidgetHistory(System.String)">
            <summary>
            Get previous History information for create widget.
            </summary>
            <param name="previousHistories"> information about previous informations.</param>
            <returns>create widget history information. </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.ValidationProcess.PrepareSystemMessage(System.String,System.String)">
            <summary>
            Generates a system message for an AI assistant based on the type of operation and provided details.
            For `DataConfiguration` operations, the message instructs the assistant to provide chart fields from the given table schema and includes previous questions for context.
            For other operations, the message details rules for creating Bold BI charts, specifying required key names, their order, and constraints for the `Name` field.
            </summary>
            <param name="tableInfoContent">The content of the table schema used for visualization.</param>
            <param name="previousQuestion">previous questions information.</param>
            <returns>A formatted string containing the instructions and rules for the AI assistant based on the operation type.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CoreProcesses.WidgetSummarizationProcess">
            <summary>
            Handles input and output for widget summary.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.WidgetSummarizationProcess.RawInput">
            <summary>
            Gets the raw input data prepared for AI processing.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CoreProcesses.WidgetSummarizationProcess.RawOutput">
            <summary>
            Gets the raw output data returned by AI processing.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.WidgetSummarizationProcess.BuildInput(BoldBi.Ai.Core.Models.CoreProcesses.BuildInputArgs)">
            <summary>
            Method to build input for widget summary.
            </summary>
            <param name="args">The input which contains parameters required for the input building.</param>
            <returns>A prompt for widget summarization.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.WidgetSummarizationProcess.Run(BoldBi.Ai.Core.Models.CoreProcesses.RunProcessArgs)">
            <summary>
            Runs the AI connection and processes the provided message and question.
            This method is not implemented in this class.
            </summary>
            <param name="args">The input which contains parameters required for the execute process.</param>
            <returns>A task representing the asynchronous operation, with a result containing the processed output as a <see cref="T:Microsoft.Extensions.AI.TextContent"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.WidgetSummarizationProcess.BuildOutput(BoldBi.Ai.Core.Models.CoreProcesses.BuildOutputArgs)">
            <summary>
            Processes the AI response and prepares the output based on the provided request and AI response data.
            </summary>
            <param name="args">The input which contains parameters required for the output building.</param>
            <returns>A task representing the asynchronous operation, with a result containing the prepared output object.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if there is an error in general AI processing.</exception>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.ConnectionException">Thrown if there is an error with the AI connection.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CoreProcesses.WidgetSummarizationProcess.PrepareSystemMessage(System.String,System.String,System.String)">
            <summary>
            Prepares the system message to instruct the AI on how to handle chart property-related queries.
            </summary>
            <returns>The system message string.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.CredentialManager">
            <summary>
            Provides utility methods for managing AI credential configurations.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.#ctor(BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.CredentialManager"/> class.
            </summary>
            <param name="context">The database context used for accessing application data.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.VerifyDefinedAIConfiguration(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Verifies and creates a standardized AI configuration object.
            </summary>
            <param name="provider">The provider of the AI service.</param>
            <param name="model">The model or deployment name used by the provider.</param>
            <param name="apiKey">The API key for authentication.</param>
            <param name="isOpenAi">Finds whether it is openai or not.</param>
            <param name="resourceName">The resource name for the service (optional).</param>
            <returns>A populated <see cref="T:BoldBi.Ai.Base.CustomAIConfiguration"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.SetAIConfiguration(BoldBi.Ai.Base.CustomAIConfiguration)">
            <summary>
            Sets the custom AI configuration and determines the AI provider.
            </summary>
            <param name="aiConfiguration">The AI configuration object.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.VerifyAIConfiguration(System.String,System.Boolean)">
            <summary>
            Verifies the AI configuration and connection based on the provided credentials JSON.
            </summary>
            <param name="inputCredentials">Optional property of input credentials.</param>
            <param name="isCredentialsCheck">Optional property of isCredentialsCheck.</param>
            <returns>A JSON response indicating the AI Configuration.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.ValidateAndActivate(System.String)">
            <summary>
            Checks if a tenant is allowed based on the provided JSON input.
            </summary>
            <param name="jsonInput">The JSON input containing the tenant ID.</param>
            <returns>An object indicating whether the tenant is allowed access.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.MakeServerRequestAsync">
            <summary>
            Makes a request to the server to retrieve AI credentials.
            </summary>
            <returns>A JSON string containing AI credentials based on the provider.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.GetServerTokenAsync">
            <summary>
            Retrieves an access token from the server.
            </summary>
            <returns>The access token as a string if successful; otherwise, an empty string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.GetAICredentials(System.String)">
            <summary>
            Retrieves AI credentials using the provided access token.
            </summary>
            <param name="accessToken">The access token required for authentication.</param>
            <returns>A JSON string containing AI credentials if successful; otherwise, an error message.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.LogError(System.String,System.String,System.String)">
            <summary>
            Logs an error message with additional details.
            </summary>
            <param name="message">The main error message.</param>
            <param name="method">The method where the error occurred.</param>
            <param name="details">Additional details about the error.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.ReadValueFromConfig(System.String)">
            <summary>
            Reads a value from the configuration file.
            </summary>
            <param name="key">The key of the configuration setting.</param>
            <returns>The value associated with the key if found; otherwise, an exception is thrown.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the configuration file is not found.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the key is not found in the configuration file.</exception>
            <exception cref="T:System.Exception">Thrown if the key is found but is not a string.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.HandleConfig(System.String)">
            <summary>
            Handles cases where the General configuration is missing in the credentials JSON.
            </summary>
            <param name="credentialJson">The JSON string containing AI credentials.</param>
            <returns>A fully populated <see cref="T:BoldBi.Ai.Base.CustomAIConfiguration"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.VerifyOpenAIConfiguration(BoldBi.Ai.Base.OpenAICredentialManager)">
            <summary>
            Verifies and sets OpenAI configuration values.
            </summary>
            <param name="credentialManager">The OpenAI credential manager.</param>
            <returns>A populated <see cref="T:BoldBi.Ai.Base.CustomAIConfiguration"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.VerifyAzureAIConfiguration(BoldBi.Ai.Base.AzureAICredentialManager)">
            <summary>
            Verifies and sets Azure AI configuration values.
            </summary>
            <param name="credentialManager">The Azure AI credential manager.</param>
            <returns>A populated <see cref="T:BoldBi.Ai.Base.CustomAIConfiguration"/> object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.CreateSuccessResponse(System.String)">
            <summary>
            Creates a success response in JSON format.
            </summary>
            <param name="statusMessage">Status message.</param>
            <returns>A JSON string representing the success response.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.CredentialManager.CreateErrorResponse(System.String)">
            <summary>
            Creates an error response in JSON format.
            </summary>
            <param name="errorMessage">The error message.</param>
            <returns>A JSON string representing the error response.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.AiProvider">
            <summary>
            Represents an AI provider with basic provider information.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.AiProvider.Provider">
            <summary>
            Gets or sets the name of the AI provider.
            </summary>
        </member>
        <member name="T:BoldBi.Ai.Base.AiCredentialsData">
            <summary>
            Represents the configuration details required for AI services.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.AiCredentialsData.AIProvider">
            <summary>
            Gets or sets the name of the AI provider.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.AiCredentialsData.AICredentials">
            <summary>
            Gets or sets the credentials from server.
            </summary>
        </member>
        <member name="T:BoldBi.Ai.Base.OpenAICredentialManager">
            <summary>
            Represents the configuration details required for OpenAI services.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.OpenAICredentialManager.Provider">
            <summary>
            Gets or sets the name of the AI provider.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.OpenAICredentialManager.Model">
            <summary>
            Gets or sets the model name to be used with the provider.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.OpenAICredentialManager.ApiKey">
            <summary>
            Gets or sets the API key for authentication with OpenAI.
            </summary>
        </member>
        <member name="T:BoldBi.Ai.Base.AzureAICredentialManager">
            <summary>
            Represents the configuration details required for Azure AI services.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.AzureAICredentialManager.Provider">
            <summary>
            Gets or sets the name of the AI provider.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.AzureAICredentialManager.DeploymentName">
            <summary>
            Gets or sets the deployment name for the Azure AI service.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.AzureAICredentialManager.ApiKey">
            <summary>
            Gets or sets the API key for authentication with Azure AI.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.AzureAICredentialManager.ResourceName">
            <summary>
            Gets or sets the endpoint URL for the Azure AI service.
            </summary>
        </member>
        <member name="T:BoldBi.Ai.Base.CustomAIConfiguration">
            <summary>
            Represents the configuration for a custom AI system,
            including general settings and specific configurations for various AI functionalities.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CustomAIConfiguration.General">
            <summary>
            Gets or sets the general configuration for the AI system,
            including provider details, model information, API keys, and endpoints.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CustomAIConfiguration.Classification">
            <summary>
            Gets or sets the configuration for AI-based classification functionality.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CustomAIConfiguration.VisualCreation">
            <summary>
            Gets or sets the configuration for visual creation tasks in the AI system.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CustomAIConfiguration.VisualUpdation">
            <summary>
            Gets or sets the configuration for visual updating tasks in the AI system.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CustomAIConfiguration.Summarization">
            <summary>
            Gets or sets the configuration for text summarization functionality.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.CustomAIConfiguration.TextualResponse">
            <summary>
            Gets or sets the configuration for generating textual responses using the AI system.
            </summary>
        </member>
        <member name="T:BoldBi.Ai.Base.CustomNullableAttribute">
            <summary>
            Used as a flag for nullable values while generating the OpenAI request body structure.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.CustomNullableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.CustomNullableAttribute"/> class.
            </summary>
            <param name="isNullable">Indicates whether the target allows null values.</param>
        </member>
        <member name="P:BoldBi.Ai.Base.CustomNullableAttribute.IsNullable">
            <summary>
            Gets a value indicating whether the target allows null values.
            </summary>
        </member>
        <member name="T:BoldBi.Ai.Base.Extensions.ScheduledActions">
            <summary>
            Handles the processing of dead-letter queues as a hosted service.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledActions.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Extensions.ScheduledActions"/> class.
            </summary>
            <param name="memoryCache">Stores memory cache.</param>
            <param name="serviceScopeFactory">The service scope factory which contains scoped instances.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledActions.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the background service to process dead-letter queues at regular intervals.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>A task that represents the start of the service.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledActions.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the background service.
            </summary>
            <param name="cancellationToken">Token to monitor for cancellation requests.</param>
            <returns>A task that represents the stop of the service.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledActions.Dispose">
            <summary>
            Disposes the resources used by the <see cref="T:BoldBi.Ai.Base.Extensions.ScheduledActions"/> class.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledActions.UpdateSessionEndTimes(BoldBi.Ai.Core.Contracts.DbServiceDeployment.IResourceHandler)">
            <summary>
            Periodically checks and updates session end times for sessions with no end time.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledActions.DoWork(System.Object)">
            <summary>
            Method that is called at regular intervals to process dead-letter queues.
            </summary>
            <param name="state">An object containing information to be used by the callback method. This parameter is not used in this implementation.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Extensions.ScheduledDataDeleter">
            <summary>
            Service for scheduling regular deletion of old records from the database.
            This service is designed to run daily, removing data older than a specified cutoff period.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledDataDeleter.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Extensions.ScheduledDataDeleter"/> class.
            </summary>
            <param name="memoryCache">The memory cache instance used for caching operations.</param>
            <param name="serviceScopeFactory">The service scope factory which contains scoped instances.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledDataDeleter.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the scheduled data deletion task.
            </summary>
            <param name="cancellationToken">Token to signal cancellation.</param>
            <returns>A task that represents the asynchronous start operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledDataDeleter.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the scheduled data deletion task.
            </summary>
            <param name="cancellationToken">Token to signal cancellation.</param>
            <returns>A task that represents the asynchronous stop operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledDataDeleter.Dispose">
            <summary>
            Disposes the timer and other resources used by this service.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.ScheduledDataDeleter.DoWork(System.Object)">
            <summary>
            Performs the scheduled cleanup operation for specified tables.
            </summary>
            <param name="state">An optional state object (not used in this implementation).</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Extensions.UsageLogConsumer">
            <summary>
            A background service that consumes and processes messages from queues.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.UsageLogConsumer.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Extensions.UsageLogConsumer"/> class.
            </summary>
            <param name="memoryCache">The memory cache instance used for caching operations.</param>
            <param name="serviceScopeFactory">The service scope factory which contains scoped instances.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.UsageLogConsumer.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the background service and begins processing messages from queues.
            </summary>
            <param name="stoppingToken">Token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Extensions.UsageLogConsumer.ProcessMessageAsync(System.String,System.Object)">
            <summary>
            Processes a dequeued message.
            </summary>
            <param name="queueName">The name of the queue from which the message was dequeued.</param>
            <param name="message">The dequeued message.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.AiInputPreparationHelper">
            <summary>
            Provides helper methods for preparing and converting data source details into table information formats.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.AiInputPreparationHelper.ConvertDatasourcesToTableInfo(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails})">
            <summary>
            Converts a list of data source details to table information without altering the data.
            </summary>
            <param name="dataSources">The list of data source details.</param>
            <returns>The list of <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails"/> representing the data sources.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.AiInputPreparationHelper.ConvertDatasourcesToTableInfoString(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails})">
            <summary>
            Converts a list of data source details to a string format containing structured table information.
            </summary>
            <param name="dataSources">The list of data source details.</param>
            <returns>A string representing the table information for the provided data sources.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.AiInputPreparationHelper.PrepareTableContent(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails})">
            <summary>
            Prepares the content for each table, formatting it as a structured string containing table and column details.
            </summary>
            <param name="requiredDS">The list of data sources to process.</param>
            <returns>A string representing table names and their corresponding columns in JSON-like format.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.AmountUpdateHelper">
            <summary>
            Helper class for managing and updating the cost of each request to OpenAI based on token usage.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.AmountUpdateHelper.ProcessUsage(BoldBi.Ai.Core.Models.AIResponseBuilder.AIUsage,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Processes the token usage details and updates the cost for each request based on the AI model.
            </summary>
            <param name="tokensSpent">The token usage information from the request.</param>
            <param name="licenseKey">The license key associated with the request.</param>
            <param name="aiModel">The AI model used (e.g., GPT-3, GPT-4).</param>
            <param name="aiAssistanceRequest">The assistance request containing session and query details.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.AmountUpdateHelper.ProcessUsage(System.Int32,System.Int32,System.Int32,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Processes the token usage details and updates the cost for each request based on the AI model.
            </summary>
            <param name="inputToken">The number of input tokens used.</param>
            <param name="outputToken">The number of output tokens generated.</param>
            <param name="totalToken">The total number of tokens used (input + output).</param>
            <param name="licenseKey">The license key associated with the request.</param>
            <param name="aiModel">The AI model used (e.g., GPT-3, GPT-4).</param>
            <param name="aiAssistanceRequest">The assistance request containing session and query details.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.AmountUpdateHelper.CalculateCostPerRequest(System.Int32,System.Int32,System.Int32,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Calculates the cost of a single request based on token usage and the AI model.
            </summary>
            <param name="inputToken">The number of input tokens used.</param>
            <param name="outputToken">The number of output tokens generated.</param>
            <param name="totalToken">The total number of tokens used (input + output).</param>
            <param name="aiModel">The AI model used to determine the token cost rates.</param>
            <param name="aiAssistanceRequest">The assistance request containing session and query details.</param>
            <returns>The total cost of the request based on the tokens used.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.AmountUpdateHelper.FetchAndUpdateRequestLimit(System.String,System.Double,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Fetches the current license details and updates the request limit based on the calculated cost.
            </summary>
            <param name="licenseKey">The license key associated with the user request.</param>
            <param name="costPerRequest">The cost of the request based on token usage.</param>
            <param name="aiAssistanceRequest">The assistance request containing logging details.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.CacheManager">
            <summary>
            Provides methods for managing cache related to rate limits.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.CacheManager.AddRateLimitToCache(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Adds rate limits to the cache from the database.
            </summary>
            <param name="memoryCache">The memory cache to store the rate limits.</param>
            <param name="dbContext">The database context to fetch rate limits from.</param>
            <returns>A JSON string indicating the result of the operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.ChatMessageClassifier">
            <summary>
            Provides functionality for classifying chat messages and creating instances based on the parsed data.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ChatMessageClassifier.CreateClassificationInstance(System.Object)">
            <summary>
            Creates an instance of <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.InputDataBuilder"/> based on the provided chat message content.
            </summary>
            <param name="chatMessageContent">The chat message content, typically containing function calls and arguments.</param>
            <returns>An <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.InputDataBuilder"/> instance populated with the classified data.</returns>
            <remarks>
            The method processes the chat message content by deserializing it into function calls, invoking appropriate methods,
            and populating an <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.InputDataBuilder"/> instance with the results.
            </remarks>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">Thrown when deserialization of the input data fails.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when a specified method or type cannot be found or invoked.</exception>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.ConfigureAICloudHelper">
            <summary>
            Provides helper methods for configuring AI cloud providers.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ConfigureAICloudHelper.GetCloudAIConfiguration(System.String)">
            <summary>
            Retrieves the AI configuration based on the specified provider.
            </summary>
            <param name="provider">The AI provider name (e.g., "openai" or "azureai").</param>
            <returns>A <see cref="T:BoldBi.Ai.Base.CustomAIConfiguration"/> object containing the provider-specific settings.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext">
            <summary>
            Represents the database context for the application, providing access to the AI license and usage data.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext.ai_licenses">
            <summary>
            Gets or sets the AI licenses in the database.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext.bold_ai_chat">
            <summary>
            Gets or sets the AI search usage data in the database.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext.bold_ai_sessions">
            <summary>
            Gets or sets the AI session usage data in the database.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext.bold_ai_sandbox_users">
            <summary>
            Gets or sets the AI sandbox users data in the database.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Configures the database connection using Npgsql.
            </summary>
            <param name="optionsBuilder">The builder used to configure the database context.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the model for the database context.
            </summary>
            <param name="modelBuilder">The builder used to configure the model.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext">
            <summary>
            Provides database operations for an on-premise environment.
            Implements the <see cref="T:BoldBi.Ai.Core.Contracts.DbServiceDeployment.IDbOperations"/> interface to handle various database interactions.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext"/> class.
            </summary>
            <param name="memoryCache">Memory cache to store items.</param>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.Connection">
            <summary>
            Gets or sets the database connection.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.ClearInstance">
            <summary>
            Clears the current instance of OnPremiseDbContext.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.GetInstance(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Retrieves the singleton instance of OnPremiseDbContext.
            </summary>
            <param name="memoryCache">The memory cache instance used for caching.</param>
            <returns>The singleton instance of OnPremiseDbContext.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.GetDataInfo(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Converts an array of key-value pairs into a dictionary.
            </summary>
            <param name="data">An array of tuples containing keys and values.</param>
            <returns>A dictionary containing the provided key-value pairs.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.GetConnection(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves or initializes a database connection based on the provided connection ID.
            </summary>
            <param name="id">The unique identifier for the connection.</param>
            <param name="url">The URL to fetch connection details, if necessary.</param>
            <param name="isExecuted">Indicates whether the connection should be forcibly retrieved or created.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.GetConnectionInfo(System.String)">
            <summary>
            Retrieves connection information from the specified URL.
            </summary>
            <param name="url">The URL to fetch connection information from.</param>
            <returns>A string containing the connection information if successful; otherwise, an empty string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.Get(System.String)">
            <summary>
            Retrieves a cached value from memory based on the specified key.
            </summary>
            <param name="id">The key of the cached item.</param>
            <returns>The cached value as a string, or null if the key does not exist.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.AddAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Adds a new item to the specified table with conditional data.
            </summary>
            <param name="data">The data to be added.</param>
            <param name="conditionalData">The conditions that must be met for the operation.</param>
            <param name="tableName">The name of the table where the data will be added.</param>
            <returns>An <see cref="T:Syncfusion.Dashboard.Core.OperationResult`1"/> indicating whether the operation was successful.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.UpdateAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Updates an existing item in the specified table based on given conditions.
            </summary>
            <param name="data">The updated data values.</param>
            <param name="conditionalData">The conditions for identifying the item to update.</param>
            <param name="tableName">The name of the table where the data exists.</param>
            <returns>An <see cref="T:Syncfusion.Dashboard.Core.OperationResult`1"/> indicating whether the operation was successful.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.InsertAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Inserts a new item into the specified table.
            </summary>
            <param name="data">The data to be inserted.</param>
            <param name="tableName">The name of the table where the data will be inserted.</param>
            <returns>An <see cref="T:Syncfusion.Dashboard.Core.OperationResult`1"/> indicating whether the operation was successful.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.DeleteAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Deletes an item from the specified table based on the given condition.
            </summary>
            <param name="data">The data to identify the item to delete.</param>
            <param name="condition">The condition that must be met for deletion.</param>
            <param name="tableName">The name of the table from which the item will be deleted.</param>
            <returns>An <see cref="T:Syncfusion.Dashboard.Core.OperationResult`1"/> indicating whether the operation was successful.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.IsExistsAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Checks if an item exists in the specified table based on the given conditions.
            </summary>
            <param name="conditionalData">The conditions to check for existence.</param>
            <param name="tableName">The name of the table to check.</param>
            <returns>An <see cref="T:Syncfusion.Dashboard.Core.OperationResult`1"/> indicating whether the item exists.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.ReaderAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Reads data from the specified table based on given conditions.
            </summary>
            <param name="data">The data fields to retrieve.</param>
            <param name="conditionalData">The conditions for retrieving the data.</param>
            <param name="tableName">The name of the table to read from.</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> containing the retrieved data.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.DoDecryptionAsync(System.String)">
            <summary>
            Decrypts the given encrypted content asynchronously.
            </summary>
            <param name="content">The encrypted string to be decrypted.</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.GetconnectionInstanceAsync(System.String)">
            <summary>
            Retrieves an instance of an IConnectionPlugin based on the provided connection type.
            </summary>
            <param name="type">The type of connection plugin to retrieve.</param>
            <returns>An instance of IConnectionPlugin.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.OnPremiseDbContext.DoEncryptionAsync(System.String)">
            <summary>
            Encrypts the given content asynchronously.
            </summary>
            <param name="content">The string to be encrypted.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext">
            <summary>
            Context class for interacting with the audit log database.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext.bold_ai_requests">
            <summary>
            Gets or sets the DbSet representing search activities for Bold AI requests.
            </summary>
            <remarks>
            This property maps to the "bold_ai_requests" table in the database.
            </remarks>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext.bold_ai_datasources">
            <summary>
            Gets or sets the DbSet representing data source information for Bold AI.
            </summary>
            <remarks>
            This property maps to the "bold_ai_datasources" table in the database.
            </remarks>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext.bold_ai_users">
            <summary>
            Gets or sets the DbSet representing user activity information for Bold AI.
            </summary>
            <remarks>
            This property maps to the "bold_ai_users" table in the database.
            </remarks>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext.bold_ai_siteinfo">
            <summary>
            Gets or sets the DbSet representing site activity information for Bold AI.
            </summary>
            <remarks>
            This property maps to the "bold_ai_siteinfo" table in the database.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Configures the database connection using Npgsql.
            </summary>
            <param name="optionsBuilder">The options builder for configuring the context.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the model for the database context.
            </summary>
            <param name="modelBuilder">The model builder for configuring entity properties.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb">
            <summary>
            Provides methods to fetch pricing and other details from the database.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.#ctor(BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb"/> class with database connection strings.
            </summary>
            <param name="dbContext">The DB context instance.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.FormatNumber(System.Double,System.String)">
            <summary>
            Format the AI usage values.
            </summary>
            <param name="value">AI Usage values.</param>
            <param name="unit">unit of the AI usage.</param>
            <returns>Formatted AI usage value.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.IsAllowedTenant(System.String)">
            <summary>
            Checks if a tenant is allowed based on the provided JSON input.
            </summary>
            <param name="jsonInput">The JSON input containing the tenant ID.</param>
            <returns>An object indicating whether the tenant is allowed access.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.GetAmountByLicenseKey(System.String)">
            <summary>
            Retrieves the amount for a given license key.
            </summary>
            <param name="aiKey">The license key to look up.</param>
            <returns>An object containing the amount associated with the license key.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.GetPricingByMessage(System.String)">
            <summary>
            Asynchronously retrieves pricing information by search ID.
            </summary>
            <param name="searchId">The ID of the search.</param>
            <returns>A JSON string representing the pricing information, or null if not found.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.GetPricingBySession(System.String)">
            <summary>
            Asynchronously retrieves pricing information by session ID.
            </summary>
            <param name="sessionId">The ID of the session.</param>
            <returns>A JSON string representing the pricing information, or null if not found.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.GetPricingByUser(System.String)">
            <summary>
            Fetches pricing information for a given user email.
            </summary>
            <param name="userInfo">The info of the user.</param>
            <returns>JSON string containing the AI tokens and pricing details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.GetPricingPerTenant(System.String)">
            <summary>
            Fetches pricing information for a given tenant and license key within a specified date range.
            </summary>
            <param name="tenantId">The tenantId to look up.</param>
            <returns>JSON string containing the AI tokens and pricing details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudFetchFromDb.GetAiUsage(System.String)">
            <summary>
            Fetches AI usage cost based AI key.
            </summary>
            <param name="inputJson">Json for getting balance amount for license.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper">
            <summary>
            Provides helper methods for handling logging operations in a cloud environment.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper._appDbContext">
            <summary>
            The application database context.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper._dbContext">
            <summary>
            The usage log database context.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper._memoryCache">
            <summary>
            The memory cache instance.
            </summary>
        </member>
        <member name="F:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper._resourceHandlerImplementation">
            <summary>
            The resource handler implementation.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext,BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper"/> class.
            </summary>
            <param name="memoryCache">The memory cache instance.</param>
            <param name="dbContext">The db context for meta data.</param>
            <param name="usageLogDbContext">The db context for usage data.</param>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.PricingLogHelper">
            <summary>
            Gets or sets the lazy-loaded instance of <see cref="T:BoldBi.Ai.Core.Contracts.DbServiceDeployment.IPricingLogHelper"/>.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.UsageLogHelper">
            <summary>
            Gets or sets the lazy-loaded instance of <see cref="T:BoldBi.Ai.Core.Contracts.DbServiceDeployment.IUsageLogHelper"/>.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.UpdateMemory(BoldBi.Ai.Core.Models.AIInputBuilder.LoggingAssistance)">
            <summary>
            Updates the memory cache with a new chat history for a given session.
            </summary>
            <param name="loggingAssistance">The logging assistance data containing the session ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.ClearCache(System.String)">
            <summary>
            Clears the cache for a given session and updates the session end time in the database.
            </summary>
            <param name="jsonInput">A JSON string containing the session ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.ProcessMessage(System.Object,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.LoggingAssistance)">
            <summary>
            Processes a message by serializing it and passing it to the usage log factory.
            </summary>
            <param name="message">The message to be processed.</param>
            <param name="queueName">The queue name associated with the message.</param>
            <param name="loggingAssistance">The logging assistance data.</param>
            <returns>A completed task.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.UpdateSessionEndTimes">
            <summary>
            Updates session end times for sessions that have been inactive for more than two hours.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.DeleteOldRecordsAsync">
            <summary>
            Deletes old records from multiple tables based on predefined date columns.
            </summary>
            <returns>A task representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.DeleteOldRecordsAsync``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.String)">
            <summary>
            Deletes records older than a cutoff date from the specified DbSet.
            </summary>
            <typeparam name="T">The type of the entity in the DbSet.</typeparam>
            <param name="dbSet">The DbSet from which old records will be deleted.</param>
            <param name="dateColumnName">The name of the date column used to determine record age.</param>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.UpdateCloudSessionEndTimesAsync(System.DateTimeOffset)">
            <summary>
            Updates the end time for cloud sessions that have been inactive for more than two hours.
            </summary>
            <param name="twoHoursAgo">The cutoff time for session inactivity.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudLogHelper.RemoveSessionFromCache(System.String)">
            <summary>
            Removes a session from the memory cache.
            </summary>
            <param name="sessionId">The session ID to remove from the cache.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper">
            <summary>
            Provides helper methods for logging AI pricing and usage data to the database.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper"/> class.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper.#ctor(BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper"/> class with a specified <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext"/> instance.
            </summary>
            <param name="dbContext">Database context instance.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper.LogSearchUsageToDB(System.String)">
            <summary>
            Logs AI search usage data to the database.
            </summary>
            <param name="message">Serialized JSON message containing search usage data.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating success.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper.LogSessionUsageToDB(System.String)">
            <summary>
            Logs AI session usage data to the database.
            </summary>
            <param name="message">Serialized JSON message containing session usage data.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating success.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudPricingLogHelper.UpdateAmountToDb(System.String)">
            <summary>
            Updates the AI license amount in the database.
            </summary>
            <param name="message">Serialized JSON message containing AI key details.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating success.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper">
            <summary>
            Helper class for logging various AI usage data into the cloud database.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper"/> class.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.#ctor(BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper"/> class with a specified <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext"/> instance.
            </summary>
            <param name="dbContext">Database context instance.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.LogRequestsToDB(System.String)">
            <summary>
            Logs AI search requests into the database.
            </summary>
            <param name="message">Serialized JSON message containing request data.</param>
            <returns>Returns true if the operation is successful, otherwise false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.LogDatasourcesToDB(System.String)">
            <summary>
            Logs data source information into the database.
            </summary>
            <param name="message">Serialized JSON message containing data source information.</param>
            <returns>Returns true if the operation is successful, otherwise false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.LogUsersToDB(System.String)">
            <summary>
            Logs user activity information into the database.
            </summary>
            <param name="message">Serialized JSON message containing user activity details.</param>
            <returns>Returns true if the operation is successful, otherwise false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.LogSiteInfoToDB(System.String)">
            <summary>
            Logs site activity information into the database.
            </summary>
            <param name="message">Serialized JSON message containing site activity details.</param>
            <returns>Returns true if the operation is successful, otherwise false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.RetrieveFeedbackInfo(System.String)">
            <summary>
            Retrieves feedback information from the database.
            </summary>
            <param name="jsonInput">Serialized JSON containing feedback details.</param>
            <returns>Returns an object containing feedback details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.Cloud.CloudUsageLogHelper.UpdateFeedbackInfo(System.String)">
            <summary>
            Updates feedback information in the database.
            </summary>
            <param name="jsonInput">Serialized JSON containing feedback details.</param>
            <returns>Returns an object indicating whether the update was successful.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.ConfigSelectorHelper">
            <summary>
            Helper class for selecting the appropriate database configuration based on the deployment type.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.ConfigSelectorHelper.GetService(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext,BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext)">
            <summary>
            Gets the appropriate logging service based on the deployment type.
            </summary>
            <param name="memoryCache">The memory cache instance.</param>
            <param name="dbContext">The db context for meta data.</param>
            <param name="usageLogDbContext">The db context for usage data.</param>
            <returns>An instance of <see cref="T:BoldBi.Ai.Core.Contracts.DbServiceDeployment.IResourceHandler"/> corresponding to the deployment type.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.ConfigSelectorHelper.FetchFromDb(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Gets the appropriate database fetch service based on the deployment type.
            </summary>
            <param name="memoryCache">The memory cache instance.</param>
            <param name="dbContext">The db context instance.</param>
            <returns>An instance of <see cref="T:BoldBi.Ai.Core.Contracts.DbServiceDeployment.IFetchFromDB"/> corresponding to the deployment type.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb">
            <summary>
            Provides methods to fetch pricing and other details from the database.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb"/> class with database connection strings.
            </summary>
            <param name="memoryCache">The memory cache instance.</param>
            <param name="dbContext">The db Context instance.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.IsAllowedTenant(System.String)">
            <summary>
            Checks if a tenant is allowed based on the provided JSON input.
            </summary>
            <param name="jsonInput">The JSON input containing the tenant ID.</param>
            <returns>An object indicating whether the tenant is allowed access.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.GetAmountByLicenseKey(System.String)">
            <summary>
            Retrieves the amount for a given license key.
            </summary>
            <param name="aiKey">The license key to look up.</param>
            <returns>An object containing the amount associated with the license key.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.GetPricingByMessage(System.String)">
            <summary>
            Asynchronously retrieves pricing information by search ID.
            </summary>
            <param name="searchId">The ID of the search.</param>
            <returns>A JSON string representing the pricing information, or null if not found.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.GetPricingBySession(System.String)">
            <summary>
            Asynchronously retrieves pricing information by session ID.
            </summary>
            <param name="sessionId">The ID of the session.</param>
            <returns>A JSON string representing the pricing information, or null if not found.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.GetPricingByUser(System.String)">
            <summary>
            Fetches pricing information for a given user email.
            </summary>
            <param name="userInfo">The info of the user.</param>
            <returns>JSON string containing the AI tokens and pricing details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.GetPricingPerTenant(System.String)">
            <summary>
            Fetches pricing information for a given tenant and license key within a specified date range.
            </summary>
            <param name="tenantId">The tenantId to look up.</param>
            <returns>JSON string containing the AI tokens and pricing details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.FetchFromDb.GetAiUsage(System.String)">
            <summary>
            Fetches AI usage cost based AI key.
            </summary>
            <param name="inputJson">Json for getting balance amount for license.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb">
            <summary>
            Provides methods to fetch pricing and other details from the database.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb"/> class with database connection strings.
            </summary>
            <param name="memoryCache">The memory cache instance.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.IsAllowedTenant(System.String)">
            <summary>
            Checks if a tenant is allowed based on the provided JSON input.
            </summary>
            <param name="jsonInput">The JSON input containing the tenant ID.</param>
            <returns>An object indicating whether the tenant is allowed access.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.GetAmountByLicenseKey(System.String)">
            <summary>
            Retrieves the amount for a given license key.
            </summary>
            <param name="aiKey">The license key to look up.</param>
            <returns>An object containing the amount associated with the license key.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.GetPricingByMessage(System.String)">
            <summary>
            Asynchronously retrieves pricing information by search ID.
            </summary>
            <param name="searchId">The ID of the search.</param>
            <returns>A JSON string representing the pricing information, or null if not found.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.GetPricingBySession(System.String)">
            <summary>
            Asynchronously retrieves pricing information by session ID.
            </summary>
            <param name="sessionId">The ID of the session.</param>
            <returns>A JSON string representing the pricing information, or null if not found.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.GetPricingByUser(System.String)">
            <summary>
            Fetches pricing information for a given user email.
            </summary>
            <param name="userInfo">The info of the user.</param>
            <returns>JSON string containing the AI tokens and pricing details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.GetPricingPerTenant(System.String)">
            <summary>
            Fetches pricing information for a given tenant and license key within a specified date range.
            </summary>
            <param name="tenantId">The tenantId to look up.</param>
            <returns>JSON string containing the AI tokens and pricing details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseFetchFromDb.GetAiUsage(System.String)">
            <summary>
            Fetches AI usage cost based AI key.
            </summary>
            <param name="inputJson">Json for getting balance amount for license.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper">
            <summary>
            Helper class for logging and managing on-premise database operations.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper"/> class.
            </summary>
            <param name="memoryCache">The memory cache instance.</param>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.PricingLogHelper">
            <summary>
            Gets or sets the pricing log helper.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.UsageLogHelper">
            <summary>
            Gets or sets the usage log helper.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.UpdateMemory(BoldBi.Ai.Core.Models.AIInputBuilder.LoggingAssistance)">
            <summary>
            Updates memory cache with session data.
            </summary>
            <param name="loggingAssistance">The logging assistance details.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.ClearCache(System.String)">
            <summary>
            Clears cached session data.
            </summary>
            <param name="json">JSON containing session details.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.ProcessMessage(System.Object,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.LoggingAssistance)">
            <summary>
            Processes and logs a message.
            </summary>
            <param name="message">The message object.</param>
            <param name="queueName">The name of the message queue.</param>
            <param name="loggingAssistance">Logging assistance details.</param>
            <returns>A completed task.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.UpdateSessionEndTimes">
            <summary>
            Updates session end times for inactive sessions.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.DeleteOldRecordsAsync">
            <summary>
            Deletes old records from the database.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.DeleteOldRecordsAsync(System.String,System.String)">
            <summary>
            Deletes old records from the specified table where the date in the specified column is older than 75 days.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="dateColumnName">The column containing date values.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.UpdateOnPremiseSessionEndTimesAsync(System.DateTimeOffset)">
            <summary>
            Updates session end times for sessions inactive beyond the specified threshold.
            </summary>
            <param name="twoHoursAgo">The cutoff time for session inactivity.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseLogHelper.RemoveSessionFromCache(System.String)">
            <summary>
            Removes a session from memory cache.
            </summary>
            <param name="sessionId">The session ID to remove.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremisePricingLogHelper">
            <summary>
            On Premise Db Log Helper.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremisePricingLogHelper.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremisePricingLogHelper"/> class.
            On premise Db operations.
            </summary>
            <param name="memoryCache">The memory cache instance.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremisePricingLogHelper.LogSearchUsageToDB(System.String)">
            <summary>
            Log search usage to database.
            </summary>
            <param name="message">Json to log.</param>
            <returns>true if Db data operation succeeded.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremisePricingLogHelper.LogSessionUsageToDB(System.String)">
            <summary>
            Log Session Usage To Db.
            </summary>
            <param name="message">information about session usage.</param>
            <returns>true if session usages operation succeeded.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremisePricingLogHelper.UpdateAmountToDb(System.String)">
            <summary>
            Update amount to Db.
            </summary>
            <param name="message"> information about amount.</param>
            <returns>true if amount operation succeeded.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper">
            <summary>
            On premise usage log helper.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper"/> class.
             On premise usage log helper.
            </summary>
            <param name="memoryCache">cache info.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper.LogRequestsToDB(System.String)">
            <summary>
            log Request info to Db.
            </summary>
            <param name="message">requests information.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper.LogDatasourcesToDB(System.String)">
            <summary>
            Log Datasource To Db.
            </summary>
            <param name="message">information about datasource.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper.LogUsersToDB(System.String)">
            <summary>
            Log users To Db.
            </summary>
            <param name="message">users info.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper.LogSiteInfoToDB(System.String)">
            <summary>
            Log site information to the Db.
            </summary>
            <param name="message">Site information.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper.RetrieveFeedbackInfo(System.String)">
            <summary>
            Retrieve Feedback information.
            </summary>
            <param name="jsonInput">conditional information.</param>
            <returns>Feedback information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DatabaseHelpers.OnPremise.OnPremiseUsageLogHelper.UpdateFeedbackInfo(System.String)">
            <summary>
            Update Feed back information.
            </summary>
            <param name="jsonInput">Feedback information.</param>
            <returns>Update Feedback information.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor">
            <summary>
            Processes dead-letter messages from various Concurrent Queues.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext,BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor"/> class.
            </summary>
            <param name="memoryCache">The memory cache.</param>
            <param name="dbContext">The db context for meta data.</param>
            <param name="usageLogDbContext">The db context for usage data.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.AddToDeadLetterQueue(System.String,System.Object)">
            <summary>
            Adds a message to the dead-letter queue.
            </summary>
            <param name="queueName">The name of the queue.</param>
            <param name="message">The message to add.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessSearchQueueDeadLetter">
            <summary>
            Processes the dead-letter queue for search requests.
            </summary>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessDataSourceQueueDeadLetter">
            <summary>
            Processes the dead-letter queue for data sources.
            </summary>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessUserQueueDeadLetter">
            <summary>
            Processes the dead-letter queue for user activities.
            </summary>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessSiteQueueDeadLetter">
            <summary>
            Processes the dead-letter queue for site activities.
            </summary>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessChatQueueDeadLetter">
            <summary>
            Processes the dead-letter queue for chat activities.
            </summary>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessSessionsQueueDeadLetter">
            <summary>
            Processes the dead-letter queue for session activities.
            </summary>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessDeadLetterQueue(System.String,System.Func{System.String,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Processes messages from a ConcurrentQueue-based dead-letter queue.
            </summary>
            <param name="queueName">Name of the dead-letter queue.</param>
            <param name="processMessage">Delegate to process each message.</param>
            <returns>An <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiApiResponse"/> indicating the status of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessSearchQueueMessage(System.String)">
            <summary>
            Processes a message from the search queue.
            </summary>
            <param name="message">The message to process.</param>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessDataSourceQueueMessage(System.String)">
            <summary>
            Processes a message from the data source queue.
            </summary>
            <param name="message">The message to process.</param>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessUserQueueMessage(System.String)">
            <summary>
            Processes a message from the user queue.
            </summary>
            <param name="message">The message to process.</param>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessSiteQueueMessage(System.String)">
            <summary>
            Processes a message from the site queue.
            </summary>
            <param name="message">The message to process.</param>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessChatQueueMessage(System.String)">
            <summary>
            Processes a message from the chat queue.
            </summary>
            <param name="message">The message to process.</param>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessSessionsQueueMessage(System.Object)">
            <summary>
            Processes a message from the sessions queue.
            </summary>
            <param name="message">The message to process.</param>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.DeadLetterQueueProcessor.ProcessMessage``1(System.String,System.Func{BoldBi.Ai.Core.Contracts.DbServiceDeployment.IUsageLogHelper,System.Func{System.String,System.Threading.Tasks.Task{System.Boolean}}})">
            <summary>
            Deserializes and processes a message.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message to process.</param>
            <param name="logAction">The logging action to perform.</param>
            <returns>A task representing the result of processing.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.ErrorMessageProvider">
            <summary>
            Provides error messages based on error codes retrieved from configuration.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ErrorMessageProvider.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.ErrorMessageProvider"/> class.
            </summary>
            <param name="configuration">The application configuration containing error messages.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ErrorMessageProvider.GetErrorMessage(System.String,System.Object[])">
            <summary>
            Retrieves an error message for the specified error code.
            </summary>
            <param name="errorCode">The error code for which the message is to be retrieved.</param>
            <param name="args">Optional arguments to format the error message.</param>
            <returns>The formatted error message if found; otherwise, a default unknown error message.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.FieldBuilder">
            <summary>
            A class responsible for building AI assistance responses by processing input JSON data,
            generating visual and filter fields, merging fields, and preparing datasource field information.
            </summary>
            <remarks>
            This class implements the <see cref="T:BoldBi.Ai.Base.Contracts.IFieldBuilder"/> interface and provides functionality
            to transform input field data into a structured response suitable for AI assistance.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.Build(System.String,System.String)">
            <summary>
            form the data for designer widget structure.
            </summary>
            <param name="inputJson">recives openai generated result.</param>
            <param name="tableInfo">receives table.</param>
            <returns>returns data for designer widget structure.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.DeserializeInputField(System.String)">
            <summary>
            deserialize json string into object.
            </summary>
            <param name="inputJson">deserialized object.</param>
            <returns>json object.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.GenerateVisualFields(BoldBi.Ai.Core.Models.VisualCreation.Columns,BoldBi.Ai.Core.Enums.WidgetTypes)">
            <summary>
            generate visual fields.
            </summary>
            <param name="encodingFields">receives axis.</param>
            <param name="widgetType">receives widget type.</param>
            <returns>visual fields.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.GetXAxisContainerName(BoldBi.Ai.Core.Enums.WidgetTypes)">
            <summary>
            get the x-axis property container name.
            </summary>
            <param name="widgetType">receives the widget type.</param>
            <returns>x-axis property container name.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.GetYAxisContainerName(BoldBi.Ai.Core.Enums.WidgetTypes)">
            <summary>
            get the y-axis property container name.
            </summary>
            <param name="widgetType">receives the widget type.</param>
            <returns>x-axis property container name.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.GetRowContainerName(BoldBi.Ai.Core.Enums.WidgetTypes)">
            <summary>
            get row container name.
            </summary>
            <param name="widgetType">receives the widget type.</param>
            <returns>row property container name.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.CreateBiFieldFromAxis(System.Collections.Generic.List{BoldBi.Ai.Core.Contracts.IAxisProperty},System.String)">
            <summary>
            create field from the provided axis and contaier name.
            </summary>
            <param name="axis">receives the type of axis.</param>
            <param name="containerName">receives the name of the container.</param>
            <returns>formed fields.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.CreateBiField(BoldBi.Ai.Core.Contracts.IAxisProperty,System.String)">
            <summary>
            Creates a BI (Business Intelligence) field based on the provided axis property and container name.
            </summary>
            <param name="property">
            The axis property used to construct the field. It provides metadata such as the field name, alias,
            table name, and additional axis-specific properties like expressions and time units.
            </param>
            <param name="containerName">
            The name of the container (e.g., report, dashboard, or data model) that the field belongs to.
            </param>
            <returns>
            A <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.Field"/> object that represents the BI field, including its name, display name,
            container name, table name, summary type (if applicable), date/time format, and expression-related metadata.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.MergeFields(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIOutputPreparation.Field}[])">
            <summary>
            Merges multiple lists of fields into a single list, combining all elements while ignoring null lists.
            </summary>
            <param name="fieldLists">
            An array of lists containing <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.Field"/> objects to be merged. Null lists will be ignored during the merge process.
            </param>
            <returns>
            A single <see cref="T:System.Collections.Generic.List`1"/> containing all the fields from the provided lists.
            If no lists are provided or all are null, the result will be an empty list.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.GenerateFilterFields(System.Collections.Generic.List{BoldBi.Ai.Core.Models.VisualCreation.Transform})">
            <summary>
            Asynchronously generates BI (Business Intelligence) filter fields by processing a list of transformations.
            </summary>
            <param name="transform">
            A list of <see cref="T:BoldBi.Ai.Core.Models.VisualCreation.Transform"/> objects representing the transformations to be processed for generating BI fields.
            Each transformation contributes to the resulting list of fields.
            </param>
            <returns>
            A task that represents the asynchronous operation. The task result contains a <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.BiField"/> object
            with the generated fields populated based on the provided transformations.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.GenerateTransformFields(BoldBi.Ai.Core.Models.VisualCreation.Transform)">
            <summary>
            Asynchronously generates BI (Business Intelligence) transform fields based on the specified transformation filter.
            </summary>
            <param name="filter">
            A <see cref="T:BoldBi.Ai.Core.Models.VisualCreation.Transform"/> object representing the transformation filter.
            This includes filter and window-related data used to generate BI fields.
            </param>
            <returns>
            A task that represents the asynchronous operation. The task result contains a <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.BiField"/> object
            with the generated fields based on the provided transformation.
            </returns>
            <remarks>
            This method utilizes helper methods to process filters and rank fields:
            <list type="bullet">
            <item><description><see cref="M:BoldBi.Ai.Base.Helpers.FieldBuilder.AddTransformFilterFields(System.Collections.Generic.List{BoldBi.Ai.Core.Models.VisualCreation.Filters})"/> processes filter-based transformations.</description></item>
            <item><description><see cref="M:BoldBi.Ai.Base.Helpers.FieldBuilder.AddTransformRankFields(System.Collections.Generic.List{BoldBi.Ai.Core.Models.VisualCreation.Rank})"/> processes rank-based transformations (window operations).</description></item>
            </list>
            The fields from both operations are merged using <see cref="M:BoldBi.Ai.Base.Helpers.FieldBuilder.MergeFields(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIOutputPreparation.Field}[])"/>.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.AddTransformFilterFields(System.Collections.Generic.List{BoldBi.Ai.Core.Models.VisualCreation.Filters})">
            <summary>
            Asynchronously generates a list of BI (Business Intelligence) fields based on the provided list of filters.
            </summary>
            <param name="filters">
            A list of <see cref="T:BoldBi.Ai.Core.Models.VisualCreation.Filters"/> objects representing the filters to be transformed into BI fields.
            Each filter contributes metadata such as column name, aggregate type, time unit, and additional filter information.
            </param>
            <returns>
            A task that represents the asynchronous operation. The task result contains a list of <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.Field"/> objects
            populated based on the provided filters. If the input is null, the task returns <c>null</c>.
            </returns>
            <remarks>
            For each filter in the input:
            <list type="bullet">
            <item><description>A primary field is created based on the filter's column name and metadata.</description></item>
            <item><description>If the filter includes a relative date filter with a different date column, an additional field is created.</description></item>
            </list>
            These fields are marked as filter columns and include metadata for internal processing.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.AddTransformRankFields(System.Collections.Generic.List{BoldBi.Ai.Core.Models.VisualCreation.Rank})">
            <summary>
            Asynchronously generates a list of BI (Business Intelligence) fields based on the provided rank filters.
            </summary>
            <param name="filters">
            A list of <see cref="T:BoldBi.Ai.Core.Models.VisualCreation.Rank"/> objects representing the rank-based transformations used to generate BI fields.
            Each rank filter contributes group-by fields and associated metadata.
            </param>
            <returns>
            A task that represents the asynchronous operation. The task result contains a list of <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.Field"/> objects
            populated based on the rank filters. If the input is null, the task returns an empty list.
            </returns>
            <remarks>
            For each rank filter in the input:
            <list type="bullet">
            <item><description>A field is created for each encoding field in the filter's group-by list.</description></item>
            <item><description>The field metadata includes properties such as name, display name, date/time format, and rank filter info.</description></item>
            </list>
            These fields are marked as filter columns and invisible by default.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.FieldBuilder.UpdateUniqueColumnName(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIOutputPreparation.Field})">
            <summary>
            Updates the unique column names for a list of BI (Business Intelligence) fields by assigning a sequential identifier to each field.
            </summary>
            <param name="fields">
            A list of <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.Field"/> objects to be updated with unique column names.
            </param>
            <returns>
            The updated list of <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.Field"/> objects with unique column names assigned.
            </returns>
            <remarks>
            This method iterates through the list of fields and assigns a unique column name in the format "columnX",
            where X is a sequential number starting from 1.
            </remarks>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.JsonSchemaBuilder">
            <summary>
            Provides functionality to construct a JSON schema for AI response formatting.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.JsonSchemaBuilder.BuildJsonSchemaForClass(System.Type,System.String)">
            <summary>
            Creates a JSON schema representation for a given class type, tailored for AI response formats.
            </summary>
            <param name="type">The class type for which the schema is generated.</param>
            <param name="schemaName">The name to assign to the generated schema.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing the structured JSON schema,
            including the response format details.
            </returns>
            <remarks>
            This method utilizes the <see cref="T:BoldBi.Ai.Base.Helpers.SchemaGenerator"/> to generate the schema for the specified class type.
            It also includes customization options such as schema strictness and formatting.
            </remarks>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.SchemaGenerator">
            <summary>
            Provides functionality to generate JSON schemas for C# types.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SchemaGenerator.GenerateSchema(System.Type)">
            <summary>
            Generates a schema dictionary for the given type.
            </summary>
            <param name="type">The type to generate the schema for.</param>
            <returns>A dictionary representing the type's schema.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseActivation">
            <summary>
            Provides methods to activate AI licenses and retrieve UMS tokens for authentication.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseActivation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseActivation"/> class.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseActivation.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseActivation"/> class.
            </summary>
            <param name="httpClient">Http client.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseActivation.ActivateAILicense(System.String)">
            <summary>
            Activates an AI license for the specified tenant by retrieving an access token and
            using it to send a license activation request.
            </summary>
            <param name="inputJson">The input JSON containing the TenantId for which the AI license should be activated.</param>
            <returns>
            An <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiApiResponse"/> object containing the result of the license activation,
            including a status message and error information if applicable.
            </returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper">
            <summary>
            Helper class for managing AI licenses.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper"/> class.
            </summary>
            <param name="memoryCache"> Contains the rate limit information for the AI license.</param>
            <param name="dbContext"> Contains the database context for accessing AI license data. </param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper.AddAiLicense(System.Object)">
            <summary>
            Adds a new AI license to the database.
            </summary>
            <param name="license">The license details as an object.</param>
            <returns>JSON response indicating success or failure.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper.UpdateAiLicense(System.Object)">
            <summary>
            Updates an existing AI license in the database.
            </summary>
            <param name="license">The license details as an object.</param>
            <returns>JSON response indicating success or failure.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper.DeactivateAiLicense(System.String)">
            <summary>
            Deactivates AI licenses for a given tenant.
            </summary>
            <param name="tenantId">The tenant ID as a string.</param>
            <returns>JSON response indicating success or failure.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper.DeleteAiLicense(System.String)">
            <summary>
            Deletes AI licenses for a given tenant.
            </summary>
            <param name="tenantId">The tenant ID as a string.</param>
            <returns>JSON response indicating success or failure.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.ManageLicense.LicenseManageHelper.GetLicenseDetails(System.String)">
            <summary>
            Retrieves the details of an AI license by its key.
            </summary>
            <param name="aiKey">The AI key as a string.</param>
            <returns>JSON response with license details or error message.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OuputValidation.AiResponseValidatorHelper">
            <summary>
            A helper class for validating AI responses against predefined rules.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.AiResponseValidatorHelper.GetEvaluatedAiString(System.String)">
            <summary>
            Evaluates the given AI response string against predefined validation rules.
            </summary>
            <param name="aiResponse">The AI response in JSON format to be evaluated.</param>
            <returns>A <see cref="T:BoldBi.Ai.Core.Models.PropertyValidator.ValidatedAiResponse"/> object containing validation results.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.AiResponseValidatorHelper.PrepareFeedBackPrompt(System.Collections.Generic.List{System.String})">
            <summary>
            Prepares feedback prompt containing details about the failed validations.
            </summary>
            <param name="failedValidations">A list of failed validation error messages.</param>
            <returns>A formatted string containing the AI response and a summary of failed validations.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator">
            <summary>
            Provides methods for validating visual properties.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.GetValidationRules">
            <summary>
            Gets the validation rules to validate a visual property.
            </summary>
            <returns>A list of validation functions for visual properties.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.ValidateEncodingProperty(BoldBi.Ai.Core.Models.VisualCreation.VisualProperty)">
            <summary>
            Validates the encoding properties of the visual property.
            </summary>
            <param name="response">The visual property to validate.</param>
            <returns>An error message if validation fails, or null if validation passes.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.ValidateAxisField(System.Collections.Generic.List{BoldBi.Ai.Core.Models.VisualCreation.Axis},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Validates the axis field of a visual property.
            </summary>
            <param name="axis">The axis to validate.</param>
            <param name="errorMessages">The collection to store error messages.</param>
            <param name="containerName">The name of the container (e.g., X-axis, Y-axis).</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.ValidateYAxisField(System.Collections.Generic.List{BoldBi.Ai.Core.Models.VisualCreation.YAxis},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Validates the Y-axis field of a visual property.
            </summary>
            <param name="axis">The Y-axis to validate.</param>
            <param name="errorMessages">The collection to store error messages.</param>
            <param name="containerName">The name of the container (e.g., Y-axis).</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.ValidateWidgetType(BoldBi.Ai.Core.Models.VisualCreation.VisualProperty)">
            <summary>
            Validates the widget type of the visual property.
            </summary>
            <param name="response">The visual property to validate.</param>
            <returns>An error message if validation fails, or null if validation passes.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.ValidateWindowGroupBy(BoldBi.Ai.Core.Models.VisualCreation.VisualProperty)">
            <summary>
            Validates the window group by operations in the visual property.
            </summary>
            <param name="response">The visual property to validate.</param>
            <returns>An error message if validation fails, or null if validation passes.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.ValidateFilterValues(BoldBi.Ai.Core.Models.VisualCreation.VisualProperty)">
            <summary>
            Validates the filter values in the given visual property response.
            </summary>
            <param name="response">The visual property response containing the transform and filters to validate.</param>
            <returns>
            A string containing error messages if any validation fails; otherwise, null.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.IsValidCondition(BoldBi.Ai.Core.Enums.MeasureFilterCondition)">
            <summary>
            Validates if the given condition requires date validation.
            </summary>
            <param name="condition">The condition to validate.</param>
            <returns>True if the condition requires date validation; otherwise, false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OuputValidation.VisualPropertyValidator.IsValidTimeUnitForBetweenCondition(BoldBi.Ai.Core.Enums.DateTimeFormatForFilter)">
            <summary>
            Validates the TimeUnit for 'Between' condition.
            </summary>
            <param name="timeUnit">The TimeUnit to validate.</param>
            <returns>True if the TimeUnit is valid for the 'Between' condition; otherwise, false.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.AiResponseConverter">
            <summary>
            Provides methods to convert AI responses into field information for chart visualization.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.AiResponseConverter.ConvertAiResponseToFieldInfo(System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Converts the AI response into field information required for chart visualization.
            </summary>
            <param name="aiResponse">The AI response string in JSON format.</param>
            <param name="aiAssistanceRequest">The request object containing details for AI assistance.</param>
            <returns>An <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse"/> object containing the converted field information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.AiResponseConverter.ValidateResponseData(System.Collections.Generic.Dictionary{System.String,System.Object},BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Validates the AI response data to ensure that the chart type is valid.
            </summary>
            <param name="data">The parsed AI response data.</param>
            <param name="aiAssistanceRequest">The request object containing details for AI assistance.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.AiResponseConverter.IsSupportedWidgetType(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            Checks if the widget type specified in the AI response is supported.
            </summary>
            <param name="fields">The list of fields extracted from the AI response.</param>
            <param name="chartType">The chart type specified in the AI response.</param>
            <returns><c>true</c> if the widget type is supported; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.AiResponseConverter.PrepareAndReturnAiResponse(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prepares and returns the AI assistance response with the necessary field and chart type information.
            </summary>
            <param name="fields">The list of validated fields from the AI response.</param>
            <param name="aiAssistanceRequest">The request object containing details for AI assistance.</param>
            <param name="aiResponse">The original AI response string.</param>
            <param name="chartType">The chart type specified in the AI response.</param>
            <param name="data">The parsed AI response data.</param>
            <returns>An <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse"/> object containing the field and chart information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.AiResponseConverter.ThrowAiException(System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Throws an AI exception with a custom message and logs the error.
            </summary>
            <param name="message">The error message to be logged and included in the exception.</param>
            <param name="aiAssistanceRequest">The request object containing details for AI assistance.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer">
            <summary>
            Provides methods to prepare field information for AI assistance and widget creation.
            </summary>
        </member>
        <member name="P:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer.FieldInfoContainer">
            <summary>
            Gets or sets the name of the field information container.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer.CreateInstance">
            <summary>
            Creates a singleton instance of <see cref="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer"/>.
            </summary>
            <returns>The singleton instance of <see cref="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer.PrepareFieldInfoTemplate(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse,BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent)">
            <summary>
            Prepares the field information template for AI assistance by logging the activity and resolving widget type.
            </summary>
            <param name="aiAssistanceRequest">The AI assistance request containing input parameters.</param>
            <param name="aiAssistanceResponse">The AI assistance response containing result data.</param>
            <param name="aiResponse">The AI response with textual content and model ID.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.IChatResponse"/> containing the prepared widget information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer.CreateResponse(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse,BoldBi.Ai.Core.Models.AIResponseBuilder.TextContent,System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIOutputPreparation.ColumnsAndFieldInfoModel})">
            <summary>
            Creates a response object containing the widget type and field information based on the AI assistance request and response.
            </summary>
            <param name="aiAssistanceRequest">The AI assistance request containing input parameters.</param>
            <param name="aiAssistanceResponse">The AI assistance response containing result data.</param>
            <param name="aiResponse">The AI response with textual content and model ID.</param>
            <param name="fieldInfoModels">The prepared field information models.</param>
            <returns>An instance of <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.IChatResponse"/> with detailed widget data.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer.MapControlType(System.String,System.String)">
            <summary>
            Maps the control type to a corresponding name based on specific rules and chart type.
            </summary>
            <param name="controlType">The control type to be mapped.</param>
            <param name="chartType">The type of chart to influence control mapping.</param>
            <returns>A string representing the mapped control type.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer.PrepareFieldInfoModel(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Prepares the field information model by parsing the field information JSON array and categorizing fields based on control type.
            </summary>
            <param name="fieldInfoArray">The JSON array containing field information.</param>
            <param name="chartType">The type of chart for which field information is being prepared.</param>
            <returns>A list of <see cref="T:BoldBi.Ai.Core.Models.AIOutputPreparation.ColumnsAndFieldInfoModel"/> representing organized field information models.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldInfoPreparer.ProcessFieldInfoTemplate(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Processes the field information template by mapping JSON tokens to object properties using reflection.
            </summary>
            <param name="item">The JSON token representing a single field item.</param>
            <param name="type">The type of object to which the JSON token will be mapped.</param>
            <returns>An instance of the specified type with properties populated based on the JSON token.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper">
            <summary>
            Helper class for operations related to field type processing and data source mapping.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetFieldType(System.String)">
            <summary>
            Gets the closest matching field type from a predefined list based on the input field type.
            </summary>
            <param name="fieldType">The field type to match.</param>
            <returns>Returns the matched field type from the predefined list.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetGenericDateType(BoldBi.Ai.Core.Enums.SpecificRelativeDateFilterTypes)">
            <summary>
            Gets the closest matching field type from a predefined list based on the input field type.
            </summary>
            <param name="fieldType">The field type to match.</param>
            <returns>Returns the matched field type from the predefined list.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetSummaryType(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Determines the summary type for a column based on the field type data.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="fieldTypeData">Dictionary of column name to field type mappings.</param>
            <param name="summaryType">The summary type to validate or override.</param>
            <returns>Returns the appropriate summary type based on the column type.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetColStyle(System.String)">
            <summary>
            Gets the CSS class style based on the field's data type.
            </summary>
            <param name="value">The data type of the field.</param>
            <returns>Returns a CSS class style string representing the field's data type.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.IsDateRelatedFormat(System.String)">
            <summary>
            Checks if a given name corresponds to a date-related format.
            </summary>
            <param name="name">The name to check.</param>
            <returns>Returns true if the name is a date-related format; otherwise, false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetDateTimeFormat(System.String)">
            <summary>
            Gets the default DateTime format based on the provided data type.
            </summary>
            <param name="type">The data type to check.</param>
            <returns>Returns "Default" for recognized date types, otherwise "None".</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetClosestMatch(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Finds the closest match for a target string within a list of strings.
            </summary>
            <param name="targetString">The target string to match.</param>
            <param name="stringList">The list of strings to search.</param>
            <returns>Returns the closest matching string from the list.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.IsAggregationFunction(System.String)">
            <summary>
            Checks if a given summary type is an aggregation function.
            </summary>
            <param name="summaryType">The summary type to check.</param>
            <returns>Returns true if the summary type is an aggregation function; otherwise, false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.UpdateFilterStatusFlags(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates filter status flags in the provided filter information dictionary.
            </summary>
            <param name="dimensionFilterInfo">Dictionary containing filter information.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.ValidateSummaryType(System.String,System.String)">
            <summary>
            Validates the summary type for a field based on its type.
            </summary>
            <param name="fieldType">The field type to validate.</param>
            <param name="summaryType">The summary type to check or modify.</param>
            <returns>Returns "COUNT" for non-measure fields, otherwise the provided summary type.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetFieldsByDatasourceId(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails},System.String)">
            <summary>
            Retrieves field information by matching data source ID from a list of table information.
            </summary>
            <param name="dataList">List of table information details.</param>
            <param name="datasourceId">The data source ID to match.</param>
            <returns>Returns a list of field information inputs that match the data source ID.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.GetDataSourceNameByDatasourceId(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails},System.String)">
            <summary>
            Retrieves datasource name information by matching data source ID from a list of table information.
            </summary>
            <param name="dataList">List of table information details.</param>
            <param name="datasourceId">The data source ID to match.</param>
            <returns>Returns a datasource name inputs that match the data source ID.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.UpdateFilterProperties(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Asynchronously updates filter properties for a field dictionary.
            </summary>
            <param name="aiField">The dictionary containing field properties.</param>
            <param name="columnsData">Dictionary of column name to column ID mappings.</param>
            <param name="keysList">List of keys for data mapping.</param>
            <param name="fieldTypeData">Dictionary of column name to field type mappings.</param>
            <returns>Returns the updated field dictionary with filter properties applied.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldTypeHelper.MapTableNamesToDataSourceIds(System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails})">
            <summary>
            Maps table names to their respective data source IDs.
            </summary>
            <param name="tableInfo">List of table information details.</param>
            <returns>Returns a dictionary of table names to data source IDs.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator">
            <summary>
            Provides methods for validating and processing field data for AI assistance and chart preparation.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator.ValidateFields(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            Validates the given list of fields based on chart type, applying necessary transformations for AI assistance.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <param name="chartType">The type of chart for which fields are being validated.</param>
            <returns>The validated and updated list of fields.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown when the field list is empty.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator.ValidateColumnName(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Checks if the given field contains a valid column name.
            </summary>
            <param name="field">The field to validate.</param>
            <returns><c>true</c> if the field does not contain a column name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator.ValidateSummaryType(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Validates and assigns a summary type to a field based on field type, chart type, container name, and column name.
            </summary>
            <param name="summaryType">The summary type to validate.</param>
            <param name="fieldType">The type of field being validated.</param>
            <param name="chartType">The type of chart for which the field is being validated.</param>
            <param name="containerName">The name of the container for the field.</param>
            <param name="columnName">The name of the column associated with the field.</param>
            <returns>A valid summary type for the given field.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown when an invalid summary type is provided.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator.ValidateMeasureFormatting(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Validates and updates the measure formatting of fields, ensuring a valid format type is set.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <returns>The updated list of fields with validated measure formatting.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator.ValidateChartCustomSorting(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Validates and removes custom sorting for Y-axis values in chart fields.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <returns>The updated list of fields with validated custom sorting.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator.ValidateNumberCard(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Validates the fields for number card or card chart types, ensuring appropriate container name assignments.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <returns>The updated list of fields with validated container names for number card or card types.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FieldValidator.ValidateUniqueColumnName(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Validates and assigns unique column names to fields if they are missing.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <returns>The updated list of fields with unique column names.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor">
            <summary>
            Processes filter and custom sorting information for AI fields.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.UpdateFilterInfo(System.String,System.String,System.String)">
            <summary>
            Updates the filter information based on the provided JSON, field type, and unique column name.
            </summary>
            <param name="filterJson">The JSON string representing the filter information.</param>
            <param name="fieldType">The type of the field (Measures, Dimensions, DateTime).</param>
            <param name="uniqueColumnName">The unique name of the column for which filter information is prepared.</param>
            <returns>A JSON-serialized string containing updated filter information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.PrepareFilterInfo(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Prepares filter information for a specified AI field based on column data and field types.
            </summary>
            <param name="aiField">The AI field with filter information.</param>
            <param name="columnsData">The column data containing column IDs.</param>
            <param name="keysList">The list of column keys.</param>
            <param name="fieldTypeData">The field type data for various columns.</param>
            <returns>A dictionary containing processed filter information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.FormatDate(System.String)">
            <summary>
            Formats the specified date string into a standardized format.
            </summary>
            <param name="dateString">receives date as string.</param>
            <returns>expected formated date.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.PrepareCustomSorting(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Prepares custom sorting information for a specified AI field.
            </summary>
            <param name="aiField">The AI field with custom sorting information.</param>
            <param name="columnsData">The column data containing column IDs.</param>
            <param name="keysList">The list of column keys.</param>
            <param name="fieldTypeData">The field type data for various columns.</param>
            <returns>A dictionary containing custom sorting information, or null if not applicable.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.UpdateRankFilterInfo(System.String)">
            <summary>
            Prepares custom sorting information for a specified AI field.
            </summary>
            <param name="rankJson">The AI field with custom sorting information.</param>
            <returns>A dictionary containing custom sorting information, or null if not applicable.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.UpdateCustomSorting(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the custom sorting details based on the provided parameters.
            </summary>
            <param name="chartType">The type of chart for which the fields are being prepared.</param>
            <param name="aiField">A dictionary containing AI field data.</param>
            <param name="columnsData">A dictionary mapping column names to their respective IDs.</param>
            <param name="keysList">A list of keys available for matching.</param>
            <param name="fieldTypeData">A dictionary mapping column names to their data types or summary types.</param>
            <returns>
            A JSON string representing the custom sorting configuration if sorting is applied;
            otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.GetSortingType(BoldBi.Ai.Core.Enums.Order,System.String)">
            <summary>
            Determines the sorting type based on the provided sorting type and chart type.
            </summary>
            <param name="sortingType">The current sorting type (Ascending or Descending).</param>
            <param name="chartType">The type of chart to check if sorting changes are required.</param>
            <returns>
            Returns the updated sorting type based on whether sorting changes are required for the specified chart type.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.IsSortingChangesRequiredForWidget(System.String)">
            <summary>
            Checks whether sorting changes are required for a specific chart type.
            </summary>
            <param name="chartType">The chart type to check.</param>
            <returns>
            Returns true if sorting changes are required for the specified chart type; otherwise, false.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.GetCustomSortType(BoldBi.Ai.Core.Enums.SortingType)">
            <summary>
            Retrieves the custom sorting type string based on the provided sorting type enumeration value.
            </summary>
            <param name="type">The sorting type enumeration value.</param>
            <returns>
            Returns the string representation of the sorting type, such as "Alphabetic", "Field", or "DataSource".
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.PrepareMeasureFilterInfo(BoldBi.Ai.Core.Models.VisualCreation.Filters,System.String)">
            <summary>
            Prepares a dictionary containing measure filter metadata.
            </summary>
            <param name="filter">The filter criteria, including column name, conditions, and values.</param>
            <param name="uniqueColumnName">The unique column name for the filter.</param>
            <returns>
            A dictionary with key <c>"MeasureFilterInfo"</c> and value as another dictionary containing:
            <c>ColumnName</c>, <c>Conditions</c>, <c>Values</c>, and <c>UniqueColumnName</c>.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.PrepareDimensionFilterInfo(BoldBi.Ai.Core.Models.VisualCreation.Filters)">
            <summary>
            Prepares a dictionary containing dimension filter metadata.
            </summary>
            <param name="filter">The filter criteria, including inclusion/exclusion and filter values.</param>
            <returns>
            A dictionary with key <c>"DimensionFilterInfo"</c> containing:
            <c>IsAllowFilteringApplied</c>, <c>AllowFilterInfo</c>, and <c>DateFilterInfo</c>.
            </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.PrepareDateTimeFilterInfo(BoldBi.Ai.Core.Models.VisualCreation.Filters)">
            <summary>
            Prepares a dictionary containing date-time filter metadata based on the filter type.
            </summary>
            <param name="filter">The filter criteria, including relative and non-relative date filter details.</param>
            <returns>
            A dictionary with date-time filter metadata, either relative or non-relative, based on the filter configuration.
            </returns>
            <remarks>
            Calls <c>PrepareRelativeDateTimeFilterInfo</c> if the filter has a relative date type; otherwise,
            it calls <c>PrepareNonRelativeDateTimeFilterInfo</c>.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.PrepareRelativeDateTimeFilterInfo(BoldBi.Ai.Core.Models.VisualCreation.Filters)">
            <summary>
            Prepares a dictionary containing metadata for relative date-time filters.
            </summary>
            <param name="filter">The filter criteria, including relative date range and generic or specific filter details.</param>
            <returns>
            A dictionary with key <c>"RelativeDateFilterInfo"</c> containing metadata such as <c>RelativeDateFormat</c>,
            <c>DateInstance</c>, and <c>Range</c>.
            </returns>
            <remarks>
            Determines whether the filter uses a generic or specific relative date type and populates the metadata accordingly.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.PrepareNonRelativeDateTimeFilterInfo(BoldBi.Ai.Core.Models.VisualCreation.Filters)">
            <summary>
            Prepares a dictionary containing metadata for non-relative date-time filters.
            </summary>
            <param name="filter">The filter criteria, including time unit, conditions, and values.</param>
            <returns>
            A dictionary with key <c>"DimensionFilterInfo"</c> containing metadata such as filtering rules and date filter details.
            </returns>
            <remarks>
            If the filter uses date or datetime with non-equal conditions, it populates specific date conditions.
            Otherwise, it sets default filtering metadata.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.AddNonRelativeDateConditions(BoldBi.Ai.Core.Models.VisualCreation.Filters,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds date condition metadata to the provided dictionary based on the filter's condition and values.
            </summary>
            <param name="filter">The filter containing the condition and associated date values.</param>
            <param name="dateFilterInfo">
            A dictionary where date condition metadata, such as <c>DateFormatCondition</c>, <c>StartDate</c>, and <c>EndDate</c>, will be added.
            </param>
            <remarks>
            Processes the filter's condition (e.g., <c>Between</c>, <c>GreaterThan</c>, <c>LessThan</c>) and formats the date values accordingly.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.ExtractFilterInfo(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Extracts filter information from an AI field.
            </summary>
            <param name="aiField">The AI field containing filter information.</param>
            <returns>A dictionary containing extracted filter information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.RemoveFilterInfo(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Removes specific filter information from the provided filter dictionary.
            </summary>
            <param name="filterInfo">The filter information dictionary.</param>
            <param name="key">The key of the filter info to remove.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.ProcessDimensionFilterInfo(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Processes dimension filter information, updating based on data characteristics.
            </summary>
            <param name="filterInfo">The filter information dictionary.</param>
            <param name="keysList">The list of column keys.</param>
            <param name="columnsData">The column data containing column IDs.</param>
            <param name="fieldTypeData">The field type data for various columns.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.ProcessTopNFilterInfo(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Processes the top N filter information, updating columns and summary types as needed.
            </summary>
            <param name="dimensionFilterInfo">The dimension filter information dictionary.</param>
            <param name="keysList">The list of column keys.</param>
            <param name="columnsData">The column data containing column IDs.</param>
            <param name="fieldTypeData">The field type data for various columns.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.ProcessConditionFilterInfo(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Processes the condition filter information, updating columns as needed.
            </summary>
            <param name="dimensionFilterInfo">The dimension filter information dictionary.</param>
            <param name="keysList">The list of column keys.</param>
            <param name="columnsData">The column data containing column IDs.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.FilterInfoProcessor.ProcessMeasureFilterInfo(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Processes measure filter information, updating columns as needed.
            </summary>
            <param name="filterInfo">The filter information dictionary.</param>
            <param name="keysList">The list of column keys.</param>
            <param name="columnsData">The column data containing column IDs.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.JsonFunctions">
            <summary>
            Utility class for handling JSON validation and formatting, with support for AI-assisted formatting.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.JsonFunctions.FormatToValidJson(System.String)">
            <summary>
            Formats an unformatted JSON string by quoting keys and values to make it valid JSON.
            </summary>
            <param name="unFormattedJson">The unformatted JSON string.</param>
            <returns>A valid JSON formatted string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.JsonFunctions.ParseJson(System.String)">
            <summary>
            Parses the AI response JSON and returns it as a dictionary.
            </summary>
            <param name="aiResponse">Response from AI. </param>>
            <returns>Dictionary of string and object. </returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.JsonFunctions.ExtractJsonFromAiResponse(Microsoft.SemanticKernel.TextContent)">
            <summary>
            Extracts JSON content from the AI response text.
            </summary>
            <param name="response">The AI response containing the JSON text.</param>
            <returns>The extracted JSON string if found; otherwise, an empty string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.JsonFunctions.IsValidAiResponse(System.String)">
            <summary>
            Checks if the given AI response is in a valid JSON format by matching against a JSON pattern.
            </summary>
            <param name="aiResponse">The AI response string to validate.</param>
            <returns><c>true</c> if the AI response matches the JSON pattern; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.JsonFunctions.IsValidJsonFormat(System.String)">
            <summary>
            Checks if a given string is in valid JSON format.
            </summary>
            <param name="jsonString">The JSON string to validate.</param>
            <returns>True if the string is valid JSON; otherwise, false.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator">
            <summary>
            Provides methods to detect the appropriate chart type based on input data and user queries.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.DetectChartType(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Detects the chart type based on the question, data characteristics, and an optional default chart type.
            </summary>
            <param name="question">The question from the user that may suggest a chart type.</param>
            <param name="dimensionCount">The count of dimensions in the data.</param>
            <param name="measureCount">The count of measures in the data.</param>
            <param name="isSorting">Indicates whether sorting is applied to the data.</param>
            <param name="isAggregateField">Indicates whether the field is aggregated.</param>
            <param name="defaultChartType">The default chart type, if specified.</param>
            <returns>Returns the detected chart type as a <see cref="T:BoldBi.Ai.Core.Enums.WidgetTypes"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.ResolveWidgetType(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse,System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIOutputPreparation.ColumnsAndFieldInfoModel})">
            <summary>
            Resolves the widget type based on the AI assistance request, response, and field information models.
            </summary>
            <param name="request">The AI assistance request containing the user query.</param>
            <param name="response">The AI assistance response containing the chart type.</param>
            <param name="fieldInfoModels">A list of field information models.</param>
            <returns>Returns the resolved widget type as a <see cref="T:BoldBi.Ai.Core.Enums.WidgetTypes"/>.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.IsSupportedWidgetType(BoldBi.Ai.Core.Enums.WidgetTypes)">
            <summary>
            Checks if the specified widget type is supported.
            </summary>
            <param name="widgetTypes">The widget type to check.</param>
            <returns>True if the widget type is supported; otherwise, false.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.WidgetTypeValidation(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            Validates the widget type based on the provided field data and chart type.
            </summary>
            <param name="fieldData">The list of field data to validate.</param>
            <param name="chartType">The type of the chart to validate against.</param>
            <returns>A tuple containing the validated field data and the corresponding widget type.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.ValidateWidgetInfo(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            Validates widget information based on the provided fields and chart type.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <param name="chartType">The type of chart to validate against.</param>
            <returns>A task that represents the asynchronous operation, with a boolean result indicating validation success.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.GetKeywordsForWidgetType(BoldBi.Ai.Core.Enums.WidgetTypes)">
            <summary>
            Retrieves a list of keywords associated with a specified widget type.
            </summary>
            <param name="widgetType">The widget type for which to retrieve keywords.</param>
            <returns>Returns a list of keywords for the specified widget type, or null if none are defined.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.DetectFromQuestion(System.String)">
            <summary>
            Detects the chart type based on keywords found in the user question.
            </summary>
            <param name="question">The question from the user.</param>
            <returns>Returns a matching <see cref="T:BoldBi.Ai.Core.Enums.WidgetTypes"/> if keywords are found; otherwise, null.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.DetectFromData(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Detects the chart type based on data characteristics such as the number of measures, dimensions, and aggregation.
            </summary>
            <param name="measureCount">The count of measures in the data.</param>
            <param name="dimensionCount">The count of dimensions in the data.</param>
            <param name="isAggregateField">Indicates whether the field is aggregated.</param>
            <param name="isSorting">Indicates whether sorting is applied to the data.</param>
            <returns>Returns the appropriate chart type as a <see cref="T:BoldBi.Ai.Core.Enums.WidgetTypes"/> based on the data characteristics.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.DetectFromDefaultChartType(System.String)">
            <summary>
            Detects the chart type based on a specified default chart type, throwing an exception if unsupported.
            </summary>
            <param name="defaultChartType">The default chart type as a string.</param>
            <returns>Returns the detected chart type as a <see cref="T:BoldBi.Ai.Core.Enums.WidgetTypes"/> based on the default chart type.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown when the default chart type is unsupported.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.ValidateGrid(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Int32,System.Int32)">
            <summary>
            Validates grid widgets based on the specified fields and counts.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <param name="filterColumnCount">The count of filter columns.</param>
            <param name="totalFieldCount">The total count of fields.</param>
            <returns>A boolean indicating whether the grid is valid.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.ValidateComplexWidget(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Int32,System.Int32)">
            <summary>
            Validates complex widgets based on the specified fields and counts.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <param name="filterColumnCount">The count of filter columns.</param>
            <param name="totalFieldCount">The total count of fields.</param>
            <returns>A boolean indicating whether the complex widget is valid.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.ValidateNumberCard(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Int32,System.Int32)">
            <summary>
            Validates number card widgets based on the specified fields and counts.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <param name="filterColumnCount">The count of filter columns.</param>
            <param name="totalFieldCount">The total count of fields.</param>
            <returns>A boolean indicating whether the number card widget is valid.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetInfoValidator.ValidateScatter(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Int32,System.Int32)">
            <summary>
            Validates scatter widgets based on the specified fields and counts.
            </summary>
            <param name="fields">The list of fields to validate.</param>
            <param name="filterColumnCount">The count of filter columns.</param>
            <param name="totalFieldCount">The total count of fields.</param>
            <returns>A boolean indicating whether the scatter widget is valid.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper">
            <summary>
            Helper class for preparing widget data for AI assistance response.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.SetDatasourceFieldsInfo(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails},System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Asynchronously sets information about data source fields based on the provided inputs.
            </summary>
            <param name="fields">List of fields information from the data source.</param>
            <param name="tableInfo">Table details for data source mapping.</param>
            <param name="chartType">Type of chart to prepare data for.</param>
            <param name="request">The AI assistance request object.</param>
            <returns>Returns an AI assistance response with serialized field information.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.SetDatasourceFieldsInfoFromStructureOutput(System.String,System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails},System.String)">
            <summary>
            Configures and prepares datasource field information from the structure output for AI assistance.
            </summary>
            <param name="fieldJson">
            A JSON string representing the fields and their properties.
            </param>
            <param name="tableInfo">
            A list of <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails"/> objects containing table metadata.
            </param>
            <param name="chartType">
            A string representing the type of chart (e.g., bar, pie, line).
            </param>
            <returns>
            An instance of <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse"/> containing the configured field information,
            the associated datasource ID, the chart type, and the table information.
            </returns>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">
            Thrown if the <paramref name="fieldJson"/> cannot be deserialized into the expected format.
            </exception>
            <remarks>
            This method processes the provided field structure, maps table names to datasource IDs,
            prepares field information based on chart type, and returns the necessary information for AI assistance.
            </remarks>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.GetDataSourceIdAndFieldMappings(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails},System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Retrieves the data source ID and data source name based on the provided field mappings, table data, and table information.
            Also populates dictionaries for column mappings, field types, and actual field data types.
            </summary>
            <param name="fields">A list of dictionaries representing field information, where each dictionary contains field metadata.</param>
            <param name="tableData">A dictionary mapping table names to their respective data source IDs.</param>
            <param name="tableKeyList">A list of table names used for matching the closest table name.</param>
            <param name="tableInfo">A list of <see cref="T:BoldBi.Ai.Core.Models.AIInputBuilder.TableInfoDetails"/> containing details about tables and their fields.</param>
            <param name="columnsData">An output parameter that is populated with a dictionary mapping column names to field IDs.</param>
            <param name="fieldTypeData">An output parameter that is populated with a dictionary mapping column names to their field types.</param>
            <param name="fieldActualType">An output parameter that is populated with a dictionary mapping column names to their actual data types.</param>
            <returns>Returns the data source ID.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.PrepareFields(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Asynchronously prepares the fields for serialization by validating and updating field properties.
            </summary>
            <param name="fields">List of fields to be prepared.</param>
            <param name="columnsData">Dictionary of column name to column ID mappings.</param>
            <param name="fieldTypeData">Dictionary of column name to field type mappings.</param>
            <param name="fieldActualType">Dictionary of column name to actual type mappings.</param>
            <param name="chartType">The type of chart for which the fields are being prepared.</param>
            <returns>Returns a list of dictionaries containing updated field properties.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.PrepareFieldsForStructureOutput(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Asynchronously prepares the fields for serialization by validating and updating field properties.
            </summary>
            <param name="fields">List of fields to be prepared.</param>
            <param name="columnsData">Dictionary of column name to column ID mappings.</param>
            <param name="fieldTypeData">Dictionary of column name to field type mappings.</param>
            <param name="fieldActualType">Dictionary of column name to actual type mappings.</param>
            <param name="chartType">The type of chart for which the fields are being prepared.</param>
            <returns>Returns a list of dictionaries containing updated field properties.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.ValidateFieldName(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Validates the column name in the provided field dictionary.
            </summary>
            <param name="aiField">Dictionary containing field properties to validate.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.PopulateFieldData(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Populates field data with properties based on the provided mappings and chart type.
            </summary>
            <param name="aiField">Dictionary containing field properties to be populated.</param>
            <param name="columnsData">Dictionary of column name to column ID mappings.</param>
            <param name="fieldTypeData">Dictionary of column name to field type mappings.</param>
            <param name="fieldActualType">Dictionary of column name to actual type mappings.</param>
            <param name="chartType">The type of chart for which the fields are being prepared.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.PopulateFieldDataForStructureOutput(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Populates field data with properties based on the provided mappings and chart type.
            </summary>
            <param name="aiField">Dictionary containing field properties to be populated.</param>
            <param name="columnsData">Dictionary of column name to column ID mappings.</param>
            <param name="fieldTypeData">Dictionary of column name to field type mappings.</param>
            <param name="fieldActualType">Dictionary of column name to actual type mappings.</param>
            <param name="chartType">The type of chart for which the fields are being prepared.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.GetFieldDateTimeFormat(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Gets the DateTime format for the provided field based on the actual type.
            </summary>
            <param name="aiField">Dictionary containing field properties.</param>
            <param name="actualType">The actual data type of the field.</param>
            <returns>Returns a string representing the DateTime format.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.OutputPreparation.Classes.WidgetPreparationHelper.SerializeJsonFields(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Serializes the prepared fields to a JSON string.
            </summary>
            <param name="jsonFields">List of dictionaries containing field properties.</param>
            <returns>Returns a JSON string representing the serialized fields.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.SandboxUsersHelper">
            <summary>
            Helper class for managing AI sandbox users.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SandboxUsersHelper.#ctor(BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.SandboxUsersHelper"/> class.
            </summary>
            <param name="dbContext"> Contains the database context for accessing AI license data. </param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SandboxUsersHelper.AddSandboxUser(System.String)">
            <summary>
            Adds or updates a sandbox user based on the provided JSON input.
            If the user exists, updates their access status and request balance. Otherwise, adds a new user.
            </summary>
            <param name="inputJson">The JSON input containing the user email.</param>
            <returns>An <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiApiResponse"/> object indicating the success or failure of the operation.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.SessionManager">
            <summary>
            Manages the creation and termination of AI sessions, along with logging related activities.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SessionManager.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,BoldBi.Ai.Base.Helpers.DatabaseContext.AppDbContext,BoldBi.Ai.Base.Helpers.DatabaseContext.UsageLogDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BoldBi.Ai.Base.Helpers.SessionManager"/> class.
            </summary>
            <param name="memoryCache">Stores memory cache.</param>
            <param name="dbContext">The db context for meta data.</param>
            <param name="usageLogDbContext">The db context for usage data.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SessionManager.CreateSession(System.String)">
            <summary>
            Creates a new AI session based on the provided JSON input and logs relevant details.
            </summary>
            <param name="jsonInput">The JSON string containing session and user details.</param>
            <returns>A JSON string representing the created assistant and session details.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SessionManager.EndSession(System.String)">
            <summary>
            Ends an AI session based on the provided JSON input, logs the termination, and updates the session end time in the database.
            </summary>
            <param name="jsonInput">The JSON string containing session termination details.</param>
            <returns>An object indicating the result of the session termination.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SessionManager.LogSessionUsage(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,BoldBi.Ai.Core.Models.AIInputBuilder.LoggingAssistance,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Logs the session usage details, including token counts and associated costs.
            </summary>
            <param name="sessionId">The session ID.</param>
            <param name="inputTokens">The number of input tokens used during the session.</param>
            <param name="outputTokens">The number of output tokens generated during the session.</param>
            <param name="totalTokens">The total number of tokens used in the session.</param>
            <param name="inputTokenCost">The cost associated with input tokens.</param>
            <param name="outputTokenCost">The cost associated with output tokens.</param>
            <param name="totalTokensCost">The total cost of tokens used in the session.</param>
            <param name="loggingAssistance">An object containing logging information.</param>
            <param name="startTime">The optional start time of the session.</param>
            <param name="endTime">The optional end time of the session.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SessionManager.LogSearchUsage(BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest,System.DateTimeOffset,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Logs the search usage data including token counts and associated costs.
            </summary>
            <param name="aiAssistanceRequest">The AI assistance request containing session and logging data.</param>
            <param name="searchTime">The time at which the search was performed.</param>
            <param name="inputTokens">The number of input tokens used during the search.</param>
            <param name="outputTokens">The number of output tokens generated during the search.</param>
            <param name="totalTokens">The total number of tokens used in the search.</param>
            <param name="inputTokenCost">The cost associated with input tokens.</param>
            <param name="outputTokenCost">The cost associated with output tokens.</param>
            <param name="totalTokensCost">The total cost of tokens used in the search.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SessionManager.LogUserDetails(BoldBi.Ai.Core.Models.AIInputBuilder.LoggingAssistance)">
            <summary>
            Logs the details of the user involved in the session.
            </summary>
            <param name="loggingAssistance">The object containing user details.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.SessionManager.LogSiteDetails(BoldBi.Ai.Core.Models.AIInputBuilder.LoggingAssistance)">
            <summary>
            Logs the details of the site involved in the session.
            </summary>
            <param name="loggingAssistance">The object containing site details.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Helpers.TokenHandlingHelper">
            <summary>
            Provides helper methods for generating and decrypting tokens.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.TokenHandlingHelper.GenerateToken(System.Object)">
            <summary>
            Generates a token by encrypting the AI service key and the current UTC timestamp.
            </summary>
            <param name="inputJson">A JSON string containing the AI service key.</param>
            <returns>A Base64-encoded encrypted token string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input JSON does not contain a valid AI service key.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.TokenHandlingHelper.DecryptToken(System.String)">
            <summary>
            Decrypts a token to retrieve the tenant id key.
            </summary>
            <param name="cipherText">The Base64-encoded encrypted token string.</param>
            <returns>The decrypted AI service key.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if decryption fails.</exception>
            <exception cref="T:System.FormatException">Thrown if the cipherText is not a valid Base64 string.</exception>
        </member>
        <member name="M:BoldBi.Ai.Base.Helpers.TokenHandlingHelper.DecodeToken(System.String)">
            <summary>
            Decodes a Base64-encoded string.
            </summary>
            <param name="content">The Base64-encoded string to decode.</param>
            <returns>The decoded string in UTF-8 format.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Implementations.ResponseBuilder">
            <summary>
            Provides functionality to build and process responses for AI operations.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Implementations.ResponseBuilder.IsValidJson(System.String)">
            <summary>
            Checks if the provided string is a valid JSON format.
            </summary>
            <param name="json">The JSON string to validate.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the JSON is valid.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Implementations.ResponseBuilder.FormatToValidJson(System.String)">
            <summary>
            Formats the provided text into valid JSON format.
            </summary>
            <param name="text">The text to format into JSON.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the formatted JSON string.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Implementations.ResponseBuilder.GetAiService(BoldBi.Ai.Core.Enums.AiOperation)">
            <summary>
            Retrieves the AI service process for the specified AI operation type.
            </summary>
            <param name="type">The type of AI operation to process.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an instance of <see cref="T:BoldBi.Ai.Base.Contracts.IBoldAiProcess"/> for the specified operation.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Implementations.ResponseBuilder.ConvertAiResponseToFieldInfo(System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Converts the AI response JSON to field information based on the provided AI assistance request.
            </summary>
            <param name="json">The JSON response from the AI service.</param>
            <param name="aiAssistanceRequest">The request containing details of the AI assistance operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an <see cref="T:BoldBi.Ai.Core.Models.AIResponseBuilder.AiAssistanceResponse"/> with the converted field information.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">
            Thrown when the provided JSON is not a valid AI response or an error occurs during processing.
            </exception>
        </member>
        <member name="T:BoldBi.Ai.Base.Implementations.UsageProcessor">
            <summary>
            Processes and updates AI usage information for a given request.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Implementations.UsageProcessor.ProcessUsage(BoldBi.Ai.Core.Models.AIResponseBuilder.AIUsage,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Processes and updates the usage information for a specified AI operation.
            </summary>
            <param name="tokensSpent">The usage details from the AI service completion response.</param>
            <param name="licenseKey">The encrypted license key for the AI service.</param>
            <param name="modelId">The identifier of the AI model used.</param>
            <param name="request">The AI assistance request containing operation details.</param>
        </member>
        <member name="M:BoldBi.Ai.Base.Implementations.UsageProcessor.ProcessUsage(System.Int32,System.Int32,System.Int32,System.String,System.String,BoldBi.Ai.Core.Models.AIInputBuilder.AiAssistanceRequest)">
            <summary>
            Processes the token usage and updates the relevant information using the provided details.
            </summary>
            <param name="inputToken">The number of input tokens used.</param>
            <param name="outputToken">The number of output tokens generated.</param>
            <param name="totalToken">The total number of tokens used (input + output).</param>
            <param name="licenseKey">The encrypted license key for the tenant.</param>
            <param name="modelId">The ID of the AI model used for processing.</param>
            <param name="request">The AI assistance request object containing additional metadata.</param>
        </member>
        <member name="T:BoldBi.Ai.Base.Utilities.AIDatabaseInfo">
            <summary>
            Provides methods to retrieve connection strings for various databases used in AI operations.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Utilities.AIDatabaseInfo.GetMetaDbConnectionStr">
            <summary>
            Gets the connection string for the Meta database.
            </summary>
            <returns>A string representing the connection string for the Meta database.</returns>
        </member>
        <member name="M:BoldBi.Ai.Base.Utilities.AIDatabaseInfo.GetAuditLogDbConnectionStr">
            <summary>
            Gets the connection string for the Audit Log database.
            </summary>
            <returns>A string representing the connection string for the Audit Log database.</returns>
        </member>
        <member name="T:BoldBi.Ai.Base.Utilities.HtmlFormatter">
            <summary>
            Class to format a AI response into Html.
            </summary>
        </member>
        <member name="M:BoldBi.Ai.Base.Utilities.HtmlFormatter.FormatSummaryAsHtml(System.String)">
            <summary>
            Method to change Ai response into html format.
            </summary>
            <param name="summaryContent">AI response for widget summary.</param>
            <returns> A html formatted response for widget summary.</returns>
            <exception cref="T:BoldBi.Ai.Core.ExceptionHandler.AiException">Thrown if there is an error in general AI processing.</exception>
        </member>
    </members>
</doc>
