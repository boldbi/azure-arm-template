@using Syncfusion.Server.Base;
@using Syncfusion.Server.Base.DataClasses;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Http.Extensions;
@using TimeZoneConverter;
@using Newtonsoft.Json;

@inject IJsonHelper Json;

@model NotificationSettings
@{
    var userDetail = (User)ViewBag.UserDetail;
    var groupList = ViewBag.GroupList;
    ViewBag.Title = $"{T["Profile"].Value} | {GlobalAppSettings.SystemSettings.OrganizationName}";
    var userId = Context.User.GetUserId();

    var requestUrl = new Uri(Context.Request.GetDisplayUrl());
    var isWindowsAdUser = (DirectoryType)userDetail.DirectoryTypeId == DirectoryType.WindowsAD;
    var tenantHomePage = "/" + @CloudAppConfig.TenantManagementUrl(Context).Trim('/') + "/homepage";
    var imageUrl = GlobalAppSettings.SystemSettings.BaseUrl;
    var returnUrl = (string)ViewBag.ReturnUrl;
    var isSelfHosted = CloudAppConfig.IsSelfHosted;
    var isEditLanguage = (bool)ViewBag.EditLanguage;
    var tenantSitesUrl = "/" + @CloudAppConfig.TenantManagementUrl(Context).Trim('/') + "/sites";
    var isEmailActivation = GlobalAppSettings.SystemSettings.ActivationType == ActivationType.EmailActivation;
    var dateFormat = string.IsNullOrWhiteSpace(_clientDateTimeInfo.ClientDateTime.DateFormat) ? GlobalAppSettings.SystemSettings.DateFormat : _clientDateTimeInfo.ClientDateTime.DateFormat;
    AdminType adminType = (AdminType)Enum.Parse(typeof(AdminType), Context.Session.GetString("AdminType"));
    var userEmail = !userDetail.Email.Contains(CloudAppConfig.AutoGeneratedEmailDomain) ? userDetail.Email : string.Empty;
}

@section styles{
<link rel="stylesheet" href="~/bundles/css/profile.css" integrity="@IntegrityTagHelper.GetIntegrity("bundles/css/profile.css")" crossorigin="anonymous" asp-append-version="true" />
}


@section scripts{
    <script nonce="@Context.Items["ScriptNonce"]" src="~/bundles/js/profile.js" integrity="@IntegrityTagHelper.GetIntegrity("bundles/js/profile.js")" crossorigin="anonymous" asp-append-version="true"></script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript">
        var identityProviderResourceUrl = "@GlobalAppSettings.SystemSettings.CDNLink";
        var autoGeneratedEmail = "@CloudAppConfig.AutoGeneratedEmailDomain";
        var updateprofilepictureUrl = "@Url.Action("updateprofilepicture", "User")";
        var fileUploadUrl = "@Url.Action("Upload", "fileupload")";
        var avatarUrl = "@Url.Action("Avatar", "User")";
        var updateUserProfileUrl = "@Url.Action("UpdateUserProfile", "User")";
        var updatepasswordUrl = "@Url.Action("updatepassword", "User")";
        var rootUrl = "@Url.Content("~/")";
        var rootBaseUrl = "@Url.Content("~/").TrimEnd('/')";
        var isEmailActivation = "@isEmailActivation";
        if (rootBaseUrl.toLowerCase() == "/")
            rootBaseUrl = "";
        var deleteavatarUrl = "@Url.Action("deleteavatar", "User")";
        var getdefaultavatarUrl = "@Url.Action("getdefaultavatar", "User")";
        var prepareDataUrl = "@Url.Action("PrepareUserData", "User")";
        var downloadDataUrl = "@Url.Action("DownloadUserData", "User")";
        var updateUserProfile = "@Url.Action("UpdateUserProfile", "User")";
        var userId = "@userDetail.UserId";
        var requestUrl = "@requestUrl";
        var isEditUserPreferenceLanguage = @Json.Serialize(ViewBag.EditLanguage);
        var isEditUserProfile = @Json.Serialize(ViewBag.EditProfile);
        var editNotificationValue = "@ViewBag.EditNotification";
        var updateUserPreferenceUrl = "@Url.Action("UpdateUserLanguagePreference", "User")";
       
        $(document).ready(function () {
            generateProfileAvatar();
            if (@isEditLanguage.ToString().ToLower()) {
                $("#edit-language").trigger("click");
            }
            $("#avatar-button-click, #avatar-delete-click").css("display", "none");
            $("#cancel-button, #save-button").css("display", "none");
             var fulldata = @Json.Serialize(ViewBag.ProfileDetail);
            window.dateFormat = "@dateFormat";
            editUser(fulldata, "@dateFormat");
            if (@ViewBag.EditProfile > 0) {
                $("#edit").trigger("click");
            }
            if (@ViewBag.EditNotification > 0) {
                $("#edit-settings").trigger("click");
            }
            $('[data-toggle="tooltip"]').tooltip();
            $(document).on("click", ".popup-close", function (e) {
                //$(".edit-profile-field").attr("value",updateUserProfileUrl);
                $('#upload-image').attr("disabled", "disabled");
                if ($(".img-container").children().hasClass("jcrop-active")) {
                    $('#profile-picture').data("Jcrop").destroy();
                }

            });
        });
    </script>
}

@section MainSection{
    @await Html.PartialAsync("_UserProfileMenu")
    @await Html.PartialAsync("_UserTokenForm")

    <div id="site-settings-header" class="col-xs-12 header-section no-padding no-margin width-alignment">
        <div class="col-md-12 import-area admin-page-header">
            <div class="admin-page-header-description col-xs-6 no-padding" id="application-title">
                <hgroup class="col-xs-12 header-group">
                    <h1 class="page-title">
                        @T["MY PROFILE"]
                    </h1>
                </hgroup>
            </div>
            <div class="col-xs-4 top-nav-sec no-padding">
                @await Html.PartialAsync("../Shared/_TopMenu")
            </div>
        </div>
        <div class="col-md-12 import-area bi-page-header admin-page-icon">
            <div class="col-xs-12 no-padding">
                <div class="col-xs-6 no-padding admin-header-btn pull-right" id="user-management-options">
                    <a href="@tenantHomePage" class="link-button pull-right" title="">@T["My Sites"]</a>
                    @if (!string.IsNullOrEmpty(returnUrl))
                    {
                        <a href="@returnUrl" class="secondary-button pull-right" id="cancel-link-button">@T["Cancel"]</a>
                        <input id="hidden-return-url" class="hidden" value="@returnUrl" />
                    }
                    else
                    {
                        <button type="button" class="secondary-button pull-right" id="cancel-button">@T["Cancel"]</button>
                    }
                    <button type="button" class="primary-button pull-right" id="save-button">@T["Save"]</button>
                </div>
            </div>
        </div>
    </div>

    <div id="edit-profile-base-div" class="col-lg-12 col-sm-12 col-md-12 col-xs-12 admin-page-content-container">
        <div class="admin-page-content col-xs-12 no-padding">
            <input type="hidden" class="page-name" data-content="USER PROFILE">
            <input type="hidden" id="user-id" value="@userId" />
            <span id="is-aduser">@ViewBag.IsAdUser</span>
            <span id="logged-user">@ViewBag.LoggedUser</span>
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 admin-page-body">
                <div class="col-xs-12 no-padding profile-img-name">
                    <div class="img-view-holder col-xs-4 no-padding" style="border: 0px; width: auto">
                        <div class="profile-pic-tag" data-id="@userId" data-type="user" data-display-name="@userDetail.DisplayName" data-image-size="120" data-toggle="tooltip" title="@userDetail.DisplayName" data-placement="top" data-url="@imageUrl"></div>
                        <span class="su su-edit-inverse profile-picture-edit-button" id="avatar-button-click" title="@T["Edit profile picture"]"></span>
                        <span class="su su-delete profile-picture-edit-button" id="avatar-delete-click" title="@T["Delete profile picture"]"></span>
                    </div>
                    <div class="col-xs-8 no-padding edit-section">
                        <label class="display-name">@userDetail.DisplayName</label>
                        @if (userDetail.DirectoryTypeId == DirectoryType.Local)
                        {
                            <label id="edit-button">
                                <a hreflang="en" href="" id="edit">@T["Edit Profile"]</a>
                            </label>
                        }
                    </div>
                </div>
                @Html.Hidden("user-name", userDetail.UserId)
                @Html.Hidden("user-email", userDetail.Email)
                @Html.Hidden("userId", userDetail.UserId)
                <div id="profile-details" class="col-xs-12 no-padding">
                    <form class="edit-profile-form" autocomplete="off">
                        @Html.AntiForgeryToken()
                        <div class="form-element-label">
                            <label class="app-textbox-label">@T["Username"]<span> *</span></label>
                            <div class="input-field-div">
                                @Html.TextBox("user-username", userDetail.Username, new { id = "user-username", placeholder = T["Please enter username"].Value, @class = "edit-profile-field no-edit", @readonly = true })
                                <span id="username-duplicate-validation" class="alert-messages validation-message"></span>
                            </div>

                        </div>
                        <div class="form-element-label">
                            <label class="app-textbox-label">@T["First name"]<span> *</span> </label>
                            <div class="input-field-div">
                                @Html.TextBox("user-firstname", userDetail.FirstName, new { id = "user-firstname", placeholder = T["Please enter first name"].Value, @class = "edit-profile-field no-edit", @readonly = true })
                                <span id="first-name-validation" class="alert-messages validation-message"></span>
                            </div>
                        </div>
                        <div class="form-element-label">
                            <label class="label-panel text-right app-textbox-label">
                                @T["Last name"]
                            </label>
                            <div class="input-field-div">
                                @Html.TextBox("user-lastname", !string.IsNullOrWhiteSpace(userDetail.LastName) ? userDetail.LastName.Trim() : "--", new { id = "user-lastname", placeholder = T["Please enter last name"].Value, @class = "edit-profile-field no-edit", @readonly = true })
                                <span id="last-name-validation" class="alert-messages validation-message"></span>
                            </div>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(userEmail))
                        {
                            <div class="form-element-label">
                                <label class="app-textbox-label">
                                    @T["Email"]
                                    @if (isEmailActivation)
                                    {
                                        <span> *</span>
                                    }
                                </label>
                                <div class="input-field-div">
                                    <input type="text" id="user-email" value="@userEmail" readonly placeholder="@T["Please enter email address"]" required="@isEmailActivation" data-toggle="tooltip" data-original-title="@userEmail"/>
                                    <span id="email-duplicate-validation" class="alert-messages validation-message"></span>
                                </div>
                            </div>
                        }
                        <div class="form-element-label">
                            <label class="app-textbox-label">
                                @T["Phone"]
                            </label>
                            <div class="input-field-div">
                                @Html.TextBox("user-phonenumber", !string.IsNullOrWhiteSpace(userDetail.Contact) ? userDetail.Contact.Trim() : "--", new { id = "user-phonenumber", placeholder = T["Please enter phone number"].Value, @class = "edit-profile-field no-edit", @readonly = true })
                                <span id="contact-validation" class="alert-messages validation-message"></span>
                            </div>
                        </div>
                        <div class="form-element-label">
                            <label class="app-textbox-label">
                                @T["Last Seen"]
                            </label>
                            <div class="input-field-div">
                                @Html.TextBox("user-lastseen", new GlobalAppSettings().GetDateTimeFormat(TimeZoneInfo.ConvertTimeFromUtc((DateTime)userDetail.LastLogin, TZConvert.GetTimeZoneInfo(new GlobalAppSettings().GetSessionTimeZone(_clientDateTimeInfo))), _clientDateTimeInfo), new { id = "user-lastseen", @class = "", @readonly = true })
                            </div>
                        </div>
                    </form>
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3 no-padding" id="message">
                    <h5 id="success-message"></h5>
                </div>
                @if (userDetail.DirectoryTypeId != DirectoryType.Local && !CloudAppConfig.IsSelfHosted)
                {
                    <div id="azure-user-info" class="col-xs-12 no-padding">@T["* Editing user profile except the picture is not currently supported for Azure Active Directory, Office 365, database and Syncfusion.com accounts."]</div>
                }
                else if (userDetail.DirectoryTypeId != DirectoryType.Local && CloudAppConfig.IsSelfHosted)
                {
                    <div id="azure-user-info" class="col-xs-12 no-padding">@T["* Editing user profile details other than the picture is currently not supported for external directory accounts (Azure Active Directory, Office 365, database, etc.)."]</div>
                }
            </div>
        </div>
        @await Html.PartialAsync("../Shared/_FooterOnPremise")
    </div>
    <input type="hidden" id="image" value="" />
    <span id="baseurl" data-url="@Url.Content("~/")"></span>
    @await Html.PartialAsync("_ProfilePictureUploadBox")
}