@{
    var isAdmin = Context.Session.GetString("IsAdmin") != null ? Convert.ToBoolean(Context.Session.GetString("IsAdmin").ToString()) : false;

    var idPUrl = GlobalAppSettings.SystemSettings.InternalAppUrls.Idp;

    var userId = Context.User.GetUserId();

    var requestUrl = new Uri(this.Context.Request.GetDisplayUrl());
    var currentUrlLocalPath = requestUrl.PathAndQuery.ToLower();

    var currentUrl = requestUrl.ToString().TrimEnd('/');

    var isImageRequest = currentUrl.IndexOf(".png", StringComparison.CurrentCultureIgnoreCase) > 0 || currentUrl.IndexOf(".jpg", StringComparison.CurrentCultureIgnoreCase) > 0 || currentUrl.IndexOf(".gif", StringComparison.CurrentCultureIgnoreCase) > 0 || currentUrl.IndexOf(".svg", StringComparison.CurrentCultureIgnoreCase) > 0;

    var profilePageUrl = Url.Action("Profilepage", "User");

    var displayName = Context.Session.GetString("displayname") != null ? Context.Session.GetString("displayname").ToString() : string.Empty;

    var emailAddress = Context.Session.GetString("emailaddress") != null ? Context.Session.GetString("emailaddress").ToString() : string.Empty;

    var username = Context.Session.GetString("username") != null ? Context.Session.GetString("username").ToString() : string.Empty;

    var idpreferenceId = Context.Session.GetString("idpReferenceId") != null ? Context.Session.GetString("idpReferenceId").ToString() : string.Empty;

    var adminType = (AdminType)Enum.Parse(typeof(AdminType), Context.Session.GetString("AdminType"));

    var profilePicture = idPUrl + Url.Content("/User/Avatar?id=" + userId + "&ImageSize=64");

    var isHomePage = currentUrlLocalPath.TrimEnd('/') == Url.Action("Homepage", "Home") || currentUrlLocalPath.TrimEnd('/') + "/homepage" == Url.Action("Homepage", "Home");

    var isMobile = DeviceDetection.IsMobile(Context);

    var defaultAppLogo = GlobalAppSettings.Branding == AppBranding.Bold.Identifier ? GlobalAppSettings.CdnDomain + "/static/company/boldid/logo/v1/" + CloudAppConfig.Branding.BrandingImages.MainLogo : GlobalAppSettings.SystemSettings.CDNLink + "/images/" + CloudAppConfig.AppBranding + "/application/" + CloudAppConfig.Branding.BrandingImages.MainLogo;
    var appLogo = (GlobalAppSettings.SystemSettings.MainScreenLogo.EndsWith(CloudAppConfig.Branding.BrandingImages.MainLogo) || GlobalAppSettings.SystemSettings.MainScreenLogo.EndsWith("main_logo.png")) ? defaultAppLogo : GlobalAppSettings.SystemSettings.MainScreenLogo;
    var profilePictureUrl = idPUrl + Url.Content("/User/Avatar?id=" + idpreferenceId).TrimEnd('/');
    var redirectUrl = idPUrl + "/ums/homepage";
    var imageUrl = idPUrl;
}
<aside class="menu-bar" id="app-navigation">
    <nav id="main-nav">
        <a id="mobile-profile-picture" rel="alternate" hreflang="en" href="@profilePicture" class="mobile-visible text-decoration-none">
            <div class="mobile-display-name">@displayName</div>
            <div class="profile-pic-tag" data-id="@userId" data-type="user" data-display-name="@displayName" data-image-size="175" data-bs-toggle="tooltip" title="@displayName" data-bs-placement="top" data-url="@imageUrl" style="margin-top:-35px"></div>
        </a>
        <ul id="items-menu">
            <li class="mobile-hidden">
                <a href="@redirectUrl" class="home-link text-decoration-none" style="background-color:transparent;" title=@GlobalAppSettings.SystemSettings.OrganizationName>
                    <img alt="@T["Application Logo"]" id="application-logo" src="@Url.Content("~/logos?type=header")" />
                </a>
            </li>
            <li class="sf-nav-separator logo-separator mobile-hidden"></li>

            @if (adminType == AdminType.SuperAdmin || adminType == AdminType.AppAdmin)
            {
                <li>
                    <a class="@(currentUrl.IndexOf(Url.Action("Sites", "TenantsManagement"), StringComparison.CurrentCultureIgnoreCase) > 0 ? "active" : string.Empty) text-decoration-none" href="@Url.Action("Sites", "TenantsManagement")">
                        <span class="menu-icon-container">
                            <i class="su su-applications"></i>
                        </span>
                        <span class="menu-label">@T["Sites"]</span>
                    </a>
                </li>
                <li>
                    <a class="@(currentUrl.IndexOf(Url.Action("Index", "UserManagement"), StringComparison.CurrentCultureIgnoreCase) > 0 ? "active" : string.Empty) text-decoration-none" href="@Url.Action("Index", "UserManagement")">
                        <span class="menu-icon-container">
                            <i class="su su-user"></i>
                        </span>
                        <span class="menu-label">@T["Users"]</span>
                    </a>
                </li>
                <li class="sf-nav-separator logo-separator mobile-hidden"></li>
                <li class="mobile-hidden">
                    <a class="@(currentUrl.IndexOf(Url.Action("Administration", "Administration"), StringComparison.CurrentCultureIgnoreCase) > 0 && currentUrl.IndexOf(Url.Action("Index", "UserManagement"), StringComparison.CurrentCultureIgnoreCase) < 0 ? "active" : string.Empty) text-decoration-none" href="@Url.Action("Administration", "Administration")">
                        <span class="menu-icon-container">
                            <i class="su su-nav-settings"></i>
                        </span>
                        <span class="menu-label">@T["Settings"]</span>
                    </a>
                </li>
            }

            <li class="li-logout mobile-visible">
                <img data-src="@(Model +"/images/divider_dark.png")" class="upper-divider" />
                <a class="text-decoration-none" href="@Url.Action("logout", "accounts")?returnUrl=@currentUrlLocalPath">
                    <span class="menu-icon-container">
                        <i class="su su-logout"></i>
                    </span>
                    <span class="menu-label">@T["Sign out"]</span>
                </a>
            </li>
        </ul>
    </nav>
</aside>