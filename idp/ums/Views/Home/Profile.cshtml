@{
    var isAdmin = Context.Session.GetString("IsAdmin") != null ? Convert.ToBoolean(Context.Session.GetString("IsAdmin").ToString()) : false;

    var idPUrl = GlobalAppSettings.SystemSettings.InternalAppUrls.Idp;

    var userId = Guid.Parse(Context.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

    var requestUrl = new Uri(this.Context.Request.GetDisplayUrl());
    var currentUrlLocalPath = requestUrl.PathAndQuery.ToLower();

    var currentUrl = requestUrl.ToString().TrimEnd('/');

    var profilePageUrl = Url.Action("Profilepage", "User");

    var displayName = Context.Session.GetString("displayname") != null ? Context.Session.GetString("displayname").ToString() : string.Empty;

    var emailAddress = Context.Session.GetString("emailaddress") != null ? Context.Session.GetString("emailaddress").ToString() : string.Empty;

    var username = Context.Session.GetString("username") != null ? Context.Session.GetString("username").ToString() : string.Empty;

    var idpreferenceId = Context.Session.GetString("idpReferenceId") != null ? Context.Session.GetString("idpReferenceId").ToString() : string.Empty;

    var adminType = (AdminType)Enum.Parse(typeof(AdminType), Context.Session.GetString("AdminType"));

    var profilePicture = idPUrl + Url.Content("/User/Avatar?id=" + userId + "&ImageSize=64");

    var isMobile = DeviceDetection.IsMobile(Context);

    var createSiteUrl = @Url.Action("Sites", "TenantsManagement") + "?action=create-new-site";

    var defaultAppLogo = GlobalAppSettings.Branding == AppBranding.Bold.Identifier ? GlobalAppSettings.CdnDomain + "/static/company/boldid/logo/v1/" + CloudAppConfig.Branding.BrandingImages.MainLogo : GlobalAppSettings.SystemSettings.CDNLink + "/images/" + CloudAppConfig.AppBranding + "/application/" + CloudAppConfig.Branding.BrandingImages.MainLogo;
    var appLogo = (GlobalAppSettings.SystemSettings.MainScreenLogo.EndsWith(CloudAppConfig.Branding.BrandingImages.MainLogo) || GlobalAppSettings.SystemSettings.MainScreenLogo.EndsWith("main_logo.png")) ? defaultAppLogo : GlobalAppSettings.SystemSettings.MainScreenLogo;
    var profilePictureUrl = idPUrl + Url.Content("/User/Avatar?id=" + idpreferenceId).TrimEnd('/');
    var imageUrl = idPUrl;
}

   
    <nav id="top-nav" class="sf-nav-group mobile-hidden">
        <ul class="icon-list">
            <li class="profile-section dropup">

                <a class="dropdown-toggle profile-tag text-decoration-none" data-bs-toggle="dropdown">
                    <span class="icon-container">
                    <span class="profile-pic-tag homepage-profile" data-id="@userId" data-type="user" data-display-name="@displayName" data-image-size="40" data-bs-toggle="tooltip" title="@displayName" data-bs-placement="bottom" data-url="@imageUrl" style="border-radius:50%"></span>
                    </span>
                </a>


              <a class="mobile-menu-icon text-center mobile-visible collapsed text-decoration-none" type="button" data-bs-toggle="collapse" data-target="#profileDropdown" aria-controls="profileDropdown" aria-expanded="false" style="display:none">
                <span>
                    <i class="su su-mobile-menu-icon"></i>
                </span>
              </a>
            
                 <ul class="dropdown-menu top-menu" id="profileDropdown" role="menu">
                    <li class="top-menu-item top-menu-profile">
                        <a class="text-decoration-none" rel="alternate" hreflang="en" href="@idPUrl/user/profile">
                            <div class="top-menu-profile-hover">
                            <div class="profile-pic-tag" data-id="@userId" data-type="user" data-display-name="@displayName" data-image-size="40" data-url="@imageUrl" style="border-radius:50%"></div>
                                <div class="top-menu-user-name">
                                    <div class="top-menu-user-name-style">@displayName</div>
                                    @if (emailAddress.Contains(CloudAppConfig.AutoGeneratedEmailDomain))
                                    {
                                        <div class="top-menu-user-name-style">@username</div>
                                    }
                                    else
                                    {
                                        <div class="top-menu-user-email-style">@emailAddress</div>
                                    }
                                </div>
                            </div>
                        </a>
                    </li>
                    <li class="sf-top-menu-separator"></li>
                    <li class="top-menu-item mobile-view">
                        <a href="@Url.Action("Sites", "TenantsManagement")" class="text-decoration-none">                      
                            <span class="su su-profile-settings profile-action">  <span class="manage-profile manage-text">@T["Manage sites"]</span> </span>                                       
                         </a>                          
                    </li>
                    <li class="sf-top-menu-separator mobile-hidden-view"></li>
                    <li class="top-menu-item ">
                        <a href="@Url.Action("logout", "accounts")?returnUrl=@currentUrlLocalPath" class="logout-sec text-decoration-none">                       
                            <span class="su su-profile-log-out profile-action">  <span class="manage-profile">@T["Sign out"]</span></span>                                                 
                        </a>
                    </li>
                </ul>
            </li>
        </ul>
    </nav>
    