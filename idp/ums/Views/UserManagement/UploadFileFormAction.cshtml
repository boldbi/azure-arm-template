@{
    ViewBag.Title = T["Users - CSV import"].Value + " - " + GlobalAppSettings.SystemSettings.OrganizationName;
}

@section styles{
    <link rel="stylesheet" href="~/bundles/css/user-management-module.css" integrity="@IntegrityTagHelper.GetIntegrity("bundles/css/user-management-module.css")" crossorigin="anonymous" asp-append-version="true" />
}
@section scripts{
    <script nonce="@Context.Items["ScriptNonce"]" src="~/bundles/js/user-management.js" integrity="@IntegrityTagHelper.GetIntegrity("bundles/js/user-management.js")" crossorigin="anonymous" asp-append-version="true"></script>
    
       <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript">
        document.getElementById("filename").addEventListener("focus", function () {
            this.blur();
        });
        var checkMailSettingUrl = "@Url.Action("checkmailsettingsexist", "Administration")";
        var postactionUrl = "@Url.Action("postaction", "UserManagement")";
        var isPresentEmailId = "@Url.Action("IsPresentEmailId", "UserManagement")";
        var isPresentusernameUrl= "@Url.Action("IsPresentusername", "UserManagement")";
        var avatarUrl = "@Url.Action("Avatar", "UserManagement")";
        var deleteFromUserListUrl = "@Url.Action("DeleteFromUserList", "UserManagement")";
        var userPageUrl = "@Url.Action("Index", "UserManagement")";
        var saveSelectedCSVUserUrl = "@Url.Action("SaveSelectedCSVUser", "UserManagement")";
        var deleteSingleFromUserListUrl = "@Url.Action("DeleteSingleFromUserList", "UserManagement")";
        var isAutomaticActivation = @Json.Serialize(GlobalAppSettings.SystemSettings.ActivationType == ActivationType.AutomaticActivation);
        var isEmailRequired = @Json.Serialize(GlobalAppSettings.SystemSettings.EmailRequired == EmailRequired.Required);
        var data1 = @Json.Serialize(ViewBag.user);
        var csvImportGridColumn = [
            { field: "Username", customAttributes: { class: 'user-name' }, headerText: "@T["Username"]", width: 50 },
            { field: "Fullname", headerText: "@T["Name"]", width: 50 }
        ];
        if (isEmailRequired) {
            csvImportGridColumn.push({ field: "Email", customAttributes: { class: 'email-id' }, headerText: "@T["Email Address"]", width: 50 });
        }
        if (isAutomaticActivation) {
            csvImportGridColumn.push({ field: "Password", customAttributes: { class: 'password' }, headerText: "@T["Password"]", width: 30 });
        }
        csvImportGridColumn.push({ field: "DisplayMessage", customAttributes: { class: 'user-validation' }, headerText: "@T["Error"]", width: 100, visible: false });
        $(document).ready(function() {
            $(function () {
                var data = data1.Value.Data;
                var userImportGrid = new ejs.grids.Grid({
                    dataSource: data,
                    gridLines: 'None',
                    allowPaging: false,
                    allowSorting: false,
                    allowSelection: false,
                    allowScrolling: false,
                    locale: "en-us",
                    enableAltRow: false,
                    enableHover: true,
                    dataBound: onComplete,
                    columns: csvImportGridColumn,
                });
                userImportGrid.appendTo("#user_import_grid");
            });

            $("a").click(function () {
                return checkUserImported(this);
            });
        });
        function onComplete(args) {
            $('[data-toggle="tooltip"]').tooltip(
                {
                    container: 'body'
                });
            if(this.currentViewData.length>0){
                $('#import-button').prop("disabled", false);
            }
            else {
                $("#import-button").prop("disabled", true);
            }
        }
    </script>
}

@section MainSection{

    <div class="col-xs-12 no-padding no-margin width-alignment admin-header-width">
        <div class="admin-page-header col-md-12 col-lg-12 col-sm-12">
            <div class="col-xs-6 no-padding">
                <a href="@Url.Action("index", "UserManagement")" data-toggle="tooltip" data-placement="bottom" title="@T["Users"]" class="back-button pull-left">
                    <i class="su su-arrow-back"> </i>
                </a>
                <div class="admin-page-header-description col-xs-6 no-padding" id="application-title">
                    <hgroup class="col-xs-12 header-group">
                        <h2 class="page-title">  @T["IMPORT USERS "]</h2>
                    </hgroup>
                </div>
            </div>

            <div class="col-xs-4 top-nav-sec no-padding">
                @await Html.PartialAsync("../Shared/_TopMenu")
            </div>
        </div>

        <div class="col-md-12 import-area bi-page-header admin-page-icon">
            <div class="col-xs-12 no-padding">
                <div class="col-xs-6 no-padding admin-header-btn pull-right" id="user-management-options">
                    <input type="button" value="@T["Import Users"]" title="@T["Import users from the list below"]"  id="import-button" class="primary-button pull-right" disabled />
                </div>
            </div>
        </div>

    </div>

    <div class="admin-page-content-container full-page-container">
        <div class="admin-page-content col-md-12 no-padding">
            <div class="admin-page-body col-xs-12">
                <form action="@Url.Action("UploadFileFormAction", "UserManagement")" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="col-md-12 import-file no-padding">
                        <div class="no-padding">
                            <div class="upload-box no-margin">
                                <input type="text" class="form-control col-md-6 no-margin" id="filename" value="@T["Browse file path (.csv)"]" readonly>
                                <span id="trigger-file" class="input-group-addon btn popup no-left-border">
                                    ...
                                </span>
                                <input type="file" accept=".csv" name="csvfile" id="csvfile" class="btn popup upload-btn">
                                @if (ViewBag.result.ToLower() == "error")
                                {
                                    <span id="user-import-validation-msg">@T["Please upload a valid csv file."]</span>
                                }
                                else if (ViewBag.ValidateMessage.ToLower() != "success")
                                {
                                    <span id="user-import-validation-msg">@ViewBag.ValidateMessage</span>
                                }
                                else if (ViewBag.InvalidUser != null)
                                {
                                    <span id="user-import-validation-msg">@Html.Raw(ViewBag.InvalidUser)</span>
                                }
                                else
                                {
                                    <span id=""></span>
                                }
                            </div>
                            <div class="file-upload-btn">
                                <input type="submit" class="primary-button" title="@T["Upload CSV File here"]" id="csv-upload" disabled="" value="@T["Upload"]"/>
                            </div>

                            <div class="separator"></div>
                            <p class="download-template-text no-padding">
                                <a href="@Url.Action("DownloadTemplate", "UserManagement")" class="download-template" title="@T["Download sample template"]">@T["Download Template"]</a>
                            </p>
                        </div>
                    </div>
                </form>
                <div class="col-xs-12 grid-area no-padding">
                    <div class="list" id="grid-validation-messages">
                        <span id="grid-nodata-validation">@T["There is no data in the uploaded file. Please check and try uploading again."]</span>
                        <span id="grid-validation"><span id="userCount">@ViewBag.UserCount</span> @T["User(s) has been added successfully."]</span>
                        <span id="grid-error-validation">@T["Duplicate or Invalid data is found. Please change the data accordingly and re-upload the file."] </span>
                    </div>
                    <div id="grid-container" class="col-md-12 no-padding">
                        <div class="col-md-12 container-fluid page-inner-padding no-padding ">
                            <div id="user_import_grid">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <input type="hidden" name="all-user-list" id="all-user-list" value="@ViewBag.Pathname" />
            <input type="hidden" id="existing-user-count" data-value="@ViewBag.UserExists" />
            <input type="hidden" id="csv-file-error" data-value="@((ViewBag.ValidateMessage=="Success" && ViewBag.result=="Success")?"Success":"Error")" />
        </div>
        @await Html.PartialAsync("../Shared/_FooterOnPremise")
    </div>
}
